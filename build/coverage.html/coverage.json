{"/home/travis/build/npmtest/node-npmtest-cassandra-driver/test.js":{"path":"/home/travis/build/npmtest/node-npmtest-cassandra-driver/test.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":1,"12":1,"13":1,"14":1,"15":2,"16":2,"17":2,"18":2,"19":1,"20":1,"21":2,"22":2,"23":2,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":2,"38":2,"39":1,"40":2,"41":2,"42":1,"43":2,"44":2,"45":1,"46":2,"47":2,"48":1,"49":1,"50":1,"51":1,"52":1},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[1,1],"5":[1,1],"6":[1,1],"7":[1,1],"8":[1,1],"9":[1,1,1],"10":[1,1],"11":[1,1],"12":[1,1],"13":[1,1],"14":[1,1],"15":[1,1],"16":[1,1]},"f":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":1,"7":1,"8":2,"9":2,"10":2,"11":2,"12":1},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":1},"end":{"line":12,"column":13}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":5},"end":{"line":19,"column":17}}},"3":{"name":"(anonymous_3)","line":23,"loc":{"start":{"line":23,"column":24},"end":{"line":23,"column":36}}},"4":{"name":"(anonymous_4)","line":61,"loc":{"start":{"line":61,"column":5},"end":{"line":61,"column":17}}},"5":{"name":"(anonymous_5)","line":82,"loc":{"start":{"line":82,"column":5},"end":{"line":82,"column":17}}},"6":{"name":"(anonymous_6)","line":102,"loc":{"start":{"line":102,"column":83},"end":{"line":105,"column":10}},"skip":true},"7":{"name":"(anonymous_7)","line":113,"loc":{"start":{"line":113,"column":77},"end":{"line":116,"column":10}},"skip":true},"8":{"name":"(anonymous_8)","line":129,"loc":{"start":{"line":129,"column":12},"end":{"line":129,"column":40}},"skip":true},"9":{"name":"(anonymous_9)","line":137,"loc":{"start":{"line":137,"column":77},"end":{"line":140,"column":10}},"skip":true},"10":{"name":"(anonymous_10)","line":148,"loc":{"start":{"line":148,"column":83},"end":{"line":151,"column":10}},"skip":true},"11":{"name":"(anonymous_11)","line":159,"loc":{"start":{"line":159,"column":79},"end":{"line":162,"column":10}},"skip":true},"12":{"name":"(anonymous_12)","line":170,"loc":{"start":{"line":170,"column":75},"end":{"line":173,"column":10}},"skip":true}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":185,"column":5}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":14}},"3":{"start":{"line":19,"column":4},"end":{"line":56,"column":9}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":19}},"5":{"start":{"line":23,"column":8},"end":{"line":35,"column":13}},"6":{"start":{"line":24,"column":12},"end":{"line":34,"column":13}},"7":{"start":{"line":25,"column":16},"end":{"line":28,"column":30}},"8":{"start":{"line":30,"column":16},"end":{"line":33,"column":27}},"9":{"start":{"line":37,"column":8},"end":{"line":39,"column":21}},"10":{"start":{"line":40,"column":8},"end":{"line":53,"column":9}},"11":{"start":{"line":43,"column":12},"end":{"line":46,"column":14}},"12":{"start":{"line":47,"column":12},"end":{"line":47,"column":18}},"13":{"start":{"line":50,"column":12},"end":{"line":51,"column":46}},"14":{"start":{"line":52,"column":12},"end":{"line":52,"column":18}},"15":{"start":{"line":55,"column":8},"end":{"line":55,"column":35}},"16":{"start":{"line":61,"column":4},"end":{"line":63,"column":9}},"17":{"start":{"line":62,"column":8},"end":{"line":62,"column":15}},"18":{"start":{"line":64,"column":4},"end":{"line":77,"column":5}},"19":{"start":{"line":70,"column":8},"end":{"line":70,"column":14}},"20":{"start":{"line":76,"column":8},"end":{"line":76,"column":14}},"21":{"start":{"line":82,"column":4},"end":{"line":84,"column":9}},"22":{"start":{"line":83,"column":8},"end":{"line":83,"column":15}},"23":{"start":{"line":85,"column":4},"end":{"line":184,"column":5}},"24":{"start":{"line":92,"column":8},"end":{"line":94,"column":63}},"25":{"start":{"line":95,"column":8},"end":{"line":95,"column":14}},"26":{"start":{"line":102,"column":8},"end":{"line":111,"column":10},"skip":true},"27":{"start":{"line":109,"column":12},"end":{"line":109,"column":55},"skip":true},"28":{"start":{"line":110,"column":12},"end":{"line":110,"column":48},"skip":true},"29":{"start":{"line":113,"column":8},"end":{"line":126,"column":10},"skip":true},"30":{"start":{"line":120,"column":12},"end":{"line":120,"column":76},"skip":true},"31":{"start":{"line":121,"column":12},"end":{"line":121,"column":73},"skip":true},"32":{"start":{"line":122,"column":12},"end":{"line":122,"column":74},"skip":true},"33":{"start":{"line":123,"column":12},"end":{"line":123,"column":79},"skip":true},"34":{"start":{"line":124,"column":12},"end":{"line":124,"column":25},"skip":true},"35":{"start":{"line":125,"column":12},"end":{"line":125,"column":45},"skip":true},"36":{"start":{"line":128,"column":8},"end":{"line":135,"column":14},"skip":true},"37":{"start":{"line":133,"column":16},"end":{"line":133,"column":29},"skip":true},"38":{"start":{"line":134,"column":16},"end":{"line":134,"column":55},"skip":true},"39":{"start":{"line":137,"column":8},"end":{"line":146,"column":10},"skip":true},"40":{"start":{"line":144,"column":12},"end":{"line":144,"column":25},"skip":true},"41":{"start":{"line":145,"column":12},"end":{"line":145,"column":45},"skip":true},"42":{"start":{"line":148,"column":8},"end":{"line":157,"column":10},"skip":true},"43":{"start":{"line":155,"column":12},"end":{"line":155,"column":25},"skip":true},"44":{"start":{"line":156,"column":12},"end":{"line":156,"column":48},"skip":true},"45":{"start":{"line":159,"column":8},"end":{"line":168,"column":10},"skip":true},"46":{"start":{"line":166,"column":12},"end":{"line":166,"column":25},"skip":true},"47":{"start":{"line":167,"column":12},"end":{"line":167,"column":46},"skip":true},"48":{"start":{"line":170,"column":8},"end":{"line":179,"column":10},"skip":true},"49":{"start":{"line":177,"column":12},"end":{"line":177,"column":94},"skip":true},"50":{"start":{"line":178,"column":12},"end":{"line":178,"column":48},"skip":true},"51":{"start":{"line":182,"column":8},"end":{"line":182,"column":35},"skip":true},"52":{"start":{"line":183,"column":8},"end":{"line":183,"column":14},"skip":true}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":62}},{"start":{"line":26,"column":20},"end":{"line":26,"column":70}},{"start":{"line":27,"column":20},"end":{"line":27,"column":71}},{"start":{"line":28,"column":20},"end":{"line":28,"column":29}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":23},"end":{"line":30,"column":37}},{"start":{"line":31,"column":20},"end":{"line":31,"column":61}},{"start":{"line":32,"column":20},"end":{"line":32,"column":70}},{"start":{"line":33,"column":20},"end":{"line":33,"column":26}}]},"3":{"line":37,"type":"cond-expr","locations":[{"start":{"line":38,"column":14},"end":{"line":38,"column":20}},{"start":{"line":39,"column":14},"end":{"line":39,"column":20}}]},"4":{"line":40,"type":"switch","locations":[{"start":{"line":42,"column":8},"end":{"line":47,"column":18}},{"start":{"line":49,"column":8},"end":{"line":52,"column":18}}]},"5":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":16},"end":{"line":44,"column":44}},{"start":{"line":44,"column":48},"end":{"line":44,"column":66}}]},"6":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":21},"end":{"line":50,"column":49}},{"start":{"line":50,"column":53},"end":{"line":50,"column":72}}]},"7":{"line":64,"type":"switch","locations":[{"start":{"line":69,"column":4},"end":{"line":70,"column":14}},{"start":{"line":75,"column":4},"end":{"line":76,"column":14}}]},"8":{"line":85,"type":"switch","locations":[{"start":{"line":90,"column":4},"end":{"line":95,"column":14}},{"start":{"line":101,"column":4},"end":{"line":183,"column":14},"skip":true}]},"9":{"line":92,"type":"binary-expr","locations":[{"start":{"line":92,"column":18},"end":{"line":92,"column":32}},{"start":{"line":93,"column":12},"end":{"line":93,"column":53}},{"start":{"line":94,"column":12},"end":{"line":94,"column":61}}]},"10":{"line":102,"type":"binary-expr","locations":[{"start":{"line":102,"column":45},"end":{"line":102,"column":79},"skip":true},{"start":{"line":102,"column":83},"end":{"line":111,"column":9},"skip":true}]},"11":{"line":113,"type":"binary-expr","locations":[{"start":{"line":113,"column":42},"end":{"line":113,"column":73},"skip":true},{"start":{"line":113,"column":77},"end":{"line":126,"column":9},"skip":true}]},"12":{"line":128,"type":"binary-expr","locations":[{"start":{"line":128,"column":48},"end":{"line":128,"column":85},"skip":true},{"start":{"line":129,"column":12},"end":{"line":135,"column":13},"skip":true}]},"13":{"line":137,"type":"binary-expr","locations":[{"start":{"line":137,"column":42},"end":{"line":137,"column":73},"skip":true},{"start":{"line":137,"column":77},"end":{"line":146,"column":9},"skip":true}]},"14":{"line":148,"type":"binary-expr","locations":[{"start":{"line":148,"column":45},"end":{"line":148,"column":79},"skip":true},{"start":{"line":148,"column":83},"end":{"line":157,"column":9},"skip":true}]},"15":{"line":159,"type":"binary-expr","locations":[{"start":{"line":159,"column":43},"end":{"line":159,"column":75},"skip":true},{"start":{"line":159,"column":79},"end":{"line":168,"column":9},"skip":true}]},"16":{"line":170,"type":"binary-expr","locations":[{"start":{"line":170,"column":41},"end":{"line":170,"column":71},"skip":true},{"start":{"line":170,"column":75},"end":{"line":179,"column":9},"skip":true}]}},"code":["/* istanbul instrument in package npmtest_cassandra_driver */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        switch (local.modeJs) {","        // re-init local from window.local","        case 'browser':","            local = local.global.utility2.objectSetDefault(","                local.global.utility2_rollup || local.global.local,","                local.global.utility2","            );","            break;","        // re-init local from example.js","        case 'node':","            local = (local.global.utility2_rollup || require('utility2'))","                .requireExampleJsFromReadme();","            break;","        }","        // export local","        local.global.local = local;","    }());","","","","    // run shared js-env code - function","    (function () {","        return;","    }());","    switch (local.modeJs) {","","","","    // run browser js-env code - function","    case 'browser':","        break;","","","","    // run node js-env code - function","    case 'node':","        break;","    }","","","","    // run shared js-env code - post-init","    (function () {","        return;","    }());","    switch (local.modeJs) {","","","","    // run browser js-env code - post-init","    case 'browser':","        // run tests","        local.nop(local.modeTest &&","            document.querySelector('#testRunButton1') &&","            document.querySelector('#testRunButton1').click());","        break;","","","","    // run node js-env code - post-init","    /* istanbul ignore next */","    case 'node':","        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildApidoc's default handling-behavior-behavior","         */","            options = { modulePathList: module.paths };","            local.buildApidoc(options, onError);","        };","","        local.testCase_buildApp_default = local.testCase_buildApp_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildApp's default handling-behavior-behavior","         */","            local.testCase_buildReadme_default(options, local.onErrorThrow);","            local.testCase_buildLib_default(options, local.onErrorThrow);","            local.testCase_buildTest_default(options, local.onErrorThrow);","            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);","            options = [];","            local.buildApp(options, onError);","        };","","        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||","            function (options, onError) {","            /*","             * this function will test buildCustomOrg's default handling-behavior","             */","                options = {};","                local.buildCustomOrg(options, onError);","            };","","        local.testCase_buildLib_default = local.testCase_buildLib_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildLib's default handling-behavior","         */","            options = {};","            local.buildLib(options, onError);","        };","","        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildReadme's default handling-behavior-behavior","         */","            options = {};","            local.buildReadme(options, onError);","        };","","        local.testCase_buildTest_default = local.testCase_buildTest_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildTest's default handling-behavior","         */","            options = {};","            local.buildTest(options, onError);","        };","","        local.testCase_webpage_default = local.testCase_webpage_default || function (","            options,","            onError","        ) {","        /*","         * this function will test webpage's default handling-behavior","         */","            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };","            local.browserTest(options, onError);","        };","","        // run test-server","        local.testRunServer(local);","        break;","    }","}());",""],"l":{"12":2,"14":2,"19":2,"21":2,"23":2,"24":2,"25":2,"30":1,"37":2,"40":2,"43":1,"47":1,"50":1,"52":1,"55":2,"61":2,"62":2,"64":2,"70":1,"76":1,"82":2,"83":2,"85":2,"92":1,"95":1,"102":1,"109":1,"110":1,"113":1,"120":1,"121":1,"122":1,"123":1,"124":1,"125":1,"128":1,"133":2,"134":2,"137":1,"144":2,"145":2,"148":1,"155":2,"156":2,"159":1,"166":2,"167":2,"170":1,"177":1,"178":1,"182":1,"183":1}},"/home/travis/build/npmtest/node-npmtest-cassandra-driver/lib.npmtest_cassandra_driver.js":{"path":"/home/travis/build/npmtest/node-npmtest-cassandra-driver/lib.npmtest_cassandra_driver.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1,"14":1,"15":1,"16":1},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[2,2],"5":[1,1]},"f":{"1":2,"2":2,"3":2},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":1},"end":{"line":12,"column":13}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":5},"end":{"line":19,"column":17}}},"3":{"name":"(anonymous_3)","line":23,"loc":{"start":{"line":23,"column":24},"end":{"line":23,"column":36}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":53,"column":5}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":14}},"3":{"start":{"line":19,"column":4},"end":{"line":52,"column":9}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":19}},"5":{"start":{"line":23,"column":8},"end":{"line":35,"column":13}},"6":{"start":{"line":24,"column":12},"end":{"line":34,"column":13}},"7":{"start":{"line":25,"column":16},"end":{"line":28,"column":30}},"8":{"start":{"line":30,"column":16},"end":{"line":33,"column":27}},"9":{"start":{"line":37,"column":8},"end":{"line":39,"column":21}},"10":{"start":{"line":41,"column":8},"end":{"line":41,"column":54}},"11":{"start":{"line":43,"column":8},"end":{"line":43,"column":61}},"12":{"start":{"line":45,"column":8},"end":{"line":51,"column":9}},"13":{"start":{"line":46,"column":12},"end":{"line":46,"column":67}},"14":{"start":{"line":48,"column":12},"end":{"line":48,"column":35}},"15":{"start":{"line":49,"column":12},"end":{"line":49,"column":49}},"16":{"start":{"line":50,"column":12},"end":{"line":50,"column":43}}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":62}},{"start":{"line":26,"column":20},"end":{"line":26,"column":70}},{"start":{"line":27,"column":20},"end":{"line":27,"column":71}},{"start":{"line":28,"column":20},"end":{"line":28,"column":29}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":23},"end":{"line":30,"column":37}},{"start":{"line":31,"column":20},"end":{"line":31,"column":61}},{"start":{"line":32,"column":20},"end":{"line":32,"column":70}},{"start":{"line":33,"column":20},"end":{"line":33,"column":26}}]},"3":{"line":37,"type":"cond-expr","locations":[{"start":{"line":38,"column":14},"end":{"line":38,"column":20}},{"start":{"line":39,"column":14},"end":{"line":39,"column":20}}]},"4":{"line":41,"type":"binary-expr","locations":[{"start":{"line":41,"column":16},"end":{"line":41,"column":44}},{"start":{"line":41,"column":48},"end":{"line":41,"column":53}}]},"5":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":8},"end":{"line":45,"column":8}},{"start":{"line":45,"column":8},"end":{"line":45,"column":8}}]}},"code":["/* istanbul instrument in package npmtest_cassandra_driver */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        // init utility2_rollup","        local = local.global.utility2_rollup || local;","        // init lib","        local.local = local.npmtest_cassandra_driver = local;","        // init exports","        if (local.modeJs === 'browser') {","            local.global.utility2_npmtest_cassandra_driver = local;","        } else {","            module.exports = local;","            module.exports.__dirname = __dirname;","            module.exports.module = module;","        }","    }());","}());",""],"l":{"12":2,"14":2,"19":2,"21":2,"23":2,"24":2,"25":2,"30":1,"37":2,"41":2,"43":2,"45":2,"46":1,"48":1,"49":1,"50":1}},"/home/travis/build/npmtest/node-npmtest-cassandra-driver/example.js":{"path":"/home/travis/build/npmtest/node-npmtest-cassandra-driver/example.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1,"14":2,"15":2,"16":2,"17":2,"18":2,"19":0,"20":2,"21":1,"22":1,"23":1,"24":1,"25":1,"26":0,"27":0,"28":1,"29":1,"30":2,"31":0,"32":0,"33":0,"34":1,"35":2,"36":2,"37":2,"38":2,"39":2,"40":2,"41":0,"42":2,"43":2,"44":2,"45":1,"46":3,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":0,"58":1,"59":6,"60":6,"61":1,"62":2,"63":0,"64":2,"65":1,"66":1,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[2,2],"5":[1,1],"6":[1,1],"7":[2,0],"8":[2,1,1,1,1,1],"9":[0,2,0],"10":[1,1],"11":[2,1,1],"12":[1,0],"13":[0,2],"14":[2,0,0,0,0,0,0],"15":[0,2],"16":[2,0],"17":[1,1],"18":[0,1],"19":[1,2,0,2],"20":[1,0],"21":[1,1],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0]},"f":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":2,"9":3,"10":1,"11":6,"12":0},"fnMap":{"1":{"name":"(anonymous_1)","line":26,"loc":{"start":{"line":26,"column":1},"end":{"line":26,"column":13}}},"2":{"name":"(anonymous_2)","line":33,"loc":{"start":{"line":33,"column":5},"end":{"line":33,"column":17}}},"3":{"name":"(anonymous_3)","line":37,"loc":{"start":{"line":37,"column":24},"end":{"line":37,"column":36}}},"4":{"name":"(anonymous_4)","line":69,"loc":{"start":{"line":69,"column":31},"end":{"line":69,"column":48}},"skip":true},"5":{"name":"(anonymous_5)","line":78,"loc":{"start":{"line":78,"column":26},"end":{"line":78,"column":45}},"skip":true},"6":{"name":"(anonymous_6)","line":123,"loc":{"start":{"line":123,"column":33},"end":{"line":123,"column":48}},"skip":true},"7":{"name":"(anonymous_7)","line":125,"loc":{"start":{"line":125,"column":27},"end":{"line":125,"column":39}},"skip":true},"8":{"name":"(anonymous_8)","line":133,"loc":{"start":{"line":133,"column":59},"end":{"line":133,"column":74}},"skip":true},"9":{"name":"(anonymous_9)","line":143,"loc":{"start":{"line":143,"column":45},"end":{"line":143,"column":62}},"skip":true},"10":{"name":"(anonymous_10)","line":144,"loc":{"start":{"line":144,"column":73},"end":{"line":144,"column":92}},"skip":true},"11":{"name":"(anonymous_11)","line":272,"loc":{"start":{"line":272,"column":51},"end":{"line":272,"column":77}},"skip":true},"12":{"name":"(anonymous_12)","line":314,"loc":{"start":{"line":314,"column":32},"end":{"line":314,"column":61}},"skip":true}},"statementMap":{"1":{"start":{"line":26,"column":0},"end":{"line":325,"column":5}},"2":{"start":{"line":28,"column":4},"end":{"line":28,"column":14}},"3":{"start":{"line":33,"column":4},"end":{"line":60,"column":9}},"4":{"start":{"line":35,"column":8},"end":{"line":35,"column":19}},"5":{"start":{"line":37,"column":8},"end":{"line":49,"column":13}},"6":{"start":{"line":38,"column":12},"end":{"line":48,"column":13}},"7":{"start":{"line":39,"column":16},"end":{"line":42,"column":30}},"8":{"start":{"line":44,"column":16},"end":{"line":47,"column":27}},"9":{"start":{"line":51,"column":8},"end":{"line":53,"column":21}},"10":{"start":{"line":55,"column":8},"end":{"line":57,"column":45}},"11":{"start":{"line":59,"column":8},"end":{"line":59,"column":35}},"12":{"start":{"line":61,"column":4},"end":{"line":324,"column":5}},"13":{"start":{"line":69,"column":8},"end":{"line":121,"column":10},"skip":true},"14":{"start":{"line":70,"column":12},"end":{"line":88,"column":13},"skip":true},"15":{"start":{"line":76,"column":16},"end":{"line":87,"column":19},"skip":true},"16":{"start":{"line":79,"column":20},"end":{"line":86,"column":21},"skip":true},"17":{"start":{"line":82,"column":24},"end":{"line":82,"column":43},"skip":true},"18":{"start":{"line":83,"column":24},"end":{"line":83,"column":30},"skip":true},"19":{"start":{"line":85,"column":24},"end":{"line":85,"column":49},"skip":true},"20":{"start":{"line":89,"column":12},"end":{"line":107,"column":13},"skip":true},"21":{"start":{"line":92,"column":16},"end":{"line":102,"column":17},"skip":true},"22":{"start":{"line":93,"column":20},"end":{"line":93,"column":86},"skip":true},"23":{"start":{"line":94,"column":20},"end":{"line":95,"column":45},"skip":true},"24":{"start":{"line":96,"column":20},"end":{"line":96,"column":42},"skip":true},"25":{"start":{"line":97,"column":20},"end":{"line":97,"column":48},"skip":true},"26":{"start":{"line":100,"column":20},"end":{"line":100,"column":85},"skip":true},"27":{"start":{"line":101,"column":20},"end":{"line":101,"column":96},"skip":true},"28":{"start":{"line":103,"column":16},"end":{"line":103,"column":22},"skip":true},"29":{"start":{"line":106,"column":16},"end":{"line":106,"column":22},"skip":true},"30":{"start":{"line":108,"column":12},"end":{"line":120,"column":13},"skip":true},"31":{"start":{"line":114,"column":16},"end":{"line":119,"column":17},"skip":true},"32":{"start":{"line":116,"column":20},"end":{"line":116,"column":78},"skip":true},"33":{"start":{"line":118,"column":20},"end":{"line":118,"column":47},"skip":true},"34":{"start":{"line":123,"column":8},"end":{"line":141,"column":11},"skip":true},"35":{"start":{"line":124,"column":12},"end":{"line":124,"column":54},"skip":true},"36":{"start":{"line":125,"column":12},"end":{"line":140,"column":14},"skip":true},"37":{"start":{"line":126,"column":16},"end":{"line":126,"column":28},"skip":true},"38":{"start":{"line":127,"column":16},"end":{"line":127,"column":69},"skip":true},"39":{"start":{"line":128,"column":16},"end":{"line":128,"column":75},"skip":true},"40":{"start":{"line":129,"column":16},"end":{"line":131,"column":17},"skip":true},"41":{"start":{"line":130,"column":20},"end":{"line":130,"column":27},"skip":true},"42":{"start":{"line":133,"column":16},"end":{"line":137,"column":36},"skip":true},"43":{"start":{"line":134,"column":20},"end":{"line":136,"column":55},"skip":true},"44":{"start":{"line":139,"column":16},"end":{"line":139,"column":57},"skip":true},"45":{"start":{"line":143,"column":8},"end":{"line":147,"column":11},"skip":true},"46":{"start":{"line":144,"column":12},"end":{"line":146,"column":15},"skip":true},"47":{"start":{"line":145,"column":16},"end":{"line":145,"column":70},"skip":true},"48":{"start":{"line":149,"column":8},"end":{"line":149,"column":31},"skip":true},"49":{"start":{"line":150,"column":8},"end":{"line":150,"column":14},"skip":true},"50":{"start":{"line":158,"column":8},"end":{"line":158,"column":31},"skip":true},"51":{"start":{"line":160,"column":8},"end":{"line":160,"column":33},"skip":true},"52":{"start":{"line":161,"column":8},"end":{"line":161,"column":37},"skip":true},"53":{"start":{"line":162,"column":8},"end":{"line":162,"column":35},"skip":true},"54":{"start":{"line":164,"column":8},"end":{"line":164,"column":50},"skip":true},"55":{"start":{"line":166,"column":8},"end":{"line":256,"column":2},"skip":true},"56":{"start":{"line":258,"column":8},"end":{"line":286,"column":9},"skip":true},"57":{"start":{"line":259,"column":12},"end":{"line":269,"column":14},"skip":true},"58":{"start":{"line":271,"column":12},"end":{"line":285,"column":19},"skip":true},"59":{"start":{"line":274,"column":20},"end":{"line":274,"column":35},"skip":true},"60":{"start":{"line":275,"column":20},"end":{"line":284,"column":21},"skip":true},"61":{"start":{"line":277,"column":24},"end":{"line":277,"column":64},"skip":true},"62":{"start":{"line":279,"column":24},"end":{"line":279,"column":40},"skip":true},"63":{"start":{"line":281,"column":24},"end":{"line":281,"column":40},"skip":true},"64":{"start":{"line":283,"column":24},"end":{"line":283,"column":39},"skip":true},"65":{"start":{"line":288,"column":8},"end":{"line":290,"column":9},"skip":true},"66":{"start":{"line":289,"column":12},"end":{"line":289,"column":18},"skip":true},"67":{"start":{"line":291,"column":8},"end":{"line":293,"column":54},"skip":true},"68":{"start":{"line":294,"column":8},"end":{"line":301,"column":37},"skip":true},"69":{"start":{"line":302,"column":8},"end":{"line":302,"column":82},"skip":true},"70":{"start":{"line":305,"column":8},"end":{"line":307,"column":9},"skip":true},"71":{"start":{"line":306,"column":12},"end":{"line":306,"column":82},"skip":true},"72":{"start":{"line":309,"column":8},"end":{"line":311,"column":9},"skip":true},"73":{"start":{"line":310,"column":12},"end":{"line":310,"column":18},"skip":true},"74":{"start":{"line":312,"column":8},"end":{"line":312,"column":54},"skip":true},"75":{"start":{"line":313,"column":8},"end":{"line":313,"column":69},"skip":true},"76":{"start":{"line":314,"column":8},"end":{"line":322,"column":36},"skip":true},"77":{"start":{"line":315,"column":12},"end":{"line":315,"column":61},"skip":true},"78":{"start":{"line":316,"column":12},"end":{"line":319,"column":13},"skip":true},"79":{"start":{"line":317,"column":16},"end":{"line":317,"column":75},"skip":true},"80":{"start":{"line":318,"column":16},"end":{"line":318,"column":23},"skip":true},"81":{"start":{"line":320,"column":12},"end":{"line":320,"column":38},"skip":true},"82":{"start":{"line":321,"column":12},"end":{"line":321,"column":27},"skip":true},"83":{"start":{"line":323,"column":8},"end":{"line":323,"column":14},"skip":true}},"branchMap":{"1":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":23},"end":{"line":39,"column":62}},{"start":{"line":40,"column":20},"end":{"line":40,"column":70}},{"start":{"line":41,"column":20},"end":{"line":41,"column":71}},{"start":{"line":42,"column":20},"end":{"line":42,"column":29}}]},"2":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":23},"end":{"line":44,"column":37}},{"start":{"line":45,"column":20},"end":{"line":45,"column":61}},{"start":{"line":46,"column":20},"end":{"line":46,"column":70}},{"start":{"line":47,"column":20},"end":{"line":47,"column":26}}]},"3":{"line":51,"type":"cond-expr","locations":[{"start":{"line":52,"column":14},"end":{"line":52,"column":20}},{"start":{"line":53,"column":14},"end":{"line":53,"column":20}}]},"4":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":16},"end":{"line":55,"column":44}},{"start":{"line":55,"column":49},"end":{"line":57,"column":43}}]},"5":{"line":55,"type":"cond-expr","locations":[{"start":{"line":56,"column":14},"end":{"line":56,"column":60}},{"start":{"line":57,"column":14},"end":{"line":57,"column":43}}]},"6":{"line":61,"type":"switch","locations":[{"start":{"line":68,"column":4},"end":{"line":150,"column":14},"skip":true},{"start":{"line":156,"column":4},"end":{"line":323,"column":14},"skip":true}]},"7":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":12},"end":{"line":70,"column":12},"skip":true},{"start":{"line":70,"column":12},"end":{"line":70,"column":12},"skip":true}]},"8":{"line":70,"type":"binary-expr","locations":[{"start":{"line":70,"column":16},"end":{"line":70,"column":22},"skip":true},{"start":{"line":70,"column":27},"end":{"line":70,"column":32},"skip":true},{"start":{"line":71,"column":20},"end":{"line":71,"column":39},"skip":true},{"start":{"line":72,"column":20},"end":{"line":72,"column":49},"skip":true},{"start":{"line":73,"column":20},"end":{"line":73,"column":58},"skip":true},{"start":{"line":74,"column":20},"end":{"line":74,"column":69},"skip":true}]},"9":{"line":79,"type":"switch","locations":[{"start":{"line":80,"column":20},"end":{"line":80,"column":33},"skip":true},{"start":{"line":81,"column":20},"end":{"line":83,"column":30},"skip":true},{"start":{"line":84,"column":20},"end":{"line":85,"column":49},"skip":true}]},"10":{"line":89,"type":"switch","locations":[{"start":{"line":90,"column":12},"end":{"line":103,"column":22},"skip":true},{"start":{"line":105,"column":12},"end":{"line":106,"column":22},"skip":true}]},"11":{"line":89,"type":"binary-expr","locations":[{"start":{"line":89,"column":20},"end":{"line":89,"column":25},"skip":true},{"start":{"line":89,"column":29},"end":{"line":89,"column":48},"skip":true},{"start":{"line":89,"column":52},"end":{"line":89,"column":74},"skip":true}]},"12":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":16},"end":{"line":92,"column":16},"skip":true},{"start":{"line":92,"column":16},"end":{"line":92,"column":16},"skip":true}]},"13":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":12},"end":{"line":108,"column":12},"skip":true},{"start":{"line":108,"column":12},"end":{"line":108,"column":12},"skip":true}]},"14":{"line":108,"type":"binary-expr","locations":[{"start":{"line":108,"column":16},"end":{"line":108,"column":61},"skip":true},{"start":{"line":108,"column":66},"end":{"line":108,"column":72},"skip":true},{"start":{"line":108,"column":77},"end":{"line":108,"column":82},"skip":true},{"start":{"line":109,"column":20},"end":{"line":109,"column":39},"skip":true},{"start":{"line":110,"column":20},"end":{"line":110,"column":49},"skip":true},{"start":{"line":111,"column":20},"end":{"line":111,"column":58},"skip":true},{"start":{"line":112,"column":20},"end":{"line":112,"column":68},"skip":true}]},"15":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":16},"end":{"line":129,"column":16},"skip":true},{"start":{"line":129,"column":16},"end":{"line":129,"column":16},"skip":true}]},"16":{"line":134,"type":"cond-expr","locations":[{"start":{"line":135,"column":26},"end":{"line":135,"column":29},"skip":true},{"start":{"line":136,"column":26},"end":{"line":136,"column":54},"skip":true}]},"17":{"line":164,"type":"binary-expr","locations":[{"start":{"line":164,"column":27},"end":{"line":164,"column":43},"skip":true},{"start":{"line":164,"column":47},"end":{"line":164,"column":49},"skip":true}]},"18":{"line":258,"type":"if","locations":[{"start":{"line":258,"column":8},"end":{"line":258,"column":8},"skip":true},{"start":{"line":258,"column":8},"end":{"line":258,"column":8},"skip":true}]},"19":{"line":275,"type":"switch","locations":[{"start":{"line":276,"column":20},"end":{"line":277,"column":64},"skip":true},{"start":{"line":278,"column":20},"end":{"line":279,"column":40},"skip":true},{"start":{"line":280,"column":20},"end":{"line":281,"column":40},"skip":true},{"start":{"line":282,"column":20},"end":{"line":283,"column":39},"skip":true}]},"20":{"line":288,"type":"if","locations":[{"start":{"line":288,"column":8},"end":{"line":288,"column":8},"skip":true},{"start":{"line":288,"column":8},"end":{"line":288,"column":8},"skip":true}]},"21":{"line":288,"type":"binary-expr","locations":[{"start":{"line":288,"column":12},"end":{"line":288,"column":40},"skip":true},{"start":{"line":288,"column":44},"end":{"line":288,"column":67},"skip":true}]},"22":{"line":292,"type":"binary-expr","locations":[{"start":{"line":292,"column":12},"end":{"line":292,"column":50},"skip":true},{"start":{"line":293,"column":12},"end":{"line":293,"column":53},"skip":true}]},"23":{"line":295,"type":"binary-expr","locations":[{"start":{"line":295,"column":12},"end":{"line":295,"column":74},"skip":true},{"start":{"line":296,"column":12},"end":{"line":301,"column":36},"skip":true}]},"24":{"line":302,"type":"binary-expr","locations":[{"start":{"line":302,"column":43},"end":{"line":302,"column":75},"skip":true},{"start":{"line":302,"column":79},"end":{"line":302,"column":81},"skip":true}]},"25":{"line":305,"type":"if","locations":[{"start":{"line":305,"column":8},"end":{"line":305,"column":8},"skip":true},{"start":{"line":305,"column":8},"end":{"line":305,"column":8},"skip":true}]},"26":{"line":309,"type":"if","locations":[{"start":{"line":309,"column":8},"end":{"line":309,"column":8},"skip":true},{"start":{"line":309,"column":8},"end":{"line":309,"column":8},"skip":true}]},"27":{"line":312,"type":"binary-expr","locations":[{"start":{"line":312,"column":27},"end":{"line":312,"column":43},"skip":true},{"start":{"line":312,"column":47},"end":{"line":312,"column":53},"skip":true}]},"28":{"line":316,"type":"if","locations":[{"start":{"line":316,"column":12},"end":{"line":316,"column":12},"skip":true},{"start":{"line":316,"column":12},"end":{"line":316,"column":12},"skip":true}]}},"code":["/*","example.js","","quickstart example","","instruction","    1. save this script as example.js","    2. run the shell command:","        $ npm install npmtest-cassandra-driver && PORT=8081 node example.js","    3. play with the browser-demo on http://127.0.0.1:8081","*/","","","","/* istanbul instrument in package npmtest_cassandra_driver */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        // init utility2_rollup","        local = local.global.utility2_rollup || (local.modeJs === 'browser'","            ? local.global.utility2_npmtest_cassandra_driver","            : global.utility2_moduleExports);","        // export local","        local.global.local = local;","    }());","    switch (local.modeJs) {","","","","    // post-init","    // run browser js-env code - post-init","    /* istanbul ignore next */","    case 'browser':","        local.testRunBrowser = function (event) {","            if (!event || (event &&","                    event.currentTarget &&","                    event.currentTarget.className &&","                    event.currentTarget.className.includes &&","                    event.currentTarget.className.includes('onreset'))) {","                // reset output","                Array.from(","                    document.querySelectorAll('body > .resettable')","                ).forEach(function (element) {","                    switch (element.tagName) {","                    case 'INPUT':","                    case 'TEXTAREA':","                        element.value = '';","                        break;","                    default:","                        element.textContent = '';","                    }","                });","            }","            switch (event && event.currentTarget && event.currentTarget.id) {","            case 'testRunButton1':","                // show tests","                if (document.querySelector('#testReportDiv1').style.display === 'none') {","                    document.querySelector('#testReportDiv1').style.display = 'block';","                    document.querySelector('#testRunButton1').textContent =","                        'hide internal test';","                    local.modeTest = true;","                    local.testRunDefault(local);","                // hide tests","                } else {","                    document.querySelector('#testReportDiv1').style.display = 'none';","                    document.querySelector('#testRunButton1').textContent = 'run internal test';","                }","                break;","            // custom-case","            default:","                break;","            }","            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&","                    event.currentTarget &&","                    event.currentTarget.className &&","                    event.currentTarget.className.includes &&","                    event.currentTarget.className.includes('oneval')))) {","                // try to eval input-code","                try {","                    /*jslint evil: true*/","                    eval(document.querySelector('#inputTextareaEval1').value);","                } catch (errorCaught) {","                    console.error(errorCaught);","                }","            }","        };","        // log stderr and stdout to #outputTextareaStdout1","        ['error', 'log'].forEach(function (key) {","            console[key + '_original'] = console[key];","            console[key] = function () {","                var element;","                console[key + '_original'].apply(console, arguments);","                element = document.querySelector('#outputTextareaStdout1');","                if (!element) {","                    return;","                }","                // append text to #outputTextareaStdout1","                element.value += Array.from(arguments).map(function (arg) {","                    return typeof arg === 'string'","                        ? arg","                        : JSON.stringify(arg, null, 4);","                }).join(' ') + '\\n';","                // scroll textarea to bottom","                element.scrollTop = element.scrollHeight;","            };","        });","        // init event-handling","        ['change', 'click', 'keyup'].forEach(function (event) {","            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {","                element.addEventListener(event, local.testRunBrowser);","            });","        });","        // run tests","        local.testRunBrowser();","        break;","","","","    // run node js-env code - post-init","    /* istanbul ignore next */","    case 'node':","        // export local","        module.exports = local;","        // require modules","        local.fs = require('fs');","        local.http = require('http');","        local.url = require('url');","        // init assets","        local.assetsDict = local.assetsDict || {};","        /* jslint-ignore-begin */","        local.assetsDict['/assets.index.template.html'] = '\\","<!doctype html>\\n\\","<html lang=\"en\">\\n\\","<head>\\n\\","<meta charset=\"UTF-8\">\\n\\","<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\","<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\","<style>\\n\\","/*csslint\\n\\","    box-sizing: false,\\n\\","    universal-selector: false\\n\\","*/\\n\\","* {\\n\\","    box-sizing: border-box;\\n\\","}\\n\\","body {\\n\\","    background: #dde;\\n\\","    font-family: Arial, Helvetica, sans-serif;\\n\\","    margin: 2rem;\\n\\","}\\n\\","body > * {\\n\\","    margin-bottom: 1rem;\\n\\","}\\n\\",".utility2FooterDiv {\\n\\","    margin-top: 20px;\\n\\","    text-align: center;\\n\\","}\\n\\","</style>\\n\\","<style>\\n\\","/*csslint\\n\\","*/\\n\\","textarea {\\n\\","    font-family: monospace;\\n\\","    height: 10rem;\\n\\","    width: 100%;\\n\\","}\\n\\","textarea[readonly] {\\n\\","    background: #ddd;\\n\\","}\\n\\","</style>\\n\\","</head>\\n\\","<body>\\n\\","<!-- utility2-comment\\n\\","<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\","utility2-comment -->\\n\\","<h1>\\n\\","<!-- utility2-comment\\n\\","    <a\\n\\","        {{#if env.npm_package_homepage}}\\n\\","        href=\"{{env.npm_package_homepage}}\"\\n\\","        {{/if env.npm_package_homepage}}\\n\\","        target=\"_blank\"\\n\\","    >\\n\\","utility2-comment -->\\n\\","        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\","<!-- utility2-comment\\n\\","    </a>\\n\\","utility2-comment -->\\n\\","</h1>\\n\\","<h3>{{env.npm_package_description}}</h3>\\n\\","<!-- utility2-comment\\n\\","<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\","<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\","<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\","utility2-comment -->\\n\\","\\n\\","\\n\\","\\n\\","<label>stderr and stdout</label>\\n\\","<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\","<!-- utility2-comment\\n\\","{{#if isRollup}}\\n\\","<script src=\"assets.app.js\"></script>\\n\\","{{#unless isRollup}}\\n\\","utility2-comment -->\\n\\","<script src=\"assets.utility2.rollup.js\"></script>\\n\\","<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\","<script src=\"assets.npmtest_cassandra_driver.rollup.js\"></script>\\n\\","<script src=\"assets.example.js\"></script>\\n\\","<script src=\"assets.test.js\"></script>\\n\\","<!-- utility2-comment\\n\\","{{/if isRollup}}\\n\\","utility2-comment -->\\n\\","<div class=\"utility2FooterDiv\">\\n\\","    [ this app was created with\\n\\","    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\","    ]\\n\\","</div>\\n\\","</body>\\n\\","</html>\\n\\","';","        /* jslint-ignore-end */","        if (local.templateRender) {","            local.assetsDict['/'] = local.templateRender(","                local.assetsDict['/assets.index.template.html'],","                {","                    env: local.objectSetDefault(local.env, {","                        npm_package_description: 'the greatest app in the world!',","                        npm_package_name: 'my-app',","                        npm_package_nameAlias: 'my_app',","                        npm_package_version: '0.0.1'","                    })","                }","            );","        } else {","            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']","                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {","                    // jslint-hack","                    String(match0);","                    switch (match1) {","                    case 'npm_package_description':","                        return 'the greatest app in the world!';","                    case 'npm_package_name':","                        return 'my-app';","                    case 'npm_package_nameAlias':","                        return 'my_app';","                    case 'npm_package_version':","                        return '0.0.1';","                    }","                });","        }","        // run the cli","        if (local.global.utility2_rollup || module !== require.main) {","            break;","        }","        local.assetsDict['/assets.example.js'] =","            local.assetsDict['/assets.example.js'] ||","            local.fs.readFileSync(__filename, 'utf8');","        local.assetsDict['/assets.npmtest_cassandra_driver.rollup.js'] =","            local.assetsDict['/assets.npmtest_cassandra_driver.rollup.js'] ||","            local.fs.readFileSync(","                // buildCustomOrg-hack","                local.npmtest_cassandra_driver.__dirname +","                    '/lib.npmtest_cassandra_driver.js',","                'utf8'","            ).replace((/^#!/), '//');","        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';","        // if $npm_config_timeout_exit exists,","        // then exit this process after $npm_config_timeout_exit ms","        if (Number(process.env.npm_config_timeout_exit)) {","            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));","        }","        // start server","        if (local.global.utility2_serverHttp1) {","            break;","        }","        process.env.PORT = process.env.PORT || '8081';","        console.error('server starting on port ' + process.env.PORT);","        local.http.createServer(function (request, response) {","            request.urlParsed = local.url.parse(request.url);","            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {","                response.end(local.assetsDict[request.urlParsed.pathname]);","                return;","            }","            response.statusCode = 404;","            response.end();","        }).listen(process.env.PORT);","        break;","    }","}());",""],"l":{"26":2,"28":2,"33":2,"35":2,"37":2,"38":2,"39":2,"44":1,"51":2,"55":2,"59":2,"61":2,"69":1,"70":2,"76":2,"79":2,"82":2,"83":2,"85":1,"89":2,"92":1,"93":1,"94":1,"96":1,"97":1,"100":1,"101":1,"103":1,"106":1,"108":2,"114":1,"116":1,"118":1,"123":1,"124":2,"125":2,"126":2,"127":2,"128":2,"129":2,"130":1,"133":2,"134":2,"139":2,"143":1,"144":3,"145":1,"149":1,"150":1,"158":1,"160":1,"161":1,"162":1,"164":1,"166":1,"258":1,"259":1,"271":1,"274":6,"275":6,"277":1,"279":2,"281":1,"283":2,"288":1,"289":1,"291":1,"294":1,"302":1,"305":1,"306":1,"309":1,"310":1,"312":1,"313":1,"314":1,"315":1,"316":1,"317":1,"318":1,"320":1,"321":1,"323":1}},"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":0,"12":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":15,"loc":{"start":{"line":15,"column":25},"end":{"line":15,"column":37}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":52}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":41}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":79}},"4":{"start":{"line":4,"column":0},"end":{"line":4,"column":39}},"5":{"start":{"line":5,"column":0},"end":{"line":5,"column":41}},"6":{"start":{"line":6,"column":0},"end":{"line":6,"column":45}},"7":{"start":{"line":7,"column":0},"end":{"line":7,"column":37}},"8":{"start":{"line":8,"column":0},"end":{"line":10,"column":2}},"9":{"start":{"line":11,"column":0},"end":{"line":11,"column":43}},"10":{"start":{"line":15,"column":0},"end":{"line":17,"column":2}},"11":{"start":{"line":16,"column":2},"end":{"line":16,"column":40}},"12":{"start":{"line":18,"column":0},"end":{"line":18,"column":52}}},"branchMap":{},"code":["var clientOptions = require('./lib/client-options');","exports.Client = require('./lib/client');","exports.ExecutionProfile = require('./lib/execution-profile').ExecutionProfile;","exports.types = require('./lib/types');","exports.errors = require('./lib/errors');","exports.policies = require('./lib/policies');","exports.auth = require('./lib/auth');","exports.metadata = {","  Metadata: require('./lib/metadata')","};","exports.Encoder = require('./lib/encoder');","/**"," * Returns a new instance of the default [options]{@link ClientOptions} used by the driver."," */","exports.defaultOptions = function () {","  return clientOptions.defaultOptions();","};","exports.version = require('./package.json').version;"],"l":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"11":1,"15":1,"16":0,"18":1}},"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/client-options.js":{"path":"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/client-options.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":1,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":1,"78":0,"79":1,"80":0,"81":0,"82":0,"83":1,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":1,"91":1,"92":1,"93":1,"94":1,"95":1,"96":1,"97":1,"98":1,"99":1,"100":1,"101":1,"102":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0,0],"23":[0,0],"24":[0,0],"25":[0,0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"defaultOptions","line":12,"loc":{"start":{"line":12,"column":0},"end":{"line":12,"column":27}}},"2":{"name":"extend","line":62,"loc":{"start":{"line":62,"column":0},"end":{"line":62,"column":42}}},"3":{"name":"(anonymous_3)","line":113,"loc":{"start":{"line":113,"column":25},"end":{"line":113,"column":37}}},"4":{"name":"createQueryOptions","line":152,"loc":{"start":{"line":152,"column":0},"end":{"line":152,"column":70}}},"5":{"name":"ifUndefined","line":211,"loc":{"start":{"line":211,"column":0},"end":{"line":211,"column":29}}},"6":{"name":"ifUndefined3","line":215,"loc":{"start":{"line":215,"column":0},"end":{"line":215,"column":34}}},"7":{"name":"getTimestamp","line":222,"loc":{"start":{"line":222,"column":0},"end":{"line":222,"column":57}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":27}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":37}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":31}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":31}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":33}},"6":{"start":{"line":12,"column":0},"end":{"line":54,"column":1}},"7":{"start":{"line":13,"column":2},"end":{"line":53,"column":5}},"8":{"start":{"line":62,"column":0},"end":{"line":138,"column":1}},"9":{"start":{"line":63,"column":2},"end":{"line":66,"column":3}},"10":{"start":{"line":64,"column":4},"end":{"line":64,"column":31}},"11":{"start":{"line":65,"column":4},"end":{"line":65,"column":21}},"12":{"start":{"line":67,"column":2},"end":{"line":67,"column":77}},"13":{"start":{"line":68,"column":2},"end":{"line":70,"column":3}},"14":{"start":{"line":69,"column":4},"end":{"line":69,"column":60}},"15":{"start":{"line":71,"column":2},"end":{"line":77,"column":3}},"16":{"start":{"line":72,"column":4},"end":{"line":72,"column":44}},"17":{"start":{"line":73,"column":4},"end":{"line":76,"column":5}},"18":{"start":{"line":74,"column":6},"end":{"line":75,"column":110}},"19":{"start":{"line":78,"column":2},"end":{"line":80,"column":3}},"20":{"start":{"line":79,"column":4},"end":{"line":79,"column":59}},"21":{"start":{"line":81,"column":2},"end":{"line":83,"column":3}},"22":{"start":{"line":82,"column":4},"end":{"line":82,"column":92}},"23":{"start":{"line":84,"column":2},"end":{"line":86,"column":3}},"24":{"start":{"line":85,"column":4},"end":{"line":85,"column":89}},"25":{"start":{"line":87,"column":2},"end":{"line":89,"column":3}},"26":{"start":{"line":88,"column":4},"end":{"line":88,"column":75}},"27":{"start":{"line":90,"column":2},"end":{"line":92,"column":3}},"28":{"start":{"line":91,"column":4},"end":{"line":91,"column":94}},"29":{"start":{"line":93,"column":2},"end":{"line":96,"column":3}},"30":{"start":{"line":95,"column":4},"end":{"line":95,"column":97}},"31":{"start":{"line":97,"column":2},"end":{"line":99,"column":3}},"32":{"start":{"line":98,"column":4},"end":{"line":98,"column":63}},"33":{"start":{"line":100,"column":2},"end":{"line":102,"column":3}},"34":{"start":{"line":101,"column":4},"end":{"line":101,"column":66}},"35":{"start":{"line":103,"column":2},"end":{"line":105,"column":3}},"36":{"start":{"line":104,"column":4},"end":{"line":104,"column":64}},"37":{"start":{"line":106,"column":2},"end":{"line":108,"column":3}},"38":{"start":{"line":107,"column":4},"end":{"line":107,"column":70}},"39":{"start":{"line":109,"column":2},"end":{"line":111,"column":3}},"40":{"start":{"line":110,"column":4},"end":{"line":110,"column":87}},"41":{"start":{"line":112,"column":2},"end":{"line":114,"column":3}},"42":{"start":{"line":113,"column":4},"end":{"line":113,"column":40}},"43":{"start":{"line":115,"column":2},"end":{"line":117,"column":3}},"44":{"start":{"line":116,"column":4},"end":{"line":116,"column":26}},"45":{"start":{"line":118,"column":2},"end":{"line":125,"column":3}},"46":{"start":{"line":119,"column":4},"end":{"line":119,"column":46}},"47":{"start":{"line":120,"column":4},"end":{"line":124,"column":5}},"48":{"start":{"line":123,"column":6},"end":{"line":123,"column":55}},"49":{"start":{"line":126,"column":2},"end":{"line":133,"column":3}},"50":{"start":{"line":127,"column":4},"end":{"line":127,"column":46}},"51":{"start":{"line":128,"column":4},"end":{"line":132,"column":5}},"52":{"start":{"line":131,"column":6},"end":{"line":131,"column":55}},"53":{"start":{"line":134,"column":2},"end":{"line":136,"column":3}},"54":{"start":{"line":135,"column":4},"end":{"line":135,"column":83}},"55":{"start":{"line":137,"column":2},"end":{"line":137,"column":17}},"56":{"start":{"line":152,"column":0},"end":{"line":209,"column":1}},"57":{"start":{"line":153,"column":2},"end":{"line":154,"column":82}},"58":{"start":{"line":155,"column":2},"end":{"line":157,"column":3}},"59":{"start":{"line":156,"column":4},"end":{"line":156,"column":115}},"60":{"start":{"line":159,"column":2},"end":{"line":159,"column":102}},"61":{"start":{"line":160,"column":2},"end":{"line":160,"column":56}},"62":{"start":{"line":163,"column":2},"end":{"line":188,"column":4}},"63":{"start":{"line":189,"column":2},"end":{"line":191,"column":3}},"64":{"start":{"line":190,"column":4},"end":{"line":190,"column":18}},"65":{"start":{"line":192,"column":2},"end":{"line":192,"column":49}},"66":{"start":{"line":193,"column":2},"end":{"line":193,"column":17}},"67":{"start":{"line":195,"column":2},"end":{"line":195,"column":33}},"68":{"start":{"line":196,"column":2},"end":{"line":207,"column":3}},"69":{"start":{"line":197,"column":4},"end":{"line":197,"column":29}},"70":{"start":{"line":198,"column":4},"end":{"line":201,"column":5}},"71":{"start":{"line":200,"column":6},"end":{"line":200,"column":15}},"72":{"start":{"line":202,"column":4},"end":{"line":202,"column":29}},"73":{"start":{"line":203,"column":4},"end":{"line":205,"column":5}},"74":{"start":{"line":204,"column":6},"end":{"line":204,"column":15}},"75":{"start":{"line":206,"column":4},"end":{"line":206,"column":24}},"76":{"start":{"line":208,"column":2},"end":{"line":208,"column":16}},"77":{"start":{"line":211,"column":0},"end":{"line":213,"column":1}},"78":{"start":{"line":212,"column":2},"end":{"line":212,"column":36}},"79":{"start":{"line":215,"column":0},"end":{"line":220,"column":1}},"80":{"start":{"line":216,"column":2},"end":{"line":218,"column":3}},"81":{"start":{"line":217,"column":4},"end":{"line":217,"column":14}},"82":{"start":{"line":219,"column":2},"end":{"line":219,"column":36}},"83":{"start":{"line":222,"column":0},"end":{"line":232,"column":1}},"84":{"start":{"line":223,"column":2},"end":{"line":223,"column":27}},"85":{"start":{"line":224,"column":2},"end":{"line":230,"column":3}},"86":{"start":{"line":225,"column":4},"end":{"line":225,"column":34}},"87":{"start":{"line":227,"column":7},"end":{"line":230,"column":3}},"88":{"start":{"line":229,"column":4},"end":{"line":229,"column":69}},"89":{"start":{"line":231,"column":2},"end":{"line":231,"column":15}},"90":{"start":{"line":237,"column":0},"end":{"line":237,"column":34}},"91":{"start":{"line":238,"column":0},"end":{"line":238,"column":51}},"92":{"start":{"line":239,"column":0},"end":{"line":239,"column":52}},"93":{"start":{"line":240,"column":0},"end":{"line":240,"column":53}},"94":{"start":{"line":244,"column":0},"end":{"line":244,"column":34}},"95":{"start":{"line":245,"column":0},"end":{"line":245,"column":51}},"96":{"start":{"line":246,"column":0},"end":{"line":246,"column":52}},"97":{"start":{"line":247,"column":0},"end":{"line":247,"column":53}},"98":{"start":{"line":249,"column":0},"end":{"line":249,"column":24}},"99":{"start":{"line":250,"column":0},"end":{"line":250,"column":40}},"100":{"start":{"line":251,"column":0},"end":{"line":251,"column":60}},"101":{"start":{"line":252,"column":0},"end":{"line":252,"column":60}},"102":{"start":{"line":253,"column":0},"end":{"line":253,"column":48}}},"branchMap":{"1":{"line":63,"type":"if","locations":[{"start":{"line":63,"column":2},"end":{"line":63,"column":2}},{"start":{"line":63,"column":2},"end":{"line":63,"column":2}}]},"2":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":2},"end":{"line":68,"column":2}},{"start":{"line":68,"column":2},"end":{"line":68,"column":2}}]},"3":{"line":68,"type":"binary-expr","locations":[{"start":{"line":68,"column":6},"end":{"line":68,"column":42}},{"start":{"line":68,"column":46},"end":{"line":68,"column":80}}]},"4":{"line":73,"type":"if","locations":[{"start":{"line":73,"column":4},"end":{"line":73,"column":4}},{"start":{"line":73,"column":4},"end":{"line":73,"column":4}}]},"5":{"line":78,"type":"if","locations":[{"start":{"line":78,"column":2},"end":{"line":78,"column":2}},{"start":{"line":78,"column":2},"end":{"line":78,"column":2}}]},"6":{"line":81,"type":"if","locations":[{"start":{"line":81,"column":2},"end":{"line":81,"column":2}},{"start":{"line":81,"column":2},"end":{"line":81,"column":2}}]},"7":{"line":84,"type":"if","locations":[{"start":{"line":84,"column":2},"end":{"line":84,"column":2}},{"start":{"line":84,"column":2},"end":{"line":84,"column":2}}]},"8":{"line":87,"type":"if","locations":[{"start":{"line":87,"column":2},"end":{"line":87,"column":2}},{"start":{"line":87,"column":2},"end":{"line":87,"column":2}}]},"9":{"line":90,"type":"if","locations":[{"start":{"line":90,"column":2},"end":{"line":90,"column":2}},{"start":{"line":90,"column":2},"end":{"line":90,"column":2}}]},"10":{"line":93,"type":"if","locations":[{"start":{"line":93,"column":2},"end":{"line":93,"column":2}},{"start":{"line":93,"column":2},"end":{"line":93,"column":2}}]},"11":{"line":93,"type":"binary-expr","locations":[{"start":{"line":93,"column":6},"end":{"line":93,"column":51}},{"start":{"line":94,"column":6},"end":{"line":94,"column":104}}]},"12":{"line":97,"type":"if","locations":[{"start":{"line":97,"column":2},"end":{"line":97,"column":2}},{"start":{"line":97,"column":2},"end":{"line":97,"column":2}}]},"13":{"line":100,"type":"if","locations":[{"start":{"line":100,"column":2},"end":{"line":100,"column":2}},{"start":{"line":100,"column":2},"end":{"line":100,"column":2}}]},"14":{"line":103,"type":"if","locations":[{"start":{"line":103,"column":2},"end":{"line":103,"column":2}},{"start":{"line":103,"column":2},"end":{"line":103,"column":2}}]},"15":{"line":106,"type":"if","locations":[{"start":{"line":106,"column":2},"end":{"line":106,"column":2}},{"start":{"line":106,"column":2},"end":{"line":106,"column":2}}]},"16":{"line":109,"type":"if","locations":[{"start":{"line":109,"column":2},"end":{"line":109,"column":2}},{"start":{"line":109,"column":2},"end":{"line":109,"column":2}}]},"17":{"line":109,"type":"binary-expr","locations":[{"start":{"line":109,"column":6},"end":{"line":109,"column":67}},{"start":{"line":109,"column":71},"end":{"line":109,"column":117}}]},"18":{"line":112,"type":"if","locations":[{"start":{"line":112,"column":2},"end":{"line":112,"column":2}},{"start":{"line":112,"column":2},"end":{"line":112,"column":2}}]},"19":{"line":115,"type":"if","locations":[{"start":{"line":115,"column":2},"end":{"line":115,"column":2}},{"start":{"line":115,"column":2},"end":{"line":115,"column":2}}]},"20":{"line":118,"type":"if","locations":[{"start":{"line":118,"column":2},"end":{"line":118,"column":2}},{"start":{"line":118,"column":2},"end":{"line":118,"column":2}}]},"21":{"line":120,"type":"if","locations":[{"start":{"line":120,"column":4},"end":{"line":120,"column":4}},{"start":{"line":120,"column":4},"end":{"line":120,"column":4}}]},"22":{"line":120,"type":"binary-expr","locations":[{"start":{"line":120,"column":8},"end":{"line":120,"column":44}},{"start":{"line":121,"column":6},"end":{"line":121,"column":60}},{"start":{"line":122,"column":6},"end":{"line":122,"column":56}}]},"23":{"line":126,"type":"if","locations":[{"start":{"line":126,"column":2},"end":{"line":126,"column":2}},{"start":{"line":126,"column":2},"end":{"line":126,"column":2}}]},"24":{"line":128,"type":"if","locations":[{"start":{"line":128,"column":4},"end":{"line":128,"column":4}},{"start":{"line":128,"column":4},"end":{"line":128,"column":4}}]},"25":{"line":128,"type":"binary-expr","locations":[{"start":{"line":128,"column":8},"end":{"line":128,"column":44}},{"start":{"line":129,"column":6},"end":{"line":129,"column":60}},{"start":{"line":130,"column":6},"end":{"line":130,"column":56}}]},"26":{"line":134,"type":"if","locations":[{"start":{"line":134,"column":2},"end":{"line":134,"column":2}},{"start":{"line":134,"column":2},"end":{"line":134,"column":2}}]},"27":{"line":134,"type":"binary-expr","locations":[{"start":{"line":134,"column":6},"end":{"line":134,"column":22}},{"start":{"line":134,"column":26},"end":{"line":134,"column":57}}]},"28":{"line":154,"type":"binary-expr","locations":[{"start":{"line":154,"column":37},"end":{"line":154,"column":48}},{"start":{"line":154,"column":52},"end":{"line":154,"column":80}}]},"29":{"line":155,"type":"if","locations":[{"start":{"line":155,"column":2},"end":{"line":155,"column":2}},{"start":{"line":155,"column":2},"end":{"line":155,"column":2}}]},"30":{"line":159,"type":"cond-expr","locations":[{"start":{"line":159,"column":70},"end":{"line":159,"column":87}},{"start":{"line":159,"column":90},"end":{"line":159,"column":101}}]},"31":{"line":159,"type":"binary-expr","locations":[{"start":{"line":159,"column":17},"end":{"line":159,"column":29}},{"start":{"line":159,"column":33},"end":{"line":159,"column":66}}]},"32":{"line":189,"type":"if","locations":[{"start":{"line":189,"column":2},"end":{"line":189,"column":2}},{"start":{"line":189,"column":2},"end":{"line":189,"column":2}}]},"33":{"line":198,"type":"if","locations":[{"start":{"line":198,"column":4},"end":{"line":198,"column":4}},{"start":{"line":198,"column":4},"end":{"line":198,"column":4}}]},"34":{"line":203,"type":"if","locations":[{"start":{"line":203,"column":4},"end":{"line":203,"column":4}},{"start":{"line":203,"column":4},"end":{"line":203,"column":4}}]},"35":{"line":212,"type":"cond-expr","locations":[{"start":{"line":212,"column":28},"end":{"line":212,"column":30}},{"start":{"line":212,"column":33},"end":{"line":212,"column":35}}]},"36":{"line":216,"type":"if","locations":[{"start":{"line":216,"column":2},"end":{"line":216,"column":2}},{"start":{"line":216,"column":2},"end":{"line":216,"column":2}}]},"37":{"line":219,"type":"cond-expr","locations":[{"start":{"line":219,"column":28},"end":{"line":219,"column":30}},{"start":{"line":219,"column":33},"end":{"line":219,"column":35}}]},"38":{"line":224,"type":"if","locations":[{"start":{"line":224,"column":2},"end":{"line":224,"column":2}},{"start":{"line":224,"column":2},"end":{"line":224,"column":2}}]},"39":{"line":227,"type":"if","locations":[{"start":{"line":227,"column":7},"end":{"line":227,"column":7}},{"start":{"line":227,"column":7},"end":{"line":227,"column":7}}]},"40":{"line":227,"type":"binary-expr","locations":[{"start":{"line":227,"column":11},"end":{"line":227,"column":55}},{"start":{"line":227,"column":59},"end":{"line":227,"column":102}}]}},"code":["\"use strict\";","var util = require('util');","","var policies = require('./policies');","var types = require('./types');","var utils = require('./utils');","var errors = require('./errors');","","/**"," * @returns {ClientOptions}"," */","function defaultOptions () {","  return ({","    policies: {","      addressResolution: policies.defaultAddressTranslator(),","      loadBalancing: policies.defaultLoadBalancingPolicy(),","      reconnection: policies.defaultReconnectionPolicy(),","      retry: policies.defaultRetryPolicy(),","      timestampGeneration: policies.defaultTimestampGenerator()","    },","    queryOptions: {","      consistency: types.consistencies.localOne,","      fetchSize: 5000,","      prepare: false,","      retryOnTimeout: true,","      captureStackTrace: false","    },","    protocolOptions: {","      port: 9042,","      maxSchemaAgreementWaitSeconds: 10,","      maxVersion: 0","    },","    pooling: {","      heartBeatInterval: 30000","    },","    socketOptions: {","      connectTimeout: 5000,","      defunctReadTimeoutThreshold: 64,","      keepAlive: true,","      keepAliveDelay: 0,","      readTimeout: 12000,","      tcpNoDelay: true,","      coalescingThreshold: 8000","    },","    authProvider: null,","    maxPrepared: 500,","    refreshSchemaDelay: 1000,","    isMetadataSyncEnabled: true,","    encoding: {","      copyBuffer: true,","      useUndefinedAsUnset: true","    }","  });","}","","/**"," * Extends and validates the user options"," * @param {Object} [baseOptions] The source object instance that will be overridden"," * @param {Object} userOptions"," * @returns {Object}"," */","function extend(baseOptions, userOptions) {","  if (arguments.length === 1) {","    userOptions = arguments[0];","    baseOptions = {};","  }","  var options = utils.deepExtend(baseOptions, defaultOptions(), userOptions);","  if (!util.isArray(options.contactPoints) || options.contactPoints.length === 0) {","    throw new TypeError('Contacts points are not defined.');","  }","  for (var i = 0; i < options.contactPoints.length; i++) {","    var hostName = options.contactPoints[i];","    if (!hostName) {","      throw new TypeError(util.format('Contact point %s (%s) is not a valid host name, ' +","        'the following values are valid contact points: ipAddress, hostName or ipAddress:port', i, hostName));","    }","  }","  if (!options.policies) {","    throw new TypeError('policies not defined in options');","  }","  if (!(options.policies.loadBalancing instanceof policies.loadBalancing.LoadBalancingPolicy)) {","    throw new TypeError('Load balancing policy must be an instance of LoadBalancingPolicy');","  }","  if (!(options.policies.reconnection instanceof policies.reconnection.ReconnectionPolicy)) {","    throw new TypeError('Reconnection policy must be an instance of ReconnectionPolicy');","  }","  if (!(options.policies.retry instanceof policies.retry.RetryPolicy)) {","    throw new TypeError('Retry policy must be an instance of RetryPolicy');","  }","  if (!(options.policies.addressResolution instanceof policies.addressResolution.AddressTranslator)) {","    throw new TypeError('Address resolution policy must be an instance of AddressTranslator');","  }","  if (options.policies.timestampGeneration !== null &&","      !(options.policies.timestampGeneration instanceof policies.timestampGeneration.TimestampGenerator)) {","    throw new TypeError('Timestamp generation policy must be an instance of TimestampGenerator');","  }","  if (!options.queryOptions) {","    throw new TypeError('queryOptions not defined in options');","  }","  if (!options.protocolOptions) {","    throw new TypeError('protocolOptions not defined in options');","  }","  if (!options.socketOptions) {","    throw new TypeError('socketOptions not defined in options');","  }","  if (typeof options.socketOptions.readTimeout !== 'number') {","    throw new TypeError('socketOptions.readTimeout must be a Number');","  }","  if (typeof options.socketOptions.coalescingThreshold !== 'number' || options.socketOptions.coalescingThreshold <= 0) {","    throw new TypeError('socketOptions.coalescingThreshold must be a positive Number');","  }","  if (!options.logEmitter) {","    options.logEmitter = function () {};","  }","  if (!options.encoding) {","    options.encoding = {};","  }","  if (options.encoding.map) {","    var mapConstructor = options.encoding.map;","    if (typeof mapConstructor !== 'function' ||","      typeof mapConstructor.prototype.forEach !== 'function' ||","      typeof mapConstructor.prototype.set !== 'function') {","      throw new TypeError('Map constructor not valid');","    }","  }","  if (options.encoding.set) {","    var setConstructor = options.encoding.set;","    if (typeof setConstructor !== 'function' ||","      typeof setConstructor.prototype.forEach !== 'function' ||","      typeof setConstructor.prototype.add !== 'function') {","      throw new TypeError('Set constructor not valid');","    }","  }","  if (options.profiles && !util.isArray(options.profiles)) {","    throw new TypeError('profiles must be an Array of ExecutionProfile instances');","  }","  return options;","}","","/**"," * Creates a new instance of query options with the values from the user."," * When some values are not defined, it takes the default values from"," * - {@link ExecutionProfile}."," * - {@link QueryOptions} from the default options."," * @param {Client} client"," * @param {QueryOptions|function} userOptions"," * @param {Function} [rowCallback]"," * @param {Boolean} [logged]"," * @returns {Object|Error} Returns a new instance of an object with the query options or returns an Error"," * instance (doesn't throw the Error)."," */","function createQueryOptions(client, userOptions, rowCallback, logged) {","  var profile =","    client.profileManager.getProfile(userOptions && userOptions.executionProfile);","  if (!profile) {","    return new errors.ArgumentError(util.format('Execution profile \"%s\" not found', userOptions.executionProfile));","  }","  // userOptions can be undefined and could be of type function (is an optional parameter)","  userOptions = (!userOptions || typeof userOptions === 'function') ? utils.emptyObject : userOptions;","  var defaultQueryOptions = client.options.queryOptions;","","  // Using fixed property names is 2 order of magnitude faster than dynamically shallow clone objects","  var result = {","    autoPage: ifUndefined(userOptions.autoPage, defaultQueryOptions.autoPage),","    captureStackTrace: ifUndefined(userOptions.captureStackTrace, defaultQueryOptions.captureStackTrace),","    consistency: ifUndefined3(userOptions.consistency, profile.consistency, defaultQueryOptions.consistency),","    customPayload: ifUndefined(userOptions.customPayload, defaultQueryOptions.customPayload),","    executionProfile: profile,","    fetchSize: ifUndefined(userOptions.fetchSize, defaultQueryOptions.fetchSize),","    hints: userOptions.hints,","    isIdempotent: ifUndefined(userOptions.isIdempotent, defaultQueryOptions.isIdempotent),","    logged: ifUndefined(userOptions.logged, logged),","    pageState: userOptions.pageState,","    prepare: ifUndefined(userOptions.prepare, defaultQueryOptions.prepare),","    readTimeout: ifUndefined3(userOptions.readTimeout, profile.readTimeout, client.options.socketOptions.readTimeout),","    retry: ifUndefined3(userOptions.retry, profile.retry, client.options.policies.retry),","    retryOnTimeout: ifUndefined3(","      userOptions.retryOnTimeout, profile.retryOnTimeout, defaultQueryOptions.retryOnTimeout),","    routingIndexes: userOptions.routingIndexes,","    routingKey: userOptions.routingKey,","    routingNames: userOptions.routingNames,","    serialConsistency: ifUndefined3(","      userOptions.serialConsistency, profile.serialConsistency, defaultQueryOptions.serialConsistency),","    timestamp: getTimestamp(client, userOptions, defaultQueryOptions.timestamp),","    traceQuery: ifUndefined(userOptions.traceQuery, defaultQueryOptions.traceQuery),","    // not part of query options","    rowCallback: rowCallback","  };","  if (userOptions === utils.emptyObject) {","    return result;","  }","  var userOptionsKeys = Object.keys(userOptions);","  var key, value;","  // Use the fastest iteration of array","  var i = userOptionsKeys.length;","  while (i--) {","    key = userOptionsKeys[i];","    if (key === 'executionProfile') {","      // Execution profile was the only value that could has been \"replaced\"","      continue;","    }","    value = userOptions[key];","    if (value === undefined) {","      continue;","    }","    result[key] = value;","  }","  return result;","}","","function ifUndefined(v1, v2) {","  return v1 !== undefined ? v1 : v2;","}","","function ifUndefined3(v1, v2, v3) {","  if (v1 !== undefined) {","    return v1;","  }","  return v2 !== undefined ? v2 : v3;","}","","function getTimestamp(client, userOptions, defaultValue) {","  var value = defaultValue;","  if (typeof userOptions.timestamp !== 'undefined') {","    value = userOptions.timestamp;","  }","  else if (client.controlConnection.protocolVersion > 2 && client.options.policies.timestampGeneration) {","    // Use the timestamp generator","    value = client.options.policies.timestampGeneration.next(client);","  }","  return value;","}","","/**"," * Core connections per host for protocol versions 1 and 2"," */","var coreConnectionsPerHostV2 = {};","coreConnectionsPerHostV2[types.distance.local] = 2;","coreConnectionsPerHostV2[types.distance.remote] = 1;","coreConnectionsPerHostV2[types.distance.ignored] = 0;","/**"," * Core connections per host for protocol version 3 and above"," */","var coreConnectionsPerHostV3 = {};","coreConnectionsPerHostV3[types.distance.local] = 1;","coreConnectionsPerHostV3[types.distance.remote] = 1;","coreConnectionsPerHostV3[types.distance.ignored] = 0;","","exports.extend = extend;","exports.defaultOptions = defaultOptions;","exports.coreConnectionsPerHostV2 = coreConnectionsPerHostV2;","exports.coreConnectionsPerHostV3 = coreConnectionsPerHostV3;","exports.createQueryOptions = createQueryOptions;"],"l":{"2":1,"4":1,"5":1,"6":1,"7":1,"12":1,"13":1,"62":1,"63":0,"64":0,"65":0,"67":0,"68":0,"69":0,"71":0,"72":0,"73":0,"74":0,"78":0,"79":0,"81":0,"82":0,"84":0,"85":0,"87":0,"88":0,"90":0,"91":0,"93":0,"95":0,"97":0,"98":0,"100":0,"101":0,"103":0,"104":0,"106":0,"107":0,"109":0,"110":0,"112":0,"113":0,"115":0,"116":0,"118":0,"119":0,"120":0,"123":0,"126":0,"127":0,"128":0,"131":0,"134":0,"135":0,"137":0,"152":1,"153":0,"155":0,"156":0,"159":0,"160":0,"163":0,"189":0,"190":0,"192":0,"193":0,"195":0,"196":0,"197":0,"198":0,"200":0,"202":0,"203":0,"204":0,"206":0,"208":0,"211":1,"212":0,"215":1,"216":0,"217":0,"219":0,"222":1,"223":0,"224":0,"225":0,"227":0,"229":0,"231":0,"237":1,"238":1,"239":1,"240":1,"244":1,"245":1,"246":1,"247":1,"249":1,"250":1,"251":1,"252":1,"253":1}},"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/policies/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/policies/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1},"b":{},"f":{"1":1,"2":1,"3":1,"4":1,"5":1},"fnMap":{"1":{"name":"(anonymous_1)","line":20,"loc":{"start":{"line":20,"column":35},"end":{"line":20,"column":47}}},"2":{"name":"(anonymous_2)","line":28,"loc":{"start":{"line":28,"column":37},"end":{"line":28,"column":49}}},"3":{"name":"(anonymous_3)","line":36,"loc":{"start":{"line":36,"column":29},"end":{"line":36,"column":41}}},"4":{"name":"(anonymous_4)","line":44,"loc":{"start":{"line":44,"column":36},"end":{"line":44,"column":48}}},"5":{"name":"(anonymous_5)","line":52,"loc":{"start":{"line":52,"column":36},"end":{"line":52,"column":48}}}},"statementMap":{"1":{"start":{"line":10,"column":0},"end":{"line":10,"column":84}},"2":{"start":{"line":11,"column":0},"end":{"line":11,"column":72}},"3":{"start":{"line":12,"column":0},"end":{"line":12,"column":68}},"4":{"start":{"line":13,"column":0},"end":{"line":13,"column":47}},"5":{"start":{"line":14,"column":0},"end":{"line":14,"column":90}},"6":{"start":{"line":20,"column":0},"end":{"line":22,"column":2}},"7":{"start":{"line":21,"column":2},"end":{"line":21,"column":51}},"8":{"start":{"line":28,"column":0},"end":{"line":30,"column":2}},"9":{"start":{"line":29,"column":2},"end":{"line":29,"column":89}},"10":{"start":{"line":36,"column":0},"end":{"line":38,"column":2}},"11":{"start":{"line":37,"column":2},"end":{"line":37,"column":33}},"12":{"start":{"line":44,"column":0},"end":{"line":46,"column":2}},"13":{"start":{"line":45,"column":2},"end":{"line":45,"column":85}},"14":{"start":{"line":52,"column":0},"end":{"line":54,"column":2}},"15":{"start":{"line":53,"column":2},"end":{"line":53,"column":63}}},"branchMap":{},"code":["'use strict';","","/**"," * Contains driver tuning policies to determine [load balancing]{@link module:policies/loadBalancing},"," *  [retrying]{@link module:policies/retry} queries, [reconnecting]{@link module:policies/reconnection} to a node,"," *  [address resolution]{@link module:policies/addressResolution} and"," *  [timestamp generation]{@link module:policies/timestampGeneration}."," * @module policies"," */","var addressResolution = exports.addressResolution = require('./address-resolution');","var loadBalancing = exports.loadBalancing = require('./load-balancing');","var reconnection = exports.reconnection = require('./reconnection');","var retry = exports.retry = require('./retry');","var timestampGeneration = exports.timestampGeneration = require('./timestamp-generation');","","/**"," * Returns a new instance of the default address translator policy used by the driver."," * @returns {AddressTranslator}"," */","exports.defaultAddressTranslator = function () {","  return new addressResolution.AddressTranslator();","};","","/**"," * Returns a new instance of the default load-balancing policy used by the driver."," * @returns {LoadBalancingPolicy}"," */","exports.defaultLoadBalancingPolicy = function () {","  return new loadBalancing.TokenAwarePolicy(new loadBalancing.DCAwareRoundRobinPolicy());","};","","/**"," * Returns a new instance of the default retry policy used by the driver."," * @returns {RetryPolicy}"," */","exports.defaultRetryPolicy = function () {","  return new retry.RetryPolicy();","};","","/**"," * Returns a new instance of the default reconnection policy used by the driver."," * @returns {ReconnectionPolicy}"," */","exports.defaultReconnectionPolicy = function () {","  return new reconnection.ExponentialReconnectionPolicy(1000, 10 * 60 * 1000, false);","};","","/**"," * Returns a new instance of the default timestamp generator used by the driver."," * @returns {TimestampGenerator}"," */","exports.defaultTimestampGenerator = function () {","  return new timestampGeneration.MonotonicTimestampGenerator();","};"],"l":{"10":1,"11":1,"12":1,"13":1,"14":1,"20":1,"21":1,"28":1,"29":1,"36":1,"37":1,"44":1,"45":1,"52":1,"53":1}},"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/policies/address-resolution.js":{"path":"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/policies/address-resolution.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":1,"8":1,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":1,"32":1,"33":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"fnMap":{"1":{"name":"AddressTranslator","line":30,"loc":{"start":{"line":30,"column":0},"end":{"line":30,"column":29}}},"2":{"name":"(anonymous_2)","line":46,"loc":{"start":{"line":46,"column":40},"end":{"line":46,"column":75}}},"3":{"name":"EC2MultiRegionTranslator","line":66,"loc":{"start":{"line":66,"column":0},"end":{"line":66,"column":36}}},"4":{"name":"(anonymous_4)","line":76,"loc":{"start":{"line":76,"column":47},"end":{"line":76,"column":82}}},"5":{"name":"resolve","line":81,"loc":{"start":{"line":81,"column":4},"end":{"line":81,"column":27}}},"6":{"name":"(anonymous_6)","line":82,"loc":{"start":{"line":82,"column":27},"end":{"line":82,"column":53}}},"7":{"name":"lookup","line":93,"loc":{"start":{"line":93,"column":4},"end":{"line":93,"column":26}}},"8":{"name":"(anonymous_8)","line":97,"loc":{"start":{"line":97,"column":23},"end":{"line":97,"column":53}}},"9":{"name":"(anonymous_9)","line":104,"loc":{"start":{"line":104,"column":8},"end":{"line":104,"column":23}}},"10":{"name":"(anonymous_10)","line":119,"loc":{"start":{"line":119,"column":46},"end":{"line":119,"column":70}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":25}},"2":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"3":{"start":{"line":4,"column":0},"end":{"line":4,"column":32}},"4":{"start":{"line":30,"column":0},"end":{"line":32,"column":1}},"5":{"start":{"line":46,"column":0},"end":{"line":48,"column":2}},"6":{"start":{"line":47,"column":2},"end":{"line":47,"column":33}},"7":{"start":{"line":66,"column":0},"end":{"line":68,"column":1}},"8":{"start":{"line":70,"column":0},"end":{"line":70,"column":59}},"9":{"start":{"line":76,"column":0},"end":{"line":111,"column":2}},"10":{"start":{"line":77,"column":2},"end":{"line":77,"column":27}},"11":{"start":{"line":78,"column":2},"end":{"line":78,"column":18}},"12":{"start":{"line":79,"column":2},"end":{"line":79,"column":11}},"13":{"start":{"line":80,"column":2},"end":{"line":110,"column":5}},"14":{"start":{"line":82,"column":6},"end":{"line":91,"column":9}},"15":{"start":{"line":83,"column":8},"end":{"line":85,"column":9}},"16":{"start":{"line":84,"column":10},"end":{"line":84,"column":27}},"17":{"start":{"line":86,"column":8},"end":{"line":88,"column":9}},"18":{"start":{"line":87,"column":10},"end":{"line":87,"column":24}},"19":{"start":{"line":89,"column":8},"end":{"line":89,"column":28}},"20":{"start":{"line":90,"column":8},"end":{"line":90,"column":15}},"21":{"start":{"line":94,"column":6},"end":{"line":96,"column":7}},"22":{"start":{"line":95,"column":8},"end":{"line":95,"column":22}},"23":{"start":{"line":97,"column":6},"end":{"line":103,"column":9}},"24":{"start":{"line":98,"column":8},"end":{"line":100,"column":9}},"25":{"start":{"line":99,"column":10},"end":{"line":99,"column":27}},"26":{"start":{"line":101,"column":8},"end":{"line":101,"column":35}},"27":{"start":{"line":102,"column":8},"end":{"line":102,"column":15}},"28":{"start":{"line":105,"column":4},"end":{"line":108,"column":5}},"29":{"start":{"line":107,"column":6},"end":{"line":107,"column":34}},"30":{"start":{"line":109,"column":4},"end":{"line":109,"column":38}},"31":{"start":{"line":119,"column":0},"end":{"line":121,"column":2}},"32":{"start":{"line":123,"column":0},"end":{"line":123,"column":46}},"33":{"start":{"line":124,"column":0},"end":{"line":124,"column":60}}},"branchMap":{"1":{"line":83,"type":"if","locations":[{"start":{"line":83,"column":8},"end":{"line":83,"column":8}},{"start":{"line":83,"column":8},"end":{"line":83,"column":8}}]},"2":{"line":86,"type":"if","locations":[{"start":{"line":86,"column":8},"end":{"line":86,"column":8}},{"start":{"line":86,"column":8},"end":{"line":86,"column":8}}]},"3":{"line":94,"type":"if","locations":[{"start":{"line":94,"column":6},"end":{"line":94,"column":6}},{"start":{"line":94,"column":6},"end":{"line":94,"column":6}}]},"4":{"line":98,"type":"if","locations":[{"start":{"line":98,"column":8},"end":{"line":98,"column":8}},{"start":{"line":98,"column":8},"end":{"line":98,"column":8}}]},"5":{"line":105,"type":"if","locations":[{"start":{"line":105,"column":4},"end":{"line":105,"column":4}},{"start":{"line":105,"column":4},"end":{"line":105,"column":4}}]}},"code":["\"use strict\";","var dns = require('dns');","var util = require('util');","var utils = require('../utils');","/** @module policies/addressResolution */","/**"," * @class"," * @classdesc"," * Translates IP addresses received from Cassandra nodes into locally queryable"," * addresses."," * <p>"," * The driver auto-detects new Cassandra nodes added to the cluster through server"," * side pushed notifications and through checking the system tables. For each"," * node, the address received will correspond to the address set as"," * <code>rpc_address</code> in the node yaml file. In most case, this is the correct"," * address to use by the driver and that is what is used by default. However,"," * sometimes the addresses received through this mechanism will either not be"," * reachable directly by the driver or should not be the preferred address to use"," * to reach the node (for instance, the <code>rpc_address</code> set on Cassandra nodes"," * might be a private IP, but some clients  may have to use a public IP, or"," * pass by a router to reach that node). This interface allows to deal with"," * such cases, by allowing to translate an address as sent by a Cassandra node"," * to another address to be used by the driver for connection."," * <p>"," * Please note that the contact points addresses provided while creating the"," * {@link Client} instance are not \"translated\", only IP address retrieve from or sent"," * by Cassandra nodes to the driver are."," * @constructor"," */","function AddressTranslator() {","","}","","/**"," * Translates a Cassandra <code>rpc_address</code> to another address if necessary."," * @param {String} address the address of a node as returned by Cassandra."," * <p>"," * Note that if the <code>rpc_address</code> of a node has been configured to <code>0.0.0.0</code>"," * server side, then the provided address will be the node <code>listen_address</code>,"," * *not* <code>0.0.0.0</code>."," * </p>"," * @param {Number} port The port number, as specified in the [protocolOptions]{@link ClientOptions} at Client instance creation (9042 by default)."," * @param {Function} callback Callback to invoke with endpoint as first parameter."," * The endpoint is an string composed of the IP address and the port number in the format <code>ipAddress:port</code>."," */","AddressTranslator.prototype.translate = function (address, port, callback) {","  callback(address + ':' + port);","};","","/**"," * @class"," * @classdesc"," * {@link AddressTranslator} implementation for multi-region EC2 deployments <strong>where clients are also deployed in EC2</strong>."," * <p>"," * Its distinctive feature is that it translates addresses according to the location of the Cassandra host:"," * </p>"," * <ul>"," *  <li>addresses in different EC2 regions (than the client) are unchanged</li>"," *  <li>addresses in the same EC2 region are <strong>translated to private IPs</strong></li>"," * </ul>"," * <p>"," * This optimizes network costs, because Amazon charges more for communication over public IPs."," * </p>"," * @constructor"," */","function EC2MultiRegionTranslator() {","","}","","util.inherits(EC2MultiRegionTranslator, AddressTranslator);","","/**"," * Addresses in the same EC2 region are translated to private IPs and addresses in"," * different EC2 regions (than the client) are unchanged"," */","EC2MultiRegionTranslator.prototype.translate = function (address, port, callback) {","  var newAddress = address;","  var self = this;","  var name;","  utils.series([","    function resolve(next) {","      dns.reverse(address, function (err, hostNames) {","        if (err) {","          return next(err);","        }","        if (!hostNames) {","          return next();","        }","        name = hostNames[0];","        next();","      });","    },","    function lookup(next) {","      if (!name) {","        return next();","      }","      dns.lookup(name, function (err, lookupAddress) {","        if (err) {","          return next(err);","        }","        newAddress = lookupAddress;","        next();","      });","    }], function (err) {","    if (err) {","      //there was an issue while doing dns resolution","      self.logError(address, err);","    }","    callback(newAddress + ':' + port);","  });","};","","/**"," * Log method called to log errors that occurred while performing dns resolution."," * You can assign your own method to the class instance to do proper logging."," * @param {String} address"," * @param {Error} err"," */","EC2MultiRegionTranslator.prototype.logError = function (address, err) {","  //Do nothing by default","};","","exports.AddressTranslator = AddressTranslator;","exports.EC2MultiRegionTranslator = EC2MultiRegionTranslator;"],"l":{"2":1,"3":1,"4":1,"30":1,"46":1,"47":0,"66":1,"70":1,"76":1,"77":0,"78":0,"79":0,"80":0,"82":0,"83":0,"84":0,"86":0,"87":0,"89":0,"90":0,"94":0,"95":0,"97":0,"98":0,"99":0,"101":0,"102":0,"105":0,"107":0,"109":0,"119":1,"123":1,"124":1}},"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/utils.js":{"path":"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/utils.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":1,"11":0,"12":0,"13":0,"14":1,"15":0,"16":0,"17":0,"18":0,"19":0,"20":1,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":1,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":1,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":1,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":1,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":1,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":1,"80":0,"81":0,"82":0,"83":0,"84":0,"85":1,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":1,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":1,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":1,"113":0,"114":0,"115":0,"116":0,"117":0,"118":1,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":1,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":1,"146":0,"147":0,"148":0,"149":0,"150":0,"151":1,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":1,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":1,"174":0,"175":0,"176":0,"177":0,"178":0,"179":1,"180":0,"181":0,"182":1,"183":0,"184":0,"185":0,"186":0,"187":0,"188":1,"189":0,"190":1,"191":0,"192":1,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":1,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":1,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":1,"224":0,"225":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":1,"235":0,"236":1,"237":0,"238":1,"239":0,"240":0,"241":0,"242":0,"243":0,"244":0,"245":0,"246":0,"247":0,"248":0,"249":0,"250":1,"251":0,"252":0,"253":0,"254":1,"255":0,"256":0,"257":0,"258":1,"259":0,"260":0,"261":0,"262":0,"263":0,"264":0,"265":0,"266":0,"267":1,"268":0,"269":0,"270":0,"271":0,"272":0,"273":0,"274":0,"275":0,"276":0,"277":0,"278":0,"279":0,"280":1,"281":0,"282":0,"283":0,"284":1,"285":0,"286":0,"287":0,"288":0,"289":0,"290":0,"291":0,"292":0,"293":0,"294":0,"295":0,"296":1,"297":0,"298":0,"299":0,"300":0,"301":0,"302":0,"303":0,"304":1,"305":0,"306":0,"307":0,"308":0,"309":0,"310":0,"311":0,"312":1,"313":0,"314":0,"315":0,"316":0,"317":0,"318":0,"319":1,"320":0,"321":0,"322":0,"323":0,"324":0,"325":0,"326":0,"327":0,"328":0,"329":0,"330":0,"331":0,"332":1,"333":0,"334":0,"335":0,"336":0,"337":0,"338":0,"339":0,"340":1,"341":0,"342":0,"343":0,"344":0,"345":0,"346":0,"347":0,"348":1,"349":0,"350":0,"351":0,"352":0,"353":0,"354":0,"355":0,"356":0,"357":0,"358":1,"359":0,"360":0,"361":0,"362":0,"363":0,"364":0,"365":0,"366":0,"367":0,"368":0,"369":0,"370":0,"371":0,"372":0,"373":0,"374":0,"375":0,"376":1,"377":0,"378":0,"379":0,"380":0,"381":0,"382":0,"383":0,"384":0,"385":1,"386":0,"387":0,"388":0,"389":0,"390":0,"391":0,"392":0,"393":0,"394":0,"395":0,"396":0,"397":1,"398":0,"399":0,"400":1,"401":0,"402":0,"403":0,"404":0,"405":0,"406":0,"407":0,"408":0,"409":0,"410":0,"411":0,"412":0,"413":0,"414":0,"415":0,"416":0,"417":0,"418":1,"419":1,"420":1,"421":1,"422":1,"423":1,"424":1,"425":1,"426":1,"427":1,"428":1,"429":1,"430":1,"431":1,"432":1,"433":1,"434":1,"435":1,"436":1,"437":1,"438":1,"439":1,"440":1,"441":1,"442":1,"443":1,"444":1,"445":1,"446":1,"447":1,"448":1,"449":1,"450":1,"451":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0,0,0,0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0,0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0,0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0],"56":[0,0],"57":[0,0],"58":[0,0],"59":[0,0],"60":[0,0],"61":[0,0],"62":[0,0],"63":[0,0],"64":[0,0],"65":[0,0],"66":[0,0],"67":[0,0],"68":[0,0],"69":[0,0],"70":[0,0],"71":[0,0],"72":[0,0],"73":[0,0],"74":[0,0],"75":[0,0],"76":[0,0],"77":[0,0],"78":[0,0],"79":[0,0],"80":[0,0],"81":[0,0],"82":[0,0],"83":[0,0],"84":[0,0],"85":[0,0],"86":[0,0],"87":[0,0],"88":[0,0],"89":[0,0],"90":[0,0],"91":[0,0],"92":[0,0],"93":[0,0],"94":[0,0],"95":[0,0],"96":[0,0],"97":[0,0],"98":[0,0],"99":[0,0],"100":[0,0],"101":[0,0],"102":[0,0],"103":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0},"fnMap":{"1":{"name":"noop","line":13,"loc":{"start":{"line":13,"column":0},"end":{"line":13,"column":16}}},"2":{"name":"copyBuffer","line":18,"loc":{"start":{"line":18,"column":0},"end":{"line":18,"column":25}}},"3":{"name":"fixStack","line":27,"loc":{"start":{"line":27,"column":0},"end":{"line":27,"column":37}}},"4":{"name":"log","line":40,"loc":{"start":{"line":40,"column":0},"end":{"line":40,"column":38}}},"5":{"name":"totalLength","line":55,"loc":{"start":{"line":55,"column":0},"end":{"line":55,"column":27}}},"6":{"name":"(anonymous_6)","line":60,"loc":{"start":{"line":60,"column":14},"end":{"line":60,"column":30}}},"7":{"name":"extend","line":71,"loc":{"start":{"line":71,"column":0},"end":{"line":71,"column":24}}},"8":{"name":"(anonymous_8)","line":73,"loc":{"start":{"line":73,"column":18},"end":{"line":73,"column":36}}},"9":{"name":"lowerCaseExtend","line":90,"loc":{"start":{"line":90,"column":0},"end":{"line":90,"column":33}}},"10":{"name":"(anonymous_10)","line":92,"loc":{"start":{"line":92,"column":18},"end":{"line":92,"column":36}}},"11":{"name":"deepExtend","line":107,"loc":{"start":{"line":107,"column":0},"end":{"line":107,"column":28}}},"12":{"name":"(anonymous_12)","line":109,"loc":{"start":{"line":109,"column":18},"end":{"line":109,"column":36}}},"13":{"name":"propCompare","line":139,"loc":{"start":{"line":139,"column":0},"end":{"line":139,"column":31}}},"14":{"name":"(anonymous_14)","line":140,"loc":{"start":{"line":140,"column":9},"end":{"line":140,"column":25}}},"15":{"name":"funcCompare","line":151,"loc":{"start":{"line":151,"column":0},"end":{"line":151,"column":37}}},"16":{"name":"(anonymous_16)","line":152,"loc":{"start":{"line":152,"column":10},"end":{"line":152,"column":26}}},"17":{"name":"arrayIterator","line":172,"loc":{"start":{"line":172,"column":0},"end":{"line":172,"column":29}}},"18":{"name":"(anonymous_18)","line":174,"loc":{"start":{"line":174,"column":18},"end":{"line":174,"column":30}}},"19":{"name":"iteratorToArray","line":187,"loc":{"start":{"line":187,"column":0},"end":{"line":187,"column":35}}},"20":{"name":"binarySearch","line":206,"loc":{"start":{"line":206,"column":0},"end":{"line":206,"column":45}}},"21":{"name":"insertSorted","line":235,"loc":{"start":{"line":235,"column":0},"end":{"line":235,"column":46}}},"22":{"name":"bindDomain","line":252,"loc":{"start":{"line":252,"column":0},"end":{"line":252,"column":36}}},"23":{"name":"adaptNamedParamsPrepared","line":271,"loc":{"start":{"line":271,"column":0},"end":{"line":271,"column":51}}},"24":{"name":"adaptNamedParamsWithHints","line":297,"loc":{"start":{"line":297,"column":0},"end":{"line":297,"column":52}}},"25":{"name":"stringRepeat","line":323,"loc":{"start":{"line":323,"column":0},"end":{"line":323,"column":34}}},"26":{"name":"objectValues","line":339,"loc":{"start":{"line":339,"column":0},"end":{"line":339,"column":27}}},"27":{"name":"promiseWrapper","line":359,"loc":{"start":{"line":359,"column":0},"end":{"line":359,"column":83}}},"28":{"name":"handlerWrapper","line":379,"loc":{"start":{"line":379,"column":17},"end":{"line":379,"column":51}}},"29":{"name":"defaultPromiseFactory","line":388,"loc":{"start":{"line":388,"column":0},"end":{"line":388,"column":40}}},"30":{"name":"executor","line":389,"loc":{"start":{"line":389,"column":21},"end":{"line":389,"column":56}}},"31":{"name":"handlerCallback","line":390,"loc":{"start":{"line":390,"column":12},"end":{"line":390,"column":50}}},"32":{"name":"HashSet","line":405,"loc":{"start":{"line":405,"column":0},"end":{"line":405,"column":19}}},"33":{"name":"(anonymous_33)","line":415,"loc":{"start":{"line":415,"column":24},"end":{"line":415,"column":39}}},"34":{"name":"(anonymous_34)","line":427,"loc":{"start":{"line":427,"column":29},"end":{"line":427,"column":44}}},"35":{"name":"(anonymous_35)","line":435,"loc":{"start":{"line":435,"column":28},"end":{"line":435,"column":40}}},"36":{"name":"each","line":444,"loc":{"start":{"line":444,"column":0},"end":{"line":444,"column":33}}},"37":{"name":"next","line":457,"loc":{"start":{"line":457,"column":2},"end":{"line":457,"column":21}}},"38":{"name":"eachSeries","line":476,"loc":{"start":{"line":476,"column":0},"end":{"line":476,"column":39}}},"39":{"name":"next","line":492,"loc":{"start":{"line":492,"column":2},"end":{"line":492,"column":21}}},"40":{"name":"(anonymous_40)","line":503,"loc":{"start":{"line":503,"column":30},"end":{"line":503,"column":42}}},"41":{"name":"forEachOf","line":516,"loc":{"start":{"line":516,"column":0},"end":{"line":516,"column":38}}},"42":{"name":"map","line":525,"loc":{"start":{"line":525,"column":0},"end":{"line":525,"column":32}}},"43":{"name":"mapEach","line":529,"loc":{"start":{"line":529,"column":0},"end":{"line":529,"column":46}}},"44":{"name":"invokeWithoutIndex","line":545,"loc":{"start":{"line":545,"column":2},"end":{"line":545,"column":33}}},"45":{"name":"mapItemCallback","line":546,"loc":{"start":{"line":546,"column":15},"end":{"line":546,"column":58}}},"46":{"name":"invokeWithIndex","line":552,"loc":{"start":{"line":552,"column":2},"end":{"line":552,"column":30}}},"47":{"name":"mapItemCallback","line":553,"loc":{"start":{"line":553,"column":18},"end":{"line":553,"column":61}}},"48":{"name":"next","line":559,"loc":{"start":{"line":559,"column":2},"end":{"line":559,"column":21}}},"49":{"name":"mapSeries","line":578,"loc":{"start":{"line":578,"column":0},"end":{"line":578,"column":38}}},"50":{"name":"invoke","line":595,"loc":{"start":{"line":595,"column":2},"end":{"line":595,"column":21}}},"51":{"name":"mapItemCallback","line":596,"loc":{"start":{"line":596,"column":15},"end":{"line":596,"column":58}}},"52":{"name":"next","line":602,"loc":{"start":{"line":602,"column":2},"end":{"line":602,"column":21}}},"53":{"name":"(anonymous_53)","line":614,"loc":{"start":{"line":614,"column":30},"end":{"line":614,"column":42}}},"54":{"name":"parallel","line":626,"loc":{"start":{"line":626,"column":0},"end":{"line":626,"column":33}}},"55":{"name":"next","line":636,"loc":{"start":{"line":636,"column":2},"end":{"line":636,"column":21}}},"56":{"name":"series","line":655,"loc":{"start":{"line":655,"column":0},"end":{"line":655,"column":31}}},"57":{"name":"next","line":663,"loc":{"start":{"line":663,"column":2},"end":{"line":663,"column":29}}},"58":{"name":"(anonymous_58)","line":671,"loc":{"start":{"line":671,"column":30},"end":{"line":671,"column":42}}},"59":{"name":"times","line":689,"loc":{"start":{"line":689,"column":0},"end":{"line":689,"column":46}}},"60":{"name":"next","line":699,"loc":{"start":{"line":699,"column":2},"end":{"line":699,"column":21}}},"61":{"name":"timesLimit","line":718,"loc":{"start":{"line":718,"column":0},"end":{"line":718,"column":58}}},"62":{"name":"next","line":729,"loc":{"start":{"line":729,"column":2},"end":{"line":729,"column":21}}},"63":{"name":"(anonymous_63)","line":748,"loc":{"start":{"line":748,"column":30},"end":{"line":748,"column":42}}},"64":{"name":"timesSeries","line":761,"loc":{"start":{"line":761,"column":0},"end":{"line":761,"column":56}}},"65":{"name":"next","line":772,"loc":{"start":{"line":772,"column":2},"end":{"line":772,"column":21}}},"66":{"name":"(anonymous_66)","line":785,"loc":{"start":{"line":785,"column":30},"end":{"line":785,"column":42}}},"67":{"name":"whilst","line":799,"loc":{"start":{"line":799,"column":0},"end":{"line":799,"column":41}}},"68":{"name":"next","line":802,"loc":{"start":{"line":802,"column":2},"end":{"line":802,"column":21}}},"69":{"name":"(anonymous_69)","line":811,"loc":{"start":{"line":811,"column":9},"end":{"line":811,"column":24}}},"70":{"name":"(anonymous_70)","line":826,"loc":{"start":{"line":826,"column":30},"end":{"line":826,"column":42}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":27}},"2":{"start":{"line":3,"column":0},"end":{"line":3,"column":33}},"3":{"start":{"line":4,"column":0},"end":{"line":4,"column":31}},"4":{"start":{"line":11,"column":0},"end":{"line":11,"column":30}},"5":{"start":{"line":13,"column":0},"end":{"line":13,"column":18}},"6":{"start":{"line":18,"column":0},"end":{"line":22,"column":1}},"7":{"start":{"line":19,"column":2},"end":{"line":19,"column":44}},"8":{"start":{"line":20,"column":2},"end":{"line":20,"column":25}},"9":{"start":{"line":21,"column":2},"end":{"line":21,"column":22}},"10":{"start":{"line":27,"column":0},"end":{"line":32,"column":1}},"11":{"start":{"line":28,"column":2},"end":{"line":30,"column":3}},"12":{"start":{"line":29,"column":4},"end":{"line":29,"column":90}},"13":{"start":{"line":31,"column":2},"end":{"line":31,"column":15}},"14":{"start":{"line":40,"column":0},"end":{"line":50,"column":1}},"15":{"start":{"line":41,"column":2},"end":{"line":48,"column":3}},"16":{"start":{"line":43,"column":4},"end":{"line":45,"column":5}},"17":{"start":{"line":44,"column":6},"end":{"line":44,"column":49}},"18":{"start":{"line":47,"column":4},"end":{"line":47,"column":46}},"19":{"start":{"line":49,"column":2},"end":{"line":49,"column":79}},"20":{"start":{"line":55,"column":0},"end":{"line":66,"column":1}},"21":{"start":{"line":56,"column":2},"end":{"line":58,"column":3}},"22":{"start":{"line":57,"column":4},"end":{"line":57,"column":25}},"23":{"start":{"line":59,"column":2},"end":{"line":59,"column":16}},"24":{"start":{"line":60,"column":2},"end":{"line":64,"column":5}},"25":{"start":{"line":61,"column":4},"end":{"line":61,"column":29}},"26":{"start":{"line":62,"column":4},"end":{"line":62,"column":33}},"27":{"start":{"line":63,"column":4},"end":{"line":63,"column":20}},"28":{"start":{"line":65,"column":2},"end":{"line":65,"column":15}},"29":{"start":{"line":71,"column":0},"end":{"line":88,"column":1}},"30":{"start":{"line":72,"column":2},"end":{"line":72,"column":57}},"31":{"start":{"line":73,"column":2},"end":{"line":86,"column":5}},"32":{"start":{"line":74,"column":4},"end":{"line":76,"column":5}},"33":{"start":{"line":75,"column":6},"end":{"line":75,"column":13}},"34":{"start":{"line":77,"column":4},"end":{"line":77,"column":35}},"35":{"start":{"line":78,"column":4},"end":{"line":85,"column":5}},"36":{"start":{"line":79,"column":6},"end":{"line":79,"column":24}},"37":{"start":{"line":80,"column":6},"end":{"line":80,"column":30}},"38":{"start":{"line":81,"column":6},"end":{"line":83,"column":7}},"39":{"start":{"line":82,"column":8},"end":{"line":82,"column":17}},"40":{"start":{"line":84,"column":6},"end":{"line":84,"column":26}},"41":{"start":{"line":87,"column":2},"end":{"line":87,"column":16}},"42":{"start":{"line":90,"column":0},"end":{"line":100,"column":1}},"43":{"start":{"line":91,"column":2},"end":{"line":91,"column":57}},"44":{"start":{"line":92,"column":2},"end":{"line":98,"column":5}},"45":{"start":{"line":93,"column":4},"end":{"line":97,"column":5}},"46":{"start":{"line":94,"column":6},"end":{"line":96,"column":7}},"47":{"start":{"line":95,"column":8},"end":{"line":95,"column":50}},"48":{"start":{"line":99,"column":2},"end":{"line":99,"column":16}},"49":{"start":{"line":107,"column":0},"end":{"line":137,"column":1}},"50":{"start":{"line":108,"column":2},"end":{"line":108,"column":57}},"51":{"start":{"line":109,"column":2},"end":{"line":135,"column":5}},"52":{"start":{"line":110,"column":4},"end":{"line":134,"column":5}},"53":{"start":{"line":111,"column":6},"end":{"line":113,"column":7}},"54":{"start":{"line":112,"column":8},"end":{"line":112,"column":17}},"55":{"start":{"line":114,"column":6},"end":{"line":114,"column":36}},"56":{"start":{"line":115,"column":6},"end":{"line":115,"column":43}},"57":{"start":{"line":121,"column":6},"end":{"line":133,"column":7}},"58":{"start":{"line":128,"column":8},"end":{"line":128,"column":36}},"59":{"start":{"line":132,"column":8},"end":{"line":132,"column":64}},"60":{"start":{"line":136,"column":2},"end":{"line":136,"column":16}},"61":{"start":{"line":139,"column":0},"end":{"line":149,"column":1}},"62":{"start":{"line":140,"column":2},"end":{"line":148,"column":4}},"63":{"start":{"line":141,"column":4},"end":{"line":143,"column":5}},"64":{"start":{"line":142,"column":6},"end":{"line":142,"column":15}},"65":{"start":{"line":144,"column":4},"end":{"line":146,"column":5}},"66":{"start":{"line":145,"column":6},"end":{"line":145,"column":16}},"67":{"start":{"line":147,"column":4},"end":{"line":147,"column":13}},"68":{"start":{"line":151,"column":0},"end":{"line":166,"column":1}},"69":{"start":{"line":152,"column":2},"end":{"line":165,"column":5}},"70":{"start":{"line":153,"column":4},"end":{"line":155,"column":5}},"71":{"start":{"line":154,"column":6},"end":{"line":154,"column":15}},"72":{"start":{"line":156,"column":4},"end":{"line":156,"column":42}},"73":{"start":{"line":157,"column":4},"end":{"line":157,"column":42}},"74":{"start":{"line":158,"column":4},"end":{"line":160,"column":5}},"75":{"start":{"line":159,"column":6},"end":{"line":159,"column":15}},"76":{"start":{"line":161,"column":4},"end":{"line":163,"column":5}},"77":{"start":{"line":162,"column":6},"end":{"line":162,"column":16}},"78":{"start":{"line":164,"column":4},"end":{"line":164,"column":13}},"79":{"start":{"line":172,"column":0},"end":{"line":180,"column":1}},"80":{"start":{"line":173,"column":2},"end":{"line":173,"column":16}},"81":{"start":{"line":174,"column":2},"end":{"line":179,"column":5}},"82":{"start":{"line":175,"column":4},"end":{"line":177,"column":5}},"83":{"start":{"line":176,"column":6},"end":{"line":176,"column":26}},"84":{"start":{"line":178,"column":4},"end":{"line":178,"column":47}},"85":{"start":{"line":187,"column":0},"end":{"line":195,"column":1}},"86":{"start":{"line":188,"column":2},"end":{"line":188,"column":18}},"87":{"start":{"line":189,"column":2},"end":{"line":189,"column":29}},"88":{"start":{"line":190,"column":2},"end":{"line":193,"column":3}},"89":{"start":{"line":191,"column":4},"end":{"line":191,"column":28}},"90":{"start":{"line":192,"column":4},"end":{"line":192,"column":27}},"91":{"start":{"line":194,"column":2},"end":{"line":194,"column":16}},"92":{"start":{"line":206,"column":0},"end":{"line":227,"column":1}},"93":{"start":{"line":207,"column":2},"end":{"line":207,"column":14}},"94":{"start":{"line":208,"column":2},"end":{"line":208,"column":26}},"95":{"start":{"line":210,"column":2},"end":{"line":225,"column":3}},"96":{"start":{"line":211,"column":4},"end":{"line":211,"column":33}},"97":{"start":{"line":212,"column":4},"end":{"line":212,"column":26}},"98":{"start":{"line":213,"column":4},"end":{"line":213,"column":39}},"99":{"start":{"line":214,"column":4},"end":{"line":224,"column":5}},"100":{"start":{"line":215,"column":6},"end":{"line":215,"column":20}},"101":{"start":{"line":217,"column":9},"end":{"line":224,"column":5}},"102":{"start":{"line":218,"column":6},"end":{"line":218,"column":21}},"103":{"start":{"line":223,"column":6},"end":{"line":223,"column":17}},"104":{"start":{"line":226,"column":2},"end":{"line":226,"column":14}},"105":{"start":{"line":235,"column":0},"end":{"line":244,"column":1}},"106":{"start":{"line":236,"column":2},"end":{"line":238,"column":3}},"107":{"start":{"line":237,"column":4},"end":{"line":237,"column":26}},"108":{"start":{"line":239,"column":2},"end":{"line":239,"column":54}},"109":{"start":{"line":240,"column":2},"end":{"line":242,"column":3}},"110":{"start":{"line":241,"column":4},"end":{"line":241,"column":25}},"111":{"start":{"line":243,"column":2},"end":{"line":243,"column":32}},"112":{"start":{"line":252,"column":0},"end":{"line":260,"column":1}},"113":{"start":{"line":253,"column":2},"end":{"line":255,"column":3}},"114":{"start":{"line":254,"column":4},"end":{"line":254,"column":92}},"115":{"start":{"line":256,"column":2},"end":{"line":258,"column":3}},"116":{"start":{"line":257,"column":4},"end":{"line":257,"column":45}},"117":{"start":{"line":259,"column":2},"end":{"line":259,"column":18}},"118":{"start":{"line":271,"column":0},"end":{"line":288,"column":1}},"119":{"start":{"line":272,"column":2},"end":{"line":275,"column":3}},"120":{"start":{"line":274,"column":4},"end":{"line":274,"column":41}},"121":{"start":{"line":276,"column":2},"end":{"line":276,"column":46}},"122":{"start":{"line":277,"column":2},"end":{"line":277,"column":39}},"123":{"start":{"line":278,"column":2},"end":{"line":278,"column":16}},"124":{"start":{"line":279,"column":2},"end":{"line":286,"column":3}},"125":{"start":{"line":280,"column":4},"end":{"line":280,"column":31}},"126":{"start":{"line":281,"column":4},"end":{"line":283,"column":5}},"127":{"start":{"line":282,"column":6},"end":{"line":282,"column":86}},"128":{"start":{"line":284,"column":4},"end":{"line":284,"column":34}},"129":{"start":{"line":285,"column":4},"end":{"line":285,"column":19}},"130":{"start":{"line":287,"column":2},"end":{"line":287,"column":44}},"131":{"start":{"line":297,"column":0},"end":{"line":315,"column":1}},"132":{"start":{"line":298,"column":2},"end":{"line":301,"column":3}},"133":{"start":{"line":300,"column":4},"end":{"line":300,"column":41}},"134":{"start":{"line":302,"column":2},"end":{"line":302,"column":33}},"135":{"start":{"line":303,"column":2},"end":{"line":303,"column":33}},"136":{"start":{"line":304,"column":2},"end":{"line":304,"column":43}},"137":{"start":{"line":305,"column":2},"end":{"line":305,"column":37}},"138":{"start":{"line":306,"column":2},"end":{"line":306,"column":53}},"139":{"start":{"line":307,"column":2},"end":{"line":312,"column":3}},"140":{"start":{"line":308,"column":4},"end":{"line":308,"column":22}},"141":{"start":{"line":310,"column":4},"end":{"line":310,"column":68}},"142":{"start":{"line":311,"column":4},"end":{"line":311,"column":30}},"143":{"start":{"line":313,"column":2},"end":{"line":313,"column":24}},"144":{"start":{"line":314,"column":2},"end":{"line":314,"column":44}},"145":{"start":{"line":323,"column":0},"end":{"line":331,"column":1}},"146":{"start":{"line":324,"column":2},"end":{"line":326,"column":3}},"147":{"start":{"line":325,"column":4},"end":{"line":325,"column":16}},"148":{"start":{"line":327,"column":2},"end":{"line":329,"column":3}},"149":{"start":{"line":328,"column":4},"end":{"line":328,"column":15}},"150":{"start":{"line":330,"column":2},"end":{"line":330,"column":40}},"151":{"start":{"line":339,"column":0},"end":{"line":349,"column":1}},"152":{"start":{"line":340,"column":2},"end":{"line":342,"column":3}},"153":{"start":{"line":341,"column":4},"end":{"line":341,"column":30}},"154":{"start":{"line":343,"column":2},"end":{"line":343,"column":30}},"155":{"start":{"line":344,"column":2},"end":{"line":344,"column":38}},"156":{"start":{"line":345,"column":2},"end":{"line":347,"column":3}},"157":{"start":{"line":346,"column":4},"end":{"line":346,"column":29}},"158":{"start":{"line":348,"column":2},"end":{"line":348,"column":16}},"159":{"start":{"line":359,"column":0},"end":{"line":382,"column":1}},"160":{"start":{"line":360,"column":2},"end":{"line":363,"column":3}},"161":{"start":{"line":362,"column":4},"end":{"line":362,"column":28}},"162":{"start":{"line":364,"column":2},"end":{"line":368,"column":3}},"163":{"start":{"line":366,"column":4},"end":{"line":366,"column":53}},"164":{"start":{"line":367,"column":4},"end":{"line":367,"column":21}},"165":{"start":{"line":369,"column":2},"end":{"line":369,"column":39}},"166":{"start":{"line":370,"column":2},"end":{"line":377,"column":3}},"167":{"start":{"line":371,"column":4},"end":{"line":375,"column":5}},"168":{"start":{"line":372,"column":6},"end":{"line":374,"column":55}},"169":{"start":{"line":376,"column":4},"end":{"line":376,"column":36}},"170":{"start":{"line":378,"column":2},"end":{"line":378,"column":18}},"171":{"start":{"line":379,"column":2},"end":{"line":381,"column":5}},"172":{"start":{"line":380,"column":4},"end":{"line":380,"column":33}},"173":{"start":{"line":388,"column":0},"end":{"line":397,"column":1}},"174":{"start":{"line":389,"column":2},"end":{"line":396,"column":5}},"175":{"start":{"line":390,"column":4},"end":{"line":395,"column":7}},"176":{"start":{"line":391,"column":6},"end":{"line":393,"column":7}},"177":{"start":{"line":392,"column":8},"end":{"line":392,"column":27}},"178":{"start":{"line":394,"column":6},"end":{"line":394,"column":22}},"179":{"start":{"line":405,"column":0},"end":{"line":408,"column":1}},"180":{"start":{"line":406,"column":2},"end":{"line":406,"column":18}},"181":{"start":{"line":407,"column":2},"end":{"line":407,"column":18}},"182":{"start":{"line":415,"column":0},"end":{"line":422,"column":2}},"183":{"start":{"line":416,"column":2},"end":{"line":418,"column":3}},"184":{"start":{"line":417,"column":4},"end":{"line":417,"column":17}},"185":{"start":{"line":419,"column":2},"end":{"line":419,"column":25}},"186":{"start":{"line":420,"column":2},"end":{"line":420,"column":16}},"187":{"start":{"line":421,"column":2},"end":{"line":421,"column":14}},"188":{"start":{"line":427,"column":0},"end":{"line":429,"column":2}},"189":{"start":{"line":428,"column":2},"end":{"line":428,"column":34}},"190":{"start":{"line":435,"column":0},"end":{"line":437,"column":2}},"191":{"start":{"line":436,"column":2},"end":{"line":436,"column":33}},"192":{"start":{"line":444,"column":0},"end":{"line":469,"column":1}},"193":{"start":{"line":445,"column":2},"end":{"line":447,"column":3}},"194":{"start":{"line":446,"column":4},"end":{"line":446,"column":59}},"195":{"start":{"line":448,"column":2},"end":{"line":448,"column":30}},"196":{"start":{"line":449,"column":2},"end":{"line":449,"column":26}},"197":{"start":{"line":450,"column":2},"end":{"line":452,"column":3}},"198":{"start":{"line":451,"column":4},"end":{"line":451,"column":22}},"199":{"start":{"line":453,"column":2},"end":{"line":453,"column":20}},"200":{"start":{"line":454,"column":2},"end":{"line":456,"column":3}},"201":{"start":{"line":455,"column":4},"end":{"line":455,"column":21}},"202":{"start":{"line":457,"column":2},"end":{"line":468,"column":3}},"203":{"start":{"line":458,"column":4},"end":{"line":463,"column":5}},"204":{"start":{"line":459,"column":6},"end":{"line":459,"column":24}},"205":{"start":{"line":460,"column":6},"end":{"line":460,"column":22}},"206":{"start":{"line":461,"column":6},"end":{"line":461,"column":14}},"207":{"start":{"line":462,"column":6},"end":{"line":462,"column":13}},"208":{"start":{"line":464,"column":4},"end":{"line":466,"column":5}},"209":{"start":{"line":465,"column":6},"end":{"line":465,"column":13}},"210":{"start":{"line":467,"column":4},"end":{"line":467,"column":15}},"211":{"start":{"line":476,"column":0},"end":{"line":509,"column":1}},"212":{"start":{"line":477,"column":2},"end":{"line":479,"column":3}},"213":{"start":{"line":478,"column":4},"end":{"line":478,"column":59}},"214":{"start":{"line":480,"column":2},"end":{"line":480,"column":30}},"215":{"start":{"line":481,"column":2},"end":{"line":481,"column":26}},"216":{"start":{"line":482,"column":2},"end":{"line":484,"column":3}},"217":{"start":{"line":483,"column":4},"end":{"line":483,"column":22}},"218":{"start":{"line":485,"column":2},"end":{"line":485,"column":11}},"219":{"start":{"line":486,"column":2},"end":{"line":486,"column":16}},"220":{"start":{"line":487,"column":2},"end":{"line":487,"column":19}},"221":{"start":{"line":488,"column":2},"end":{"line":490,"column":3}},"222":{"start":{"line":489,"column":4},"end":{"line":489,"column":17}},"223":{"start":{"line":492,"column":2},"end":{"line":508,"column":3}},"224":{"start":{"line":493,"column":4},"end":{"line":495,"column":5}},"225":{"start":{"line":494,"column":6},"end":{"line":494,"column":27}},"226":{"start":{"line":496,"column":4},"end":{"line":498,"column":5}},"227":{"start":{"line":497,"column":6},"end":{"line":497,"column":24}},"228":{"start":{"line":499,"column":4},"end":{"line":501,"column":5}},"229":{"start":{"line":500,"column":6},"end":{"line":500,"column":18}},"230":{"start":{"line":502,"column":4},"end":{"line":506,"column":5}},"231":{"start":{"line":503,"column":6},"end":{"line":505,"column":9}},"232":{"start":{"line":504,"column":8},"end":{"line":504,"column":31}},"233":{"start":{"line":507,"column":4},"end":{"line":507,"column":27}},"234":{"start":{"line":516,"column":0},"end":{"line":518,"column":1}},"235":{"start":{"line":517,"column":2},"end":{"line":517,"column":42}},"236":{"start":{"line":525,"column":0},"end":{"line":527,"column":1}},"237":{"start":{"line":526,"column":2},"end":{"line":526,"column":43}},"238":{"start":{"line":529,"column":0},"end":{"line":571,"column":1}},"239":{"start":{"line":530,"column":2},"end":{"line":532,"column":3}},"240":{"start":{"line":531,"column":4},"end":{"line":531,"column":60}},"241":{"start":{"line":533,"column":2},"end":{"line":533,"column":30}},"242":{"start":{"line":534,"column":2},"end":{"line":534,"column":26}},"243":{"start":{"line":535,"column":2},"end":{"line":537,"column":3}},"244":{"start":{"line":536,"column":4},"end":{"line":536,"column":30}},"245":{"start":{"line":538,"column":2},"end":{"line":538,"column":33}},"246":{"start":{"line":539,"column":2},"end":{"line":539,"column":20}},"247":{"start":{"line":540,"column":2},"end":{"line":540,"column":63}},"248":{"start":{"line":541,"column":2},"end":{"line":543,"column":3}},"249":{"start":{"line":542,"column":4},"end":{"line":542,"column":14}},"250":{"start":{"line":545,"column":2},"end":{"line":550,"column":3}},"251":{"start":{"line":546,"column":4},"end":{"line":549,"column":7}},"252":{"start":{"line":547,"column":6},"end":{"line":547,"column":30}},"253":{"start":{"line":548,"column":6},"end":{"line":548,"column":16}},"254":{"start":{"line":552,"column":2},"end":{"line":557,"column":3}},"255":{"start":{"line":553,"column":4},"end":{"line":556,"column":7}},"256":{"start":{"line":554,"column":6},"end":{"line":554,"column":30}},"257":{"start":{"line":555,"column":6},"end":{"line":555,"column":16}},"258":{"start":{"line":559,"column":2},"end":{"line":570,"column":3}},"259":{"start":{"line":560,"column":4},"end":{"line":565,"column":5}},"260":{"start":{"line":561,"column":6},"end":{"line":561,"column":24}},"261":{"start":{"line":562,"column":6},"end":{"line":562,"column":22}},"262":{"start":{"line":563,"column":6},"end":{"line":563,"column":14}},"263":{"start":{"line":564,"column":6},"end":{"line":564,"column":13}},"264":{"start":{"line":566,"column":4},"end":{"line":568,"column":5}},"265":{"start":{"line":567,"column":6},"end":{"line":567,"column":13}},"266":{"start":{"line":569,"column":4},"end":{"line":569,"column":27}},"267":{"start":{"line":578,"column":0},"end":{"line":620,"column":1}},"268":{"start":{"line":579,"column":2},"end":{"line":581,"column":3}},"269":{"start":{"line":580,"column":4},"end":{"line":580,"column":60}},"270":{"start":{"line":582,"column":2},"end":{"line":582,"column":30}},"271":{"start":{"line":583,"column":2},"end":{"line":583,"column":26}},"272":{"start":{"line":584,"column":2},"end":{"line":586,"column":3}},"273":{"start":{"line":585,"column":4},"end":{"line":585,"column":30}},"274":{"start":{"line":587,"column":2},"end":{"line":587,"column":33}},"275":{"start":{"line":588,"column":2},"end":{"line":588,"column":16}},"276":{"start":{"line":589,"column":2},"end":{"line":589,"column":11}},"277":{"start":{"line":590,"column":2},"end":{"line":590,"column":12}},"278":{"start":{"line":591,"column":2},"end":{"line":593,"column":3}},"279":{"start":{"line":592,"column":4},"end":{"line":592,"column":17}},"280":{"start":{"line":595,"column":2},"end":{"line":600,"column":3}},"281":{"start":{"line":596,"column":4},"end":{"line":599,"column":7}},"282":{"start":{"line":597,"column":6},"end":{"line":597,"column":30}},"283":{"start":{"line":598,"column":6},"end":{"line":598,"column":16}},"284":{"start":{"line":602,"column":2},"end":{"line":619,"column":3}},"285":{"start":{"line":603,"column":4},"end":{"line":605,"column":5}},"286":{"start":{"line":604,"column":6},"end":{"line":604,"column":27}},"287":{"start":{"line":606,"column":4},"end":{"line":608,"column":5}},"288":{"start":{"line":607,"column":6},"end":{"line":607,"column":36}},"289":{"start":{"line":609,"column":4},"end":{"line":611,"column":5}},"290":{"start":{"line":610,"column":6},"end":{"line":610,"column":18}},"291":{"start":{"line":612,"column":4},"end":{"line":612,"column":18}},"292":{"start":{"line":613,"column":4},"end":{"line":617,"column":5}},"293":{"start":{"line":614,"column":6},"end":{"line":616,"column":9}},"294":{"start":{"line":615,"column":8},"end":{"line":615,"column":18}},"295":{"start":{"line":618,"column":4},"end":{"line":618,"column":18}},"296":{"start":{"line":626,"column":0},"end":{"line":647,"column":1}},"297":{"start":{"line":627,"column":2},"end":{"line":629,"column":3}},"298":{"start":{"line":628,"column":4},"end":{"line":628,"column":60}},"299":{"start":{"line":630,"column":2},"end":{"line":630,"column":30}},"300":{"start":{"line":631,"column":2},"end":{"line":631,"column":26}},"301":{"start":{"line":632,"column":2},"end":{"line":632,"column":20}},"302":{"start":{"line":633,"column":2},"end":{"line":635,"column":3}},"303":{"start":{"line":634,"column":4},"end":{"line":634,"column":17}},"304":{"start":{"line":636,"column":2},"end":{"line":646,"column":3}},"305":{"start":{"line":637,"column":4},"end":{"line":641,"column":5}},"306":{"start":{"line":638,"column":6},"end":{"line":638,"column":24}},"307":{"start":{"line":639,"column":6},"end":{"line":639,"column":22}},"308":{"start":{"line":640,"column":6},"end":{"line":640,"column":21}},"309":{"start":{"line":642,"column":4},"end":{"line":644,"column":5}},"310":{"start":{"line":643,"column":6},"end":{"line":643,"column":13}},"311":{"start":{"line":645,"column":4},"end":{"line":645,"column":15}},"312":{"start":{"line":655,"column":0},"end":{"line":682,"column":1}},"313":{"start":{"line":656,"column":2},"end":{"line":658,"column":3}},"314":{"start":{"line":657,"column":4},"end":{"line":657,"column":60}},"315":{"start":{"line":659,"column":2},"end":{"line":659,"column":30}},"316":{"start":{"line":660,"column":2},"end":{"line":660,"column":16}},"317":{"start":{"line":661,"column":2},"end":{"line":661,"column":11}},"318":{"start":{"line":662,"column":2},"end":{"line":662,"column":9}},"319":{"start":{"line":663,"column":2},"end":{"line":681,"column":3}},"320":{"start":{"line":664,"column":4},"end":{"line":666,"column":5}},"321":{"start":{"line":665,"column":6},"end":{"line":665,"column":27}},"322":{"start":{"line":667,"column":4},"end":{"line":669,"column":5}},"323":{"start":{"line":668,"column":6},"end":{"line":668,"column":36}},"324":{"start":{"line":670,"column":4},"end":{"line":677,"column":5}},"325":{"start":{"line":671,"column":6},"end":{"line":676,"column":9}},"326":{"start":{"line":673,"column":8},"end":{"line":673,"column":20}},"327":{"start":{"line":674,"column":8},"end":{"line":674,"column":27}},"328":{"start":{"line":675,"column":8},"end":{"line":675,"column":21}},"329":{"start":{"line":678,"column":4},"end":{"line":678,"column":16}},"330":{"start":{"line":679,"column":4},"end":{"line":679,"column":23}},"331":{"start":{"line":680,"column":4},"end":{"line":680,"column":17}},"332":{"start":{"line":689,"column":0},"end":{"line":710,"column":1}},"333":{"start":{"line":690,"column":2},"end":{"line":690,"column":30}},"334":{"start":{"line":691,"column":2},"end":{"line":691,"column":17}},"335":{"start":{"line":692,"column":2},"end":{"line":694,"column":3}},"336":{"start":{"line":693,"column":4},"end":{"line":693,"column":22}},"337":{"start":{"line":695,"column":2},"end":{"line":695,"column":20}},"338":{"start":{"line":696,"column":2},"end":{"line":698,"column":3}},"339":{"start":{"line":697,"column":4},"end":{"line":697,"column":26}},"340":{"start":{"line":699,"column":2},"end":{"line":709,"column":3}},"341":{"start":{"line":700,"column":4},"end":{"line":704,"column":5}},"342":{"start":{"line":701,"column":6},"end":{"line":701,"column":24}},"343":{"start":{"line":702,"column":6},"end":{"line":702,"column":22}},"344":{"start":{"line":703,"column":6},"end":{"line":703,"column":21}},"345":{"start":{"line":705,"column":4},"end":{"line":707,"column":5}},"346":{"start":{"line":706,"column":6},"end":{"line":706,"column":13}},"347":{"start":{"line":708,"column":4},"end":{"line":708,"column":15}},"348":{"start":{"line":718,"column":0},"end":{"line":754,"column":1}},"349":{"start":{"line":719,"column":2},"end":{"line":719,"column":30}},"350":{"start":{"line":720,"column":2},"end":{"line":720,"column":33}},"351":{"start":{"line":721,"column":2},"end":{"line":721,"column":24}},"352":{"start":{"line":722,"column":2},"end":{"line":722,"column":8}},"353":{"start":{"line":723,"column":2},"end":{"line":723,"column":20}},"354":{"start":{"line":724,"column":2},"end":{"line":726,"column":3}},"355":{"start":{"line":725,"column":4},"end":{"line":725,"column":26}},"356":{"start":{"line":727,"column":2},"end":{"line":727,"column":9}},"357":{"start":{"line":728,"column":2},"end":{"line":728,"column":23}},"358":{"start":{"line":729,"column":2},"end":{"line":753,"column":3}},"359":{"start":{"line":730,"column":4},"end":{"line":735,"column":5}},"360":{"start":{"line":731,"column":6},"end":{"line":731,"column":24}},"361":{"start":{"line":732,"column":6},"end":{"line":732,"column":22}},"362":{"start":{"line":733,"column":6},"end":{"line":733,"column":14}},"363":{"start":{"line":734,"column":6},"end":{"line":734,"column":13}},"364":{"start":{"line":736,"column":4},"end":{"line":738,"column":5}},"365":{"start":{"line":737,"column":6},"end":{"line":737,"column":24}},"366":{"start":{"line":739,"column":4},"end":{"line":739,"column":12}},"367":{"start":{"line":740,"column":4},"end":{"line":742,"column":5}},"368":{"start":{"line":741,"column":6},"end":{"line":741,"column":13}},"369":{"start":{"line":743,"column":4},"end":{"line":745,"column":5}},"370":{"start":{"line":744,"column":6},"end":{"line":744,"column":22}},"371":{"start":{"line":746,"column":4},"end":{"line":751,"column":5}},"372":{"start":{"line":747,"column":6},"end":{"line":747,"column":31}},"373":{"start":{"line":748,"column":6},"end":{"line":750,"column":9}},"374":{"start":{"line":749,"column":8},"end":{"line":749,"column":41}},"375":{"start":{"line":752,"column":4},"end":{"line":752,"column":30}},"376":{"start":{"line":761,"column":0},"end":{"line":792,"column":1}},"377":{"start":{"line":762,"column":2},"end":{"line":762,"column":17}},"378":{"start":{"line":763,"column":2},"end":{"line":765,"column":3}},"379":{"start":{"line":764,"column":4},"end":{"line":764,"column":22}},"380":{"start":{"line":766,"column":2},"end":{"line":766,"column":16}},"381":{"start":{"line":767,"column":2},"end":{"line":767,"column":11}},"382":{"start":{"line":768,"column":2},"end":{"line":768,"column":28}},"383":{"start":{"line":769,"column":2},"end":{"line":771,"column":3}},"384":{"start":{"line":770,"column":4},"end":{"line":770,"column":17}},"385":{"start":{"line":772,"column":2},"end":{"line":791,"column":3}},"386":{"start":{"line":773,"column":4},"end":{"line":775,"column":5}},"387":{"start":{"line":774,"column":6},"end":{"line":774,"column":27}},"388":{"start":{"line":776,"column":4},"end":{"line":778,"column":5}},"389":{"start":{"line":777,"column":6},"end":{"line":777,"column":24}},"390":{"start":{"line":779,"column":4},"end":{"line":781,"column":5}},"391":{"start":{"line":780,"column":6},"end":{"line":780,"column":18}},"392":{"start":{"line":782,"column":4},"end":{"line":782,"column":20}},"393":{"start":{"line":783,"column":4},"end":{"line":788,"column":5}},"394":{"start":{"line":785,"column":6},"end":{"line":787,"column":9}},"395":{"start":{"line":786,"column":8},"end":{"line":786,"column":34}},"396":{"start":{"line":790,"column":4},"end":{"line":790,"column":30}},"397":{"start":{"line":799,"column":0},"end":{"line":833,"column":1}},"398":{"start":{"line":800,"column":2},"end":{"line":800,"column":15}},"399":{"start":{"line":801,"column":2},"end":{"line":801,"column":9}},"400":{"start":{"line":802,"column":2},"end":{"line":832,"column":3}},"401":{"start":{"line":803,"column":4},"end":{"line":805,"column":5}},"402":{"start":{"line":804,"column":6},"end":{"line":804,"column":27}},"403":{"start":{"line":806,"column":4},"end":{"line":808,"column":5}},"404":{"start":{"line":807,"column":6},"end":{"line":807,"column":24}},"405":{"start":{"line":809,"column":4},"end":{"line":823,"column":5}},"406":{"start":{"line":810,"column":6},"end":{"line":810,"column":15}},"407":{"start":{"line":811,"column":6},"end":{"line":817,"column":9}},"408":{"start":{"line":812,"column":8},"end":{"line":815,"column":9}},"409":{"start":{"line":814,"column":10},"end":{"line":814,"column":19}},"410":{"start":{"line":816,"column":8},"end":{"line":816,"column":18}},"411":{"start":{"line":818,"column":6},"end":{"line":821,"column":7}},"412":{"start":{"line":820,"column":8},"end":{"line":820,"column":17}},"413":{"start":{"line":822,"column":6},"end":{"line":822,"column":13}},"414":{"start":{"line":824,"column":4},"end":{"line":829,"column":5}},"415":{"start":{"line":826,"column":6},"end":{"line":828,"column":9}},"416":{"start":{"line":827,"column":8},"end":{"line":827,"column":17}},"417":{"start":{"line":831,"column":4},"end":{"line":831,"column":13}},"418":{"start":{"line":835,"column":0},"end":{"line":835,"column":60}},"419":{"start":{"line":836,"column":0},"end":{"line":836,"column":62}},"420":{"start":{"line":837,"column":0},"end":{"line":837,"column":38}},"421":{"start":{"line":838,"column":0},"end":{"line":838,"column":36}},"422":{"start":{"line":839,"column":0},"end":{"line":839,"column":32}},"423":{"start":{"line":840,"column":0},"end":{"line":840,"column":32}},"424":{"start":{"line":841,"column":0},"end":{"line":841,"column":32}},"425":{"start":{"line":842,"column":0},"end":{"line":842,"column":20}},"426":{"start":{"line":843,"column":0},"end":{"line":843,"column":32}},"427":{"start":{"line":845,"column":0},"end":{"line":845,"column":39}},"428":{"start":{"line":847,"column":0},"end":{"line":847,"column":40}},"429":{"start":{"line":848,"column":0},"end":{"line":848,"column":24}},"430":{"start":{"line":849,"column":0},"end":{"line":849,"column":28}},"431":{"start":{"line":850,"column":0},"end":{"line":850,"column":30}},"432":{"start":{"line":851,"column":0},"end":{"line":851,"column":34}},"433":{"start":{"line":852,"column":0},"end":{"line":852,"column":36}},"434":{"start":{"line":853,"column":0},"end":{"line":853,"column":42}},"435":{"start":{"line":854,"column":0},"end":{"line":854,"column":18}},"436":{"start":{"line":855,"column":0},"end":{"line":855,"column":18}},"437":{"start":{"line":856,"column":0},"end":{"line":856,"column":30}},"438":{"start":{"line":857,"column":0},"end":{"line":857,"column":24}},"439":{"start":{"line":858,"column":0},"end":{"line":858,"column":20}},"440":{"start":{"line":859,"column":0},"end":{"line":859,"column":36}},"441":{"start":{"line":860,"column":0},"end":{"line":860,"column":28}},"442":{"start":{"line":861,"column":0},"end":{"line":861,"column":40}},"443":{"start":{"line":862,"column":0},"end":{"line":862,"column":34}},"444":{"start":{"line":863,"column":0},"end":{"line":863,"column":24}},"445":{"start":{"line":864,"column":0},"end":{"line":864,"column":36}},"446":{"start":{"line":865,"column":0},"end":{"line":865,"column":22}},"447":{"start":{"line":866,"column":0},"end":{"line":866,"column":32}},"448":{"start":{"line":867,"column":0},"end":{"line":867,"column":34}},"449":{"start":{"line":868,"column":0},"end":{"line":868,"column":34}},"450":{"start":{"line":869,"column":0},"end":{"line":869,"column":24}},"451":{"start":{"line":870,"column":0},"end":{"line":870,"column":26}}},"branchMap":{"1":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":2},"end":{"line":28,"column":2}},{"start":{"line":28,"column":2},"end":{"line":28,"column":2}}]},"2":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":2},"end":{"line":41,"column":2}},{"start":{"line":41,"column":2},"end":{"line":41,"column":2}}]},"3":{"line":43,"type":"if","locations":[{"start":{"line":43,"column":4},"end":{"line":43,"column":4}},{"start":{"line":43,"column":4},"end":{"line":43,"column":4}}]},"4":{"line":43,"type":"binary-expr","locations":[{"start":{"line":43,"column":8},"end":{"line":43,"column":21}},{"start":{"line":43,"column":25},"end":{"line":43,"column":49}}]},"5":{"line":49,"type":"binary-expr","locations":[{"start":{"line":49,"column":60},"end":{"line":49,"column":71}},{"start":{"line":49,"column":75},"end":{"line":49,"column":77}}]},"6":{"line":56,"type":"if","locations":[{"start":{"line":56,"column":2},"end":{"line":56,"column":2}},{"start":{"line":56,"column":2},"end":{"line":56,"column":2}}]},"7":{"line":62,"type":"cond-expr","locations":[{"start":{"line":62,"column":22},"end":{"line":62,"column":28}},{"start":{"line":62,"column":31},"end":{"line":62,"column":32}}]},"8":{"line":74,"type":"if","locations":[{"start":{"line":74,"column":4},"end":{"line":74,"column":4}},{"start":{"line":74,"column":4},"end":{"line":74,"column":4}}]},"9":{"line":81,"type":"if","locations":[{"start":{"line":81,"column":6},"end":{"line":81,"column":6}},{"start":{"line":81,"column":6},"end":{"line":81,"column":6}}]},"10":{"line":94,"type":"if","locations":[{"start":{"line":94,"column":6},"end":{"line":94,"column":6}},{"start":{"line":94,"column":6},"end":{"line":94,"column":6}}]},"11":{"line":111,"type":"if","locations":[{"start":{"line":111,"column":6},"end":{"line":111,"column":6}},{"start":{"line":111,"column":6},"end":{"line":111,"column":6}}]},"12":{"line":121,"type":"if","locations":[{"start":{"line":121,"column":6},"end":{"line":121,"column":6}},{"start":{"line":121,"column":6},"end":{"line":121,"column":6}}]},"13":{"line":121,"type":"binary-expr","locations":[{"start":{"line":121,"column":10},"end":{"line":121,"column":21}},{"start":{"line":122,"column":8},"end":{"line":122,"column":31}},{"start":{"line":123,"column":8},"end":{"line":123,"column":31}},{"start":{"line":124,"column":8},"end":{"line":124,"column":32}},{"start":{"line":125,"column":8},"end":{"line":125,"column":31}},{"start":{"line":126,"column":8},"end":{"line":126,"column":48}}]},"14":{"line":141,"type":"if","locations":[{"start":{"line":141,"column":4},"end":{"line":141,"column":4}},{"start":{"line":141,"column":4},"end":{"line":141,"column":4}}]},"15":{"line":144,"type":"if","locations":[{"start":{"line":144,"column":4},"end":{"line":144,"column":4}},{"start":{"line":144,"column":4},"end":{"line":144,"column":4}}]},"16":{"line":153,"type":"if","locations":[{"start":{"line":153,"column":4},"end":{"line":153,"column":4}},{"start":{"line":153,"column":4},"end":{"line":153,"column":4}}]},"17":{"line":158,"type":"if","locations":[{"start":{"line":158,"column":4},"end":{"line":158,"column":4}},{"start":{"line":158,"column":4},"end":{"line":158,"column":4}}]},"18":{"line":161,"type":"if","locations":[{"start":{"line":161,"column":4},"end":{"line":161,"column":4}},{"start":{"line":161,"column":4},"end":{"line":161,"column":4}}]},"19":{"line":175,"type":"if","locations":[{"start":{"line":175,"column":4},"end":{"line":175,"column":4}},{"start":{"line":175,"column":4},"end":{"line":175,"column":4}}]},"20":{"line":214,"type":"if","locations":[{"start":{"line":214,"column":4},"end":{"line":214,"column":4}},{"start":{"line":214,"column":4},"end":{"line":214,"column":4}}]},"21":{"line":217,"type":"if","locations":[{"start":{"line":217,"column":9},"end":{"line":217,"column":9}},{"start":{"line":217,"column":9},"end":{"line":217,"column":9}}]},"22":{"line":236,"type":"if","locations":[{"start":{"line":236,"column":2},"end":{"line":236,"column":2}},{"start":{"line":236,"column":2},"end":{"line":236,"column":2}}]},"23":{"line":240,"type":"if","locations":[{"start":{"line":240,"column":2},"end":{"line":240,"column":2}},{"start":{"line":240,"column":2},"end":{"line":240,"column":2}}]},"24":{"line":253,"type":"if","locations":[{"start":{"line":253,"column":2},"end":{"line":253,"column":2}},{"start":{"line":253,"column":2},"end":{"line":253,"column":2}}]},"25":{"line":254,"type":"binary-expr","locations":[{"start":{"line":254,"column":71},"end":{"line":254,"column":75}},{"start":{"line":254,"column":79},"end":{"line":254,"column":89}}]},"26":{"line":256,"type":"if","locations":[{"start":{"line":256,"column":2},"end":{"line":256,"column":2}},{"start":{"line":256,"column":2},"end":{"line":256,"column":2}}]},"27":{"line":272,"type":"if","locations":[{"start":{"line":272,"column":2},"end":{"line":272,"column":2}},{"start":{"line":272,"column":2},"end":{"line":272,"column":2}}]},"28":{"line":272,"type":"binary-expr","locations":[{"start":{"line":272,"column":6},"end":{"line":272,"column":13}},{"start":{"line":272,"column":17},"end":{"line":272,"column":37}},{"start":{"line":272,"column":41},"end":{"line":272,"column":49}},{"start":{"line":272,"column":53},"end":{"line":272,"column":73}}]},"29":{"line":281,"type":"if","locations":[{"start":{"line":281,"column":4},"end":{"line":281,"column":4}},{"start":{"line":281,"column":4},"end":{"line":281,"column":4}}]},"30":{"line":298,"type":"if","locations":[{"start":{"line":298,"column":2},"end":{"line":298,"column":2}},{"start":{"line":298,"column":2},"end":{"line":298,"column":2}}]},"31":{"line":298,"type":"binary-expr","locations":[{"start":{"line":298,"column":6},"end":{"line":298,"column":13}},{"start":{"line":298,"column":17},"end":{"line":298,"column":37}}]},"32":{"line":306,"type":"binary-expr","locations":[{"start":{"line":306,"column":18},"end":{"line":306,"column":31}},{"start":{"line":306,"column":35},"end":{"line":306,"column":52}}]},"33":{"line":324,"type":"if","locations":[{"start":{"line":324,"column":2},"end":{"line":324,"column":2}},{"start":{"line":324,"column":2},"end":{"line":324,"column":2}}]},"34":{"line":324,"type":"binary-expr","locations":[{"start":{"line":324,"column":6},"end":{"line":324,"column":12}},{"start":{"line":324,"column":16},"end":{"line":324,"column":25}}]},"35":{"line":327,"type":"if","locations":[{"start":{"line":327,"column":2},"end":{"line":327,"column":2}},{"start":{"line":327,"column":2},"end":{"line":327,"column":2}}]},"36":{"line":340,"type":"if","locations":[{"start":{"line":340,"column":2},"end":{"line":340,"column":2}},{"start":{"line":340,"column":2},"end":{"line":340,"column":2}}]},"37":{"line":360,"type":"if","locations":[{"start":{"line":360,"column":2},"end":{"line":360,"column":2}},{"start":{"line":360,"column":2},"end":{"line":360,"column":2}}]},"38":{"line":360,"type":"binary-expr","locations":[{"start":{"line":360,"column":6},"end":{"line":360,"column":27}},{"start":{"line":360,"column":31},"end":{"line":360,"column":48}},{"start":{"line":360,"column":52},"end":{"line":360,"column":75}},{"start":{"line":360,"column":79},"end":{"line":360,"column":109}}]},"39":{"line":364,"type":"if","locations":[{"start":{"line":364,"column":2},"end":{"line":364,"column":2}},{"start":{"line":364,"column":2},"end":{"line":364,"column":2}}]},"40":{"line":370,"type":"if","locations":[{"start":{"line":370,"column":2},"end":{"line":370,"column":2}},{"start":{"line":370,"column":2},"end":{"line":370,"column":2}}]},"41":{"line":371,"type":"if","locations":[{"start":{"line":371,"column":4},"end":{"line":371,"column":4}},{"start":{"line":371,"column":4},"end":{"line":371,"column":4}}]},"42":{"line":391,"type":"if","locations":[{"start":{"line":391,"column":6},"end":{"line":391,"column":6}},{"start":{"line":391,"column":6},"end":{"line":391,"column":6}}]},"43":{"line":416,"type":"if","locations":[{"start":{"line":416,"column":2},"end":{"line":416,"column":2}},{"start":{"line":416,"column":2},"end":{"line":416,"column":2}}]},"44":{"line":445,"type":"if","locations":[{"start":{"line":445,"column":2},"end":{"line":445,"column":2}},{"start":{"line":445,"column":2},"end":{"line":445,"column":2}}]},"45":{"line":448,"type":"binary-expr","locations":[{"start":{"line":448,"column":13},"end":{"line":448,"column":21}},{"start":{"line":448,"column":25},"end":{"line":448,"column":29}}]},"46":{"line":450,"type":"if","locations":[{"start":{"line":450,"column":2},"end":{"line":450,"column":2}},{"start":{"line":450,"column":2},"end":{"line":450,"column":2}}]},"47":{"line":458,"type":"if","locations":[{"start":{"line":458,"column":4},"end":{"line":458,"column":4}},{"start":{"line":458,"column":4},"end":{"line":458,"column":4}}]},"48":{"line":464,"type":"if","locations":[{"start":{"line":464,"column":4},"end":{"line":464,"column":4}},{"start":{"line":464,"column":4},"end":{"line":464,"column":4}}]},"49":{"line":477,"type":"if","locations":[{"start":{"line":477,"column":2},"end":{"line":477,"column":2}},{"start":{"line":477,"column":2},"end":{"line":477,"column":2}}]},"50":{"line":480,"type":"binary-expr","locations":[{"start":{"line":480,"column":13},"end":{"line":480,"column":21}},{"start":{"line":480,"column":25},"end":{"line":480,"column":29}}]},"51":{"line":482,"type":"if","locations":[{"start":{"line":482,"column":2},"end":{"line":482,"column":2}},{"start":{"line":482,"column":2},"end":{"line":482,"column":2}}]},"52":{"line":488,"type":"if","locations":[{"start":{"line":488,"column":2},"end":{"line":488,"column":2}},{"start":{"line":488,"column":2},"end":{"line":488,"column":2}}]},"53":{"line":493,"type":"if","locations":[{"start":{"line":493,"column":4},"end":{"line":493,"column":4}},{"start":{"line":493,"column":4},"end":{"line":493,"column":4}}]},"54":{"line":496,"type":"if","locations":[{"start":{"line":496,"column":4},"end":{"line":496,"column":4}},{"start":{"line":496,"column":4},"end":{"line":496,"column":4}}]},"55":{"line":499,"type":"if","locations":[{"start":{"line":499,"column":4},"end":{"line":499,"column":4}},{"start":{"line":499,"column":4},"end":{"line":499,"column":4}}]},"56":{"line":502,"type":"if","locations":[{"start":{"line":502,"column":4},"end":{"line":502,"column":4}},{"start":{"line":502,"column":4},"end":{"line":502,"column":4}}]},"57":{"line":530,"type":"if","locations":[{"start":{"line":530,"column":2},"end":{"line":530,"column":2}},{"start":{"line":530,"column":2},"end":{"line":530,"column":2}}]},"58":{"line":533,"type":"binary-expr","locations":[{"start":{"line":533,"column":13},"end":{"line":533,"column":21}},{"start":{"line":533,"column":25},"end":{"line":533,"column":29}}]},"59":{"line":535,"type":"if","locations":[{"start":{"line":535,"column":2},"end":{"line":535,"column":2}},{"start":{"line":535,"column":2},"end":{"line":535,"column":2}}]},"60":{"line":540,"type":"cond-expr","locations":[{"start":{"line":540,"column":26},"end":{"line":540,"column":41}},{"start":{"line":540,"column":44},"end":{"line":540,"column":62}}]},"61":{"line":560,"type":"if","locations":[{"start":{"line":560,"column":4},"end":{"line":560,"column":4}},{"start":{"line":560,"column":4},"end":{"line":560,"column":4}}]},"62":{"line":566,"type":"if","locations":[{"start":{"line":566,"column":4},"end":{"line":566,"column":4}},{"start":{"line":566,"column":4},"end":{"line":566,"column":4}}]},"63":{"line":579,"type":"if","locations":[{"start":{"line":579,"column":2},"end":{"line":579,"column":2}},{"start":{"line":579,"column":2},"end":{"line":579,"column":2}}]},"64":{"line":582,"type":"binary-expr","locations":[{"start":{"line":582,"column":13},"end":{"line":582,"column":21}},{"start":{"line":582,"column":25},"end":{"line":582,"column":29}}]},"65":{"line":584,"type":"if","locations":[{"start":{"line":584,"column":2},"end":{"line":584,"column":2}},{"start":{"line":584,"column":2},"end":{"line":584,"column":2}}]},"66":{"line":591,"type":"if","locations":[{"start":{"line":591,"column":2},"end":{"line":591,"column":2}},{"start":{"line":591,"column":2},"end":{"line":591,"column":2}}]},"67":{"line":603,"type":"if","locations":[{"start":{"line":603,"column":4},"end":{"line":603,"column":4}},{"start":{"line":603,"column":4},"end":{"line":603,"column":4}}]},"68":{"line":606,"type":"if","locations":[{"start":{"line":606,"column":4},"end":{"line":606,"column":4}},{"start":{"line":606,"column":4},"end":{"line":606,"column":4}}]},"69":{"line":609,"type":"if","locations":[{"start":{"line":609,"column":4},"end":{"line":609,"column":4}},{"start":{"line":609,"column":4},"end":{"line":609,"column":4}}]},"70":{"line":613,"type":"if","locations":[{"start":{"line":613,"column":4},"end":{"line":613,"column":4}},{"start":{"line":613,"column":4},"end":{"line":613,"column":4}}]},"71":{"line":627,"type":"if","locations":[{"start":{"line":627,"column":2},"end":{"line":627,"column":2}},{"start":{"line":627,"column":2},"end":{"line":627,"column":2}}]},"72":{"line":630,"type":"binary-expr","locations":[{"start":{"line":630,"column":13},"end":{"line":630,"column":21}},{"start":{"line":630,"column":25},"end":{"line":630,"column":29}}]},"73":{"line":637,"type":"if","locations":[{"start":{"line":637,"column":4},"end":{"line":637,"column":4}},{"start":{"line":637,"column":4},"end":{"line":637,"column":4}}]},"74":{"line":642,"type":"if","locations":[{"start":{"line":642,"column":4},"end":{"line":642,"column":4}},{"start":{"line":642,"column":4},"end":{"line":642,"column":4}}]},"75":{"line":656,"type":"if","locations":[{"start":{"line":656,"column":2},"end":{"line":656,"column":2}},{"start":{"line":656,"column":2},"end":{"line":656,"column":2}}]},"76":{"line":659,"type":"binary-expr","locations":[{"start":{"line":659,"column":13},"end":{"line":659,"column":21}},{"start":{"line":659,"column":25},"end":{"line":659,"column":29}}]},"77":{"line":664,"type":"if","locations":[{"start":{"line":664,"column":4},"end":{"line":664,"column":4}},{"start":{"line":664,"column":4},"end":{"line":664,"column":4}}]},"78":{"line":667,"type":"if","locations":[{"start":{"line":667,"column":4},"end":{"line":667,"column":4}},{"start":{"line":667,"column":4},"end":{"line":667,"column":4}}]},"79":{"line":670,"type":"if","locations":[{"start":{"line":670,"column":4},"end":{"line":670,"column":4}},{"start":{"line":670,"column":4},"end":{"line":670,"column":4}}]},"80":{"line":690,"type":"binary-expr","locations":[{"start":{"line":690,"column":13},"end":{"line":690,"column":21}},{"start":{"line":690,"column":25},"end":{"line":690,"column":29}}]},"81":{"line":692,"type":"if","locations":[{"start":{"line":692,"column":2},"end":{"line":692,"column":2}},{"start":{"line":692,"column":2},"end":{"line":692,"column":2}}]},"82":{"line":692,"type":"binary-expr","locations":[{"start":{"line":692,"column":6},"end":{"line":692,"column":18}},{"start":{"line":692,"column":22},"end":{"line":692,"column":33}}]},"83":{"line":700,"type":"if","locations":[{"start":{"line":700,"column":4},"end":{"line":700,"column":4}},{"start":{"line":700,"column":4},"end":{"line":700,"column":4}}]},"84":{"line":705,"type":"if","locations":[{"start":{"line":705,"column":4},"end":{"line":705,"column":4}},{"start":{"line":705,"column":4},"end":{"line":705,"column":4}}]},"85":{"line":719,"type":"binary-expr","locations":[{"start":{"line":719,"column":13},"end":{"line":719,"column":21}},{"start":{"line":719,"column":25},"end":{"line":719,"column":29}}]},"86":{"line":730,"type":"if","locations":[{"start":{"line":730,"column":4},"end":{"line":730,"column":4}},{"start":{"line":730,"column":4},"end":{"line":730,"column":4}}]},"87":{"line":736,"type":"if","locations":[{"start":{"line":736,"column":4},"end":{"line":736,"column":4}},{"start":{"line":736,"column":4},"end":{"line":736,"column":4}}]},"88":{"line":740,"type":"if","locations":[{"start":{"line":740,"column":4},"end":{"line":740,"column":4}},{"start":{"line":740,"column":4},"end":{"line":740,"column":4}}]},"89":{"line":743,"type":"if","locations":[{"start":{"line":743,"column":4},"end":{"line":743,"column":4}},{"start":{"line":743,"column":4},"end":{"line":743,"column":4}}]},"90":{"line":746,"type":"if","locations":[{"start":{"line":746,"column":4},"end":{"line":746,"column":4}},{"start":{"line":746,"column":4},"end":{"line":746,"column":4}}]},"91":{"line":763,"type":"if","locations":[{"start":{"line":763,"column":2},"end":{"line":763,"column":2}},{"start":{"line":763,"column":2},"end":{"line":763,"column":2}}]},"92":{"line":763,"type":"binary-expr","locations":[{"start":{"line":763,"column":6},"end":{"line":763,"column":18}},{"start":{"line":763,"column":22},"end":{"line":763,"column":31}}]},"93":{"line":769,"type":"if","locations":[{"start":{"line":769,"column":2},"end":{"line":769,"column":2}},{"start":{"line":769,"column":2},"end":{"line":769,"column":2}}]},"94":{"line":773,"type":"if","locations":[{"start":{"line":773,"column":4},"end":{"line":773,"column":4}},{"start":{"line":773,"column":4},"end":{"line":773,"column":4}}]},"95":{"line":776,"type":"if","locations":[{"start":{"line":776,"column":4},"end":{"line":776,"column":4}},{"start":{"line":776,"column":4},"end":{"line":776,"column":4}}]},"96":{"line":779,"type":"if","locations":[{"start":{"line":779,"column":4},"end":{"line":779,"column":4}},{"start":{"line":779,"column":4},"end":{"line":779,"column":4}}]},"97":{"line":783,"type":"if","locations":[{"start":{"line":783,"column":4},"end":{"line":783,"column":4}},{"start":{"line":783,"column":4},"end":{"line":783,"column":4}}]},"98":{"line":803,"type":"if","locations":[{"start":{"line":803,"column":4},"end":{"line":803,"column":4}},{"start":{"line":803,"column":4},"end":{"line":803,"column":4}}]},"99":{"line":806,"type":"if","locations":[{"start":{"line":806,"column":4},"end":{"line":806,"column":4}},{"start":{"line":806,"column":4},"end":{"line":806,"column":4}}]},"100":{"line":809,"type":"if","locations":[{"start":{"line":809,"column":4},"end":{"line":809,"column":4}},{"start":{"line":809,"column":4},"end":{"line":809,"column":4}}]},"101":{"line":812,"type":"if","locations":[{"start":{"line":812,"column":8},"end":{"line":812,"column":8}},{"start":{"line":812,"column":8},"end":{"line":812,"column":8}}]},"102":{"line":818,"type":"if","locations":[{"start":{"line":818,"column":6},"end":{"line":818,"column":6}},{"start":{"line":818,"column":6},"end":{"line":818,"column":6}}]},"103":{"line":824,"type":"if","locations":[{"start":{"line":824,"column":4},"end":{"line":824,"column":4}},{"start":{"line":824,"column":4},"end":{"line":824,"column":4}}]}},"code":["\"use strict\";","var util = require('util');","var errors = require('./errors');","var utils = require('./utils');","","/**"," * Max int that can be accurately represented with 64-bit Number (2^53)"," * @type {number}"," * @const"," */","var maxInt = 9007199254740992;","","function noop() {}","","/**"," * Creates a copy of a buffer"," */","function copyBuffer(buf) {","  var targetBuffer = new Buffer(buf.length);","  buf.copy(targetBuffer);","  return targetBuffer;","}","","/**"," * Appends the original stack trace to the error after a tick of the event loop"," */","function fixStack(stackTrace, error) {","  if (stackTrace) {","    error.stack += '\\n  (event loop)\\n' + stackTrace.substr(stackTrace.indexOf(\"\\n\") + 1);","  }","  return error;","}","","/**"," * Uses the logEmitter to emit log events"," * @param {String} type"," * @param {String} info"," * @param [furtherInfo]"," */","function log(type, info, furtherInfo) {","  if (!this.logEmitter) {","    //noinspection JSUnresolvedVariable","    if (!this.options || !this.options.logEmitter) {","      throw new Error('Log emitter not defined');","    }","    //noinspection JSUnresolvedVariable","    this.logEmitter = this.options.logEmitter;","  }","  this.logEmitter('log', type, this.constructor.name, info, furtherInfo || '');","}","","/**"," * Gets the sum of the length of the items of an array"," */","function totalLength (arr) {","  if (arr.length === 1) {","    return arr[0].length;","  }","  var total = 0;","  arr.forEach(function (item) {","    var length = item.length;","    length = length ? length : 0;","    total += length;","  });","  return total;","}","","/**"," * Merge the contents of two or more objects together into the first object. Similar to jQuery.extend"," */","function extend(target) {","  var sources = Array.prototype.slice.call(arguments, 1);","  sources.forEach(function (source) {","    if (!source) {","      return;","    }","    var keys = Object.keys(source);","    for (var i = 0; i < keys.length; i++) {","      var key = keys[i];","      var value = source[key];","      if (value === undefined) {","        continue;","      }","      target[key] = value;","    }","  });","  return target;","}","","function lowerCaseExtend(target) {","  var sources = Array.prototype.slice.call(arguments, 1);","  sources.forEach(function (source) {","    for (var prop in source) {","      if (source.hasOwnProperty(prop)) {","        target[prop.toLowerCase()] = source[prop];","      }","    }","  });","  return target;","}","","/**"," * Extends the target by the most inner props of sources"," * @param {Object} target"," * @returns {Object}"," */","function deepExtend(target) {","  var sources = Array.prototype.slice.call(arguments, 1);","  sources.forEach(function (source) {","    for (var prop in source) {","      if (!source.hasOwnProperty(prop)) {","        continue;","      }","      var targetProp = target[prop];","      var targetType = (typeof targetProp);","      //target prop is","      // a native single type","      // or not existent","      // or is not an anonymous object (not class instance)","      //noinspection JSUnresolvedVariable","      if (!targetProp ||","        targetType === 'number' ||","        targetType === 'string' ||","        util.isArray(targetProp) ||","        util.isDate(targetProp) ||","        targetProp.constructor.name !== 'Object'","        ) {","        target[prop] = source[prop];","      }","      else {","        //inner extend","        target[prop] = deepExtend({}, targetProp, source[prop]);","      }","    }","  });","  return target;","}","","function propCompare(propName) {","  return function (a, b) {","    if (a[propName] > b[propName]) {","      return 1;","    }","    if (a[propName] < b[propName]) {","      return -1;","    }","    return 0;","  };","}","","function funcCompare(name, argArray) {","  return (function (a, b) {","    if (typeof a[name] === 'undefined') {","      return 0;","    }","    var valA = a[name].apply(a, argArray);","    var valB = b[name].apply(b, argArray);","    if (valA > valB) {","      return 1;","    }","    if (valA < valB) {","      return -1;","    }","    return 0;","  });","}","/**"," * Uses the iterator protocol to go through the items of the Array"," * @param arr"," * @returns {{next: function}}"," */","function arrayIterator (arr) {","  var index = 0;","  return { next : function () {","    if (index >= arr.length) {","      return {done: true};","    }","    return {value: arr[index++], done: false };","  }};","}","","/**"," * Convert the iterator values into an array"," * @param iterator"," * @returns {Array}"," */","function iteratorToArray(iterator) {","  var values = [];","  var item = iterator.next();","  while (!item.done) {","    values.push(item.value);","    item = iterator.next();","  }","  return values;","}","","/**"," * Searches the specified Array for the provided key using the binary"," * search algorithm.  The Array must be sorted."," * @param {Array} arr"," * @param key"," * @param {function} compareFunc"," * @returns {number} The position of the key in the Array, if it is found."," * If it is not found, it returns a negative number which is the bitwise complement of the index of the first element that is larger than key."," */","function binarySearch(arr, key, compareFunc) {","  var low = 0;","  var high = arr.length-1;","","  while (low <= high) {","    var mid = (low + high) >>> 1;","    var midVal = arr[mid];","    var cmp = compareFunc(midVal, key);","    if (cmp < 0) {","      low = mid + 1;","    }","    else if (cmp > 0) {","      high = mid - 1;","    }","    else","    {","      //The key was found in the Array","      return mid;","    }","  }","  return ~low;  // key not found","}","","/**"," * Inserts the value in the position determined by its natural order determined by the compare func"," * @param {Array} arr"," * @param item"," * @param {function} compareFunc"," */","function insertSorted(arr, item, compareFunc) {","  if (arr.length === 0) {","    return arr.push(item);","  }","  var position = binarySearch(arr, item, compareFunc);","  if (position < 0) {","    position = ~position;","  }","  arr.splice(position, 0, item);","}","","/**"," * Binds the domain (if any) to the callback"," * @param {Function} callback"," * @param {String} [name]"," * @returns {Function}"," */","function bindDomain(callback, name) {","  if (typeof callback !== 'function') {","    throw new errors.ArgumentError(util.format('%s is not a function', name || 'callback'));","  }","  if (process.domain) {","    callback = process.domain.bind(callback);","  }","  return callback;","}","","/**"," * Adapts the parameters based on the prepared metadata."," * If the params are passed as an associative array (Object),"," * it adapts the object into an array with the same order as columns"," * @param {Array|Object} params"," * @param {Array} columns"," * @returns {{ params: Array, keys: Object}} Returns an array of parameters and the keys as an associative array."," * @throws {Error} In case a parameter with a specific name is not defined"," */","function adaptNamedParamsPrepared(params, columns) {","  if (!params || util.isArray(params) || !columns || columns.length === 0) {","    //The parameters is an Array or there isn't parameter","    return { params: params, keys: null};","  }","  var paramsArray = new Array(columns.length);","  params = lowerCaseExtend({}, params);","  var keys = {};","  for (var i = 0; i < columns.length; i++) {","    var name = columns[i].name;","    if (!params.hasOwnProperty(name)) {","      throw new errors.ArgumentError(util.format('Parameter \"%s\" not defined', name));","    }","    paramsArray[i] = params[name];","    keys[name] = i;","  }","  return { params: paramsArray, keys: keys};","}","","/**"," * Adapts the associative-array of parameters and hints for simple statements"," * into Arrays based on the (arbitrary) position of the keys."," * @param {Array|Object} params"," * @param {QueryOptions} options"," * @returns {{ params: Array.<{name, value}>, keys: Object}} Returns an array of parameters and the keys as an associative array."," */","function adaptNamedParamsWithHints(params, options) {","  if (!params || util.isArray(params)) {","    //The parameters is an Array or there isn't parameter","    return { params: params, keys: null};","  }","  options.namedParameters = true;","  var keys = Object.keys(params);","  var paramsArray = new Array(keys.length);","  var hints = new Array(keys.length);","  var userHints = options.hints || utils.emptyObject;","  for (var i = 0; i < keys.length; i++) {","    var key = keys[i];","    //As lower cased identifiers","    paramsArray[i] = { name: key.toLowerCase(), value: params[key]};","    hints[i] = userHints[key];","  }","  options.hints = hints;","  return { params: paramsArray, keys: keys};","}","","/**"," * Returns a string with a value repeated n times"," * @param {String} val"," * @param {Number} times"," * @returns {String}"," */","function stringRepeat(val, times) {","  if (!times || times < 0) {","    return null;","  }","  if (times === 1) {","    return val;","  }","  return new Array(times + 1).join(val);","}","","/**"," * Returns an array containing the values of the Object, similar to Object.values()."," * If obj is null or undefined, it will return an empty array."," * @param {Object} obj"," * @returns {Array}"," */","function objectValues(obj) {","  if (!obj) {","    return exports.emptyArray;","  }","  var keys = Object.keys(obj);","  var values = new Array(keys.length);","  for (var i = 0; i < keys.length; i++) {","    values[i] = obj[keys[i]];","  }","  return values;","}","","/**"," * Wraps the callback-based method. When no originalCallback is not defined, it returns a Promise."," * @param {ClientOptions} options"," * @param {Function} originalCallback"," * @param {Boolean} allowNoPromiseSupport"," * @param {Function} handler"," * @returns {Promise|undefined}"," */","function promiseWrapper(options, originalCallback, allowNoPromiseSupport, handler) {","  if (allowNoPromiseSupport && !originalCallback && !options.promiseFactory && typeof Promise === 'undefined') {","    // Optional callback on some methods is supported, even for js engines without Promise support","    originalCallback = noop;","  }","  if (typeof originalCallback === 'function') {","    // Callback-based invocation","    handler.call(this, bindDomain(originalCallback));","    return undefined;","  }","  var factory = options.promiseFactory;","  if (!factory) {","    if (typeof Promise === 'undefined') {","      throw new errors.ArgumentError(","        'Callback was not provided and Promise is undefined. See ' +","        'ClientOptions.promiseFactory documentation.');","    }","    factory = defaultPromiseFactory;","  }","  var self = this;","  return factory(function handlerWrapper(callback) {","    handler.call(self, callback);","  });","}","","/**"," * @param {Function} handler"," * @returns {Promise}"," */","function defaultPromiseFactory(handler) {","  return new Promise(function executor(resolve, reject) {","    handler(function handlerCallback(err, result) {","      if (err) {","        return reject(err);","      }","      resolve(result);","    });","  });","}","","// Classes","","/**"," * Represents a unique set of values."," * @constructor"," */","function HashSet() {","  this.length = 0;","  this.items = {};","}","","/**"," * Adds a new item to the set."," * @param {Object} key"," * @returns {boolean} Returns true if it was added to the set; false if the key is already present."," */","HashSet.prototype.add = function (key) {","  if (this.items[key]) {","    return false;","  }","  this.items[key] = true;","  this.length++;","  return true;","};","","/**"," * @returns {boolean} Returns true if the key is present in the set."," */","HashSet.prototype.contains = function (key) {","  return this.items[key] === true;","};","","/**"," * Returns an array containing the set items."," * @returns {Array}"," */","HashSet.prototype.toArray = function () {","  return Object.keys(this.items);","};","","/**"," * @param {Array} arr"," * @param {Function} fn"," * @param {Function} [callback]"," */","function each(arr, fn, callback) {","  if (!Array.isArray(arr)) {","    throw new TypeError('First parameter is not an Array');","  }","  callback = callback || noop;","  var length = arr.length;","  if (length === 0) {","    return callback();","  }","  var completed = 0;","  for (var i = 0; i < length; i++) {","    fn(arr[i], next);","  }","  function next(err) {","    if (err) {","      var cb = callback;","      callback = noop;","      cb(err);","      return;","    }","    if (++completed !== length) {","      return;","    }","    callback();","  }","}","","/**"," * @param {Array} arr"," * @param {Function} fn"," * @param {Function} [callback]"," */","function eachSeries(arr, fn, callback) {","  if (!Array.isArray(arr)) {","    throw new TypeError('First parameter is not an Array');","  }","  callback = callback || noop;","  var length = arr.length;","  if (length === 0) {","    return callback();","  }","  var sync;","  var index = 1;","  fn(arr[0], next);","  if (sync === undefined) {","    sync = false;","  }","","  function next(err) {","    if (err) {","      return callback(err);","    }","    if (index >= length) {","      return callback();","    }","    if (sync === undefined) {","      sync = true;","    }","    if (sync) {","      return process.nextTick(function () {","        fn(arr[index++], next);","      });","    }","    fn(arr[index++], next);","  }","}","","/**"," * @param {Array} arr"," * @param {Function} fn"," * @param {Function} [callback]"," */","function forEachOf(arr, fn, callback) {","  return mapEach(arr, fn, true, callback);","}","","/**"," * @param {Array} arr"," * @param {Function} fn"," * @param {Function} [callback]"," */","function map(arr, fn, callback) {","  return mapEach(arr, fn, false, callback);","}","","function mapEach(arr, fn, useIndex, callback) {","  if (!Array.isArray(arr)) {","    throw new TypeError('First parameter must be an Array');","  }","  callback = callback || noop;","  var length = arr.length;","  if (length === 0) {","    return callback(null, []);","  }","  var result = new Array(length);","  var completed = 0;","  var invoke = useIndex ? invokeWithIndex : invokeWithoutIndex;","  for (var i = 0; i < length; i++) {","    invoke(i);","  }","","  function invokeWithoutIndex(i) {","    fn(arr[i], function mapItemCallback(err, transformed) {","      result[i] = transformed;","      next(err);","    });","  }","","  function invokeWithIndex(i) {","    fn(arr[i], i, function mapItemCallback(err, transformed) {","      result[i] = transformed;","      next(err);","    });","  }","","  function next(err) {","    if (err) {","      var cb = callback;","      callback = noop;","      cb(err);","      return;","    }","    if (++completed !== length) {","      return;","    }","    callback(null, result);","  }","}","","/**"," * @param {Array} arr"," * @param {Function} fn"," * @param {Function} [callback]"," */","function mapSeries(arr, fn, callback) {","  if (!Array.isArray(arr)) {","    throw new TypeError('First parameter must be an Array');","  }","  callback = callback || noop;","  var length = arr.length;","  if (length === 0) {","    return callback(null, []);","  }","  var result = new Array(length);","  var index = 0;","  var sync;","  invoke(0);","  if (sync === undefined) {","    sync = false;","  }","","  function invoke(i) {","    fn(arr[i], function mapItemCallback(err, transformed) {","      result[i] = transformed;","      next(err);","    });","  }","","  function next(err) {","    if (err) {","      return callback(err);","    }","    if (++index === length) {","      return callback(null, result);","    }","    if (sync === undefined) {","      sync = true;","    }","    var i = index;","    if (sync) {","      return process.nextTick(function () {","        invoke(i);","      });","    }","    invoke(index);","  }","}","","/**"," * @param {Array.<Function>} arr"," * @param {Function} [callback]"," */","function parallel(arr, callback) {","  if (!Array.isArray(arr)) {","    throw new TypeError('First parameter must be an Array');","  }","  callback = callback || noop;","  var length = arr.length;","  var completed = 0;","  for (var i = 0; i < length; i++) {","    arr[i](next);","  }","  function next(err) {","    if (err) {","      var cb = callback;","      callback = noop;","      return cb(err);","    }","    if (++completed !== length) {","      return;","    }","    callback();","  }","}","","/**"," * Similar to async.series(), but instead accumulating the result in an Array, it callbacks with the result of the last"," * function in the array."," * @param {Array.<Function>} arr"," * @param {Function} [callback]"," */","function series(arr, callback) {","  if (!Array.isArray(arr)) {","    throw new TypeError('First parameter must be an Array');","  }","  callback = callback || noop;","  var index = 0;","  var sync;","  next();","  function next(err, result) {","    if (err) {","      return callback(err);","    }","    if (index === arr.length) {","      return callback(null, result);","    }","    if (sync) {","      return process.nextTick(function () {","        //noinspection JSUnusedAssignment","        sync = true;","        arr[index++](next);","        sync = false;","      });","    }","    sync = true;","    arr[index++](next);","    sync = false;","  }","}","","/**"," * @param {Number} count"," * @param {Function} iteratorFunc"," * @param {Function} [callback]"," */","function times(count, iteratorFunc, callback) {","  callback = callback || noop;","  count = +count;","  if (isNaN(count) || count === 0) {","    return callback();","  }","  var completed = 0;","  for (var i = 0; i < count; i++) {","    iteratorFunc(i, next);","  }","  function next(err) {","    if (err) {","      var cb = callback;","      callback = noop;","      return cb(err);","    }","    if (++completed !== count) {","      return;","    }","    callback();","  }","}","","/**"," * @param {Number} count"," * @param {Number} limit"," * @param {Function} iteratorFunc"," * @param {Function} [callback]"," */","function timesLimit(count, limit, iteratorFunc, callback) {","  callback = callback || noop;","  limit = Math.min(limit, count);","  var index = limit - 1;","  var i;","  var completed = 0;","  for (i = 0; i < limit; i++) {","    iteratorFunc(i, next);","  }","  i = -1;","  var sync = undefined;","  function next(err) {","    if (err) {","      var cb = callback;","      callback = noop;","      cb(err);","      return;","    }","    if (++completed === count) {","      return callback();","    }","    index++;","    if (index >= count) {","      return;","    }","    if (sync === undefined) {","      sync = (i >= 0);","    }","    if (sync) {","      var captureIndex = index;","      return process.nextTick(function () {","        iteratorFunc(captureIndex, next);","      });","    }","    iteratorFunc(index, next);","  }","}","","/**"," * @param {Number} count"," * @param {Function} iteratorFunction"," * @param {Function} callback"," */","function timesSeries(count, iteratorFunction, callback) {","  count = +count;","  if (isNaN(count) || count < 1) {","    return callback();","  }","  var index = 1;","  var sync;","  iteratorFunction(0, next);","  if (sync === undefined) {","    sync = false;","  }","  function next(err) {","    if (err) {","      return callback(err);","    }","    if (index === count) {","      return callback();","    }","    if (sync === undefined) {","      sync = true;","    }","    var i = index++;","    if (sync) {","      //Prevent \"Maximum call stack size exceeded\"","      return process.nextTick(function () {","        iteratorFunction(i, next);","      });","    }","    //do a sync call as the callback is going to call on a future tick","    iteratorFunction(i, next);","  }","}","","/**"," * @param {Function} condition"," * @param {Function} fn"," * @param {Function} callback"," */","function whilst(condition, fn, callback) {","  var sync = 0;","  next();","  function next(err) {","    if (err) {","      return callback(err);","    }","    if (!condition()) {","      return callback();","    }","    if (sync === 0) {","      sync = 1;","      fn(function (err) {","        if (sync === 1) {","          //sync function","          sync = 4;","        }","        next(err);","      });","      if (sync === 1) {","        //async function","        sync = 2;","      }","      return;","    }","    if (sync === 4) {","      //Prevent \"Maximum call stack size exceeded\"","      return process.nextTick(function () {","        fn(next);","      });","    }","    //do a sync call as the callback is going to call on a future tick","    fn(next);","  }","}","","exports.adaptNamedParamsPrepared = adaptNamedParamsPrepared;","exports.adaptNamedParamsWithHints = adaptNamedParamsWithHints;","exports.arrayIterator = arrayIterator;","exports.binarySearch = binarySearch;","exports.bindDomain = bindDomain;","exports.copyBuffer = copyBuffer;","exports.deepExtend = deepExtend;","exports.each = each;","exports.eachSeries = eachSeries;","/** @const */","exports.emptyArray = Object.freeze([]);","/** @const */","exports.emptyObject = Object.freeze({});","exports.extend = extend;","exports.fixStack = fixStack;","exports.forEachOf = forEachOf;","exports.funcCompare = funcCompare;","exports.insertSorted = insertSorted;","exports.iteratorToArray = iteratorToArray;","exports.log = log;","exports.map = map;","exports.mapSeries = mapSeries;","exports.maxInt = maxInt;","exports.noop = noop;","exports.objectValues = objectValues;","exports.parallel = parallel;","exports.promiseWrapper = promiseWrapper;","exports.propCompare = propCompare;","exports.series = series;","exports.stringRepeat = stringRepeat;","exports.times = times;","exports.timesLimit = timesLimit;","exports.timesSeries = timesSeries;","exports.totalLength = totalLength;","exports.whilst = whilst;","exports.HashSet = HashSet;"],"l":{"2":1,"3":1,"4":1,"11":1,"13":1,"18":1,"19":0,"20":0,"21":0,"27":1,"28":0,"29":0,"31":0,"40":1,"41":0,"43":0,"44":0,"47":0,"49":0,"55":1,"56":0,"57":0,"59":0,"60":0,"61":0,"62":0,"63":0,"65":0,"71":1,"72":0,"73":0,"74":0,"75":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"84":0,"87":0,"90":1,"91":0,"92":0,"93":0,"94":0,"95":0,"99":0,"107":1,"108":0,"109":0,"110":0,"111":0,"112":0,"114":0,"115":0,"121":0,"128":0,"132":0,"136":0,"139":1,"140":0,"141":0,"142":0,"144":0,"145":0,"147":0,"151":1,"152":0,"153":0,"154":0,"156":0,"157":0,"158":0,"159":0,"161":0,"162":0,"164":0,"172":1,"173":0,"174":0,"175":0,"176":0,"178":0,"187":1,"188":0,"189":0,"190":0,"191":0,"192":0,"194":0,"206":1,"207":0,"208":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"217":0,"218":0,"223":0,"226":0,"235":1,"236":0,"237":0,"239":0,"240":0,"241":0,"243":0,"252":1,"253":0,"254":0,"256":0,"257":0,"259":0,"271":1,"272":0,"274":0,"276":0,"277":0,"278":0,"279":0,"280":0,"281":0,"282":0,"284":0,"285":0,"287":0,"297":1,"298":0,"300":0,"302":0,"303":0,"304":0,"305":0,"306":0,"307":0,"308":0,"310":0,"311":0,"313":0,"314":0,"323":1,"324":0,"325":0,"327":0,"328":0,"330":0,"339":1,"340":0,"341":0,"343":0,"344":0,"345":0,"346":0,"348":0,"359":1,"360":0,"362":0,"364":0,"366":0,"367":0,"369":0,"370":0,"371":0,"372":0,"376":0,"378":0,"379":0,"380":0,"388":1,"389":0,"390":0,"391":0,"392":0,"394":0,"405":1,"406":0,"407":0,"415":1,"416":0,"417":0,"419":0,"420":0,"421":0,"427":1,"428":0,"435":1,"436":0,"444":1,"445":0,"446":0,"448":0,"449":0,"450":0,"451":0,"453":0,"454":0,"455":0,"457":1,"458":0,"459":0,"460":0,"461":0,"462":0,"464":0,"465":0,"467":0,"476":1,"477":0,"478":0,"480":0,"481":0,"482":0,"483":0,"485":0,"486":0,"487":0,"488":0,"489":0,"492":1,"493":0,"494":0,"496":0,"497":0,"499":0,"500":0,"502":0,"503":0,"504":0,"507":0,"516":1,"517":0,"525":1,"526":0,"529":1,"530":0,"531":0,"533":0,"534":0,"535":0,"536":0,"538":0,"539":0,"540":0,"541":0,"542":0,"545":1,"546":0,"547":0,"548":0,"552":1,"553":0,"554":0,"555":0,"559":1,"560":0,"561":0,"562":0,"563":0,"564":0,"566":0,"567":0,"569":0,"578":1,"579":0,"580":0,"582":0,"583":0,"584":0,"585":0,"587":0,"588":0,"589":0,"590":0,"591":0,"592":0,"595":1,"596":0,"597":0,"598":0,"602":1,"603":0,"604":0,"606":0,"607":0,"609":0,"610":0,"612":0,"613":0,"614":0,"615":0,"618":0,"626":1,"627":0,"628":0,"630":0,"631":0,"632":0,"633":0,"634":0,"636":1,"637":0,"638":0,"639":0,"640":0,"642":0,"643":0,"645":0,"655":1,"656":0,"657":0,"659":0,"660":0,"661":0,"662":0,"663":1,"664":0,"665":0,"667":0,"668":0,"670":0,"671":0,"673":0,"674":0,"675":0,"678":0,"679":0,"680":0,"689":1,"690":0,"691":0,"692":0,"693":0,"695":0,"696":0,"697":0,"699":1,"700":0,"701":0,"702":0,"703":0,"705":0,"706":0,"708":0,"718":1,"719":0,"720":0,"721":0,"722":0,"723":0,"724":0,"725":0,"727":0,"728":0,"729":1,"730":0,"731":0,"732":0,"733":0,"734":0,"736":0,"737":0,"739":0,"740":0,"741":0,"743":0,"744":0,"746":0,"747":0,"748":0,"749":0,"752":0,"761":1,"762":0,"763":0,"764":0,"766":0,"767":0,"768":0,"769":0,"770":0,"772":1,"773":0,"774":0,"776":0,"777":0,"779":0,"780":0,"782":0,"783":0,"785":0,"786":0,"790":0,"799":1,"800":0,"801":0,"802":1,"803":0,"804":0,"806":0,"807":0,"809":0,"810":0,"811":0,"812":0,"814":0,"816":0,"818":0,"820":0,"822":0,"824":0,"826":0,"827":0,"831":0,"835":1,"836":1,"837":1,"838":1,"839":1,"840":1,"841":1,"842":1,"843":1,"845":1,"847":1,"848":1,"849":1,"850":1,"851":1,"852":1,"853":1,"854":1,"855":1,"856":1,"857":1,"858":1,"859":1,"860":1,"861":1,"862":1,"863":1,"864":1,"865":1,"866":1,"867":1,"868":1,"869":1,"870":1}},"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/errors.js":{"path":"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/errors.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":1,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":1,"21":1,"22":0,"23":0,"24":0,"25":1,"26":1,"27":0,"28":0,"29":1,"30":1,"31":0,"32":0,"33":1,"34":1,"35":0,"36":0,"37":1,"38":1,"39":0,"40":0,"41":1,"42":1,"43":0,"44":0,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"fnMap":{"1":{"name":"DriverError","line":11,"loc":{"start":{"line":11,"column":0},"end":{"line":11,"column":44}}},"2":{"name":"NoHostAvailableError","line":26,"loc":{"start":{"line":26,"column":0},"end":{"line":26,"column":52}}},"3":{"name":"ResponseError","line":50,"loc":{"start":{"line":50,"column":0},"end":{"line":50,"column":38}}},"4":{"name":"DriverInternalError","line":67,"loc":{"start":{"line":67,"column":0},"end":{"line":67,"column":38}}},"5":{"name":"AuthenticationError","line":79,"loc":{"start":{"line":79,"column":0},"end":{"line":79,"column":38}}},"6":{"name":"ArgumentError","line":91,"loc":{"start":{"line":91,"column":0},"end":{"line":91,"column":32}}},"7":{"name":"OperationTimedOutError","line":103,"loc":{"start":{"line":103,"column":0},"end":{"line":103,"column":41}}},"8":{"name":"NotSupportedError","line":116,"loc":{"start":{"line":116,"column":0},"end":{"line":116,"column":36}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":27}},"2":{"start":{"line":11,"column":0},"end":{"line":18,"column":1}},"3":{"start":{"line":12,"column":2},"end":{"line":15,"column":3}},"4":{"start":{"line":13,"column":4},"end":{"line":13,"column":33}},"5":{"start":{"line":14,"column":4},"end":{"line":14,"column":44}},"6":{"start":{"line":16,"column":2},"end":{"line":16,"column":36}},"7":{"start":{"line":17,"column":2},"end":{"line":17,"column":39}},"8":{"start":{"line":19,"column":0},"end":{"line":19,"column":34}},"9":{"start":{"line":26,"column":0},"end":{"line":40,"column":1}},"10":{"start":{"line":27,"column":2},"end":{"line":27,"column":33}},"11":{"start":{"line":28,"column":2},"end":{"line":28,"column":133}},"12":{"start":{"line":29,"column":2},"end":{"line":29,"column":25}},"13":{"start":{"line":30,"column":2},"end":{"line":39,"column":3}},"14":{"start":{"line":31,"column":4},"end":{"line":31,"column":57}},"15":{"start":{"line":32,"column":4},"end":{"line":38,"column":5}},"16":{"start":{"line":33,"column":6},"end":{"line":33,"column":46}},"17":{"start":{"line":34,"column":6},"end":{"line":37,"column":7}},"18":{"start":{"line":35,"column":8},"end":{"line":35,"column":31}},"19":{"start":{"line":36,"column":8},"end":{"line":36,"column":108}},"20":{"start":{"line":42,"column":0},"end":{"line":42,"column":49}},"21":{"start":{"line":50,"column":0},"end":{"line":58,"column":1}},"22":{"start":{"line":51,"column":2},"end":{"line":51,"column":61}},"23":{"start":{"line":56,"column":2},"end":{"line":56,"column":19}},"24":{"start":{"line":57,"column":2},"end":{"line":57,"column":60}},"25":{"start":{"line":60,"column":0},"end":{"line":60,"column":42}},"26":{"start":{"line":67,"column":0},"end":{"line":70,"column":1}},"27":{"start":{"line":68,"column":2},"end":{"line":68,"column":67}},"28":{"start":{"line":69,"column":2},"end":{"line":69,"column":75}},"29":{"start":{"line":72,"column":0},"end":{"line":72,"column":48}},"30":{"start":{"line":79,"column":0},"end":{"line":82,"column":1}},"31":{"start":{"line":80,"column":2},"end":{"line":80,"column":67}},"32":{"start":{"line":81,"column":2},"end":{"line":81,"column":93}},"33":{"start":{"line":84,"column":0},"end":{"line":84,"column":48}},"34":{"start":{"line":91,"column":0},"end":{"line":94,"column":1}},"35":{"start":{"line":92,"column":2},"end":{"line":92,"column":61}},"36":{"start":{"line":93,"column":2},"end":{"line":93,"column":112}},"37":{"start":{"line":96,"column":0},"end":{"line":96,"column":42}},"38":{"start":{"line":103,"column":0},"end":{"line":107,"column":1}},"39":{"start":{"line":104,"column":2},"end":{"line":104,"column":70}},"40":{"start":{"line":105,"column":2},"end":{"line":106,"column":39}},"41":{"start":{"line":109,"column":0},"end":{"line":109,"column":51}},"42":{"start":{"line":116,"column":0},"end":{"line":119,"column":1}},"43":{"start":{"line":117,"column":2},"end":{"line":117,"column":65}},"44":{"start":{"line":118,"column":2},"end":{"line":118,"column":102}},"45":{"start":{"line":121,"column":0},"end":{"line":121,"column":46}},"46":{"start":{"line":123,"column":0},"end":{"line":123,"column":38}},"47":{"start":{"line":124,"column":0},"end":{"line":124,"column":50}},"48":{"start":{"line":125,"column":0},"end":{"line":125,"column":34}},"49":{"start":{"line":126,"column":0},"end":{"line":126,"column":56}},"50":{"start":{"line":127,"column":0},"end":{"line":127,"column":50}},"51":{"start":{"line":128,"column":0},"end":{"line":128,"column":52}},"52":{"start":{"line":129,"column":0},"end":{"line":129,"column":46}},"53":{"start":{"line":130,"column":0},"end":{"line":130,"column":38}}},"branchMap":{"1":{"line":12,"type":"if","locations":[{"start":{"line":12,"column":2},"end":{"line":12,"column":2}},{"start":{"line":12,"column":2},"end":{"line":12,"column":2}}]},"2":{"line":16,"type":"binary-expr","locations":[{"start":{"line":16,"column":17},"end":{"line":16,"column":24}},{"start":{"line":16,"column":28},"end":{"line":16,"column":35}}]},"3":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":2},"end":{"line":30,"column":2}},{"start":{"line":30,"column":2},"end":{"line":30,"column":2}}]},"4":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":4},"end":{"line":32,"column":4}},{"start":{"line":32,"column":4},"end":{"line":32,"column":4}}]},"5":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":6},"end":{"line":34,"column":6}},{"start":{"line":34,"column":6},"end":{"line":34,"column":6}}]}},"code":["\"use strict\";","var util = require('util');","/**"," * Contains the error classes exposed by the driver."," * @module errors"," */","/**"," * Base Error"," * @private"," */","function DriverError (message, constructor) {","  if (constructor) {","    this.name = constructor.name;","    this.stack = (new Error(message)).stack;","  }","  this.message = message || 'Error';","  this.info = 'Cassandra Driver Error';","}","util.inherits(DriverError, Error);","/**"," * Represents an error when a query cannot be performed because no host is available or could be reached by the driver."," * @param {Object} innerErrors An object map containing the error per host tried"," * @param {String} [message]"," * @constructor"," */","function NoHostAvailableError(innerErrors, message) {","  this.innerErrors = innerErrors;","  this.info = 'Represents an error when a query cannot be performed because no host is available or could be reached by the driver.';","  this.message = message;","  if (!message) {","    this.message = 'All host(s) tried for query failed.';","    if (innerErrors) {","      var hostList = Object.keys(innerErrors);","      if (hostList.length > 0) {","        var host = hostList[0];","        this.message += util.format(' First host tried, %s: %s. See innerErrors.', host, innerErrors[host]);","      }","    }","  }","}","","util.inherits(NoHostAvailableError, DriverError);","","/**"," * Represents an error message from the server"," * @param {Number} code Cassandra exception code"," * @param {String} message"," * @constructor"," */","function ResponseError(code, message) {","  ResponseError.super_.call(this, message, this.constructor);","  /**","   * The error code as defined in [responseErrorCodes]{@link module:types~responseErrorCodes}.","   * @type {Number}","   */","  this.code = code;","  this.info = 'Represents an error message from the server';","}","","util.inherits(ResponseError, DriverError);","","/**"," * Represents a bug inside the driver or in a Cassandra host."," * @param {String} message"," * @constructor"," */","function DriverInternalError(message) {","  DriverInternalError.super_.call(this, message, this.constructor);","  this.info = 'Represents a bug inside the driver or in a Cassandra host.';","}","","util.inherits(DriverInternalError, DriverError);","","/**"," * Represents an error when trying to authenticate with auth-enabled host"," * @param {String} message"," * @constructor"," */","function AuthenticationError(message) {","  AuthenticationError.super_.call(this, message, this.constructor);","  this.info = 'Represents an authentication error from the driver or from a Cassandra node.';","}","","util.inherits(AuthenticationError, DriverError);","","/**"," * Represents an error that is raised when one of the arguments provided to a method is not valid"," * @param {String} message"," * @constructor"," */","function ArgumentError(message) {","  ArgumentError.super_.call(this, message, this.constructor);","  this.info = 'Represents an error that is raised when one of the arguments provided to a method is not valid.';","}","","util.inherits(ArgumentError, DriverError);","","/**"," * Represents a client-side error that is raised when the client didn't hear back from the server within"," * {@link ClientOptions.socketOptions.readTimeout}."," * @constructor"," */","function OperationTimedOutError(message) {","  OperationTimedOutError.super_.call(this, message, this.constructor);","  this.info = 'Represents a client-side error that is raised when the client did not hear back from the server ' +","    'within socketOptions.readTimeout';","}","","util.inherits(OperationTimedOutError, DriverError);","","/**"," * Represents an error that is raised when a feature is not supported in the driver or in the current Cassandra version."," * @param message"," * @constructor"," */","function NotSupportedError(message) {","  NotSupportedError.super_.call(this, message, this.constructor);","  this.info = 'Represents a feature that is not supported in the driver or in the Cassandra version.';","}","","util.inherits(NotSupportedError, DriverError);","","exports.ArgumentError = ArgumentError;","exports.AuthenticationError = AuthenticationError;","exports.DriverError = DriverError;","exports.OperationTimedOutError = OperationTimedOutError;","exports.DriverInternalError = DriverInternalError;","exports.NoHostAvailableError = NoHostAvailableError;","exports.NotSupportedError = NotSupportedError;","exports.ResponseError = ResponseError;"],"l":{"2":1,"11":1,"12":0,"13":0,"14":0,"16":0,"17":0,"19":1,"26":1,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"42":1,"50":1,"51":0,"56":0,"57":0,"60":1,"67":1,"68":0,"69":0,"72":1,"79":1,"80":0,"81":0,"84":1,"91":1,"92":0,"93":0,"96":1,"103":1,"104":0,"105":0,"109":1,"116":1,"117":0,"118":0,"121":1,"123":1,"124":1,"125":1,"126":1,"127":1,"128":1,"129":1,"130":1}},"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/policies/load-balancing.js":{"path":"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/policies/load-balancing.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":0,"9":0,"10":0,"11":1,"12":0,"13":1,"14":0,"15":1,"16":0,"17":1,"18":1,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":1,"55":0,"56":0,"57":0,"58":0,"59":0,"60":1,"61":0,"62":0,"63":1,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":1,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":1,"107":1,"108":0,"109":1,"110":1,"111":1,"112":0,"113":0,"114":0,"115":1,"116":0,"117":1,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":1,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":1,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":1,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":1,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":1,"173":1,"174":0,"175":1,"176":0,"177":0,"178":0,"179":1,"180":0,"181":1,"182":0,"183":0,"184":0,"185":0,"186":0,"187":1,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":1,"195":1,"196":1,"197":1,"198":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[1,1],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,1],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0},"fnMap":{"1":{"name":"LoadBalancingPolicy","line":15,"loc":{"start":{"line":15,"column":0},"end":{"line":15,"column":31}}},"2":{"name":"(anonymous_2)","line":25,"loc":{"start":{"line":25,"column":37},"end":{"line":25,"column":72}}},"3":{"name":"(anonymous_3)","line":36,"loc":{"start":{"line":36,"column":44},"end":{"line":36,"column":60}}},"4":{"name":"(anonymous_4)","line":48,"loc":{"start":{"line":48,"column":45},"end":{"line":48,"column":89}}},"5":{"name":"RoundRobinPolicy","line":57,"loc":{"start":{"line":57,"column":0},"end":{"line":57,"column":28}}},"6":{"name":"(anonymous_6)","line":68,"loc":{"start":{"line":68,"column":42},"end":{"line":68,"column":86}}},"7":{"name":"(anonymous_7)","line":83,"loc":{"start":{"line":83,"column":10},"end":{"line":83,"column":22}}},"8":{"name":"DCAwareRoundRobinPolicy","line":106,"loc":{"start":{"line":106,"column":0},"end":{"line":106,"column":64}}},"9":{"name":"(anonymous_9)","line":124,"loc":{"start":{"line":124,"column":41},"end":{"line":124,"column":76}}},"10":{"name":"(anonymous_10)","line":151,"loc":{"start":{"line":151,"column":48},"end":{"line":151,"column":64}}},"11":{"name":"(anonymous_11)","line":161,"loc":{"start":{"line":161,"column":52},"end":{"line":161,"column":64}}},"12":{"name":"(anonymous_12)","line":166,"loc":{"start":{"line":166,"column":52},"end":{"line":166,"column":63}}},"13":{"name":"(anonymous_13)","line":176,"loc":{"start":{"line":176,"column":16},"end":{"line":176,"column":29}}},"14":{"name":"(anonymous_14)","line":206,"loc":{"start":{"line":206,"column":49},"end":{"line":206,"column":93}}},"15":{"name":"(anonymous_15)","line":223,"loc":{"start":{"line":223,"column":10},"end":{"line":223,"column":22}}},"16":{"name":"TokenAwarePolicy","line":244,"loc":{"start":{"line":244,"column":0},"end":{"line":244,"column":40}}},"17":{"name":"(anonymous_17)","line":253,"loc":{"start":{"line":253,"column":34},"end":{"line":253,"column":69}}},"18":{"name":"(anonymous_18)","line":259,"loc":{"start":{"line":259,"column":41},"end":{"line":259,"column":57}}},"19":{"name":"(anonymous_19)","line":273,"loc":{"start":{"line":273,"column":42},"end":{"line":273,"column":86}}},"20":{"name":"TokenAwareIterator","line":298,"loc":{"start":{"line":298,"column":0},"end":{"line":298,"column":75}}},"21":{"name":"(anonymous_21)","line":323,"loc":{"start":{"line":323,"column":39},"end":{"line":323,"column":59}}},"22":{"name":"(anonymous_22)","line":326,"loc":{"start":{"line":326,"column":66},"end":{"line":326,"column":91}}},"23":{"name":"(anonymous_23)","line":333,"loc":{"start":{"line":333,"column":12},"end":{"line":333,"column":24}}},"24":{"name":"(anonymous_24)","line":338,"loc":{"start":{"line":338,"column":43},"end":{"line":338,"column":55}}},"25":{"name":"WhiteListPolicy","line":384,"loc":{"start":{"line":384,"column":0},"end":{"line":384,"column":50}}},"26":{"name":"(anonymous_26)","line":393,"loc":{"start":{"line":393,"column":20},"end":{"line":393,"column":39}}},"27":{"name":"(anonymous_27)","line":401,"loc":{"start":{"line":401,"column":33},"end":{"line":401,"column":68}}},"28":{"name":"(anonymous_28)","line":410,"loc":{"start":{"line":410,"column":40},"end":{"line":410,"column":56}}},"29":{"name":"(anonymous_29)","line":422,"loc":{"start":{"line":422,"column":38},"end":{"line":422,"column":54}}},"30":{"name":"(anonymous_30)","line":429,"loc":{"start":{"line":429,"column":41},"end":{"line":429,"column":85}}},"31":{"name":"(anonymous_31)","line":431,"loc":{"start":{"line":431,"column":56},"end":{"line":431,"column":81}}},"32":{"name":"(anonymous_32)","line":439,"loc":{"start":{"line":439,"column":36},"end":{"line":439,"column":61}}},"33":{"name":"(anonymous_33)","line":442,"loc":{"start":{"line":442,"column":10},"end":{"line":442,"column":22}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":32}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":35}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":37}},"5":{"start":{"line":8,"column":0},"end":{"line":8,"column":55}},"6":{"start":{"line":15,"column":0},"end":{"line":17,"column":1}},"7":{"start":{"line":25,"column":0},"end":{"line":29,"column":2}},"8":{"start":{"line":26,"column":2},"end":{"line":26,"column":23}},"9":{"start":{"line":27,"column":2},"end":{"line":27,"column":21}},"10":{"start":{"line":28,"column":2},"end":{"line":28,"column":13}},"11":{"start":{"line":36,"column":0},"end":{"line":38,"column":2}},"12":{"start":{"line":37,"column":2},"end":{"line":37,"column":30}},"13":{"start":{"line":48,"column":0},"end":{"line":50,"column":2}},"14":{"start":{"line":49,"column":2},"end":{"line":49,"column":91}},"15":{"start":{"line":57,"column":0},"end":{"line":59,"column":1}},"16":{"start":{"line":58,"column":2},"end":{"line":58,"column":17}},"17":{"start":{"line":61,"column":0},"end":{"line":61,"column":53}},"18":{"start":{"line":68,"column":0},"end":{"line":90,"column":2}},"19":{"start":{"line":69,"column":2},"end":{"line":71,"column":3}},"20":{"start":{"line":70,"column":4},"end":{"line":70,"column":72}},"21":{"start":{"line":72,"column":2},"end":{"line":72,"column":34}},"22":{"start":{"line":73,"column":2},"end":{"line":73,"column":18}},"23":{"start":{"line":74,"column":2},"end":{"line":74,"column":18}},"24":{"start":{"line":76,"column":2},"end":{"line":76,"column":44}},"25":{"start":{"line":77,"column":2},"end":{"line":77,"column":18}},"26":{"start":{"line":78,"column":2},"end":{"line":80,"column":3}},"27":{"start":{"line":79,"column":4},"end":{"line":79,"column":19}},"28":{"start":{"line":82,"column":2},"end":{"line":89,"column":5}},"29":{"start":{"line":84,"column":6},"end":{"line":86,"column":7}},"30":{"start":{"line":85,"column":8},"end":{"line":85,"column":34}},"31":{"start":{"line":87,"column":6},"end":{"line":87,"column":69}},"32":{"start":{"line":106,"column":0},"end":{"line":114,"column":1}},"33":{"start":{"line":107,"column":2},"end":{"line":107,"column":25}},"34":{"start":{"line":108,"column":2},"end":{"line":108,"column":56}},"35":{"start":{"line":109,"column":2},"end":{"line":109,"column":17}},"36":{"start":{"line":111,"column":2},"end":{"line":111,"column":30}},"37":{"start":{"line":113,"column":2},"end":{"line":113,"column":31}},"38":{"start":{"line":116,"column":0},"end":{"line":116,"column":60}},"39":{"start":{"line":124,"column":0},"end":{"line":145,"column":2}},"40":{"start":{"line":125,"column":2},"end":{"line":125,"column":23}},"41":{"start":{"line":126,"column":2},"end":{"line":126,"column":21}},"42":{"start":{"line":127,"column":2},"end":{"line":127,"column":51}},"43":{"start":{"line":128,"column":2},"end":{"line":128,"column":54}},"44":{"start":{"line":129,"column":2},"end":{"line":143,"column":3}},"45":{"start":{"line":131,"column":4},"end":{"line":131,"column":36}},"46":{"start":{"line":132,"column":4},"end":{"line":138,"column":5}},"47":{"start":{"line":133,"column":6},"end":{"line":133,"column":28}},"48":{"start":{"line":134,"column":6},"end":{"line":137,"column":7}},"49":{"start":{"line":135,"column":8},"end":{"line":135,"column":36}},"50":{"start":{"line":136,"column":8},"end":{"line":136,"column":14}},"51":{"start":{"line":140,"column":4},"end":{"line":142,"column":5}},"52":{"start":{"line":141,"column":6},"end":{"line":141,"column":98}},"53":{"start":{"line":144,"column":2},"end":{"line":144,"column":13}},"54":{"start":{"line":151,"column":0},"end":{"line":159,"column":2}},"55":{"start":{"line":152,"column":2},"end":{"line":154,"column":3}},"56":{"start":{"line":153,"column":4},"end":{"line":153,"column":34}},"57":{"start":{"line":155,"column":2},"end":{"line":157,"column":3}},"58":{"start":{"line":156,"column":4},"end":{"line":156,"column":32}},"59":{"start":{"line":158,"column":2},"end":{"line":158,"column":31}},"60":{"start":{"line":161,"column":0},"end":{"line":164,"column":2}},"61":{"start":{"line":162,"column":2},"end":{"line":162,"column":30}},"62":{"start":{"line":163,"column":2},"end":{"line":163,"column":31}},"63":{"start":{"line":166,"column":0},"end":{"line":197,"column":2}},"64":{"start":{"line":167,"column":2},"end":{"line":167,"column":34}},"65":{"start":{"line":168,"column":2},"end":{"line":171,"column":3}},"66":{"start":{"line":170,"column":4},"end":{"line":170,"column":11}},"67":{"start":{"line":173,"column":2},"end":{"line":173,"column":27}},"68":{"start":{"line":174,"column":2},"end":{"line":174,"column":28}},"69":{"start":{"line":175,"column":2},"end":{"line":175,"column":29}},"70":{"start":{"line":176,"column":2},"end":{"line":196,"column":11}},"71":{"start":{"line":177,"column":4},"end":{"line":180,"column":5}},"72":{"start":{"line":179,"column":6},"end":{"line":179,"column":13}},"73":{"start":{"line":181,"column":4},"end":{"line":184,"column":5}},"74":{"start":{"line":182,"column":6},"end":{"line":182,"column":35}},"75":{"start":{"line":183,"column":6},"end":{"line":183,"column":13}},"76":{"start":{"line":185,"column":4},"end":{"line":187,"column":5}},"77":{"start":{"line":186,"column":6},"end":{"line":186,"column":13}},"78":{"start":{"line":188,"column":4},"end":{"line":188,"column":50}},"79":{"start":{"line":189,"column":4},"end":{"line":191,"column":5}},"80":{"start":{"line":190,"column":6},"end":{"line":190,"column":53}},"81":{"start":{"line":192,"column":4},"end":{"line":195,"column":5}},"82":{"start":{"line":193,"column":6},"end":{"line":193,"column":24}},"83":{"start":{"line":194,"column":6},"end":{"line":194,"column":36}},"84":{"start":{"line":206,"column":0},"end":{"line":236,"column":2}},"85":{"start":{"line":207,"column":2},"end":{"line":209,"column":3}},"86":{"start":{"line":208,"column":4},"end":{"line":208,"column":72}},"87":{"start":{"line":210,"column":2},"end":{"line":210,"column":18}},"88":{"start":{"line":211,"column":2},"end":{"line":213,"column":3}},"89":{"start":{"line":212,"column":4},"end":{"line":212,"column":19}},"90":{"start":{"line":214,"column":2},"end":{"line":214,"column":25}},"91":{"start":{"line":216,"column":2},"end":{"line":216,"column":45}},"92":{"start":{"line":217,"column":2},"end":{"line":217,"column":47}},"93":{"start":{"line":218,"column":2},"end":{"line":218,"column":34}},"94":{"start":{"line":219,"column":2},"end":{"line":219,"column":35}},"95":{"start":{"line":220,"column":2},"end":{"line":220,"column":18}},"96":{"start":{"line":221,"column":2},"end":{"line":221,"column":24}},"97":{"start":{"line":222,"column":2},"end":{"line":235,"column":5}},"98":{"start":{"line":224,"column":6},"end":{"line":224,"column":15}},"99":{"start":{"line":225,"column":6},"end":{"line":228,"column":7}},"100":{"start":{"line":226,"column":8},"end":{"line":226,"column":74}},"101":{"start":{"line":227,"column":8},"end":{"line":227,"column":44}},"102":{"start":{"line":229,"column":6},"end":{"line":232,"column":7}},"103":{"start":{"line":230,"column":8},"end":{"line":230,"column":77}},"104":{"start":{"line":231,"column":8},"end":{"line":231,"column":44}},"105":{"start":{"line":233,"column":6},"end":{"line":233,"column":32}},"106":{"start":{"line":244,"column":0},"end":{"line":249,"column":1}},"107":{"start":{"line":245,"column":2},"end":{"line":247,"column":3}},"108":{"start":{"line":246,"column":4},"end":{"line":246,"column":70}},"109":{"start":{"line":248,"column":2},"end":{"line":248,"column":33}},"110":{"start":{"line":251,"column":0},"end":{"line":251,"column":53}},"111":{"start":{"line":253,"column":0},"end":{"line":257,"column":2}},"112":{"start":{"line":254,"column":2},"end":{"line":254,"column":23}},"113":{"start":{"line":255,"column":2},"end":{"line":255,"column":21}},"114":{"start":{"line":256,"column":2},"end":{"line":256,"column":49}},"115":{"start":{"line":259,"column":0},"end":{"line":261,"column":2}},"116":{"start":{"line":260,"column":2},"end":{"line":260,"column":44}},"117":{"start":{"line":273,"column":0},"end":{"line":287,"column":2}},"118":{"start":{"line":274,"column":2},"end":{"line":274,"column":17}},"119":{"start":{"line":275,"column":2},"end":{"line":277,"column":3}},"120":{"start":{"line":276,"column":4},"end":{"line":276,"column":41}},"121":{"start":{"line":278,"column":2},"end":{"line":278,"column":15}},"122":{"start":{"line":279,"column":2},"end":{"line":281,"column":3}},"123":{"start":{"line":280,"column":4},"end":{"line":280,"column":61}},"124":{"start":{"line":282,"column":2},"end":{"line":284,"column":3}},"125":{"start":{"line":283,"column":4},"end":{"line":283,"column":75}},"126":{"start":{"line":285,"column":2},"end":{"line":285,"column":92}},"127":{"start":{"line":286,"column":2},"end":{"line":286,"column":29}},"128":{"start":{"line":298,"column":0},"end":{"line":321,"column":1}},"129":{"start":{"line":299,"column":2},"end":{"line":299,"column":27}},"130":{"start":{"line":300,"column":2},"end":{"line":300,"column":33}},"131":{"start":{"line":301,"column":2},"end":{"line":301,"column":35}},"132":{"start":{"line":302,"column":2},"end":{"line":302,"column":26}},"133":{"start":{"line":303,"column":2},"end":{"line":303,"column":24}},"134":{"start":{"line":304,"column":2},"end":{"line":304,"column":23}},"135":{"start":{"line":305,"column":2},"end":{"line":305,"column":28}},"136":{"start":{"line":309,"column":2},"end":{"line":316,"column":3}},"137":{"start":{"line":310,"column":4},"end":{"line":310,"column":27}},"138":{"start":{"line":311,"column":4},"end":{"line":313,"column":5}},"139":{"start":{"line":312,"column":6},"end":{"line":312,"column":15}},"140":{"start":{"line":314,"column":4},"end":{"line":314,"column":41}},"141":{"start":{"line":315,"column":4},"end":{"line":315,"column":34}},"142":{"start":{"line":320,"column":2},"end":{"line":320,"column":74}},"143":{"start":{"line":323,"column":0},"end":{"line":336,"column":2}},"144":{"start":{"line":325,"column":2},"end":{"line":325,"column":18}},"145":{"start":{"line":326,"column":2},"end":{"line":335,"column":5}},"146":{"start":{"line":327,"column":4},"end":{"line":329,"column":5}},"147":{"start":{"line":328,"column":6},"end":{"line":328,"column":27}},"148":{"start":{"line":331,"column":4},"end":{"line":331,"column":34}},"149":{"start":{"line":332,"column":4},"end":{"line":334,"column":7}},"150":{"start":{"line":333,"column":26},"end":{"line":333,"column":52}},"151":{"start":{"line":338,"column":0},"end":{"line":354,"column":2}},"152":{"start":{"line":339,"column":2},"end":{"line":339,"column":11}},"153":{"start":{"line":340,"column":2},"end":{"line":343,"column":3}},"154":{"start":{"line":341,"column":4},"end":{"line":341,"column":101}},"155":{"start":{"line":342,"column":4},"end":{"line":342,"column":40}},"156":{"start":{"line":345,"column":2},"end":{"line":345,"column":11}},"157":{"start":{"line":346,"column":2},"end":{"line":352,"column":3}},"158":{"start":{"line":347,"column":4},"end":{"line":350,"column":5}},"159":{"start":{"line":349,"column":6},"end":{"line":349,"column":15}},"160":{"start":{"line":351,"column":4},"end":{"line":351,"column":16}},"161":{"start":{"line":353,"column":2},"end":{"line":353,"column":28}},"162":{"start":{"line":384,"column":0},"end":{"line":397,"column":1}},"163":{"start":{"line":385,"column":2},"end":{"line":387,"column":3}},"164":{"start":{"line":386,"column":4},"end":{"line":386,"column":70}},"165":{"start":{"line":388,"column":2},"end":{"line":390,"column":3}},"166":{"start":{"line":389,"column":4},"end":{"line":389,"column":73}},"167":{"start":{"line":391,"column":2},"end":{"line":391,"column":33}},"168":{"start":{"line":392,"column":2},"end":{"line":392,"column":15}},"169":{"start":{"line":393,"column":2},"end":{"line":395,"column":5}},"170":{"start":{"line":394,"column":4},"end":{"line":394,"column":24}},"171":{"start":{"line":396,"column":2},"end":{"line":396,"column":23}},"172":{"start":{"line":399,"column":0},"end":{"line":399,"column":52}},"173":{"start":{"line":401,"column":0},"end":{"line":403,"column":2}},"174":{"start":{"line":402,"column":2},"end":{"line":402,"column":49}},"175":{"start":{"line":410,"column":0},"end":{"line":415,"column":2}},"176":{"start":{"line":411,"column":2},"end":{"line":413,"column":3}},"177":{"start":{"line":412,"column":4},"end":{"line":412,"column":34}},"178":{"start":{"line":414,"column":2},"end":{"line":414,"column":44}},"179":{"start":{"line":422,"column":0},"end":{"line":424,"column":2}},"180":{"start":{"line":423,"column":2},"end":{"line":423,"column":40}},"181":{"start":{"line":429,"column":0},"end":{"line":437,"column":2}},"182":{"start":{"line":430,"column":2},"end":{"line":430,"column":18}},"183":{"start":{"line":431,"column":2},"end":{"line":436,"column":5}},"184":{"start":{"line":432,"column":4},"end":{"line":434,"column":5}},"185":{"start":{"line":433,"column":6},"end":{"line":433,"column":27}},"186":{"start":{"line":435,"column":4},"end":{"line":435,"column":43}},"187":{"start":{"line":439,"column":0},"end":{"line":450,"column":2}},"188":{"start":{"line":440,"column":2},"end":{"line":440,"column":18}},"189":{"start":{"line":441,"column":2},"end":{"line":449,"column":4}},"190":{"start":{"line":443,"column":6},"end":{"line":443,"column":38}},"191":{"start":{"line":444,"column":6},"end":{"line":446,"column":7}},"192":{"start":{"line":445,"column":8},"end":{"line":445,"column":27}},"193":{"start":{"line":447,"column":6},"end":{"line":447,"column":18}},"194":{"start":{"line":453,"column":0},"end":{"line":453,"column":58}},"195":{"start":{"line":454,"column":0},"end":{"line":454,"column":50}},"196":{"start":{"line":455,"column":0},"end":{"line":455,"column":44}},"197":{"start":{"line":456,"column":0},"end":{"line":456,"column":44}},"198":{"start":{"line":457,"column":0},"end":{"line":457,"column":42}}},"branchMap":{"1":{"line":69,"type":"if","locations":[{"start":{"line":69,"column":2},"end":{"line":69,"column":2}},{"start":{"line":69,"column":2},"end":{"line":69,"column":2}}]},"2":{"line":78,"type":"if","locations":[{"start":{"line":78,"column":2},"end":{"line":78,"column":2}},{"start":{"line":78,"column":2},"end":{"line":78,"column":2}}]},"3":{"line":84,"type":"if","locations":[{"start":{"line":84,"column":6},"end":{"line":84,"column":6}},{"start":{"line":84,"column":6},"end":{"line":84,"column":6}}]},"4":{"line":108,"type":"binary-expr","locations":[{"start":{"line":108,"column":30},"end":{"line":108,"column":50}},{"start":{"line":108,"column":54},"end":{"line":108,"column":55}}]},"5":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":2},"end":{"line":129,"column":2}},{"start":{"line":129,"column":2},"end":{"line":129,"column":2}}]},"6":{"line":134,"type":"if","locations":[{"start":{"line":134,"column":6},"end":{"line":134,"column":6}},{"start":{"line":134,"column":6},"end":{"line":134,"column":6}}]},"7":{"line":140,"type":"if","locations":[{"start":{"line":140,"column":4},"end":{"line":140,"column":4}},{"start":{"line":140,"column":4},"end":{"line":140,"column":4}}]},"8":{"line":152,"type":"if","locations":[{"start":{"line":152,"column":2},"end":{"line":152,"column":2}},{"start":{"line":152,"column":2},"end":{"line":152,"column":2}}]},"9":{"line":155,"type":"if","locations":[{"start":{"line":155,"column":2},"end":{"line":155,"column":2}},{"start":{"line":155,"column":2},"end":{"line":155,"column":2}}]},"10":{"line":168,"type":"if","locations":[{"start":{"line":168,"column":2},"end":{"line":168,"column":2}},{"start":{"line":168,"column":2},"end":{"line":168,"column":2}}]},"11":{"line":177,"type":"if","locations":[{"start":{"line":177,"column":4},"end":{"line":177,"column":4}},{"start":{"line":177,"column":4},"end":{"line":177,"column":4}}]},"12":{"line":181,"type":"if","locations":[{"start":{"line":181,"column":4},"end":{"line":181,"column":4}},{"start":{"line":181,"column":4},"end":{"line":181,"column":4}}]},"13":{"line":185,"type":"if","locations":[{"start":{"line":185,"column":4},"end":{"line":185,"column":4}},{"start":{"line":185,"column":4},"end":{"line":185,"column":4}}]},"14":{"line":189,"type":"if","locations":[{"start":{"line":189,"column":4},"end":{"line":189,"column":4}},{"start":{"line":189,"column":4},"end":{"line":189,"column":4}}]},"15":{"line":192,"type":"if","locations":[{"start":{"line":192,"column":4},"end":{"line":192,"column":4}},{"start":{"line":192,"column":4},"end":{"line":192,"column":4}}]},"16":{"line":207,"type":"if","locations":[{"start":{"line":207,"column":2},"end":{"line":207,"column":2}},{"start":{"line":207,"column":2},"end":{"line":207,"column":2}}]},"17":{"line":211,"type":"if","locations":[{"start":{"line":211,"column":2},"end":{"line":211,"column":2}},{"start":{"line":211,"column":2},"end":{"line":211,"column":2}}]},"18":{"line":225,"type":"if","locations":[{"start":{"line":225,"column":6},"end":{"line":225,"column":6}},{"start":{"line":225,"column":6},"end":{"line":225,"column":6}}]},"19":{"line":229,"type":"if","locations":[{"start":{"line":229,"column":6},"end":{"line":229,"column":6}},{"start":{"line":229,"column":6},"end":{"line":229,"column":6}}]},"20":{"line":245,"type":"if","locations":[{"start":{"line":245,"column":2},"end":{"line":245,"column":2}},{"start":{"line":245,"column":2},"end":{"line":245,"column":2}}]},"21":{"line":275,"type":"if","locations":[{"start":{"line":275,"column":2},"end":{"line":275,"column":2}},{"start":{"line":275,"column":2},"end":{"line":275,"column":2}}]},"22":{"line":279,"type":"if","locations":[{"start":{"line":279,"column":2},"end":{"line":279,"column":2}},{"start":{"line":279,"column":2},"end":{"line":279,"column":2}}]},"23":{"line":282,"type":"if","locations":[{"start":{"line":282,"column":2},"end":{"line":282,"column":2}},{"start":{"line":282,"column":2},"end":{"line":282,"column":2}}]},"24":{"line":282,"type":"binary-expr","locations":[{"start":{"line":282,"column":6},"end":{"line":282,"column":17}},{"start":{"line":282,"column":21},"end":{"line":282,"column":30}}]},"25":{"line":311,"type":"if","locations":[{"start":{"line":311,"column":4},"end":{"line":311,"column":4}},{"start":{"line":311,"column":4},"end":{"line":311,"column":4}}]},"26":{"line":327,"type":"if","locations":[{"start":{"line":327,"column":4},"end":{"line":327,"column":4}},{"start":{"line":327,"column":4},"end":{"line":327,"column":4}}]},"27":{"line":340,"type":"if","locations":[{"start":{"line":340,"column":2},"end":{"line":340,"column":2}},{"start":{"line":340,"column":2},"end":{"line":340,"column":2}}]},"28":{"line":346,"type":"binary-expr","locations":[{"start":{"line":346,"column":10},"end":{"line":346,"column":42}},{"start":{"line":346,"column":47},"end":{"line":346,"column":57}}]},"29":{"line":347,"type":"if","locations":[{"start":{"line":347,"column":4},"end":{"line":347,"column":4}},{"start":{"line":347,"column":4},"end":{"line":347,"column":4}}]},"30":{"line":385,"type":"if","locations":[{"start":{"line":385,"column":2},"end":{"line":385,"column":2}},{"start":{"line":385,"column":2},"end":{"line":385,"column":2}}]},"31":{"line":388,"type":"if","locations":[{"start":{"line":388,"column":2},"end":{"line":388,"column":2}},{"start":{"line":388,"column":2},"end":{"line":388,"column":2}}]},"32":{"line":411,"type":"if","locations":[{"start":{"line":411,"column":2},"end":{"line":411,"column":2}},{"start":{"line":411,"column":2},"end":{"line":411,"column":2}}]},"33":{"line":432,"type":"if","locations":[{"start":{"line":432,"column":4},"end":{"line":432,"column":4}},{"start":{"line":432,"column":4},"end":{"line":432,"column":4}}]},"34":{"line":444,"type":"if","locations":[{"start":{"line":444,"column":6},"end":{"line":444,"column":6}},{"start":{"line":444,"column":6},"end":{"line":444,"column":6}}]},"35":{"line":444,"type":"binary-expr","locations":[{"start":{"line":444,"column":10},"end":{"line":444,"column":20}},{"start":{"line":444,"column":24},"end":{"line":444,"column":51}}]}},"code":["\"use strict\";","","var util = require('util');","var types = require('../types');","var utils = require('../utils.js');","var errors = require('../errors.js');","","var doneIteratorObject = Object.freeze({ done: true });","","/** @module policies/loadBalancing */","/**"," * Base class for Load Balancing Policies"," * @constructor"," */","function LoadBalancingPolicy() {","","}","","/**"," * Initializes the load balancing policy, called after the driver obtained the information of the cluster."," * @param {Client} client"," * @param {HostMap} hosts"," * @param {Function} callback"," */","LoadBalancingPolicy.prototype.init = function (client, hosts, callback) {","  this.client = client;","  this.hosts = hosts;","  callback();","};","","//noinspection JSUnusedLocalSymbols","/**"," * Returns the distance assigned by this policy to the provided host."," * @param {Host} host"," */","LoadBalancingPolicy.prototype.getDistance = function (host) {","  return types.distance.local;","};","","/**"," * Returns an iterator with the hosts for a new query."," * Each new query will call this method. The first host in the result will"," * then be used to perform the query."," * @param {String} keyspace Name of the keyspace"," * @param queryOptions options evaluated for this execution"," * @param {Function} callback"," */","LoadBalancingPolicy.prototype.newQueryPlan = function (keyspace, queryOptions, callback) {","  callback(new Error('You must implement a query plan for the LoadBalancingPolicy class'));","};","","/**"," * This policy yield nodes in a round-robin fashion."," * @extends LoadBalancingPolicy"," * @constructor"," */","function RoundRobinPolicy() {","  this.index = 0;","}","","util.inherits(RoundRobinPolicy, LoadBalancingPolicy);","","/**"," * @param {String} keyspace Name of the keyspace"," * @param queryOptions options evaluated for this execution"," * @param {Function} callback"," */","RoundRobinPolicy.prototype.newQueryPlan = function (keyspace, queryOptions, callback) {","  if (!this.hosts) {","    return callback(new Error('Load balancing policy not initialized'));","  }","  var hosts = this.hosts.values();","  var self = this;","  var counter = 0;","","  var planIndex = self.index % hosts.length;","  self.index += 1;","  if (self.index >= utils.maxInt) {","    self.index = 0;","  }","","  callback(null, {","    next: function () {","      if (++counter > hosts.length) {","        return doneIteratorObject;","      }","      return {value: hosts[planIndex++ % hosts.length], done: false};","    }","  });","};","","/**"," * A data-center aware Round-robin load balancing policy."," * This policy provides round-robin queries over the node of the local"," * data center. It also includes in the query plans returned a configurable"," * number of hosts in the remote data centers, but those are always tried"," * after the local nodes. In other words, this policy guarantees that no"," * host in a remote data center will be queried unless no host in the local"," * data center can be reached."," * @param {?String} [localDc] local datacenter name."," * @param {Number} [usedHostsPerRemoteDc] the number of host per remote datacenter that the policy will yield \\"," * in a newQueryPlan after the local nodes."," * @extends {LoadBalancingPolicy}"," * @constructor"," */","function DCAwareRoundRobinPolicy(localDc, usedHostsPerRemoteDc) {","  this.localDc = localDc;","  this.usedHostsPerRemoteDc = usedHostsPerRemoteDc || 0;","  this.index = 0;","  /** @type {Array} */","  this.localHostsArray = null;","  /** @type {Array} */","  this.remoteHostsArray = null;","}","","util.inherits(DCAwareRoundRobinPolicy, LoadBalancingPolicy);","","/**"," * Initializes the load balancing policy."," * @param {Client} client"," * @param {HostMap} hosts"," * @param {Function} callback"," */","DCAwareRoundRobinPolicy.prototype.init = function (client, hosts, callback) {","  this.client = client;","  this.hosts = hosts;","  hosts.on('add', this._cleanHostCache.bind(this));","  hosts.on('remove', this._cleanHostCache.bind(this));","  if (!this.localDc) {","    //get the first alive local, it should be local on top","    var hostsArray = hosts.values();","    for (var i = 0; i < hostsArray.length; i++) {","      var h = hostsArray[i];","      if (h.datacenter) {","        this.localDc = h.datacenter;","        break;","      }","    }","    //this should never happen but it does not hurt","    if (!this.localDc) {","      return callback(new errors.DriverInternalError('Local datacenter could not be determined'));","    }","  }","  callback();","};","","/**"," * Returns the distance depending on the datacenter."," * @param {Host} host"," */","DCAwareRoundRobinPolicy.prototype.getDistance = function (host) {","  if (!host.datacenter) {","    return types.distance.ignored;","  }","  if (host.datacenter === this.localDc) {","    return types.distance.local;","  }","  return types.distance.remote;","};","","DCAwareRoundRobinPolicy.prototype._cleanHostCache = function () {","  this.localHostsArray = null;","  this.remoteHostsArray = null;","};","","DCAwareRoundRobinPolicy.prototype._sliceNodesByDc = function() {","  var hosts = this.hosts.values();","  if (this.remoteHostsArray) {","    //there were already calculated","    return;","  }","  //do a full lookup to cache the remote hosts by dc","  var remoteHostsByDc = {};","  this.localHostsArray = [];","  this.remoteHostsArray = [];","  hosts.forEach(function (h) {","    if (!h.datacenter) {","      //not a remote dc node","      return;","    }","    if (h.datacenter === this.localDc) {","      this.localHostsArray.push(h);","      return;","    }","    if (this.usedHostsPerRemoteDc === 0) {","      return;","    }","    var hostPerDc = remoteHostsByDc[h.datacenter];","    if (!hostPerDc) {","      remoteHostsByDc[h.datacenter] = hostPerDc = [];","    }","    if (hostPerDc.length < this.usedHostsPerRemoteDc) {","      hostPerDc.push(h);","      this.remoteHostsArray.push(h);","    }","  }, this);","};","","/**"," * It returns an iterator that yields local nodes first and remotes nodes afterwards."," * The amount of remote nodes returned will depend on the usedHostsPerRemoteDc"," * @param {String} keyspace Name of the keyspace"," * @param queryOptions"," * @param {Function} callback"," */","DCAwareRoundRobinPolicy.prototype.newQueryPlan = function (keyspace, queryOptions, callback) {","  if (!this.hosts) {","    return callback(new Error('Load balancing policy not initialized'));","  }","  this.index += 1;","  if (this.index >= utils.maxInt) {","    this.index = 0;","  }","  this._sliceNodesByDc();","  // Use a local reference of hosts","  var localHostsArray = this.localHostsArray;","  var remoteHostsArray = this.remoteHostsArray;","  var planLocalIndex = this.index;","  var planRemoteIndex = this.index;","  var counter = 0;","  var remoteCounter = 0;","  callback(null, {","    next: function () {","      var host;","      if (counter++ < localHostsArray.length) {","        host = localHostsArray[planLocalIndex++ % localHostsArray.length];","        return { value: host, done: false };","      }","      if (remoteCounter++ < remoteHostsArray.length) {","        host = remoteHostsArray[planRemoteIndex++ % remoteHostsArray.length];","        return { value: host, done: false };","      }","      return doneIteratorObject;","    }","  });","};","","/**"," * A wrapper load balancing policy that add token awareness to a child policy."," * @param {LoadBalancingPolicy} childPolicy"," * @extends LoadBalancingPolicy"," * @constructor"," */","function TokenAwarePolicy (childPolicy) {","  if (!childPolicy) {","    throw new Error(\"You must specify a child load balancing policy\");","  }","  this.childPolicy = childPolicy;","}","","util.inherits(TokenAwarePolicy, LoadBalancingPolicy);","","TokenAwarePolicy.prototype.init = function (client, hosts, callback) {","  this.client = client;","  this.hosts = hosts;","  this.childPolicy.init(client, hosts, callback);","};","","TokenAwarePolicy.prototype.getDistance = function (host) {","  return this.childPolicy.getDistance(host);","};","","/**"," * Returns the hosts to use for a new query."," * The returned plan will first return replicas (whose HostDistance"," * for the child policy is local) for the query if it can determine"," * them is not."," * Following what it will return the plan of the child policy."," * @param {String} keyspace Name of the keyspace"," * @param queryOptions"," * @param {Function} callback"," */","TokenAwarePolicy.prototype.newQueryPlan = function (keyspace, queryOptions, callback) {","  var routingKey;","  if (queryOptions) {","    routingKey = queryOptions.routingKey;","  }","  var replicas;","  if (routingKey) {","    replicas = this.client.getReplicas(keyspace, routingKey);","  }","  if (!routingKey || !replicas) {","    return this.childPolicy.newQueryPlan(keyspace, queryOptions, callback);","  }","  var iterator = new TokenAwareIterator(keyspace, queryOptions, replicas, this.childPolicy);","  iterator.iterate(callback);","};","","/**"," * An iterator that holds the context for the subsequent next() calls"," * @param {String} keyspace"," * @param queryOptions"," * @param {Array} replicas"," * @param childPolicy"," * @constructor"," * @ignore"," */","function TokenAwareIterator(keyspace, queryOptions, replicas, childPolicy) {","  this.keyspace = keyspace;","  this.childPolicy = childPolicy;","  this.queryOptions = queryOptions;","  this.localReplicas = [];","  this.replicaIndex = 0;","  this.replicaMap = {};","  this.childIterator = null;","  // Memoize the local replicas","  // The amount of local replicas should be defined before start iterating, in order to select an","  // appropriate (pseudo random) startIndex","  for (var i = 0; i < replicas.length; i++) {","    var host = replicas[i];","    if (this.childPolicy.getDistance(host) !== types.distance.local) {","      continue;","    }","    this.replicaMap[host.address] = true;","    this.localReplicas.push(host);","  }","  // We use a PRNG to set the replica index","  // We only care about proportional fair scheduling between replicas of a given token","  // Math.random() has an extremely short permutation cycle length but we don't care about collisions","  this.startIndex = Math.floor(Math.random() * this.localReplicas.length);","}","","TokenAwareIterator.prototype.iterate = function (callback) {","  //Load the child policy hosts","  var self = this;","  this.childPolicy.newQueryPlan(this.keyspace, this.queryOptions, function (err, iterator) {","    if (err) {","      return callback(err);","    }","    //get the iterator of the child policy in case is needed","    self.childIterator = iterator;","    callback(null, {","      next: function () { return self.computeNext(); }","    });","  });","};","","TokenAwareIterator.prototype.computeNext = function () {","  var host;","  if (this.replicaIndex < this.localReplicas.length) {","    host = this.localReplicas[(this.startIndex + (this.replicaIndex++)) % this.localReplicas.length];","    return { value: host, done: false };","  }","  // Return hosts from child policy","  var item;","  while ((item = this.childIterator.next()) && !item.done) {","    if (this.replicaMap[item.value.address]) {","      // Avoid yielding local replicas from the child load balancing policy query plan","      continue;","    }","    return item;","  }","  return doneIteratorObject;","};","","/**"," * Create a new policy that wraps the provided child policy but only \"allow\" hosts"," * from the provided while list."," * @class"," * @classdesc"," * A load balancing policy wrapper that ensure that only hosts from a provided"," * white list will ever be returned."," * <p>"," * This policy wraps another load balancing policy and will delegate the choice"," * of hosts to the wrapped policy with the exception that only hosts contained"," * in the white list provided when constructing this policy will ever be"," * returned. Any host not in the while list will be considered ignored"," * and thus will not be connected to."," * <p>"," * This policy can be useful to ensure that the driver only connects to a"," * predefined set of hosts. Keep in mind however that this policy defeats"," * somewhat the host auto-detection of the driver. As such, this policy is only"," * useful in a few special cases or for testing, but is not optimal in general."," * If all you want to do is limiting connections to hosts of the local"," * data-center then you should use DCAwareRoundRobinPolicy and *not* this policy"," * in particular."," * @param {LoadBalancingPolicy} childPolicy the wrapped policy."," * @param {Array.<string>}  whiteList the white listed hosts address in the format ipAddress:port."," * Only hosts from this list may get connected"," * to (whether they will get connected to or not depends on the child policy)."," * @extends LoadBalancingPolicy"," * @constructor"," */","function WhiteListPolicy (childPolicy, whiteList) {","  if (!childPolicy) {","    throw new Error(\"You must specify a child load balancing policy\");","  }","  if (!util.isArray(whiteList)) {","    throw new Error(\"You must provide the white list of host addresses\");","  }","  this.childPolicy = childPolicy;","  var map = {};","  whiteList.forEach(function (address) {","    map[address] = true;","  });","  this.whiteList = map;","}","","util.inherits(WhiteListPolicy, LoadBalancingPolicy);","","WhiteListPolicy.prototype.init = function (client, hosts, callback) {","  this.childPolicy.init(client, hosts, callback);","};","","/**"," * Uses the child policy to return the distance to the host if included in the white list."," * Any host not in the while list will be considered ignored."," * @param host"," */","WhiteListPolicy.prototype.getDistance = function (host) {","  if (!this._contains(host)) {","    return types.distance.ignored;","  }","  return this.childPolicy.getDistance(host);","};","","/**"," * @param {Host} host"," * @returns {boolean}"," * @private"," */","WhiteListPolicy.prototype._contains = function (host) {","  return !!this.whiteList[host.address];","};","","/**"," * Returns the hosts to use for a new query filtered by the white list."," */","WhiteListPolicy.prototype.newQueryPlan = function (keyspace, queryOptions, callback) {","  var self = this;","  this.childPolicy.newQueryPlan(keyspace, queryOptions, function (err, iterator) {","    if (err) {","      return callback(err);","    }","    callback(null, self._filter(iterator));","  });","};","","WhiteListPolicy.prototype._filter = function (childIterator) {","  var self = this;","  return {","    next: function () {","      var item = childIterator.next();","      if (!item.done && !self._contains(item.value)) {","        return this.next();","      }","      return item;","    }","  };","};","","","exports.DCAwareRoundRobinPolicy = DCAwareRoundRobinPolicy;","exports.LoadBalancingPolicy = LoadBalancingPolicy;","exports.RoundRobinPolicy = RoundRobinPolicy;","exports.TokenAwarePolicy = TokenAwarePolicy;","exports.WhiteListPolicy = WhiteListPolicy;"],"l":{"3":1,"4":1,"5":1,"6":1,"8":1,"15":1,"25":1,"26":0,"27":0,"28":0,"36":1,"37":0,"48":1,"49":0,"57":1,"58":0,"61":1,"68":1,"69":0,"70":0,"72":0,"73":0,"74":0,"76":0,"77":0,"78":0,"79":0,"82":0,"84":0,"85":0,"87":0,"106":1,"107":1,"108":1,"109":1,"111":1,"113":1,"116":1,"124":1,"125":0,"126":0,"127":0,"128":0,"129":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"140":0,"141":0,"144":0,"151":1,"152":0,"153":0,"155":0,"156":0,"158":0,"161":1,"162":0,"163":0,"166":1,"167":0,"168":0,"170":0,"173":0,"174":0,"175":0,"176":0,"177":0,"179":0,"181":0,"182":0,"183":0,"185":0,"186":0,"188":0,"189":0,"190":0,"192":0,"193":0,"194":0,"206":1,"207":0,"208":0,"210":0,"211":0,"212":0,"214":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"224":0,"225":0,"226":0,"227":0,"229":0,"230":0,"231":0,"233":0,"244":1,"245":1,"246":0,"248":1,"251":1,"253":1,"254":0,"255":0,"256":0,"259":1,"260":0,"273":1,"274":0,"275":0,"276":0,"278":0,"279":0,"280":0,"282":0,"283":0,"285":0,"286":0,"298":1,"299":0,"300":0,"301":0,"302":0,"303":0,"304":0,"305":0,"309":0,"310":0,"311":0,"312":0,"314":0,"315":0,"320":0,"323":1,"325":0,"326":0,"327":0,"328":0,"331":0,"332":0,"333":0,"338":1,"339":0,"340":0,"341":0,"342":0,"345":0,"346":0,"347":0,"349":0,"351":0,"353":0,"384":1,"385":0,"386":0,"388":0,"389":0,"391":0,"392":0,"393":0,"394":0,"396":0,"399":1,"401":1,"402":0,"410":1,"411":0,"412":0,"414":0,"422":1,"423":0,"429":1,"430":0,"431":0,"432":0,"433":0,"435":0,"439":1,"440":0,"441":0,"443":0,"444":0,"445":0,"447":0,"453":1,"454":1,"455":1,"456":1,"457":1}},"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/types/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/types/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":1,"28":1,"29":1,"30":27,"31":0,"32":27,"33":27,"34":1,"35":26,"36":1,"37":1,"38":1,"39":0,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":1,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":1,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":1,"95":0,"96":0,"97":0,"98":0,"99":0,"100":1,"101":0,"102":0,"103":0,"104":1,"105":0,"106":1,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":1,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":1,"130":0,"131":0,"132":0,"133":1,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":1,"141":0,"142":1,"143":0,"144":1,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":1,"156":0,"157":0,"158":1,"159":1,"160":0,"161":0,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":1,"169":1,"170":1,"171":1,"172":1,"173":1,"174":1,"175":1,"176":1,"177":1,"178":1,"179":1,"180":1,"181":1,"182":1,"183":1,"184":1,"185":1,"186":1,"187":1,"188":1,"189":1,"190":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,27],"8":[1,26],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0,0],"38":[0,0]},"f":{"1":0,"2":0,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0},"fnMap":{"1":{"name":"(anonymous_1)","line":106,"loc":{"start":{"line":106,"column":14},"end":{"line":106,"column":29}}},"2":{"name":"(anonymous_2)","line":125,"loc":{"start":{"line":125,"column":83},"end":{"line":125,"column":96}}},"3":{"name":"(anonymous_3)","line":143,"loc":{"start":{"line":143,"column":24},"end":{"line":143,"column":36}}},"4":{"name":"(anonymous_4)","line":198,"loc":{"start":{"line":198,"column":13},"end":{"line":198,"column":29}}},"5":{"name":"timeuuid","line":293,"loc":{"start":{"line":293,"column":0},"end":{"line":293,"column":43}}},"6":{"name":"uuid","line":330,"loc":{"start":{"line":330,"column":0},"end":{"line":330,"column":39}}},"7":{"name":"getDataTypeNameByCode","line":354,"loc":{"start":{"line":354,"column":0},"end":{"line":354,"column":37}}},"8":{"name":"(anonymous_8)","line":368,"loc":{"start":{"line":368,"column":20},"end":{"line":368,"column":33}}},"9":{"name":"FrameHeader","line":391,"loc":{"start":{"line":391,"column":0},"end":{"line":391,"column":67}}},"10":{"name":"(anonymous_10)","line":403,"loc":{"start":{"line":403,"column":19},"end":{"line":403,"column":38}}},"11":{"name":"(anonymous_11)","line":415,"loc":{"start":{"line":415,"column":33},"end":{"line":415,"column":51}}},"12":{"name":"(anonymous_12)","line":424,"loc":{"start":{"line":424,"column":25},"end":{"line":424,"column":48}}},"13":{"name":"(anonymous_13)","line":442,"loc":{"start":{"line":442,"column":33},"end":{"line":442,"column":45}}},"14":{"name":"(anonymous_14)","line":462,"loc":{"start":{"line":462,"column":18},"end":{"line":462,"column":35}}},"15":{"name":"(anonymous_15)","line":473,"loc":{"start":{"line":473,"column":16},"end":{"line":473,"column":33}}},"16":{"name":"(anonymous_16)","line":488,"loc":{"start":{"line":488,"column":25},"end":{"line":488,"column":37}}},"17":{"name":"(anonymous_17)","line":497,"loc":{"start":{"line":497,"column":24},"end":{"line":497,"column":36}}},"18":{"name":"generateTimestamp","line":507,"loc":{"start":{"line":507,"column":0},"end":{"line":507,"column":47}}},"19":{"name":"QueryParserError","line":532,"loc":{"start":{"line":532,"column":0},"end":{"line":532,"column":29}}},"20":{"name":"TimeoutError","line":539,"loc":{"start":{"line":539,"column":0},"end":{"line":539,"column":32}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":27}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":34}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":38}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":29}},"5":{"start":{"line":13,"column":0},"end":{"line":13,"column":27}},"6":{"start":{"line":30,"column":0},"end":{"line":42,"column":2}},"7":{"start":{"line":74,"column":0},"end":{"line":136,"column":2}},"8":{"start":{"line":107,"column":4},"end":{"line":107,"column":30}},"9":{"start":{"line":108,"column":4},"end":{"line":129,"column":5}},"10":{"start":{"line":109,"column":6},"end":{"line":109,"column":56}},"11":{"start":{"line":110,"column":6},"end":{"line":112,"column":7}},"12":{"start":{"line":111,"column":8},"end":{"line":111,"column":83}},"13":{"start":{"line":113,"column":6},"end":{"line":113,"column":61}},"14":{"start":{"line":114,"column":6},"end":{"line":116,"column":7}},"15":{"start":{"line":115,"column":8},"end":{"line":115,"column":114}},"16":{"start":{"line":117,"column":6},"end":{"line":117,"column":50}},"17":{"start":{"line":118,"column":6},"end":{"line":121,"column":7}},"18":{"start":{"line":120,"column":8},"end":{"line":120,"column":65}},"19":{"start":{"line":122,"column":6},"end":{"line":122,"column":54}},"20":{"start":{"line":123,"column":6},"end":{"line":128,"column":7}},"21":{"start":{"line":125,"column":8},"end":{"line":127,"column":18}},"22":{"start":{"line":126,"column":10},"end":{"line":126,"column":42}},"23":{"start":{"line":130,"column":4},"end":{"line":130,"column":51}},"24":{"start":{"line":131,"column":4},"end":{"line":133,"column":5}},"25":{"start":{"line":132,"column":6},"end":{"line":132,"column":72}},"26":{"start":{"line":134,"column":4},"end":{"line":134,"column":20}},"27":{"start":{"line":143,"column":0},"end":{"line":156,"column":5}},"28":{"start":{"line":144,"column":2},"end":{"line":144,"column":18}},"29":{"start":{"line":145,"column":2},"end":{"line":154,"column":3}},"30":{"start":{"line":146,"column":4},"end":{"line":148,"column":5}},"31":{"start":{"line":147,"column":6},"end":{"line":147,"column":15}},"32":{"start":{"line":149,"column":4},"end":{"line":149,"column":29}},"33":{"start":{"line":150,"column":4},"end":{"line":152,"column":5}},"34":{"start":{"line":151,"column":6},"end":{"line":151,"column":15}},"35":{"start":{"line":153,"column":4},"end":{"line":153,"column":22}},"36":{"start":{"line":155,"column":2},"end":{"line":155,"column":16}},"37":{"start":{"line":165,"column":0},"end":{"line":169,"column":2}},"38":{"start":{"line":176,"column":0},"end":{"line":201,"column":2}},"39":{"start":{"line":199,"column":4},"end":{"line":199,"column":50}},"40":{"start":{"line":209,"column":0},"end":{"line":213,"column":2}},"41":{"start":{"line":218,"column":0},"end":{"line":237,"column":2}},"42":{"start":{"line":244,"column":0},"end":{"line":250,"column":2}},"43":{"start":{"line":257,"column":0},"end":{"line":262,"column":2}},"44":{"start":{"line":270,"column":0},"end":{"line":270,"column":43}},"45":{"start":{"line":277,"column":0},"end":{"line":277,"column":42}},"46":{"start":{"line":283,"column":0},"end":{"line":283,"column":24}},"47":{"start":{"line":293,"column":0},"end":{"line":323,"column":1}},"48":{"start":{"line":294,"column":2},"end":{"line":294,"column":11}},"49":{"start":{"line":295,"column":2},"end":{"line":295,"column":12}},"50":{"start":{"line":296,"column":2},"end":{"line":296,"column":13}},"51":{"start":{"line":297,"column":2},"end":{"line":297,"column":14}},"52":{"start":{"line":298,"column":2},"end":{"line":315,"column":3}},"53":{"start":{"line":299,"column":4},"end":{"line":301,"column":5}},"54":{"start":{"line":300,"column":6},"end":{"line":300,"column":37}},"55":{"start":{"line":302,"column":4},"end":{"line":304,"column":5}},"56":{"start":{"line":303,"column":6},"end":{"line":303,"column":27}},"57":{"start":{"line":305,"column":4},"end":{"line":307,"column":5}},"58":{"start":{"line":306,"column":6},"end":{"line":306,"column":40}},"59":{"start":{"line":308,"column":4},"end":{"line":311,"column":5}},"60":{"start":{"line":309,"column":6},"end":{"line":309,"column":30}},"61":{"start":{"line":310,"column":6},"end":{"line":310,"column":49}},"62":{"start":{"line":312,"column":4},"end":{"line":314,"column":5}},"63":{"start":{"line":313,"column":6},"end":{"line":313,"column":28}},"64":{"start":{"line":316,"column":2},"end":{"line":316,"column":56}},"65":{"start":{"line":317,"column":2},"end":{"line":321,"column":3}},"66":{"start":{"line":319,"column":4},"end":{"line":319,"column":47}},"67":{"start":{"line":320,"column":4},"end":{"line":320,"column":18}},"68":{"start":{"line":322,"column":2},"end":{"line":322,"column":25}},"69":{"start":{"line":330,"column":0},"end":{"line":346,"column":1}},"70":{"start":{"line":331,"column":2},"end":{"line":331,"column":11}},"71":{"start":{"line":332,"column":2},"end":{"line":336,"column":3}},"72":{"start":{"line":333,"column":4},"end":{"line":335,"column":5}},"73":{"start":{"line":334,"column":6},"end":{"line":334,"column":50}},"74":{"start":{"line":337,"column":2},"end":{"line":339,"column":3}},"75":{"start":{"line":338,"column":4},"end":{"line":338,"column":25}},"76":{"start":{"line":340,"column":2},"end":{"line":344,"column":3}},"77":{"start":{"line":342,"column":4},"end":{"line":342,"column":47}},"78":{"start":{"line":343,"column":4},"end":{"line":343,"column":18}},"79":{"start":{"line":345,"column":2},"end":{"line":345,"column":25}},"80":{"start":{"line":354,"column":0},"end":{"line":377,"column":1}},"81":{"start":{"line":355,"column":2},"end":{"line":357,"column":3}},"82":{"start":{"line":356,"column":4},"end":{"line":356,"column":72}},"83":{"start":{"line":358,"column":2},"end":{"line":358,"column":45}},"84":{"start":{"line":359,"column":2},"end":{"line":361,"column":3}},"85":{"start":{"line":360,"column":4},"end":{"line":360,"column":90}},"86":{"start":{"line":362,"column":2},"end":{"line":364,"column":3}},"87":{"start":{"line":363,"column":4},"end":{"line":363,"column":20}},"88":{"start":{"line":365,"column":2},"end":{"line":372,"column":3}},"89":{"start":{"line":366,"column":4},"end":{"line":371,"column":11}},"90":{"start":{"line":369,"column":8},"end":{"line":369,"column":40}},"91":{"start":{"line":373,"column":2},"end":{"line":375,"column":3}},"92":{"start":{"line":374,"column":4},"end":{"line":374,"column":67}},"93":{"start":{"line":376,"column":2},"end":{"line":376,"column":18}},"94":{"start":{"line":391,"column":0},"end":{"line":397,"column":1}},"95":{"start":{"line":392,"column":2},"end":{"line":392,"column":25}},"96":{"start":{"line":393,"column":2},"end":{"line":393,"column":21}},"97":{"start":{"line":394,"column":2},"end":{"line":394,"column":27}},"98":{"start":{"line":395,"column":2},"end":{"line":395,"column":23}},"99":{"start":{"line":396,"column":2},"end":{"line":396,"column":31}},"100":{"start":{"line":403,"column":0},"end":{"line":408,"column":2}},"101":{"start":{"line":404,"column":2},"end":{"line":406,"column":3}},"102":{"start":{"line":405,"column":4},"end":{"line":405,"column":13}},"103":{"start":{"line":407,"column":2},"end":{"line":407,"column":11}},"104":{"start":{"line":415,"column":0},"end":{"line":417,"column":2}},"105":{"start":{"line":416,"column":2},"end":{"line":416,"column":26}},"106":{"start":{"line":424,"column":0},"end":{"line":439,"column":2}},"107":{"start":{"line":425,"column":2},"end":{"line":425,"column":19}},"108":{"start":{"line":426,"column":2},"end":{"line":428,"column":3}},"109":{"start":{"line":427,"column":4},"end":{"line":427,"column":15}},"110":{"start":{"line":429,"column":2},"end":{"line":429,"column":37}},"111":{"start":{"line":430,"column":2},"end":{"line":430,"column":38}},"112":{"start":{"line":431,"column":2},"end":{"line":437,"column":3}},"113":{"start":{"line":432,"column":4},"end":{"line":432,"column":38}},"114":{"start":{"line":435,"column":4},"end":{"line":435,"column":39}},"115":{"start":{"line":436,"column":4},"end":{"line":436,"column":16}},"116":{"start":{"line":438,"column":2},"end":{"line":438,"column":102}},"117":{"start":{"line":442,"column":0},"end":{"line":457,"column":2}},"118":{"start":{"line":443,"column":2},"end":{"line":443,"column":55}},"119":{"start":{"line":444,"column":2},"end":{"line":444,"column":34}},"120":{"start":{"line":445,"column":2},"end":{"line":445,"column":32}},"121":{"start":{"line":446,"column":2},"end":{"line":446,"column":17}},"122":{"start":{"line":447,"column":2},"end":{"line":453,"column":3}},"123":{"start":{"line":448,"column":4},"end":{"line":448,"column":36}},"124":{"start":{"line":451,"column":4},"end":{"line":451,"column":39}},"125":{"start":{"line":452,"column":4},"end":{"line":452,"column":15}},"126":{"start":{"line":454,"column":2},"end":{"line":454,"column":40}},"127":{"start":{"line":455,"column":2},"end":{"line":455,"column":45}},"128":{"start":{"line":456,"column":2},"end":{"line":456,"column":13}},"129":{"start":{"line":462,"column":0},"end":{"line":467,"column":2}},"130":{"start":{"line":463,"column":2},"end":{"line":465,"column":3}},"131":{"start":{"line":464,"column":4},"end":{"line":464,"column":76}},"132":{"start":{"line":466,"column":2},"end":{"line":466,"column":62}},"133":{"start":{"line":473,"column":0},"end":{"line":481,"column":2}},"134":{"start":{"line":474,"column":2},"end":{"line":476,"column":3}},"135":{"start":{"line":475,"column":4},"end":{"line":475,"column":74}},"136":{"start":{"line":477,"column":2},"end":{"line":477,"column":29}},"137":{"start":{"line":478,"column":2},"end":{"line":478,"column":55}},"138":{"start":{"line":479,"column":2},"end":{"line":479,"column":54}},"139":{"start":{"line":480,"column":2},"end":{"line":480,"column":16}},"140":{"start":{"line":488,"column":0},"end":{"line":490,"column":2}},"141":{"start":{"line":489,"column":2},"end":{"line":489,"column":36}},"142":{"start":{"line":497,"column":0},"end":{"line":499,"column":2}},"143":{"start":{"line":498,"column":2},"end":{"line":498,"column":25}},"144":{"start":{"line":507,"column":0},"end":{"line":527,"column":1}},"145":{"start":{"line":508,"column":2},"end":{"line":510,"column":3}},"146":{"start":{"line":509,"column":4},"end":{"line":509,"column":22}},"147":{"start":{"line":512,"column":2},"end":{"line":512,"column":28}},"148":{"start":{"line":513,"column":2},"end":{"line":522,"column":3}},"149":{"start":{"line":514,"column":4},"end":{"line":514,"column":43}},"150":{"start":{"line":517,"column":4},"end":{"line":519,"column":5}},"151":{"start":{"line":518,"column":6},"end":{"line":518,"column":26}},"152":{"start":{"line":520,"column":4},"end":{"line":520,"column":46}},"153":{"start":{"line":521,"column":4},"end":{"line":521,"column":22}},"154":{"start":{"line":523,"column":2},"end":{"line":526,"column":20}},"155":{"start":{"line":532,"column":0},"end":{"line":535,"column":1}},"156":{"start":{"line":533,"column":2},"end":{"line":533,"column":66}},"157":{"start":{"line":534,"column":2},"end":{"line":534,"column":25}},"158":{"start":{"line":536,"column":0},"end":{"line":536,"column":52}},"159":{"start":{"line":539,"column":0},"end":{"line":542,"column":1}},"160":{"start":{"line":540,"column":2},"end":{"line":540,"column":60}},"161":{"start":{"line":541,"column":2},"end":{"line":541,"column":106}},"162":{"start":{"line":543,"column":0},"end":{"line":543,"column":48}},"163":{"start":{"line":545,"column":0},"end":{"line":545,"column":26}},"164":{"start":{"line":546,"column":0},"end":{"line":546,"column":38}},"165":{"start":{"line":547,"column":0},"end":{"line":547,"column":30}},"166":{"start":{"line":548,"column":0},"end":{"line":548,"column":54}},"167":{"start":{"line":549,"column":0},"end":{"line":549,"column":28}},"168":{"start":{"line":550,"column":0},"end":{"line":550,"column":32}},"169":{"start":{"line":551,"column":0},"end":{"line":551,"column":40}},"170":{"start":{"line":552,"column":0},"end":{"line":552,"column":48}},"171":{"start":{"line":553,"column":0},"end":{"line":553,"column":32}},"172":{"start":{"line":554,"column":0},"end":{"line":554,"column":28}},"173":{"start":{"line":555,"column":0},"end":{"line":555,"column":20}},"174":{"start":{"line":556,"column":0},"end":{"line":556,"column":46}},"175":{"start":{"line":557,"column":0},"end":{"line":557,"column":34}},"176":{"start":{"line":558,"column":0},"end":{"line":558,"column":48}},"177":{"start":{"line":559,"column":0},"end":{"line":559,"column":39}},"178":{"start":{"line":560,"column":0},"end":{"line":560,"column":44}},"179":{"start":{"line":561,"column":0},"end":{"line":561,"column":44}},"180":{"start":{"line":562,"column":0},"end":{"line":562,"column":20}},"181":{"start":{"line":563,"column":0},"end":{"line":563,"column":44}},"182":{"start":{"line":564,"column":0},"end":{"line":564,"column":50}},"183":{"start":{"line":565,"column":0},"end":{"line":565,"column":31}},"184":{"start":{"line":567,"column":0},"end":{"line":567,"column":41}},"185":{"start":{"line":568,"column":0},"end":{"line":568,"column":36}},"186":{"start":{"line":569,"column":0},"end":{"line":569,"column":28}},"187":{"start":{"line":570,"column":0},"end":{"line":570,"column":35}},"188":{"start":{"line":571,"column":0},"end":{"line":571,"column":20}},"189":{"start":{"line":572,"column":0},"end":{"line":572,"column":22}},"190":{"start":{"line":573,"column":0},"end":{"line":573,"column":46}}},"branchMap":{"1":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":4},"end":{"line":108,"column":4}},{"start":{"line":108,"column":4},"end":{"line":108,"column":4}}]},"2":{"line":110,"type":"if","locations":[{"start":{"line":110,"column":6},"end":{"line":110,"column":6}},{"start":{"line":110,"column":6},"end":{"line":110,"column":6}}]},"3":{"line":114,"type":"if","locations":[{"start":{"line":114,"column":6},"end":{"line":114,"column":6}},{"start":{"line":114,"column":6},"end":{"line":114,"column":6}}]},"4":{"line":118,"type":"if","locations":[{"start":{"line":118,"column":6},"end":{"line":118,"column":6}},{"start":{"line":118,"column":6},"end":{"line":118,"column":6}}]},"5":{"line":123,"type":"if","locations":[{"start":{"line":123,"column":6},"end":{"line":123,"column":6}},{"start":{"line":123,"column":6},"end":{"line":123,"column":6}}]},"6":{"line":131,"type":"if","locations":[{"start":{"line":131,"column":4},"end":{"line":131,"column":4}},{"start":{"line":131,"column":4},"end":{"line":131,"column":4}}]},"7":{"line":146,"type":"if","locations":[{"start":{"line":146,"column":4},"end":{"line":146,"column":4}},{"start":{"line":146,"column":4},"end":{"line":146,"column":4}}]},"8":{"line":150,"type":"if","locations":[{"start":{"line":150,"column":4},"end":{"line":150,"column":4}},{"start":{"line":150,"column":4},"end":{"line":150,"column":4}}]},"9":{"line":199,"type":"binary-expr","locations":[{"start":{"line":199,"column":11},"end":{"line":199,"column":28}},{"start":{"line":199,"column":32},"end":{"line":199,"column":49}}]},"10":{"line":298,"type":"if","locations":[{"start":{"line":298,"column":2},"end":{"line":298,"column":2}},{"start":{"line":298,"column":2},"end":{"line":298,"column":2}}]},"11":{"line":299,"type":"if","locations":[{"start":{"line":299,"column":4},"end":{"line":299,"column":4}},{"start":{"line":299,"column":4},"end":{"line":299,"column":4}}]},"12":{"line":302,"type":"if","locations":[{"start":{"line":302,"column":4},"end":{"line":302,"column":4}},{"start":{"line":302,"column":4},"end":{"line":302,"column":4}}]},"13":{"line":305,"type":"if","locations":[{"start":{"line":305,"column":4},"end":{"line":305,"column":4}},{"start":{"line":305,"column":4},"end":{"line":305,"column":4}}]},"14":{"line":308,"type":"if","locations":[{"start":{"line":308,"column":4},"end":{"line":308,"column":4}},{"start":{"line":308,"column":4},"end":{"line":308,"column":4}}]},"15":{"line":312,"type":"if","locations":[{"start":{"line":312,"column":4},"end":{"line":312,"column":4}},{"start":{"line":312,"column":4},"end":{"line":312,"column":4}}]},"16":{"line":317,"type":"if","locations":[{"start":{"line":317,"column":2},"end":{"line":317,"column":2}},{"start":{"line":317,"column":2},"end":{"line":317,"column":2}}]},"17":{"line":319,"type":"binary-expr","locations":[{"start":{"line":319,"column":34},"end":{"line":319,"column":40}},{"start":{"line":319,"column":44},"end":{"line":319,"column":45}}]},"18":{"line":332,"type":"if","locations":[{"start":{"line":332,"column":2},"end":{"line":332,"column":2}},{"start":{"line":332,"column":2},"end":{"line":332,"column":2}}]},"19":{"line":333,"type":"if","locations":[{"start":{"line":333,"column":4},"end":{"line":333,"column":4}},{"start":{"line":333,"column":4},"end":{"line":333,"column":4}}]},"20":{"line":337,"type":"if","locations":[{"start":{"line":337,"column":2},"end":{"line":337,"column":2}},{"start":{"line":337,"column":2},"end":{"line":337,"column":2}}]},"21":{"line":340,"type":"if","locations":[{"start":{"line":340,"column":2},"end":{"line":340,"column":2}},{"start":{"line":340,"column":2},"end":{"line":340,"column":2}}]},"22":{"line":342,"type":"binary-expr","locations":[{"start":{"line":342,"column":34},"end":{"line":342,"column":40}},{"start":{"line":342,"column":44},"end":{"line":342,"column":45}}]},"23":{"line":355,"type":"if","locations":[{"start":{"line":355,"column":2},"end":{"line":355,"column":2}},{"start":{"line":355,"column":2},"end":{"line":355,"column":2}}]},"24":{"line":355,"type":"binary-expr","locations":[{"start":{"line":355,"column":6},"end":{"line":355,"column":11}},{"start":{"line":355,"column":15},"end":{"line":355,"column":44}}]},"25":{"line":359,"type":"if","locations":[{"start":{"line":359,"column":2},"end":{"line":359,"column":2}},{"start":{"line":359,"column":2},"end":{"line":359,"column":2}}]},"26":{"line":362,"type":"if","locations":[{"start":{"line":362,"column":2},"end":{"line":362,"column":2}},{"start":{"line":362,"column":2},"end":{"line":362,"column":2}}]},"27":{"line":365,"type":"if","locations":[{"start":{"line":365,"column":2},"end":{"line":365,"column":2}},{"start":{"line":365,"column":2},"end":{"line":365,"column":2}}]},"28":{"line":373,"type":"if","locations":[{"start":{"line":373,"column":2},"end":{"line":373,"column":2}},{"start":{"line":373,"column":2},"end":{"line":373,"column":2}}]},"29":{"line":404,"type":"if","locations":[{"start":{"line":404,"column":2},"end":{"line":404,"column":2}},{"start":{"line":404,"column":2},"end":{"line":404,"column":2}}]},"30":{"line":426,"type":"if","locations":[{"start":{"line":426,"column":2},"end":{"line":426,"column":2}},{"start":{"line":426,"column":2},"end":{"line":426,"column":2}}]},"31":{"line":431,"type":"if","locations":[{"start":{"line":431,"column":2},"end":{"line":431,"column":2}},{"start":{"line":431,"column":2},"end":{"line":431,"column":2}}]},"32":{"line":447,"type":"if","locations":[{"start":{"line":447,"column":2},"end":{"line":447,"column":2}},{"start":{"line":447,"column":2},"end":{"line":447,"column":2}}]},"33":{"line":463,"type":"if","locations":[{"start":{"line":463,"column":2},"end":{"line":463,"column":2}},{"start":{"line":463,"column":2},"end":{"line":463,"column":2}}]},"34":{"line":474,"type":"if","locations":[{"start":{"line":474,"column":2},"end":{"line":474,"column":2}},{"start":{"line":474,"column":2},"end":{"line":474,"column":2}}]},"35":{"line":508,"type":"if","locations":[{"start":{"line":508,"column":2},"end":{"line":508,"column":2}},{"start":{"line":508,"column":2},"end":{"line":508,"column":2}}]},"36":{"line":513,"type":"if","locations":[{"start":{"line":513,"column":2},"end":{"line":513,"column":2}},{"start":{"line":513,"column":2},"end":{"line":513,"column":2}}]},"37":{"line":513,"type":"binary-expr","locations":[{"start":{"line":513,"column":6},"end":{"line":513,"column":38}},{"start":{"line":513,"column":42},"end":{"line":513,"column":59}},{"start":{"line":513,"column":63},"end":{"line":513,"column":82}}]},"38":{"line":517,"type":"if","locations":[{"start":{"line":517,"column":4},"end":{"line":517,"column":4}},{"start":{"line":517,"column":4},"end":{"line":517,"column":4}}]}},"code":["'use strict';","var util = require('util');","","var errors = require('../errors');","var TimeUuid = require('./time-uuid');","var Uuid = require('./uuid');","","/** @module types */","/**"," * Long constructor, wrapper of the internal library used: {@link http://docs.closure-library.googlecode.com/git/class_goog_math_Long.html Google Closure Long}."," * @constructor"," */","var Long = require('long');","","/**"," * Consistency levels"," * @type {Object}"," * @property {Number} any Writing: A write must be written to at least one node. If all replica nodes for the given row key are down, the write can still succeed after a hinted handoff has been written. If all replica nodes are down at write time, an ANY write is not readable until the replica nodes for that row have recovered."," * @property {Number} one Returns a response from the closest replica, as determined by the snitch."," * @property {Number} two Returns the most recent data from two of the closest replicas."," * @property {Number} three Returns the most recent data from three of the closest replicas."," * @property {Number} quorum Reading: Returns the record with the most recent timestamp after a quorum of replicas has responded regardless of data center. Writing: A write must be written to the commit log and memory table on a quorum of replica nodes."," * @property {Number} all Reading: Returns the record with the most recent timestamp after all replicas have responded. The read operation will fail if a replica does not respond. Writing: A write must be written to the commit log and memory table on all replica nodes in the cluster for that row."," * @property {Number} localQuorum Reading: Returns the record with the most recent timestamp once a quorum of replicas in the current data center as the coordinator node has reported. Writing: A write must be written to the commit log and memory table on a quorum of replica nodes in the same data center as the coordinator node. Avoids latency of inter-data center communication."," * @property {Number} eachQuorum Reading: Returns the record once a quorum of replicas in each data center of the cluster has responded. Writing: Strong consistency. A write must be written to the commit log and memtable on a quorum of replica nodes in all data centers."," * @property {Number} serial Achieves linearizable consistency for lightweight transactions by preventing unconditional updates."," * @property {Number} localSerial Same as serial but confined to the data center. A write must be written conditionally to the commit log and memtable on a quorum of replica nodes in the same data center."," * @property {Number} localOne Similar to One but only within the DC the coordinator is in."," */","var consistencies = {","  any:          0x00,","  one:          0x01,","  two:          0x02,","  three:        0x03,","  quorum:       0x04,","  all:          0x05,","  localQuorum:  0x06,","  eachQuorum:   0x07,","  serial:       0x08,","  localSerial:  0x09,","  localOne:     0x0a","};","","/**"," * CQL data types"," * @type {Object}"," * @property {Number} custom A custom type."," * @property {Number} ascii ASCII character string."," * @property {Number} bigint 64-bit signed long."," * @property {Number} blob Arbitrary bytes (no validation)."," * @property {Number} boolean true or false."," * @property {Number} counter Counter column (64-bit signed value)."," * @property {Number} decimal Variable-precision decimal."," * @property {Number} double 64-bit IEEE-754 floating point."," * @property {Number} float 32-bit IEEE-754 floating point."," * @property {Number} int 32-bit signed integer."," * @property {Number} text UTF8 encoded string."," * @property {Number} timestamp A timestamp."," * @property {Number} uuid Type 1 or type 4 UUID."," * @property {Number} varchar UTF8 encoded string."," * @property {Number} varint Arbitrary-precision integer."," * @property {Number} timeuuid  Type 1 UUID."," * @property {Number} inet An IP address. It can be either 4 bytes long (IPv4) or 16 bytes long (IPv6)."," * @property {Number} date A date without a time-zone in the ISO-8601 calendar system."," * @property {Number} time A value representing the time portion of the day."," * @property {Number} smallint 16-bit two's complement integer."," * @property {Number} tinyint 8-bit two's complement integer."," * @property {Number} list A collection of elements."," * @property {Number} map Key/value pairs."," * @property {Number} set A collection that contains no duplicate elements."," * @property {Number} udt User-defined type."," * @property {Number} tuple A sequence of values."," */","var dataTypes = {","  custom:     0x0000,","  ascii:      0x0001,","  bigint:     0x0002,","  blob:       0x0003,","  boolean:    0x0004,","  counter:    0x0005,","  decimal:    0x0006,","  double:     0x0007,","  float:      0x0008,","  int:        0x0009,","  text:       0x000a,","  timestamp:  0x000b,","  uuid:       0x000c,","  varchar:    0x000d,","  varint:     0x000e,","  timeuuid:   0x000f,","  inet:       0x0010,","  date:       0x0011,","  time:       0x0012,","  smallint:   0x0013,","  tinyint:    0x0014,","  list:       0x0020,","  map:        0x0021,","  set:        0x0022,","  udt:        0x0030,","  tuple:      0x0031,","  /**","   * Returns the typeInfo of a given type name","   * @param name","   * @returns {{code: number, info: *|Object}}","   */","  getByName:  function(name) {","    name = name.toLowerCase();","    if (name.indexOf('<') > 0) {","      var listMatches = /^(list|set)<(.+)>$/.exec(name);","      if (listMatches) {","        return { code: this[listMatches[1]], info: this.getByName(listMatches[2])};","      }","      var mapMatches = /^(map)< *(.+) *, *(.+)>$/.exec(name);","      if (mapMatches) {","        return { code: this[mapMatches[1]], info: [this.getByName(mapMatches[2]), this.getByName(mapMatches[3])]};","      }","      var udtMatches = /^(udt)<(.+)>$/.exec(name);","      if (udtMatches) {","        //udt name as raw string","        return { code: this[udtMatches[1]], info: udtMatches[2]};","      }","      var tupleMatches = /^(tuple)<(.+)>$/.exec(name);","      if (tupleMatches) {","        //tuple info as an array of types","        return { code: this[tupleMatches[1]], info: tupleMatches[2].split(',').map(function (x) {","          return this.getByName(x.trim());","        }, this)};","      }","    }","    var typeInfo = { code: this[name], info: null};","    if (typeof typeInfo.code !== 'number') {","      throw new TypeError('Data type with name ' + name + ' not valid');","    }","    return typeInfo;","  }","};","","/**"," * Map of Data types by code"," * @internal"," * @private"," */","var _dataTypesByCode = (function () {","  var result = {};","  for (var key in dataTypes) {","    if (!dataTypes.hasOwnProperty(key)) {","      continue;","    }","    var val = dataTypes[key];","    if (typeof val !== 'number') {","      continue;","    }","    result[val] = key;","  }","  return result;","})();","","/**"," * Represents the distance of Cassandra node as assigned by a LoadBalancingPolicy relatively to the driver instance."," * @type {Object}"," * @property {Number} local A local node."," * @property {Number} remote A remote node."," * @property {Number} ignored A node that is meant to be ignored."," */","var distance = {","  local:    0,","  remote:   1,","  ignored:  2","};","","/**"," * An integer byte that distinguish the actual message from and to Cassandra"," * @internal"," * @ignore"," */","var opcodes = {","  error:          0x00,","  startup:        0x01,","  ready:          0x02,","  authenticate:   0x03,","  credentials:    0x04,","  options:        0x05,","  supported:      0x06,","  query:          0x07,","  result:         0x08,","  prepare:        0x09,","  execute:        0x0a,","  register:       0x0b,","  event:          0x0c,","  batch:          0x0d,","  authChallenge:  0x0e,","  authResponse:   0x0f,","  authSuccess:    0x10,","","  /**","   * Determines if the code is a valid opcode","   */","  isInRange: function (code) {","    return code > this.error && code > this.event;","  }","};","","/**"," * Event types from Cassandra"," * @type {{topologyChange: string, statusChange: string, schemaChange: string}}"," * @internal"," * @ignore"," */","var protocolEvents = {","  topologyChange: 'TOPOLOGY_CHANGE',","  statusChange: 'STATUS_CHANGE',","  schemaChange: 'SCHEMA_CHANGE'","};","","/**"," * Server error codes returned by Cassandra"," */","var responseErrorCodes = {","  serverError:            0x0000,","  protocolError:          0x000A,","  badCredentials:         0x0100,","  unavailableException:   0x1000,","  overloaded:             0x1001,","  isBootstrapping:        0x1002,","  truncateError:          0x1003,","  writeTimeout:           0x1100,","  readTimeout:            0x1200,","  readFailure:            0x1300,","  functionFailure:        0x1400,","  writeFailure:           0x1500,","  syntaxError:            0x2000,","  unauthorized:           0x2100,","  invalid:                0x2200,","  configError:            0x2300,","  alreadyExists:          0x2400,","  unprepared:             0x2500","};","","/**"," * Type of result included in a response"," * @internal"," * @ignore"," */","var resultKind = {","  voidResult:      0x0001,","  rows:            0x0002,","  setKeyspace:     0x0003,","  prepared:        0x0004,","  schemaChange:    0x0005","};","","/**"," * Message frame flags"," * @internal"," * @ignore"," */","var frameFlags = {","  compression:    0x01,","  tracing:        0x02,","  customPayload:  0x04,","  warning:        0x08","};","","/**"," * Unset representation."," * <p>"," *   Use this field if you want to set a parameter to <code>unset</code>. Valid for Cassandra 2.2 and above."," * </p>"," */","var unset = Object.freeze({'unset': true});","","/**"," * A long representing the value 1000"," * @const"," * @private"," */","var _longOneThousand = Long.fromInt(1000);","","/**"," * Counter used to generate up to 1000 different timestamp values with the same Date"," * @private"," */","var _timestampTicks = 0;","","/**"," * <p><strong>Backward compatibility only, use [TimeUuid]{@link module:types~TimeUuid} instead</strong>.</p>"," * Generates and returns a RFC4122 v1 (timestamp based) UUID in a string representation."," * @param {{msecs, node, clockseq, nsecs}} [options]"," * @param {Buffer} [buffer]"," * @param {Number} [offset]"," * @deprecated Use [TimeUuid]{@link module:types~TimeUuid} instead"," */","function timeuuid(options, buffer, offset) {","  var date;","  var ticks;","  var nodeId;","  var clockId;","  if (options) {","    if (typeof options.msecs === 'number') {","      date = new Date(options.msecs);","    }","    if (options.msecs instanceof Date) {","      date = options.msecs;","    }","    if (util.isArray(options.node)) {","      nodeId = new Buffer(options.node);","    }","    if (typeof options.clockseq === 'number') {","      clockId = new Buffer(2);","      clockId.writeUInt16BE(options.clockseq, 0);","    }","    if (typeof options.nsecs === 'number') {","      ticks = options.nsecs;","    }","  }","  var uuid = new TimeUuid(date, ticks, nodeId, clockId);","  if (buffer instanceof Buffer) {","    //copy the values into the buffer","    uuid.getBuffer().copy(buffer, offset || 0);","    return buffer;","  }","  return uuid.toString();","}","","/**"," * <p><strong>Backward compatibility only, use [Uuid]{@link module:types~Uuid} class instead</strong>.</p>"," * Generate and return a RFC4122 v4 UUID in a string representation."," * @deprecated Use [Uuid]{@link module:types~Uuid} class instead"," */","function uuid(options, buffer, offset) {","  var uuid;","  if (options) {","    if (util.isArray(options.random)) {","      uuid = new Uuid(new Buffer(options.random));","    }","  }","  if (!uuid) {","    uuid = Uuid.random();","  }","  if (buffer instanceof Buffer) {","    //copy the values into the buffer","    uuid.getBuffer().copy(buffer, offset || 0);","    return buffer;","  }","  return uuid.toString();","}","","/**"," * Gets the data type name for a given type definition"," * @internal"," * @ignore"," * @throws {ArgumentError}"," */","function getDataTypeNameByCode(item) {","  if (!item || typeof item.code !== 'number') {","    throw new errors.ArgumentError('Invalid signature type definition');","  }","  var typeName = _dataTypesByCode[item.code];","  if (!typeName) {","    throw new errors.ArgumentError(util.format('Type with code %d not found', item.code));","  }","  if (!item.info) {","    return typeName;","  }","  if (util.isArray(item.info)) {","    return (typeName +","      '<' +","      item.info.map(function (t) {","        return getDataTypeNameByCode(t);","      }).join(', ') +","      '>');","  }","  if (typeof item.info.code === 'number') {","    return typeName + '<' + getDataTypeNameByCode(item.info) + '>';","  }","  return typeName;","}","","//classes","","/**"," * Represents a frame header that could be used to read from a Buffer or to write to a Buffer"," * @ignore"," * @param {Number} version Protocol version"," * @param {Number} flags"," * @param {Number} streamId"," * @param {Number} opcode"," * @param {Number} bodyLength"," * @constructor"," */","function FrameHeader(version, flags, streamId, opcode, bodyLength) {","  this.version = version;","  this.flags = flags;","  this.streamId = streamId;","  this.opcode = opcode;","  this.bodyLength = bodyLength;","}","","/**"," * The length of the header of the frame based on the protocol version"," * @returns {Number}"," */","FrameHeader.size = function (version) {","  if (version >= 3) {","    return 9;","  }","  return 8;","};","","/**"," * Gets the protocol version based on the first byte of the header"," * @param {Buffer} buffer"," * @returns {Number}"," */","FrameHeader.getProtocolVersion = function (buffer) {","  return buffer[0] & 0x7F;","};","","/**"," * @param {Buffer} buf"," * @param {Number} [offset]"," * @returns {FrameHeader}"," */","FrameHeader.fromBuffer = function (buf, offset) {","  var streamId = 0;","  if (!offset) {","    offset = 0;","  }","  var version = buf[offset++] & 0x7F;","  var flags = buf.readUInt8(offset++);","  if (version < 3) {","    streamId = buf.readInt8(offset++);","  }","  else {","    streamId = buf.readInt16BE(offset);","    offset += 2;","  }","  return new FrameHeader(version, flags, streamId, buf.readUInt8(offset++), buf.readUInt32BE(offset));","};","","/** @returns {Buffer} */","FrameHeader.prototype.toBuffer = function () {","  var buf = new Buffer(FrameHeader.size(this.version));","  buf.writeUInt8(this.version, 0);","  buf.writeUInt8(this.flags, 1);","  var offset = 3;","  if (this.version < 3) {","    buf.writeInt8(this.streamId, 2);","  }","  else {","    buf.writeInt16BE(this.streamId, 2);","    offset = 4;","  }","  buf.writeUInt8(this.opcode, offset++);","  buf.writeUInt32BE(this.bodyLength, offset);","  return buf;","};","/**"," * Returns a long representation."," * Used internally for deserialization"," */","Long.fromBuffer = function (value) {","  if (!(value instanceof Buffer)) {","    throw new TypeError('Expected Buffer, obtained ' + util.inspect(value));","  }","  return new Long(value.readInt32BE(4), value.readInt32BE(0));","};","","/**"," * Returns a big-endian buffer representation of the Long instance"," * @param {Long} value"," */","Long.toBuffer = function (value) {","  if (!(value instanceof Long)) {","    throw new TypeError('Expected Long, obtained ' + util.inspect(value));","  }","  var buffer = new Buffer(8);","  buffer.writeUInt32BE(value.getHighBitsUnsigned(), 0);","  buffer.writeUInt32BE(value.getLowBitsUnsigned(), 4);","  return buffer;","};","","//noinspection JSUnresolvedVariable","/**"," * Provide the name of the constructor and the string representation"," * @returns {string}"," */","Long.prototype.inspect = function () {","  return 'Long: ' + this.toString();","};","","//noinspection JSUnresolvedVariable","/**"," * Returns the string representation."," * Method used by the native JSON.stringify() to serialize this instance"," */","Long.prototype.toJSON = function () {","  return this.toString();","};","","/**"," * Generates a value representing the timestamp for the query in microseconds based on the date and the microseconds provided"," * @param {Date} [date] The date to generate the value, if not provided it will use the current date."," * @param {Number} [microseconds] A number from 0 to 999 used to build the microseconds part of the date."," * @returns {Long}"," */","function generateTimestamp(date, microseconds) {","  if (!date) {","    date = new Date();","  }","  //noinspection JSUnresolvedVariable","  var longMicro = Long.ZERO;","  if (typeof microseconds === 'number' && microseconds >= 0 && microseconds < 1000) {","    longMicro = Long.fromInt(microseconds);","  }","  else {","    if (_timestampTicks > 999) {","      _timestampTicks = 0;","    }","    longMicro = Long.fromInt(_timestampTicks);","    _timestampTicks++;","  }","  return Long","    .fromNumber(date.getTime())","    .multiply(_longOneThousand)","    .add(longMicro);","}","","//error classes","","/** @private */","function QueryParserError(e) {","  QueryParserError.super_.call(this, e.message, this.constructor);","  this.internalError = e;","}","util.inherits(QueryParserError, errors.DriverError);","","/** @private */","function TimeoutError (message) {","  TimeoutError.super_.call(this, message, this.constructor);","  this.info = 'Represents an error that happens when the maximum amount of time for an operation passed.';","}","util.inherits(TimeoutError, errors.DriverError);","","exports.opcodes = opcodes;","exports.consistencies = consistencies;","exports.dataTypes = dataTypes;","exports.getDataTypeNameByCode = getDataTypeNameByCode;","exports.distance = distance;","exports.frameFlags = frameFlags;","exports.protocolEvents = protocolEvents;","exports.responseErrorCodes = responseErrorCodes;","exports.resultKind = resultKind;","exports.timeuuid = timeuuid;","exports.uuid = uuid;","exports.BigDecimal = require('./big-decimal');","exports.FrameHeader = FrameHeader;","exports.InetAddress = require('./inet-address');","exports.Integer = require('./integer');","exports.LocalDate = require('./local-date');","exports.LocalTime = require('./local-time');","exports.Long = Long;","exports.ResultSet = require('./result-set');","exports.ResultStream = require('./result-stream');","exports.Row = require('./row');","//export DriverError for backward-compatibility","exports.DriverError = errors.DriverError;","exports.TimeoutError = TimeoutError;","exports.TimeUuid = TimeUuid;","exports.Tuple = require('./tuple');","exports.Uuid = Uuid;","exports.unset = unset;","exports.generateTimestamp = generateTimestamp;"],"l":{"2":1,"4":1,"5":1,"6":1,"13":1,"30":1,"74":1,"107":0,"108":0,"109":0,"110":0,"111":0,"113":0,"114":0,"115":0,"117":0,"118":0,"120":0,"122":0,"123":0,"125":0,"126":0,"130":0,"131":0,"132":0,"134":0,"143":1,"144":1,"145":1,"146":27,"147":0,"149":27,"150":27,"151":1,"153":26,"155":1,"165":1,"176":1,"199":0,"209":1,"218":1,"244":1,"257":1,"270":1,"277":1,"283":1,"293":1,"294":0,"295":0,"296":0,"297":0,"298":0,"299":0,"300":0,"302":0,"303":0,"305":0,"306":0,"308":0,"309":0,"310":0,"312":0,"313":0,"316":0,"317":0,"319":0,"320":0,"322":0,"330":1,"331":0,"332":0,"333":0,"334":0,"337":0,"338":0,"340":0,"342":0,"343":0,"345":0,"354":1,"355":0,"356":0,"358":0,"359":0,"360":0,"362":0,"363":0,"365":0,"366":0,"369":0,"373":0,"374":0,"376":0,"391":1,"392":0,"393":0,"394":0,"395":0,"396":0,"403":1,"404":0,"405":0,"407":0,"415":1,"416":0,"424":1,"425":0,"426":0,"427":0,"429":0,"430":0,"431":0,"432":0,"435":0,"436":0,"438":0,"442":1,"443":0,"444":0,"445":0,"446":0,"447":0,"448":0,"451":0,"452":0,"454":0,"455":0,"456":0,"462":1,"463":0,"464":0,"466":0,"473":1,"474":0,"475":0,"477":0,"478":0,"479":0,"480":0,"488":1,"489":0,"497":1,"498":0,"507":1,"508":0,"509":0,"512":0,"513":0,"514":0,"517":0,"518":0,"520":0,"521":0,"523":0,"532":1,"533":0,"534":0,"536":1,"539":1,"540":0,"541":0,"543":1,"545":1,"546":1,"547":1,"548":1,"549":1,"550":1,"551":1,"552":1,"553":1,"554":1,"555":1,"556":1,"557":1,"558":1,"559":1,"560":1,"561":1,"562":1,"563":1,"564":1,"565":1,"567":1,"568":1,"569":1,"570":1,"571":1,"572":1,"573":1}},"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/types/time-uuid.js":{"path":"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/types/time-uuid.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":1,"19":1,"20":0,"21":1,"22":0,"23":1,"24":0,"25":1,"26":0,"27":1,"28":0,"29":1,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":1,"42":0,"43":1,"44":0,"45":1,"46":0,"47":1,"48":0,"49":0,"50":0,"51":0,"52":0,"53":1,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":1,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":1,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":1,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":1,"89":0,"90":1,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},"fnMap":{"1":{"name":"TimeUuid","line":52,"loc":{"start":{"line":52,"column":0},"end":{"line":52,"column":49}}},"2":{"name":"(anonymous_2)","line":78,"loc":{"start":{"line":78,"column":20},"end":{"line":78,"column":60}}},"3":{"name":"(anonymous_3)","line":87,"loc":{"start":{"line":87,"column":22},"end":{"line":87,"column":39}}},"4":{"name":"(anonymous_4)","line":94,"loc":{"start":{"line":94,"column":15},"end":{"line":94,"column":38}}},"5":{"name":"(anonymous_5)","line":101,"loc":{"start":{"line":101,"column":15},"end":{"line":101,"column":38}}},"6":{"name":"(anonymous_6)","line":112,"loc":{"start":{"line":112,"column":15},"end":{"line":112,"column":42}}},"7":{"name":"(anonymous_7)","line":121,"loc":{"start":{"line":121,"column":38},"end":{"line":121,"column":50}}},"8":{"name":"(anonymous_8)","line":143,"loc":{"start":{"line":143,"column":29},"end":{"line":143,"column":41}}},"9":{"name":"(anonymous_9)","line":151,"loc":{"start":{"line":151,"column":31},"end":{"line":151,"column":43}}},"10":{"name":"(anonymous_10)","line":159,"loc":{"start":{"line":159,"column":37},"end":{"line":159,"column":49}}},"11":{"name":"writeTime","line":163,"loc":{"start":{"line":163,"column":0},"end":{"line":163,"column":40}}},"12":{"name":"getClockId","line":181,"loc":{"start":{"line":181,"column":0},"end":{"line":181,"column":29}}},"13":{"name":"getNodeId","line":202,"loc":{"start":{"line":202,"column":0},"end":{"line":202,"column":27}}},"14":{"name":"getTicks","line":223,"loc":{"start":{"line":223,"column":0},"end":{"line":223,"column":25}}},"15":{"name":"getTimeWithTicks","line":240,"loc":{"start":{"line":240,"column":0},"end":{"line":240,"column":39}}},"16":{"name":"getRandomBytes","line":258,"loc":{"start":{"line":258,"column":0},"end":{"line":258,"column":32}}},"17":{"name":"generateBuffer","line":271,"loc":{"start":{"line":271,"column":0},"end":{"line":271,"column":54}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":27}},"2":{"start":{"line":3,"column":0},"end":{"line":3,"column":31}},"3":{"start":{"line":4,"column":0},"end":{"line":4,"column":27}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":29}},"5":{"start":{"line":13,"column":0},"end":{"line":13,"column":38}},"6":{"start":{"line":19,"column":0},"end":{"line":19,"column":23}},"7":{"start":{"line":25,"column":0},"end":{"line":25,"column":15}},"8":{"start":{"line":31,"column":0},"end":{"line":31,"column":29}},"9":{"start":{"line":37,"column":0},"end":{"line":37,"column":23}},"10":{"start":{"line":52,"column":0},"end":{"line":64,"column":1}},"11":{"start":{"line":53,"column":2},"end":{"line":53,"column":13}},"12":{"start":{"line":54,"column":2},"end":{"line":62,"column":3}},"13":{"start":{"line":55,"column":4},"end":{"line":57,"column":5}},"14":{"start":{"line":56,"column":6},"end":{"line":56,"column":54}},"15":{"start":{"line":58,"column":4},"end":{"line":58,"column":19}},"16":{"start":{"line":61,"column":4},"end":{"line":61,"column":59}},"17":{"start":{"line":63,"column":2},"end":{"line":63,"column":26}},"18":{"start":{"line":66,"column":0},"end":{"line":66,"column":30}},"19":{"start":{"line":78,"column":0},"end":{"line":80,"column":2}},"20":{"start":{"line":79,"column":2},"end":{"line":79,"column":52}},"21":{"start":{"line":87,"column":0},"end":{"line":89,"column":2}},"22":{"start":{"line":88,"column":2},"end":{"line":88,"column":58}},"23":{"start":{"line":94,"column":0},"end":{"line":96,"column":2}},"24":{"start":{"line":95,"column":2},"end":{"line":95,"column":97}},"25":{"start":{"line":101,"column":0},"end":{"line":103,"column":2}},"26":{"start":{"line":102,"column":2},"end":{"line":102,"column":97}},"27":{"start":{"line":112,"column":0},"end":{"line":114,"column":2}},"28":{"start":{"line":113,"column":2},"end":{"line":113,"column":51}},"29":{"start":{"line":121,"column":0},"end":{"line":137,"column":2}},"30":{"start":{"line":122,"column":2},"end":{"line":122,"column":44}},"31":{"start":{"line":124,"column":2},"end":{"line":124,"column":19}},"32":{"start":{"line":125,"column":2},"end":{"line":125,"column":45}},"33":{"start":{"line":126,"column":2},"end":{"line":126,"column":36}},"34":{"start":{"line":127,"column":2},"end":{"line":127,"column":46}},"35":{"start":{"line":128,"column":2},"end":{"line":128,"column":46}},"36":{"start":{"line":130,"column":2},"end":{"line":130,"column":45}},"37":{"start":{"line":131,"column":2},"end":{"line":131,"column":50}},"38":{"start":{"line":132,"column":2},"end":{"line":132,"column":40}},"39":{"start":{"line":133,"column":2},"end":{"line":135,"column":49}},"40":{"start":{"line":136,"column":2},"end":{"line":136,"column":69}},"41":{"start":{"line":143,"column":0},"end":{"line":145,"column":2}},"42":{"start":{"line":144,"column":2},"end":{"line":144,"column":38}},"43":{"start":{"line":151,"column":0},"end":{"line":153,"column":2}},"44":{"start":{"line":152,"column":2},"end":{"line":152,"column":31}},"45":{"start":{"line":159,"column":0},"end":{"line":161,"column":2}},"46":{"start":{"line":160,"column":2},"end":{"line":160,"column":49}},"47":{"start":{"line":163,"column":0},"end":{"line":173,"column":1}},"48":{"start":{"line":165,"column":2},"end":{"line":168,"column":33}},"49":{"start":{"line":169,"column":2},"end":{"line":169,"column":43}},"50":{"start":{"line":170,"column":2},"end":{"line":170,"column":58}},"51":{"start":{"line":171,"column":2},"end":{"line":171,"column":51}},"52":{"start":{"line":172,"column":2},"end":{"line":172,"column":58}},"53":{"start":{"line":181,"column":0},"end":{"line":194,"column":1}},"54":{"start":{"line":182,"column":2},"end":{"line":182,"column":23}},"55":{"start":{"line":183,"column":2},"end":{"line":185,"column":3}},"56":{"start":{"line":184,"column":4},"end":{"line":184,"column":42}},"57":{"start":{"line":186,"column":2},"end":{"line":192,"column":3}},"58":{"start":{"line":188,"column":4},"end":{"line":188,"column":31}},"59":{"start":{"line":190,"column":7},"end":{"line":192,"column":3}},"60":{"start":{"line":191,"column":4},"end":{"line":191,"column":58}},"61":{"start":{"line":193,"column":2},"end":{"line":193,"column":16}},"62":{"start":{"line":202,"column":0},"end":{"line":215,"column":1}},"63":{"start":{"line":203,"column":2},"end":{"line":203,"column":22}},"64":{"start":{"line":204,"column":2},"end":{"line":206,"column":3}},"65":{"start":{"line":205,"column":4},"end":{"line":205,"column":41}},"66":{"start":{"line":207,"column":2},"end":{"line":213,"column":3}},"67":{"start":{"line":209,"column":4},"end":{"line":209,"column":31}},"68":{"start":{"line":211,"column":7},"end":{"line":213,"column":3}},"69":{"start":{"line":212,"column":4},"end":{"line":212,"column":57}},"70":{"start":{"line":214,"column":2},"end":{"line":214,"column":16}},"71":{"start":{"line":223,"column":0},"end":{"line":232,"column":1}},"72":{"start":{"line":224,"column":2},"end":{"line":230,"column":3}},"73":{"start":{"line":225,"column":4},"end":{"line":225,"column":13}},"74":{"start":{"line":226,"column":4},"end":{"line":228,"column":5}},"75":{"start":{"line":227,"column":6},"end":{"line":227,"column":17}},"76":{"start":{"line":229,"column":4},"end":{"line":229,"column":19}},"77":{"start":{"line":231,"column":2},"end":{"line":231,"column":15}},"78":{"start":{"line":240,"column":0},"end":{"line":256,"column":1}},"79":{"start":{"line":241,"column":2},"end":{"line":251,"column":3}},"80":{"start":{"line":243,"column":4},"end":{"line":243,"column":22}},"81":{"start":{"line":244,"column":4},"end":{"line":244,"column":30}},"82":{"start":{"line":245,"column":4},"end":{"line":245,"column":27}},"83":{"start":{"line":246,"column":4},"end":{"line":249,"column":5}},"84":{"start":{"line":247,"column":6},"end":{"line":247,"column":31}},"85":{"start":{"line":248,"column":6},"end":{"line":248,"column":28}},"86":{"start":{"line":250,"column":4},"end":{"line":250,"column":33}},"87":{"start":{"line":252,"column":2},"end":{"line":255,"column":4}},"88":{"start":{"line":258,"column":0},"end":{"line":260,"column":1}},"89":{"start":{"line":259,"column":2},"end":{"line":259,"column":36}},"90":{"start":{"line":271,"column":0},"end":{"line":296,"column":1}},"91":{"start":{"line":272,"column":2},"end":{"line":272,"column":52}},"92":{"start":{"line":273,"column":2},"end":{"line":273,"column":29}},"93":{"start":{"line":274,"column":2},"end":{"line":274,"column":32}},"94":{"start":{"line":275,"column":2},"end":{"line":275,"column":30}},"95":{"start":{"line":277,"column":2},"end":{"line":277,"column":61}},"96":{"start":{"line":279,"column":2},"end":{"line":279,"column":29}},"97":{"start":{"line":281,"column":2},"end":{"line":281,"column":29}},"98":{"start":{"line":285,"column":2},"end":{"line":285,"column":31}},"99":{"start":{"line":287,"column":2},"end":{"line":287,"column":31}},"100":{"start":{"line":292,"column":2},"end":{"line":292,"column":31}},"101":{"start":{"line":294,"column":2},"end":{"line":294,"column":31}},"102":{"start":{"line":295,"column":2},"end":{"line":295,"column":16}},"103":{"start":{"line":298,"column":0},"end":{"line":298,"column":26}}},"branchMap":{"1":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":2},"end":{"line":54,"column":2}},{"start":{"line":54,"column":2},"end":{"line":54,"column":2}}]},"2":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":4},"end":{"line":55,"column":4}},{"start":{"line":55,"column":4},"end":{"line":55,"column":4}}]},"3":{"line":183,"type":"if","locations":[{"start":{"line":183,"column":2},"end":{"line":183,"column":2}},{"start":{"line":183,"column":2},"end":{"line":183,"column":2}}]},"4":{"line":186,"type":"if","locations":[{"start":{"line":186,"column":2},"end":{"line":186,"column":2}},{"start":{"line":186,"column":2},"end":{"line":186,"column":2}}]},"5":{"line":190,"type":"if","locations":[{"start":{"line":190,"column":7},"end":{"line":190,"column":7}},{"start":{"line":190,"column":7},"end":{"line":190,"column":7}}]},"6":{"line":204,"type":"if","locations":[{"start":{"line":204,"column":2},"end":{"line":204,"column":2}},{"start":{"line":204,"column":2},"end":{"line":204,"column":2}}]},"7":{"line":207,"type":"if","locations":[{"start":{"line":207,"column":2},"end":{"line":207,"column":2}},{"start":{"line":207,"column":2},"end":{"line":207,"column":2}}]},"8":{"line":211,"type":"if","locations":[{"start":{"line":211,"column":7},"end":{"line":211,"column":7}},{"start":{"line":211,"column":7},"end":{"line":211,"column":7}}]},"9":{"line":224,"type":"if","locations":[{"start":{"line":224,"column":2},"end":{"line":224,"column":2}},{"start":{"line":224,"column":2},"end":{"line":224,"column":2}}]},"10":{"line":224,"type":"binary-expr","locations":[{"start":{"line":224,"column":6},"end":{"line":224,"column":31}},{"start":{"line":224,"column":34},"end":{"line":224,"column":53}}]},"11":{"line":226,"type":"if","locations":[{"start":{"line":226,"column":4},"end":{"line":226,"column":4}},{"start":{"line":226,"column":4},"end":{"line":226,"column":4}}]},"12":{"line":241,"type":"if","locations":[{"start":{"line":241,"column":2},"end":{"line":241,"column":2}},{"start":{"line":241,"column":2},"end":{"line":241,"column":2}}]},"13":{"line":241,"type":"binary-expr","locations":[{"start":{"line":241,"column":6},"end":{"line":241,"column":29}},{"start":{"line":241,"column":33},"end":{"line":241,"column":54}}]},"14":{"line":246,"type":"if","locations":[{"start":{"line":246,"column":4},"end":{"line":246,"column":4}},{"start":{"line":246,"column":4},"end":{"line":246,"column":4}}]},"15":{"line":246,"type":"binary-expr","locations":[{"start":{"line":246,"column":7},"end":{"line":246,"column":40}},{"start":{"line":246,"column":44},"end":{"line":246,"column":65}}]}},"code":["'use strict';","var util = require('util');","var crypto = require('crypto');","var Long = require('long');","","var Uuid = require('./uuid');","/** @module types */","/**"," * Oct 15, 1582 in milliseconds since unix epoch"," * @const"," * @private"," */","var _unixToGregorian = 12219292800000;","/**"," * 10,000 ticks in a millisecond"," * @const"," * @private"," */","var _ticksInMs = 10000;","/**"," * Counter used to generate up to 10000 different timeuuid values with the same Date"," * @private"," * @type {number}"," */","var _ticks = 0;","/**"," * Counter used to generate ticks for the current time"," * @private"," * @type {number}"," */","var _ticksForCurrentTime = 0;","/**"," * Remember the last time when a ticks for the current time so that it can be reset"," * @private"," * @type {number}"," */","var _lastTimestamp = 0;","/**"," * Creates a new instance of Uuid based on the parameters provided according to rfc4122."," * If any of the arguments is not provided, it will be randomly generated, except for the date that will use the current date."," * @class"," * @classdesc Represents an immutable version 1 universally unique identifier (UUID). A UUID represents a 128-bit value."," * <p>Usage: <code>TimeUuid.now()</code></p>"," * @extends module:types~Uuid"," * @param {Date} [value] The datetime for the instance, if not provided, it will use the current Date."," * @param {Number} [ticks] A number from 0 to 10000 representing the 100-nanoseconds units for this instance to fill in the information not available in the Date,"," * as Ecmascript Dates have only milliseconds precision."," * @param {String|Buffer} [nodeId] A 6-length Buffer or string of 6 ascii characters representing the node identifier, ie: 'host01'."," * @param {String|Buffer} [clockId] A 2-length Buffer or string of 6 ascii characters representing the clock identifier."," * @constructor"," */","function TimeUuid(value, ticks, nodeId, clockId) {","  var buffer;","  if (value instanceof Buffer) {","    if (value.length !== 16) {","      throw new Error('Buffer for v1 uuid not valid');","    }","    buffer = value;","  }","  else {","    buffer = generateBuffer(value, ticks, nodeId, clockId);","  }","  Uuid.call(this, buffer);","}","","util.inherits(TimeUuid, Uuid);","","/**"," * Generates a TimeUuid instance based on the Date provided using random node and clock values."," * @param {Date} date Date to generate the v1 uuid."," * @param {Number} [ticks] A number from 0 to 10000 representing the 100-nanoseconds units for this instance to fill in the information not available in the Date,"," * as Ecmascript Dates have only milliseconds precision."," * @param {String|Buffer} [nodeId] A 6-length Buffer or string of 6 ascii characters representing the node identifier, ie: 'host01'."," * If not provided, a random nodeId will be generated."," * @param {String|Buffer} [clockId] A 2-length Buffer or string of 6 ascii characters representing the clock identifier."," * If not provided a random clockId will be generated."," */","TimeUuid.fromDate = function (date, ticks, nodeId, clockId) {","  return new TimeUuid(date, ticks, nodeId, clockId);","};","","/**"," * Parses a string representation of a TimeUuid"," * @param {String} value"," * @returns {TimeUuid}"," */","TimeUuid.fromString = function (value) {","  return new TimeUuid(Uuid.fromString(value).getBuffer());","};","","/**"," * Returns the smaller possible type 1 uuid with the provided Date."," */","TimeUuid.min = function (date, ticks) {","  return new TimeUuid(date, ticks, new Buffer('808080808080', 'hex'), new Buffer('8080', 'hex'));","};","","/**"," * Returns the biggest possible type 1 uuid with the provided Date."," */","TimeUuid.max = function (date, ticks) {","  return new TimeUuid(date, ticks, new Buffer('7f7f7f7f7f7f', 'hex'), new Buffer('7f7f', 'hex'));","};","","/**"," * Generates a TimeUuid instance based on the current date using random node and clock values."," * @param {String|Buffer} [nodeId] A 6-length Buffer or string of 6 ascii characters representing the node identifier, ie: 'host01'."," * If not provided, a random nodeId will be generated."," * @param {String|Buffer} [clockId] A 2-length Buffer or string of 6 ascii characters representing the clock identifier."," * If not provided a random clockId will be generated."," */","TimeUuid.now = function (nodeId, clockId) {","  return new TimeUuid(null, null, nodeId, clockId);","};","","","/**"," * Gets the Date and 100-nanoseconds units representation of this instance."," * @returns {{date: Date, ticks: Number}}"," */","TimeUuid.prototype.getDatePrecision = function () {","  var timeLow = this.buffer.readUInt32BE(0);","","  var timeHigh = 0;","  timeHigh |= ( this.buffer[4] & 0xff ) << 8;","  timeHigh |= this.buffer[5] & 0xff;","  timeHigh |= ( this.buffer[6] & 0x0f ) << 24;","  timeHigh |= ( this.buffer[7] & 0xff ) << 16;","","  var val = Long.fromBits(timeLow, timeHigh);","  var ticksInMsLong = Long.fromNumber(_ticksInMs);","  var ticks = val.modulo(ticksInMsLong);","  var time = val","    .div(ticksInMsLong)","    .subtract(Long.fromNumber(_unixToGregorian));","  return { date: new Date(time.toNumber()), ticks: ticks.toNumber()};","};","","/**"," * Gets the Date representation of this instance."," * @returns {Date}"," */","TimeUuid.prototype.getDate = function () {","  return this.getDatePrecision().date;","};","","/**"," * Returns the node id this instance"," * @returns {Buffer}"," */","TimeUuid.prototype.getNodeId = function () {","  return this.buffer.slice(10);","};","","/**"," * Returns the node id this instance as an ascii string"," * @returns {String}"," */","TimeUuid.prototype.getNodeIdString = function () {","  return this.buffer.slice(10).toString('ascii');","};","","function writeTime(buffer, time, ticks) {","  //value time expressed in ticks precision","  var val = Long","    .fromNumber(time + _unixToGregorian)","    .multiply(Long.fromNumber(10000))","    .add(Long.fromNumber(ticks));","  var timeHigh = val.getHighBitsUnsigned();","  buffer.writeUInt32BE(val.getLowBitsUnsigned(), 0, true);","  buffer.writeUInt16BE(timeHigh & 0xffff, 4, true);","  buffer.writeUInt16BE(timeHigh >>> 16 & 0xffff, 6, true);","}","","/**"," * Returns a buffer of length 2 representing the clock identifier"," * @param {String|Buffer} clockId"," * @returns {Buffer}"," * @private"," */","function getClockId(clockId) {","  var buffer = clockId;","  if (typeof clockId === 'string') {","    buffer = new Buffer(clockId, 'ascii');","  }","  if (!(buffer instanceof Buffer)) {","    //Generate","    buffer = getRandomBytes(2);","  }","  else if (buffer.length !== 2) {","    throw new Error('Clock identifier must have 2 bytes');","  }","  return buffer;","}","","/**"," * Returns a buffer of length 6 representing the clock identifier"," * @param {String|Buffer} nodeId"," * @returns {Buffer}"," * @private"," */","function getNodeId(nodeId) {","  var buffer = nodeId;","  if (typeof nodeId === 'string') {","    buffer = new Buffer(nodeId, 'ascii');","  }","  if (!(buffer instanceof Buffer)) {","    //Generate","    buffer = getRandomBytes(6);","  }","  else if (buffer.length !== 6) {","    throw new Error('Node identifier must have 6 bytes');","  }","  return buffer;","}","","/**"," * Returns the ticks portion of a timestamp.  If the ticks are not provided an internal counter is used that gets reset at 10000."," * @private"," * @param {Number} [ticks] "," * @returns {Number} "," */","function getTicks(ticks) {","  if (typeof ticks !== 'number'|| ticks >= _ticksInMs) {","    _ticks++;","    if (_ticks >= _ticksInMs) {","      _ticks = 0;","    }","    ticks = _ticks;","  }","  return ticks;","}","","/**"," * Returns an object with the time representation of the date expressed in milliseconds since unix epoch "," * and a ticks property for the 100-nanoseconds precision."," * @private"," * @returns {{time: Number, ticks: Number}} "," */","function getTimeWithTicks(date, ticks) {","  if (!(date instanceof Date) || isNaN(date.getTime())) {","    // time with ticks for the current time","    date = new Date();","    var time = date.getTime();","    _ticksForCurrentTime++;","    if(_ticksForCurrentTime > _ticksInMs || time > _lastTimestamp) {","      _ticksForCurrentTime = 0;","      _lastTimestamp = time;","    }","    ticks = _ticksForCurrentTime;","  }","  return {","    time: date.getTime(),","    ticks: getTicks(ticks)","  };","}","","function getRandomBytes(length) {","  return crypto.randomBytes(length);","}","","/**"," * Generates a 16-length Buffer instance"," * @private"," * @param {Date} date"," * @param {Number} ticks"," * @param {String|Buffer} nodeId"," * @param {String|Buffer} clockId"," * @returns {Buffer}"," */","function generateBuffer(date, ticks, nodeId, clockId) {","  var timeWithTicks = getTimeWithTicks(date, ticks);","  nodeId = getNodeId(nodeId);","  clockId = getClockId(clockId);","  var buffer = new Buffer(16);","  //Positions 0-7 Timestamp","  writeTime(buffer, timeWithTicks.time, timeWithTicks.ticks);","  //Position 8-9 Clock","  clockId.copy(buffer, 8, 0);","  //Positions 10-15 Node","  nodeId.copy(buffer, 10, 0);","  //Version Byte: Time based","  //0001xxxx","  //turn off first 4 bits","  buffer[6] = buffer[6] & 0x0f;","  //turn on fifth bit","  buffer[6] = buffer[6] | 0x10;","","  //IETF Variant Byte: 1.0.x","  //10xxxxxx","  //turn off first 2 bits","  buffer[8] = buffer[8] & 0x3f;","  //turn on first bit","  buffer[8] = buffer[8] | 0x80;","  return buffer;","}","","module.exports = TimeUuid;"],"l":{"2":1,"3":1,"4":1,"6":1,"13":1,"19":1,"25":1,"31":1,"37":1,"52":1,"53":0,"54":0,"55":0,"56":0,"58":0,"61":0,"63":0,"66":1,"78":1,"79":0,"87":1,"88":0,"94":1,"95":0,"101":1,"102":0,"112":1,"113":0,"121":1,"122":0,"124":0,"125":0,"126":0,"127":0,"128":0,"130":0,"131":0,"132":0,"133":0,"136":0,"143":1,"144":0,"151":1,"152":0,"159":1,"160":0,"163":1,"165":0,"169":0,"170":0,"171":0,"172":0,"181":1,"182":0,"183":0,"184":0,"186":0,"188":0,"190":0,"191":0,"193":0,"202":1,"203":0,"204":0,"205":0,"207":0,"209":0,"211":0,"212":0,"214":0,"223":1,"224":0,"225":0,"226":0,"227":0,"229":0,"231":0,"240":1,"241":0,"243":0,"244":0,"245":0,"246":0,"247":0,"248":0,"250":0,"252":0,"258":1,"259":0,"271":1,"272":0,"273":0,"274":0,"275":0,"277":0,"279":0,"281":0,"285":0,"287":0,"292":0,"294":0,"295":0,"298":1}},"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/types/uuid.js":{"path":"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/types/uuid.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1,"7":0,"8":0,"9":0,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":1,"18":0,"19":1,"20":0,"21":1,"22":0,"23":0,"24":1,"25":0,"26":1,"27":0,"28":1,"29":0,"30":1,"31":0,"32":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"fnMap":{"1":{"name":"Uuid","line":13,"loc":{"start":{"line":13,"column":0},"end":{"line":13,"column":22}}},"2":{"name":"(anonymous_2)","line":25,"loc":{"start":{"line":25,"column":18},"end":{"line":25,"column":35}}},"3":{"name":"(anonymous_3)","line":37,"loc":{"start":{"line":37,"column":14},"end":{"line":37,"column":26}}},"4":{"name":"(anonymous_4)","line":54,"loc":{"start":{"line":54,"column":27},"end":{"line":54,"column":39}}},"5":{"name":"(anonymous_5)","line":62,"loc":{"start":{"line":62,"column":24},"end":{"line":62,"column":41}}},"6":{"name":"(anonymous_6)","line":71,"loc":{"start":{"line":71,"column":26},"end":{"line":71,"column":38}}},"7":{"name":"(anonymous_7)","line":86,"loc":{"start":{"line":86,"column":25},"end":{"line":86,"column":37}}},"8":{"name":"(anonymous_8)","line":94,"loc":{"start":{"line":94,"column":24},"end":{"line":94,"column":36}}},"9":{"name":"getHex","line":102,"loc":{"start":{"line":102,"column":0},"end":{"line":102,"column":23}}},"10":{"name":"getRandomBytes","line":111,"loc":{"start":{"line":111,"column":0},"end":{"line":111,"column":26}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":31}},"2":{"start":{"line":13,"column":0},"end":{"line":18,"column":1}},"3":{"start":{"line":14,"column":2},"end":{"line":16,"column":3}},"4":{"start":{"line":15,"column":4},"end":{"line":15,"column":69}},"5":{"start":{"line":17,"column":2},"end":{"line":17,"column":23}},"6":{"start":{"line":25,"column":0},"end":{"line":31,"column":2}},"7":{"start":{"line":27,"column":2},"end":{"line":29,"column":3}},"8":{"start":{"line":28,"column":4},"end":{"line":28,"column":119}},"9":{"start":{"line":30,"column":2},"end":{"line":30,"column":62}},"10":{"start":{"line":37,"column":0},"end":{"line":48,"column":2}},"11":{"start":{"line":38,"column":2},"end":{"line":38,"column":32}},"12":{"start":{"line":40,"column":2},"end":{"line":40,"column":20}},"13":{"start":{"line":42,"column":2},"end":{"line":42,"column":20}},"14":{"start":{"line":44,"column":2},"end":{"line":44,"column":20}},"15":{"start":{"line":46,"column":2},"end":{"line":46,"column":20}},"16":{"start":{"line":47,"column":2},"end":{"line":47,"column":26}},"17":{"start":{"line":54,"column":0},"end":{"line":56,"column":2}},"18":{"start":{"line":55,"column":2},"end":{"line":55,"column":21}},"19":{"start":{"line":62,"column":0},"end":{"line":64,"column":2}},"20":{"start":{"line":63,"column":2},"end":{"line":63,"column":99}},"21":{"start":{"line":71,"column":0},"end":{"line":80,"column":2}},"22":{"start":{"line":73,"column":2},"end":{"line":73,"column":30}},"23":{"start":{"line":74,"column":2},"end":{"line":79,"column":29}},"24":{"start":{"line":86,"column":0},"end":{"line":88,"column":2}},"25":{"start":{"line":87,"column":2},"end":{"line":87,"column":56}},"26":{"start":{"line":94,"column":0},"end":{"line":96,"column":2}},"27":{"start":{"line":95,"column":2},"end":{"line":95,"column":25}},"28":{"start":{"line":102,"column":0},"end":{"line":104,"column":1}},"29":{"start":{"line":103,"column":2},"end":{"line":103,"column":37}},"30":{"start":{"line":111,"column":0},"end":{"line":113,"column":1}},"31":{"start":{"line":112,"column":2},"end":{"line":112,"column":32}},"32":{"start":{"line":115,"column":0},"end":{"line":115,"column":22}}},"branchMap":{"1":{"line":14,"type":"if","locations":[{"start":{"line":14,"column":2},"end":{"line":14,"column":2}},{"start":{"line":14,"column":2},"end":{"line":14,"column":2}}]},"2":{"line":14,"type":"binary-expr","locations":[{"start":{"line":14,"column":6},"end":{"line":14,"column":13}},{"start":{"line":14,"column":17},"end":{"line":14,"column":37}}]},"3":{"line":27,"type":"if","locations":[{"start":{"line":27,"column":2},"end":{"line":27,"column":2}},{"start":{"line":27,"column":2},"end":{"line":27,"column":2}}]},"4":{"line":27,"type":"binary-expr","locations":[{"start":{"line":27,"column":6},"end":{"line":27,"column":31}},{"start":{"line":27,"column":35},"end":{"line":27,"column":54}}]},"5":{"line":63,"type":"binary-expr","locations":[{"start":{"line":63,"column":12},"end":{"line":63,"column":33}},{"start":{"line":63,"column":37},"end":{"line":63,"column":97}}]}},"code":["'use strict';","var crypto = require('crypto');","","/** @module types */","","/**"," * Creates a new instance of Uuid based on a Buffer"," * @class"," * @classdesc Represents an immutable universally unique identifier (UUID). A UUID represents a 128-bit value."," * @param {Buffer} buffer The 16-length buffer."," * @constructor"," */","function Uuid(buffer) {","  if (!buffer || buffer.length !== 16) {","    throw new Error('You must provide a buffer containing 16 bytes');","  }","  this.buffer = buffer;","}","","/**"," * Parses a string representation of a Uuid"," * @param {String} value"," * @returns {Uuid}"," */","Uuid.fromString = function (value) {","  //36 chars: 32 + 4 hyphens","  if (typeof value !== 'string' || value.length !== 36) {","    throw new Error('Invalid string representation of Uuid, it should be in the 00000000-0000-0000-0000-000000000000');","  }","  return new Uuid(new Buffer(value.replace(/-/g, ''), 'hex'));","};","","/**"," * Creates a new random (version 4) Uuid."," * @returns {Uuid}"," */","Uuid.random = function () {","  var buffer = getRandomBytes();","  //clear the version","  buffer[6] &= 0x0f;","  //set the version 4","  buffer[6] |= 0x40;","  //clear the variant","  buffer[8] &= 0x3f;","  //set the IETF variant","  buffer[8] |= 0x80;","  return new Uuid(buffer);","};","","/**"," * Gets the bytes representation of a Uuid"," * @returns {Buffer}"," */","Uuid.prototype.getBuffer = function () {","  return this.buffer;","};","/**"," * Compares this object to the specified object."," * The result is true if and only if the argument is not null, is a UUID object, and contains the same value, bit for bit, as this UUID."," * @param {Uuid} other The other value to test for equality."," */","Uuid.prototype.equals = function (other) {","  return !!(other instanceof Uuid && this.buffer.toString('hex') === other.buffer.toString('hex'));","};","","/**"," * Returns a string representation of the value of this Uuid instance."," * 32 hex separated by hyphens, in the form of 00000000-0000-0000-0000-000000000000."," * @returns {String}"," */","Uuid.prototype.toString = function () {","  //32 hex representation of the Buffer","  var hexValue = getHex(this);","  return (","    hexValue.substr(0, 8) + '-' +","    hexValue.substr(8, 4) + '-' +","    hexValue.substr(12, 4) + '-' +","    hexValue.substr(16, 4) + '-' +","    hexValue.substr(20, 12));","};","","/**"," * Provide the name of the constructor and the string representation"," * @returns {string}"," */","Uuid.prototype.inspect = function () {","  return this.constructor.name + ': ' + this.toString();","};","","/**"," * Returns the string representation."," * Method used by the native JSON.stringify() to serialize this instance."," */","Uuid.prototype.toJSON = function () {","  return this.toString();","};","","/**"," * @private"," * @returns {String} 32 hex representation of the instance, without separators"," */","function getHex (uuid) {","  return uuid.buffer.toString('hex');","}","","/**"," * Gets a crypto generated 16 bytes"," * @private"," * @returns {Buffer}"," */","function getRandomBytes() {","  return crypto.randomBytes(16);","}","","module.exports = Uuid;",""],"l":{"2":1,"13":1,"14":0,"15":0,"17":0,"25":1,"27":0,"28":0,"30":0,"37":1,"38":0,"40":0,"42":0,"44":0,"46":0,"47":0,"54":1,"55":0,"62":1,"63":0,"71":1,"73":0,"74":0,"86":1,"87":0,"94":1,"95":0,"102":1,"103":0,"111":1,"112":0,"115":1}},"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/types/big-decimal.js":{"path":"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/types/big-decimal.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":1,"9":0,"10":0,"11":0,"12":1,"13":0,"14":0,"15":0,"16":0,"17":1,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":1,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":1,"35":0,"36":1,"37":0,"38":1,"39":0,"40":1,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":1,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":1,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":1,"74":0,"75":1,"76":0,"77":1,"78":0,"79":1,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":1,"93":0,"94":1,"95":0,"96":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},"fnMap":{"1":{"name":"BigDecimal","line":24,"loc":{"start":{"line":24,"column":0},"end":{"line":24,"column":42}}},"2":{"name":"(anonymous_2)","line":45,"loc":{"start":{"line":45,"column":24},"end":{"line":45,"column":39}}},"3":{"name":"(anonymous_3)","line":56,"loc":{"start":{"line":56,"column":22},"end":{"line":56,"column":39}}},"4":{"name":"(anonymous_4)","line":68,"loc":{"start":{"line":68,"column":24},"end":{"line":68,"column":41}}},"5":{"name":"(anonymous_5)","line":87,"loc":{"start":{"line":87,"column":24},"end":{"line":87,"column":41}}},"6":{"name":"(anonymous_6)","line":104,"loc":{"start":{"line":104,"column":30},"end":{"line":104,"column":47}}},"7":{"name":"(anonymous_7)","line":108,"loc":{"start":{"line":108,"column":31},"end":{"line":108,"column":43}}},"8":{"name":"(anonymous_8)","line":116,"loc":{"start":{"line":116,"column":33},"end":{"line":116,"column":50}}},"9":{"name":"(anonymous_9)","line":126,"loc":{"start":{"line":126,"column":31},"end":{"line":126,"column":48}}},"10":{"name":"(anonymous_10)","line":142,"loc":{"start":{"line":142,"column":32},"end":{"line":142,"column":49}}},"11":{"name":"(anonymous_11)","line":172,"loc":{"start":{"line":172,"column":27},"end":{"line":172,"column":44}}},"12":{"name":"(anonymous_12)","line":202,"loc":{"start":{"line":202,"column":35},"end":{"line":202,"column":52}}},"13":{"name":"(anonymous_13)","line":207,"loc":{"start":{"line":207,"column":34},"end":{"line":207,"column":46}}},"14":{"name":"(anonymous_14)","line":212,"loc":{"start":{"line":212,"column":30},"end":{"line":212,"column":42}}},"15":{"name":"(anonymous_15)","line":220,"loc":{"start":{"line":220,"column":32},"end":{"line":220,"column":44}}},"16":{"name":"(anonymous_16)","line":243,"loc":{"start":{"line":243,"column":32},"end":{"line":243,"column":44}}},"17":{"name":"(anonymous_17)","line":251,"loc":{"start":{"line":251,"column":30},"end":{"line":251,"column":42}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":35}},"2":{"start":{"line":3,"column":0},"end":{"line":3,"column":32}},"3":{"start":{"line":24,"column":0},"end":{"line":38,"column":1}},"4":{"start":{"line":25,"column":2},"end":{"line":27,"column":3}},"5":{"start":{"line":26,"column":4},"end":{"line":26,"column":54}},"6":{"start":{"line":32,"column":2},"end":{"line":32,"column":31}},"7":{"start":{"line":37,"column":2},"end":{"line":37,"column":22}},"8":{"start":{"line":45,"column":0},"end":{"line":49,"column":2}},"9":{"start":{"line":46,"column":2},"end":{"line":46,"column":33}},"10":{"start":{"line":47,"column":2},"end":{"line":47,"column":55}},"11":{"start":{"line":48,"column":2},"end":{"line":48,"column":46}},"12":{"start":{"line":56,"column":0},"end":{"line":61,"column":2}},"13":{"start":{"line":57,"column":2},"end":{"line":57,"column":60}},"14":{"start":{"line":58,"column":2},"end":{"line":58,"column":34}},"15":{"start":{"line":59,"column":2},"end":{"line":59,"column":44}},"16":{"start":{"line":60,"column":2},"end":{"line":60,"column":108}},"17":{"start":{"line":68,"column":0},"end":{"line":80,"column":2}},"18":{"start":{"line":69,"column":2},"end":{"line":71,"column":3}},"19":{"start":{"line":70,"column":4},"end":{"line":70,"column":59}},"20":{"start":{"line":72,"column":2},"end":{"line":72,"column":23}},"21":{"start":{"line":73,"column":2},"end":{"line":73,"column":38}},"22":{"start":{"line":74,"column":2},"end":{"line":74,"column":16}},"23":{"start":{"line":75,"column":2},"end":{"line":78,"column":3}},"24":{"start":{"line":76,"column":4},"end":{"line":76,"column":42}},"25":{"start":{"line":77,"column":4},"end":{"line":77,"column":71}},"26":{"start":{"line":79,"column":2},"end":{"line":79,"column":58}},"27":{"start":{"line":87,"column":0},"end":{"line":97,"column":2}},"28":{"start":{"line":88,"column":2},"end":{"line":90,"column":3}},"29":{"start":{"line":89,"column":4},"end":{"line":89,"column":43}},"30":{"start":{"line":91,"column":2},"end":{"line":91,"column":35}},"31":{"start":{"line":92,"column":2},"end":{"line":95,"column":3}},"32":{"start":{"line":94,"column":4},"end":{"line":94,"column":34}},"33":{"start":{"line":96,"column":2},"end":{"line":96,"column":42}},"34":{"start":{"line":104,"column":0},"end":{"line":106,"column":2}},"35":{"start":{"line":105,"column":2},"end":{"line":105,"column":70}},"36":{"start":{"line":108,"column":0},"end":{"line":110,"column":2}},"37":{"start":{"line":109,"column":2},"end":{"line":109,"column":56}},"38":{"start":{"line":116,"column":0},"end":{"line":118,"column":2}},"39":{"start":{"line":117,"column":2},"end":{"line":117,"column":29}},"40":{"start":{"line":126,"column":0},"end":{"line":135,"column":2}},"41":{"start":{"line":127,"column":2},"end":{"line":127,"column":34}},"42":{"start":{"line":128,"column":2},"end":{"line":130,"column":3}},"43":{"start":{"line":129,"column":4},"end":{"line":129,"column":14}},"44":{"start":{"line":131,"column":2},"end":{"line":133,"column":3}},"45":{"start":{"line":132,"column":4},"end":{"line":132,"column":13}},"46":{"start":{"line":134,"column":2},"end":{"line":134,"column":12}},"47":{"start":{"line":142,"column":0},"end":{"line":165,"column":2}},"48":{"start":{"line":143,"column":2},"end":{"line":143,"column":19}},"49":{"start":{"line":144,"column":2},"end":{"line":146,"column":3}},"50":{"start":{"line":145,"column":4},"end":{"line":145,"column":79}},"51":{"start":{"line":147,"column":2},"end":{"line":147,"column":16}},"52":{"start":{"line":148,"column":2},"end":{"line":148,"column":20}},"53":{"start":{"line":149,"column":2},"end":{"line":157,"column":3}},"54":{"start":{"line":151,"column":4},"end":{"line":151,"column":44}},"55":{"start":{"line":153,"column":4},"end":{"line":155,"column":31}},"56":{"start":{"line":156,"column":4},"end":{"line":156,"column":55}},"57":{"start":{"line":159,"column":2},"end":{"line":159,"column":42}},"58":{"start":{"line":161,"column":2},"end":{"line":163,"column":75}},"59":{"start":{"line":164,"column":2},"end":{"line":164,"column":53}},"60":{"start":{"line":172,"column":0},"end":{"line":195,"column":2}},"61":{"start":{"line":173,"column":2},"end":{"line":173,"column":19}},"62":{"start":{"line":174,"column":2},"end":{"line":176,"column":3}},"63":{"start":{"line":175,"column":4},"end":{"line":175,"column":74}},"64":{"start":{"line":177,"column":2},"end":{"line":177,"column":16}},"65":{"start":{"line":178,"column":2},"end":{"line":178,"column":20}},"66":{"start":{"line":179,"column":2},"end":{"line":187,"column":3}},"67":{"start":{"line":181,"column":4},"end":{"line":181,"column":44}},"68":{"start":{"line":183,"column":4},"end":{"line":185,"column":26}},"69":{"start":{"line":186,"column":4},"end":{"line":186,"column":55}},"70":{"start":{"line":189,"column":2},"end":{"line":189,"column":42}},"71":{"start":{"line":191,"column":2},"end":{"line":193,"column":75}},"72":{"start":{"line":194,"column":2},"end":{"line":194,"column":53}},"73":{"start":{"line":202,"column":0},"end":{"line":204,"column":2}},"74":{"start":{"line":203,"column":2},"end":{"line":203,"column":35}},"75":{"start":{"line":207,"column":0},"end":{"line":209,"column":2}},"76":{"start":{"line":208,"column":2},"end":{"line":208,"column":35}},"77":{"start":{"line":212,"column":0},"end":{"line":214,"column":2}},"78":{"start":{"line":213,"column":2},"end":{"line":213,"column":31}},"79":{"start":{"line":220,"column":0},"end":{"line":237,"column":2}},"80":{"start":{"line":221,"column":2},"end":{"line":221,"column":42}},"81":{"start":{"line":222,"column":2},"end":{"line":224,"column":3}},"82":{"start":{"line":223,"column":4},"end":{"line":223,"column":21}},"83":{"start":{"line":225,"column":2},"end":{"line":225,"column":22}},"84":{"start":{"line":226,"column":2},"end":{"line":229,"column":3}},"85":{"start":{"line":227,"column":4},"end":{"line":227,"column":21}},"86":{"start":{"line":228,"column":4},"end":{"line":228,"column":36}},"87":{"start":{"line":230,"column":2},"end":{"line":230,"column":54}},"88":{"start":{"line":231,"column":2},"end":{"line":235,"column":3}},"89":{"start":{"line":233,"column":4},"end":{"line":233,"column":75}},"90":{"start":{"line":234,"column":4},"end":{"line":234,"column":52}},"91":{"start":{"line":236,"column":2},"end":{"line":236,"column":99}},"92":{"start":{"line":243,"column":0},"end":{"line":245,"column":2}},"93":{"start":{"line":244,"column":2},"end":{"line":244,"column":37}},"94":{"start":{"line":251,"column":0},"end":{"line":253,"column":2}},"95":{"start":{"line":252,"column":2},"end":{"line":252,"column":25}},"96":{"start":{"line":256,"column":0},"end":{"line":256,"column":28}}},"branchMap":{"1":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":2},"end":{"line":25,"column":2}},{"start":{"line":25,"column":2},"end":{"line":25,"column":2}}]},"2":{"line":69,"type":"if","locations":[{"start":{"line":69,"column":2},"end":{"line":69,"column":2}},{"start":{"line":69,"column":2},"end":{"line":69,"column":2}}]},"3":{"line":75,"type":"if","locations":[{"start":{"line":75,"column":2},"end":{"line":75,"column":2}},{"start":{"line":75,"column":2},"end":{"line":75,"column":2}}]},"4":{"line":88,"type":"if","locations":[{"start":{"line":88,"column":2},"end":{"line":88,"column":2}},{"start":{"line":88,"column":2},"end":{"line":88,"column":2}}]},"5":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":2},"end":{"line":92,"column":2}},{"start":{"line":92,"column":2},"end":{"line":92,"column":2}}]},"6":{"line":105,"type":"binary-expr","locations":[{"start":{"line":105,"column":11},"end":{"line":105,"column":38}},{"start":{"line":105,"column":43},"end":{"line":105,"column":68}}]},"7":{"line":128,"type":"if","locations":[{"start":{"line":128,"column":2},"end":{"line":128,"column":2}},{"start":{"line":128,"column":2},"end":{"line":128,"column":2}}]},"8":{"line":131,"type":"if","locations":[{"start":{"line":131,"column":2},"end":{"line":131,"column":2}},{"start":{"line":131,"column":2},"end":{"line":131,"column":2}}]},"9":{"line":144,"type":"if","locations":[{"start":{"line":144,"column":2},"end":{"line":144,"column":2}},{"start":{"line":144,"column":2},"end":{"line":144,"column":2}}]},"10":{"line":149,"type":"if","locations":[{"start":{"line":149,"column":2},"end":{"line":149,"column":2}},{"start":{"line":149,"column":2},"end":{"line":149,"column":2}}]},"11":{"line":174,"type":"if","locations":[{"start":{"line":174,"column":2},"end":{"line":174,"column":2}},{"start":{"line":174,"column":2},"end":{"line":174,"column":2}}]},"12":{"line":179,"type":"if","locations":[{"start":{"line":179,"column":2},"end":{"line":179,"column":2}},{"start":{"line":179,"column":2},"end":{"line":179,"column":2}}]},"13":{"line":222,"type":"if","locations":[{"start":{"line":222,"column":2},"end":{"line":222,"column":2}},{"start":{"line":222,"column":2},"end":{"line":222,"column":2}}]},"14":{"line":226,"type":"if","locations":[{"start":{"line":226,"column":2},"end":{"line":226,"column":2}},{"start":{"line":226,"column":2},"end":{"line":226,"column":2}}]},"15":{"line":231,"type":"if","locations":[{"start":{"line":231,"column":2},"end":{"line":231,"column":2}},{"start":{"line":231,"column":2},"end":{"line":231,"column":2}}]}},"code":["'use strict';","var Integer = require('./integer');","var utils = require('../utils');","","/** @module types */","/**"," * Constructs an immutable arbitrary-precision signed decimal number."," * A <code>BigDecimal</code> consists of an [arbitrary precision integer]{@link module:types~Integer}"," * <i>unscaled value</i> and a 32-bit integer <i>scale</i>.  If zero"," * or positive, the scale is the number of digits to the right of the"," * decimal point.  If negative, the unscaled value of the number is"," * multiplied by ten to the power of the negation of the scale.  The"," * value of the number represented by the <code>BigDecimal</code> is"," * therefore <tt>(unscaledValue &times; 10<sup>-scale</sup>)</tt>."," * @class"," * @classdesc The <code>BigDecimal</code> class provides operations for"," * arithmetic, scale manipulation, rounding, comparison and"," * format conversion.  The {@link #toString} method provides a"," * canonical representation of a <code>BigDecimal</code>."," * @param {Integer|Number} unscaledValue The integer part of the decimal."," * @param {Number} scale The scale of the decimal."," * @constructor"," */","function BigDecimal(unscaledValue, scale) {","  if (typeof unscaledValue === 'number') {","    unscaledValue = Integer.fromNumber(unscaledValue);","  }","  /**","   * @type {Integer}","   * @private","   */","  this._intVal = unscaledValue;","  /**","   * @type {Number}","   * @private","   */","  this._scale = scale;","}","","/**"," * Returns the BigDecimal representation of a buffer composed of the scale (int32BE) and the unsigned value (varint BE)"," * @param {Buffer} buf"," * @returns {BigDecimal}"," */","BigDecimal.fromBuffer = function (buf) {","  var scale = buf.readInt32BE(0);","  var unscaledValue = Integer.fromBuffer(buf.slice(4));","  return new BigDecimal(unscaledValue, scale);","};","","/**"," * Returns a buffer representation composed of the scale as a BE int 32 and the unsigned value as a BE varint"," * @param {BigDecimal} value"," * @returns {Buffer}"," */","BigDecimal.toBuffer = function (value) {","  var unscaledValueBuffer = Integer.toBuffer(value._intVal);","  var scaleBuffer = new Buffer(4);","  scaleBuffer.writeInt32BE(value._scale, 0);","  return Buffer.concat([scaleBuffer, unscaledValueBuffer], scaleBuffer.length + unscaledValueBuffer.length);","};","","/**"," * Returns a BigDecimal representation of the string"," * @param {String} value"," * @returns {BigDecimal}"," */","BigDecimal.fromString = function (value) {","  if (!value) {","    throw new TypeError('Invalid null or undefined value');","  }","  value = value.trim();","  var scaleIndex = value.indexOf('.');","  var scale = 0;","  if (scaleIndex >= 0) {","    scale = value.length - 1 - scaleIndex;","    value = value.substr(0, scaleIndex) + value.substr(scaleIndex + 1);","  }","  return new BigDecimal(Integer.fromString(value), scale);","};","","/**"," * Returns a BigDecimal representation of the Number"," * @param {Number} value"," * @returns {BigDecimal}"," */","BigDecimal.fromNumber = function (value) {","  if (isNaN(value)) {","    return new BigDecimal(Integer.ZERO, 0);","  }","  var textValue = value.toString();","  if (textValue.indexOf('e') >= 0) {","    //get until scale 20","    textValue = value.toFixed(20);","  }","  return BigDecimal.fromString(textValue);","};","","/**"," * Returns true if the value of the BigDecimal instance and other are the same"," * @param {BigDecimal} other"," * @returns {Boolean}"," */","BigDecimal.prototype.equals = function (other) {","  return ((other instanceof BigDecimal) && this.compare(other) === 0);","};","","BigDecimal.prototype.inspect = function () {","  return this.constructor.name + ': ' + this.toString();","};","","/**"," * @param {BigDecimal} other"," * @returns {boolean}"," */","BigDecimal.prototype.notEquals = function (other) {","  return !this.equals(other);","};","","/**"," * Compares this BigDecimal with the given one."," * @param {BigDecimal} other Integer to compare against."," * @return {number} 0 if they are the same, 1 if the this is greater, and -1"," *     if the given one is greater."," */","BigDecimal.prototype.compare = function (other) {","  var diff = this.subtract(other);","  if (diff.isNegative()) {","    return -1;","  }","  if (diff.isZero()) {","    return 0;","  }","  return +1;","};","","/**"," * Returns the difference of this and the given BigDecimal."," * @param {BigDecimal} other The BigDecimal to subtract from this."," * @return {!BigDecimal} The BigDecimal result."," */","BigDecimal.prototype.subtract = function (other) {","  var first = this;","  if (first._scale === other._scale) {","    return new BigDecimal(first._intVal.subtract(other._intVal), first._scale);","  }","  var diffScale;","  var unscaledValue;","  if (first._scale < other._scale) {","    //The scale of this is lower","    diffScale = other._scale - first._scale;","    //multiple this unScaledValue to compare in the same scale","    unscaledValue = first._intVal","      .multiply(Integer.fromNumber(Math.pow(10, diffScale)))","      .subtract(other._intVal);","    return new BigDecimal(unscaledValue, other._scale);","  }","  //The scale of this is higher","  diffScale = first._scale - other._scale;","  //multiple this unScaledValue to compare in the same scale","  unscaledValue = first._intVal","    .subtract(","      other._intVal.multiply(Integer.fromNumber(Math.pow(10, diffScale))));","  return new BigDecimal(unscaledValue, first._scale);","};","","/**"," * Returns the sum of this and the given <code>BigDecimal</code>."," * @param {BigDecimal} other The BigDecimal to sum to this."," * @return {!BigDecimal} The BigDecimal result."," */","BigDecimal.prototype.add = function (other) {","  var first = this;","  if (first._scale === other._scale) {","    return new BigDecimal(first._intVal.add(other._intVal), first._scale);","  }","  var diffScale;","  var unscaledValue;","  if (first._scale < other._scale) {","    //The scale of this is lower","    diffScale = other._scale - first._scale;","    //multiple this unScaledValue to compare in the same scale","    unscaledValue = first._intVal","      .multiply(Integer.fromNumber(Math.pow(10, diffScale)))","      .add(other._intVal);","    return new BigDecimal(unscaledValue, other._scale);","  }","  //The scale of this is higher","  diffScale = first._scale - other._scale;","  //multiple this unScaledValue to compare in the same scale","  unscaledValue = first._intVal","    .add(","      other._intVal.multiply(Integer.fromNumber(Math.pow(10, diffScale))));","  return new BigDecimal(unscaledValue, first._scale);","};","","/**"," * Returns true if the current instance is greater than the other"," * @param {BigDecimal} other"," * @returns {boolean}"," */","BigDecimal.prototype.greaterThan = function (other) {","  return this.compare(other) === 1;","};","","/** @return {boolean} Whether this value is negative. */","BigDecimal.prototype.isNegative = function () {","  return this._intVal.isNegative();","};","","/** @return {boolean} Whether this value is zero. */","BigDecimal.prototype.isZero = function () {","  return this._intVal.isZero();","};","","/**"," * Returns the string representation of this <code>BigDecimal</code>"," * @returns {string}"," */","BigDecimal.prototype.toString = function () {","  var intString = this._intVal.toString();","  if (this._scale === 0) {","    return intString;","  }","  var signSymbol = '';","  if (intString.charAt(0) === '-') {","    signSymbol = '-';","    intString = intString.substr(1);","  }","  var separatorIndex = intString.length - this._scale;","  if (separatorIndex <= 0) {","    //add zeros at the beginning, plus an additional zero","    intString = utils.stringRepeat('0', (-separatorIndex) + 1) + intString;","    separatorIndex = intString.length - this._scale;","  }","  return signSymbol + intString.substr(0, separatorIndex) + '.' + intString.substr(separatorIndex);","};","","/**"," * Returns a Number representation of this <code>BigDecimal</code>."," * @returns {Number}"," */","BigDecimal.prototype.toNumber = function () {","  return parseFloat(this.toString());","};","","/**"," * Returns the string representation."," * Method used by the native JSON.stringify() to serialize this instance."," */","BigDecimal.prototype.toJSON = function () {","  return this.toString();","};","","","module.exports = BigDecimal;"],"l":{"2":1,"3":1,"24":1,"25":0,"26":0,"32":0,"37":0,"45":1,"46":0,"47":0,"48":0,"56":1,"57":0,"58":0,"59":0,"60":0,"68":1,"69":0,"70":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"79":0,"87":1,"88":0,"89":0,"91":0,"92":0,"94":0,"96":0,"104":1,"105":0,"108":1,"109":0,"116":1,"117":0,"126":1,"127":0,"128":0,"129":0,"131":0,"132":0,"134":0,"142":1,"143":0,"144":0,"145":0,"147":0,"148":0,"149":0,"151":0,"153":0,"156":0,"159":0,"161":0,"164":0,"172":1,"173":0,"174":0,"175":0,"177":0,"178":0,"179":0,"181":0,"183":0,"186":0,"189":0,"191":0,"194":0,"202":1,"203":0,"207":1,"208":0,"212":1,"213":0,"220":1,"221":0,"222":0,"223":0,"225":0,"226":0,"227":0,"228":0,"230":0,"231":0,"233":0,"234":0,"236":0,"243":1,"244":0,"251":1,"252":0,"256":1}},"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/types/integer.js":{"path":"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/types/integer.js","s":{"1":1,"2":3,"3":3,"4":3,"5":3,"6":3,"7":3,"8":2,"9":2,"10":1,"11":1,"12":3,"13":2,"14":2,"15":0,"16":3,"17":3,"18":2,"19":3,"20":1,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":1,"32":0,"33":0,"34":1,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":1,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":1,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":1,"107":1,"108":1,"109":1,"110":1,"111":0,"112":1,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":1,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":1,"143":0,"144":0,"145":0,"146":0,"147":0,"148":1,"149":0,"150":0,"151":1,"152":0,"153":1,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":1,"161":0,"162":1,"163":0,"164":1,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":1,"173":0,"174":1,"175":0,"176":1,"177":0,"178":1,"179":0,"180":1,"181":0,"182":1,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":1,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":1,"204":0,"205":1,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":1,"222":0,"223":1,"224":0,"225":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":0,"243":0,"244":0,"245":0,"246":0,"247":0,"248":0,"249":0,"250":0,"251":0,"252":0,"253":0,"254":0,"255":0,"256":0,"257":0,"258":0,"259":1,"260":0,"261":0,"262":0,"263":1,"264":0,"265":0,"266":0,"267":0,"268":0,"269":0,"270":0,"271":0,"272":0,"273":0,"274":0,"275":0,"276":0,"277":0,"278":0,"279":0,"280":0,"281":0,"282":0,"283":0,"284":0,"285":0,"286":0,"287":0,"288":0,"289":0,"290":0,"291":1,"292":0,"293":1,"294":0,"295":0,"296":0,"297":0,"298":0,"299":1,"300":0,"301":0,"302":0,"303":0,"304":0,"305":1,"306":0,"307":0,"308":0,"309":0,"310":0,"311":1,"312":0,"313":0,"314":0,"315":0,"316":0,"317":1,"318":0,"319":0,"320":0,"321":0,"322":0,"323":0,"324":0,"325":0,"326":0,"327":1,"328":0,"329":0,"330":0,"331":0,"332":0,"333":0,"334":0,"335":0,"336":0,"337":1,"338":0,"339":1,"340":0,"341":1,"342":0,"343":1},"b":{"1":[2,1],"2":[3,3],"3":[2,1],"4":[3,3],"5":[0,2],"6":[0,3],"7":[2,1],"8":[3,3],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0,0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0],"56":[0,0],"57":[0,0],"58":[0,0],"59":[0,0],"60":[0,0],"61":[0,0],"62":[0,0],"63":[0,0],"64":[0,0],"65":[0,0],"66":[0,0],"67":[0,0],"68":[0,0],"69":[0,0],"70":[0,0],"71":[0,0]},"f":{"1":3,"2":3,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0},"fnMap":{"1":{"name":"Integer","line":37,"loc":{"start":{"line":37,"column":0},"end":{"line":37,"column":30}}},"2":{"name":"(anonymous_2)","line":80,"loc":{"start":{"line":80,"column":18},"end":{"line":80,"column":34}}},"3":{"name":"(anonymous_3)","line":102,"loc":{"start":{"line":102,"column":21},"end":{"line":102,"column":37}}},"4":{"name":"(anonymous_4)","line":128,"loc":{"start":{"line":128,"column":19},"end":{"line":128,"column":34}}},"5":{"name":"(anonymous_5)","line":142,"loc":{"start":{"line":142,"column":21},"end":{"line":142,"column":46}}},"6":{"name":"(anonymous_6)","line":183,"loc":{"start":{"line":183,"column":21},"end":{"line":183,"column":36}}},"7":{"name":"(anonymous_7)","line":223,"loc":{"start":{"line":223,"column":19},"end":{"line":223,"column":36}}},"8":{"name":"(anonymous_8)","line":304,"loc":{"start":{"line":304,"column":26},"end":{"line":304,"column":37}}},"9":{"name":"(anonymous_9)","line":310,"loc":{"start":{"line":310,"column":29},"end":{"line":310,"column":40}}},"10":{"name":"(anonymous_10)","line":330,"loc":{"start":{"line":330,"column":29},"end":{"line":330,"column":49}}},"11":{"name":"(anonymous_11)","line":372,"loc":{"start":{"line":372,"column":28},"end":{"line":372,"column":44}}},"12":{"name":"(anonymous_12)","line":388,"loc":{"start":{"line":388,"column":36},"end":{"line":388,"column":52}}},"13":{"name":"(anonymous_13)","line":395,"loc":{"start":{"line":395,"column":28},"end":{"line":395,"column":39}}},"14":{"name":"(anonymous_14)","line":401,"loc":{"start":{"line":401,"column":27},"end":{"line":401,"column":38}}},"15":{"name":"(anonymous_15)","line":415,"loc":{"start":{"line":415,"column":31},"end":{"line":415,"column":42}}},"16":{"name":"(anonymous_16)","line":421,"loc":{"start":{"line":421,"column":26},"end":{"line":421,"column":37}}},"17":{"name":"(anonymous_17)","line":431,"loc":{"start":{"line":431,"column":27},"end":{"line":431,"column":43}}},"18":{"name":"(anonymous_18)","line":449,"loc":{"start":{"line":449,"column":30},"end":{"line":449,"column":46}}},"19":{"name":"(anonymous_19)","line":458,"loc":{"start":{"line":458,"column":32},"end":{"line":458,"column":48}}},"20":{"name":"(anonymous_20)","line":467,"loc":{"start":{"line":467,"column":39},"end":{"line":467,"column":55}}},"21":{"name":"(anonymous_21)","line":476,"loc":{"start":{"line":476,"column":29},"end":{"line":476,"column":45}}},"22":{"name":"(anonymous_22)","line":485,"loc":{"start":{"line":485,"column":36},"end":{"line":485,"column":52}}},"23":{"name":"(anonymous_23)","line":496,"loc":{"start":{"line":496,"column":28},"end":{"line":496,"column":44}}},"24":{"name":"(anonymous_24)","line":514,"loc":{"start":{"line":514,"column":28},"end":{"line":514,"column":46}}},"25":{"name":"(anonymous_25)","line":536,"loc":{"start":{"line":536,"column":27},"end":{"line":536,"column":38}}},"26":{"name":"(anonymous_26)","line":546,"loc":{"start":{"line":546,"column":24},"end":{"line":546,"column":40}}},"27":{"name":"(anonymous_27)","line":574,"loc":{"start":{"line":574,"column":29},"end":{"line":574,"column":45}}},"28":{"name":"(anonymous_28)","line":584,"loc":{"start":{"line":584,"column":29},"end":{"line":584,"column":45}}},"29":{"name":"(anonymous_29)","line":649,"loc":{"start":{"line":649,"column":19},"end":{"line":649,"column":41}}},"30":{"name":"(anonymous_30)","line":662,"loc":{"start":{"line":662,"column":27},"end":{"line":662,"column":43}}},"31":{"name":"(anonymous_31)","line":724,"loc":{"start":{"line":724,"column":27},"end":{"line":724,"column":43}}},"32":{"name":"(anonymous_32)","line":730,"loc":{"start":{"line":730,"column":24},"end":{"line":730,"column":35}}},"33":{"name":"(anonymous_33)","line":745,"loc":{"start":{"line":745,"column":24},"end":{"line":745,"column":40}}},"34":{"name":"(anonymous_34)","line":760,"loc":{"start":{"line":760,"column":23},"end":{"line":760,"column":39}}},"35":{"name":"(anonymous_35)","line":775,"loc":{"start":{"line":775,"column":24},"end":{"line":775,"column":40}}},"36":{"name":"(anonymous_36)","line":790,"loc":{"start":{"line":790,"column":30},"end":{"line":790,"column":48}}},"37":{"name":"(anonymous_37)","line":812,"loc":{"start":{"line":812,"column":31},"end":{"line":812,"column":49}}},"38":{"name":"(anonymous_38)","line":832,"loc":{"start":{"line":832,"column":28},"end":{"line":832,"column":40}}},"39":{"name":"(anonymous_39)","line":840,"loc":{"start":{"line":840,"column":24},"end":{"line":840,"column":36}}},"40":{"name":"(anonymous_40)","line":848,"loc":{"start":{"line":848,"column":27},"end":{"line":848,"column":39}}}},"statementMap":{"1":{"start":{"line":37,"column":0},"end":{"line":60,"column":1}},"2":{"start":{"line":42,"column":2},"end":{"line":42,"column":18}},"3":{"start":{"line":48,"column":2},"end":{"line":48,"column":20}},"4":{"start":{"line":52,"column":2},"end":{"line":52,"column":17}},"5":{"start":{"line":53,"column":2},"end":{"line":59,"column":3}},"6":{"start":{"line":54,"column":4},"end":{"line":54,"column":26}},"7":{"start":{"line":55,"column":4},"end":{"line":58,"column":5}},"8":{"start":{"line":56,"column":6},"end":{"line":56,"column":26}},"9":{"start":{"line":57,"column":6},"end":{"line":57,"column":18}},"10":{"start":{"line":72,"column":0},"end":{"line":72,"column":23}},"11":{"start":{"line":80,"column":0},"end":{"line":93,"column":2}},"12":{"start":{"line":81,"column":2},"end":{"line":86,"column":3}},"13":{"start":{"line":82,"column":4},"end":{"line":82,"column":45}},"14":{"start":{"line":83,"column":4},"end":{"line":85,"column":5}},"15":{"start":{"line":84,"column":6},"end":{"line":84,"column":23}},"16":{"start":{"line":88,"column":2},"end":{"line":88,"column":57}},"17":{"start":{"line":89,"column":2},"end":{"line":91,"column":3}},"18":{"start":{"line":90,"column":4},"end":{"line":90,"column":35}},"19":{"start":{"line":92,"column":2},"end":{"line":92,"column":13}},"20":{"start":{"line":102,"column":0},"end":{"line":116,"column":2}},"21":{"start":{"line":103,"column":2},"end":{"line":115,"column":3}},"22":{"start":{"line":104,"column":4},"end":{"line":104,"column":24}},"23":{"start":{"line":105,"column":9},"end":{"line":115,"column":3}},"24":{"start":{"line":106,"column":4},"end":{"line":106,"column":47}},"25":{"start":{"line":108,"column":4},"end":{"line":108,"column":18}},"26":{"start":{"line":109,"column":4},"end":{"line":109,"column":16}},"27":{"start":{"line":110,"column":4},"end":{"line":113,"column":5}},"28":{"start":{"line":111,"column":6},"end":{"line":111,"column":34}},"29":{"start":{"line":112,"column":6},"end":{"line":112,"column":37}},"30":{"start":{"line":114,"column":4},"end":{"line":114,"column":32}},"31":{"start":{"line":128,"column":0},"end":{"line":132,"column":2}},"32":{"start":{"line":129,"column":2},"end":{"line":129,"column":35}},"33":{"start":{"line":131,"column":2},"end":{"line":131,"column":54}},"34":{"start":{"line":142,"column":0},"end":{"line":175,"column":2}},"35":{"start":{"line":143,"column":2},"end":{"line":145,"column":3}},"36":{"start":{"line":144,"column":4},"end":{"line":144,"column":57}},"37":{"start":{"line":147,"column":2},"end":{"line":147,"column":30}},"38":{"start":{"line":148,"column":2},"end":{"line":150,"column":3}},"39":{"start":{"line":149,"column":4},"end":{"line":149,"column":48}},"40":{"start":{"line":152,"column":2},"end":{"line":156,"column":3}},"41":{"start":{"line":153,"column":4},"end":{"line":153,"column":64}},"42":{"start":{"line":154,"column":9},"end":{"line":156,"column":3}},"43":{"start":{"line":155,"column":4},"end":{"line":155,"column":67}},"44":{"start":{"line":160,"column":2},"end":{"line":160,"column":60}},"45":{"start":{"line":162,"column":2},"end":{"line":162,"column":28}},"46":{"start":{"line":163,"column":2},"end":{"line":173,"column":3}},"47":{"start":{"line":164,"column":4},"end":{"line":164,"column":43}},"48":{"start":{"line":165,"column":4},"end":{"line":165,"column":60}},"49":{"start":{"line":166,"column":4},"end":{"line":172,"column":5}},"50":{"start":{"line":167,"column":6},"end":{"line":167,"column":60}},"51":{"start":{"line":168,"column":6},"end":{"line":168,"column":69}},"52":{"start":{"line":170,"column":6},"end":{"line":170,"column":45}},"53":{"start":{"line":171,"column":6},"end":{"line":171,"column":53}},"54":{"start":{"line":174,"column":2},"end":{"line":174,"column":16}},"55":{"start":{"line":183,"column":0},"end":{"line":213,"column":2}},"56":{"start":{"line":184,"column":2},"end":{"line":184,"column":50}},"57":{"start":{"line":186,"column":2},"end":{"line":186,"column":40}},"58":{"start":{"line":187,"column":2},"end":{"line":211,"column":3}},"59":{"start":{"line":188,"column":4},"end":{"line":188,"column":44}},"60":{"start":{"line":189,"column":4},"end":{"line":189,"column":14}},"61":{"start":{"line":190,"column":4},"end":{"line":209,"column":5}},"62":{"start":{"line":192,"column":6},"end":{"line":192,"column":26}},"63":{"start":{"line":193,"column":6},"end":{"line":193,"column":16}},"64":{"start":{"line":194,"column":6},"end":{"line":201,"column":7}},"65":{"start":{"line":195,"column":8},"end":{"line":195,"column":26}},"66":{"start":{"line":196,"column":8},"end":{"line":199,"column":9}},"67":{"start":{"line":198,"column":10},"end":{"line":198,"column":30}},"68":{"start":{"line":200,"column":8},"end":{"line":200,"column":55}},"69":{"start":{"line":202,"column":6},"end":{"line":205,"column":7}},"70":{"start":{"line":204,"column":8},"end":{"line":204,"column":23}},"71":{"start":{"line":208,"column":6},"end":{"line":208,"column":38}},"72":{"start":{"line":210,"column":4},"end":{"line":210,"column":20}},"73":{"start":{"line":212,"column":2},"end":{"line":212,"column":33}},"74":{"start":{"line":223,"column":0},"end":{"line":273,"column":2}},"75":{"start":{"line":224,"column":2},"end":{"line":224,"column":25}},"76":{"start":{"line":225,"column":2},"end":{"line":225,"column":25}},"77":{"start":{"line":226,"column":2},"end":{"line":229,"column":3}},"78":{"start":{"line":228,"column":4},"end":{"line":228,"column":37}},"79":{"start":{"line":231,"column":2},"end":{"line":231,"column":37}},"80":{"start":{"line":232,"column":2},"end":{"line":234,"column":3}},"81":{"start":{"line":233,"column":4},"end":{"line":233,"column":25}},"82":{"start":{"line":235,"column":2},"end":{"line":235,"column":16}},"83":{"start":{"line":236,"column":2},"end":{"line":238,"column":3}},"84":{"start":{"line":237,"column":4},"end":{"line":237,"column":39}},"85":{"start":{"line":239,"column":2},"end":{"line":241,"column":3}},"86":{"start":{"line":240,"column":4},"end":{"line":240,"column":39}},"87":{"start":{"line":242,"column":2},"end":{"line":244,"column":3}},"88":{"start":{"line":243,"column":4},"end":{"line":243,"column":38}},"89":{"start":{"line":245,"column":2},"end":{"line":245,"column":29}},"90":{"start":{"line":246,"column":2},"end":{"line":256,"column":3}},"91":{"start":{"line":248,"column":4},"end":{"line":251,"column":5}},"92":{"start":{"line":250,"column":6},"end":{"line":250,"column":22}},"93":{"start":{"line":253,"column":7},"end":{"line":256,"column":3}},"94":{"start":{"line":255,"column":4},"end":{"line":255,"column":20}},"95":{"start":{"line":257,"column":2},"end":{"line":257,"column":60}},"96":{"start":{"line":258,"column":2},"end":{"line":266,"column":3}},"97":{"start":{"line":259,"column":4},"end":{"line":259,"column":20}},"98":{"start":{"line":260,"column":4},"end":{"line":265,"column":5}},"99":{"start":{"line":261,"column":6},"end":{"line":261,"column":18}},"100":{"start":{"line":264,"column":6},"end":{"line":264,"column":17}},"101":{"start":{"line":267,"column":2},"end":{"line":271,"column":3}},"102":{"start":{"line":268,"column":4},"end":{"line":268,"column":42}},"103":{"start":{"line":269,"column":4},"end":{"line":269,"column":37}},"104":{"start":{"line":270,"column":4},"end":{"line":270,"column":36}},"105":{"start":{"line":272,"column":2},"end":{"line":272,"column":13}},"106":{"start":{"line":282,"column":0},"end":{"line":282,"column":48}},"107":{"start":{"line":286,"column":0},"end":{"line":286,"column":34}},"108":{"start":{"line":290,"column":0},"end":{"line":290,"column":33}},"109":{"start":{"line":297,"column":0},"end":{"line":297,"column":47}},"110":{"start":{"line":304,"column":0},"end":{"line":306,"column":2}},"111":{"start":{"line":305,"column":2},"end":{"line":305,"column":60}},"112":{"start":{"line":310,"column":0},"end":{"line":322,"column":2}},"113":{"start":{"line":311,"column":2},"end":{"line":321,"column":3}},"114":{"start":{"line":312,"column":4},"end":{"line":312,"column":37}},"115":{"start":{"line":314,"column":4},"end":{"line":314,"column":16}},"116":{"start":{"line":315,"column":4},"end":{"line":315,"column":16}},"117":{"start":{"line":316,"column":4},"end":{"line":319,"column":5}},"118":{"start":{"line":317,"column":6},"end":{"line":317,"column":43}},"119":{"start":{"line":318,"column":6},"end":{"line":318,"column":37}},"120":{"start":{"line":320,"column":4},"end":{"line":320,"column":15}},"121":{"start":{"line":330,"column":0},"end":{"line":363,"column":2}},"122":{"start":{"line":331,"column":2},"end":{"line":331,"column":30}},"123":{"start":{"line":332,"column":2},"end":{"line":334,"column":3}},"124":{"start":{"line":333,"column":4},"end":{"line":333,"column":48}},"125":{"start":{"line":336,"column":2},"end":{"line":340,"column":3}},"126":{"start":{"line":337,"column":4},"end":{"line":337,"column":15}},"127":{"start":{"line":338,"column":9},"end":{"line":340,"column":3}},"128":{"start":{"line":339,"column":4},"end":{"line":339,"column":47}},"129":{"start":{"line":344,"column":2},"end":{"line":344,"column":60}},"130":{"start":{"line":346,"column":2},"end":{"line":346,"column":17}},"131":{"start":{"line":347,"column":2},"end":{"line":347,"column":18}},"132":{"start":{"line":348,"column":2},"end":{"line":362,"column":3}},"133":{"start":{"line":349,"column":4},"end":{"line":349,"column":42}},"134":{"start":{"line":350,"column":4},"end":{"line":350,"column":69}},"135":{"start":{"line":351,"column":4},"end":{"line":351,"column":40}},"136":{"start":{"line":353,"column":4},"end":{"line":353,"column":17}},"137":{"start":{"line":354,"column":4},"end":{"line":361,"column":5}},"138":{"start":{"line":355,"column":6},"end":{"line":355,"column":29}},"139":{"start":{"line":357,"column":6},"end":{"line":359,"column":7}},"140":{"start":{"line":358,"column":8},"end":{"line":358,"column":30}},"141":{"start":{"line":360,"column":6},"end":{"line":360,"column":36}},"142":{"start":{"line":372,"column":0},"end":{"line":380,"column":2}},"143":{"start":{"line":373,"column":2},"end":{"line":379,"column":3}},"144":{"start":{"line":374,"column":4},"end":{"line":374,"column":13}},"145":{"start":{"line":375,"column":9},"end":{"line":379,"column":3}},"146":{"start":{"line":376,"column":4},"end":{"line":376,"column":29}},"147":{"start":{"line":378,"column":4},"end":{"line":378,"column":22}},"148":{"start":{"line":388,"column":0},"end":{"line":391,"column":2}},"149":{"start":{"line":389,"column":2},"end":{"line":389,"column":32}},"150":{"start":{"line":390,"column":2},"end":{"line":390,"column":56}},"151":{"start":{"line":395,"column":0},"end":{"line":397,"column":2}},"152":{"start":{"line":396,"column":2},"end":{"line":396,"column":20}},"153":{"start":{"line":401,"column":0},"end":{"line":411,"column":2}},"154":{"start":{"line":402,"column":2},"end":{"line":404,"column":3}},"155":{"start":{"line":403,"column":4},"end":{"line":403,"column":17}},"156":{"start":{"line":405,"column":2},"end":{"line":409,"column":3}},"157":{"start":{"line":406,"column":4},"end":{"line":408,"column":5}},"158":{"start":{"line":407,"column":6},"end":{"line":407,"column":19}},"159":{"start":{"line":410,"column":2},"end":{"line":410,"column":14}},"160":{"start":{"line":415,"column":0},"end":{"line":417,"column":2}},"161":{"start":{"line":416,"column":2},"end":{"line":416,"column":26}},"162":{"start":{"line":421,"column":0},"end":{"line":424,"column":2}},"163":{"start":{"line":422,"column":2},"end":{"line":423,"column":58}},"164":{"start":{"line":431,"column":0},"end":{"line":442,"column":2}},"165":{"start":{"line":432,"column":2},"end":{"line":434,"column":3}},"166":{"start":{"line":433,"column":4},"end":{"line":433,"column":17}},"167":{"start":{"line":435,"column":2},"end":{"line":435,"column":60}},"168":{"start":{"line":436,"column":2},"end":{"line":440,"column":3}},"169":{"start":{"line":437,"column":4},"end":{"line":439,"column":5}},"170":{"start":{"line":438,"column":6},"end":{"line":438,"column":19}},"171":{"start":{"line":441,"column":2},"end":{"line":441,"column":14}},"172":{"start":{"line":449,"column":0},"end":{"line":451,"column":2}},"173":{"start":{"line":450,"column":2},"end":{"line":450,"column":29}},"174":{"start":{"line":458,"column":0},"end":{"line":460,"column":2}},"175":{"start":{"line":459,"column":2},"end":{"line":459,"column":33}},"176":{"start":{"line":467,"column":0},"end":{"line":469,"column":2}},"177":{"start":{"line":468,"column":2},"end":{"line":468,"column":34}},"178":{"start":{"line":476,"column":0},"end":{"line":478,"column":2}},"179":{"start":{"line":477,"column":2},"end":{"line":477,"column":33}},"180":{"start":{"line":485,"column":0},"end":{"line":487,"column":2}},"181":{"start":{"line":486,"column":2},"end":{"line":486,"column":34}},"182":{"start":{"line":496,"column":0},"end":{"line":505,"column":2}},"183":{"start":{"line":497,"column":2},"end":{"line":497,"column":34}},"184":{"start":{"line":498,"column":2},"end":{"line":504,"column":3}},"185":{"start":{"line":499,"column":4},"end":{"line":499,"column":14}},"186":{"start":{"line":500,"column":9},"end":{"line":504,"column":3}},"187":{"start":{"line":501,"column":4},"end":{"line":501,"column":13}},"188":{"start":{"line":503,"column":4},"end":{"line":503,"column":14}},"189":{"start":{"line":514,"column":0},"end":{"line":532,"column":2}},"190":{"start":{"line":515,"column":2},"end":{"line":515,"column":37}},"191":{"start":{"line":516,"column":2},"end":{"line":516,"column":37}},"192":{"start":{"line":517,"column":2},"end":{"line":517,"column":16}},"193":{"start":{"line":518,"column":2},"end":{"line":520,"column":3}},"194":{"start":{"line":519,"column":4},"end":{"line":519,"column":30}},"195":{"start":{"line":521,"column":2},"end":{"line":521,"column":74}},"196":{"start":{"line":522,"column":2},"end":{"line":522,"column":46}},"197":{"start":{"line":524,"column":2},"end":{"line":531,"column":3}},"198":{"start":{"line":525,"column":4},"end":{"line":525,"column":32}},"199":{"start":{"line":526,"column":4},"end":{"line":526,"column":26}},"200":{"start":{"line":527,"column":4},"end":{"line":527,"column":33}},"201":{"start":{"line":529,"column":4},"end":{"line":529,"column":26}},"202":{"start":{"line":530,"column":4},"end":{"line":530,"column":32}},"203":{"start":{"line":536,"column":0},"end":{"line":538,"column":2}},"204":{"start":{"line":537,"column":2},"end":{"line":537,"column":37}},"205":{"start":{"line":546,"column":0},"end":{"line":566,"column":2}},"206":{"start":{"line":547,"column":2},"end":{"line":547,"column":60}},"207":{"start":{"line":548,"column":2},"end":{"line":548,"column":15}},"208":{"start":{"line":549,"column":2},"end":{"line":549,"column":16}},"209":{"start":{"line":551,"column":2},"end":{"line":564,"column":3}},"210":{"start":{"line":552,"column":4},"end":{"line":552,"column":36}},"211":{"start":{"line":553,"column":4},"end":{"line":553,"column":38}},"212":{"start":{"line":555,"column":4},"end":{"line":555,"column":37}},"213":{"start":{"line":556,"column":4},"end":{"line":556,"column":39}},"214":{"start":{"line":558,"column":4},"end":{"line":558,"column":29}},"215":{"start":{"line":559,"column":4},"end":{"line":559,"column":35}},"216":{"start":{"line":560,"column":4},"end":{"line":560,"column":22}},"217":{"start":{"line":561,"column":4},"end":{"line":561,"column":17}},"218":{"start":{"line":562,"column":4},"end":{"line":562,"column":17}},"219":{"start":{"line":563,"column":4},"end":{"line":563,"column":29}},"220":{"start":{"line":565,"column":2},"end":{"line":565,"column":31}},"221":{"start":{"line":574,"column":0},"end":{"line":576,"column":2}},"222":{"start":{"line":575,"column":2},"end":{"line":575,"column":34}},"223":{"start":{"line":584,"column":0},"end":{"line":640,"column":2}},"224":{"start":{"line":585,"column":2},"end":{"line":589,"column":3}},"225":{"start":{"line":586,"column":4},"end":{"line":586,"column":24}},"226":{"start":{"line":587,"column":9},"end":{"line":589,"column":3}},"227":{"start":{"line":588,"column":4},"end":{"line":588,"column":24}},"228":{"start":{"line":591,"column":2},"end":{"line":599,"column":3}},"229":{"start":{"line":592,"column":4},"end":{"line":596,"column":5}},"230":{"start":{"line":593,"column":6},"end":{"line":593,"column":52}},"231":{"start":{"line":595,"column":6},"end":{"line":595,"column":52}},"232":{"start":{"line":597,"column":9},"end":{"line":599,"column":3}},"233":{"start":{"line":598,"column":4},"end":{"line":598,"column":50}},"234":{"start":{"line":602,"column":2},"end":{"line":605,"column":3}},"235":{"start":{"line":604,"column":4},"end":{"line":604,"column":66}},"236":{"start":{"line":608,"column":2},"end":{"line":608,"column":51}},"237":{"start":{"line":609,"column":2},"end":{"line":609,"column":15}},"238":{"start":{"line":610,"column":2},"end":{"line":612,"column":3}},"239":{"start":{"line":611,"column":4},"end":{"line":611,"column":15}},"240":{"start":{"line":613,"column":2},"end":{"line":630,"column":3}},"241":{"start":{"line":614,"column":4},"end":{"line":629,"column":5}},"242":{"start":{"line":615,"column":6},"end":{"line":615,"column":38}},"243":{"start":{"line":616,"column":6},"end":{"line":616,"column":40}},"244":{"start":{"line":618,"column":6},"end":{"line":618,"column":39}},"245":{"start":{"line":619,"column":6},"end":{"line":619,"column":41}},"246":{"start":{"line":621,"column":6},"end":{"line":621,"column":36}},"247":{"start":{"line":622,"column":6},"end":{"line":622,"column":43}},"248":{"start":{"line":623,"column":6},"end":{"line":623,"column":40}},"249":{"start":{"line":624,"column":6},"end":{"line":624,"column":47}},"250":{"start":{"line":625,"column":6},"end":{"line":625,"column":40}},"251":{"start":{"line":626,"column":6},"end":{"line":626,"column":47}},"252":{"start":{"line":627,"column":6},"end":{"line":627,"column":40}},"253":{"start":{"line":628,"column":6},"end":{"line":628,"column":47}},"254":{"start":{"line":633,"column":2},"end":{"line":635,"column":3}},"255":{"start":{"line":634,"column":4},"end":{"line":634,"column":49}},"256":{"start":{"line":636,"column":2},"end":{"line":638,"column":3}},"257":{"start":{"line":637,"column":4},"end":{"line":637,"column":15}},"258":{"start":{"line":639,"column":2},"end":{"line":639,"column":29}},"259":{"start":{"line":649,"column":0},"end":{"line":654,"column":2}},"260":{"start":{"line":650,"column":2},"end":{"line":653,"column":3}},"261":{"start":{"line":651,"column":4},"end":{"line":651,"column":42}},"262":{"start":{"line":652,"column":4},"end":{"line":652,"column":26}},"263":{"start":{"line":662,"column":0},"end":{"line":716,"column":2}},"264":{"start":{"line":663,"column":2},"end":{"line":667,"column":3}},"265":{"start":{"line":664,"column":4},"end":{"line":664,"column":36}},"266":{"start":{"line":665,"column":9},"end":{"line":667,"column":3}},"267":{"start":{"line":666,"column":4},"end":{"line":666,"column":24}},"268":{"start":{"line":669,"column":2},"end":{"line":677,"column":3}},"269":{"start":{"line":670,"column":4},"end":{"line":674,"column":5}},"270":{"start":{"line":671,"column":6},"end":{"line":671,"column":50}},"271":{"start":{"line":673,"column":6},"end":{"line":673,"column":50}},"272":{"start":{"line":675,"column":9},"end":{"line":677,"column":3}},"273":{"start":{"line":676,"column":4},"end":{"line":676,"column":48}},"274":{"start":{"line":684,"column":2},"end":{"line":684,"column":25}},"275":{"start":{"line":685,"column":2},"end":{"line":685,"column":17}},"276":{"start":{"line":686,"column":2},"end":{"line":714,"column":3}},"277":{"start":{"line":689,"column":4},"end":{"line":689,"column":76}},"278":{"start":{"line":693,"column":4},"end":{"line":693,"column":54}},"279":{"start":{"line":694,"column":4},"end":{"line":694,"column":58}},"280":{"start":{"line":698,"column":4},"end":{"line":698,"column":47}},"281":{"start":{"line":699,"column":4},"end":{"line":699,"column":46}},"282":{"start":{"line":700,"column":4},"end":{"line":704,"column":5}},"283":{"start":{"line":701,"column":6},"end":{"line":701,"column":22}},"284":{"start":{"line":702,"column":6},"end":{"line":702,"column":45}},"285":{"start":{"line":703,"column":6},"end":{"line":703,"column":44}},"286":{"start":{"line":708,"column":4},"end":{"line":710,"column":5}},"287":{"start":{"line":709,"column":6},"end":{"line":709,"column":30}},"288":{"start":{"line":712,"column":4},"end":{"line":712,"column":29}},"289":{"start":{"line":713,"column":4},"end":{"line":713,"column":34}},"290":{"start":{"line":715,"column":2},"end":{"line":715,"column":13}},"291":{"start":{"line":724,"column":0},"end":{"line":726,"column":2}},"292":{"start":{"line":725,"column":2},"end":{"line":725,"column":59}},"293":{"start":{"line":730,"column":0},"end":{"line":737,"column":2}},"294":{"start":{"line":731,"column":2},"end":{"line":731,"column":30}},"295":{"start":{"line":732,"column":2},"end":{"line":732,"column":15}},"296":{"start":{"line":733,"column":2},"end":{"line":735,"column":3}},"297":{"start":{"line":734,"column":4},"end":{"line":734,"column":28}},"298":{"start":{"line":736,"column":2},"end":{"line":736,"column":39}},"299":{"start":{"line":745,"column":0},"end":{"line":752,"column":2}},"300":{"start":{"line":746,"column":2},"end":{"line":746,"column":60}},"301":{"start":{"line":747,"column":2},"end":{"line":747,"column":15}},"302":{"start":{"line":748,"column":2},"end":{"line":750,"column":3}},"303":{"start":{"line":749,"column":4},"end":{"line":749,"column":48}},"304":{"start":{"line":751,"column":2},"end":{"line":751,"column":52}},"305":{"start":{"line":760,"column":0},"end":{"line":767,"column":2}},"306":{"start":{"line":761,"column":2},"end":{"line":761,"column":60}},"307":{"start":{"line":762,"column":2},"end":{"line":762,"column":15}},"308":{"start":{"line":763,"column":2},"end":{"line":765,"column":3}},"309":{"start":{"line":764,"column":4},"end":{"line":764,"column":48}},"310":{"start":{"line":766,"column":2},"end":{"line":766,"column":52}},"311":{"start":{"line":775,"column":0},"end":{"line":782,"column":2}},"312":{"start":{"line":776,"column":2},"end":{"line":776,"column":60}},"313":{"start":{"line":777,"column":2},"end":{"line":777,"column":15}},"314":{"start":{"line":778,"column":2},"end":{"line":780,"column":3}},"315":{"start":{"line":779,"column":4},"end":{"line":779,"column":48}},"316":{"start":{"line":781,"column":2},"end":{"line":781,"column":52}},"317":{"start":{"line":790,"column":0},"end":{"line":804,"column":2}},"318":{"start":{"line":791,"column":2},"end":{"line":791,"column":31}},"319":{"start":{"line":792,"column":2},"end":{"line":792,"column":31}},"320":{"start":{"line":793,"column":2},"end":{"line":793,"column":68}},"321":{"start":{"line":794,"column":2},"end":{"line":794,"column":15}},"322":{"start":{"line":795,"column":2},"end":{"line":802,"column":3}},"323":{"start":{"line":796,"column":4},"end":{"line":801,"column":5}},"324":{"start":{"line":797,"column":6},"end":{"line":798,"column":61}},"325":{"start":{"line":800,"column":6},"end":{"line":800,"column":43}},"326":{"start":{"line":803,"column":2},"end":{"line":803,"column":38}},"327":{"start":{"line":812,"column":0},"end":{"line":826,"column":2}},"328":{"start":{"line":813,"column":2},"end":{"line":813,"column":31}},"329":{"start":{"line":814,"column":2},"end":{"line":814,"column":31}},"330":{"start":{"line":815,"column":2},"end":{"line":815,"column":42}},"331":{"start":{"line":816,"column":2},"end":{"line":816,"column":15}},"332":{"start":{"line":817,"column":2},"end":{"line":824,"column":3}},"333":{"start":{"line":818,"column":4},"end":{"line":823,"column":5}},"334":{"start":{"line":819,"column":6},"end":{"line":820,"column":60}},"335":{"start":{"line":822,"column":6},"end":{"line":822,"column":43}},"336":{"start":{"line":825,"column":2},"end":{"line":825,"column":38}},"337":{"start":{"line":832,"column":0},"end":{"line":834,"column":2}},"338":{"start":{"line":833,"column":2},"end":{"line":833,"column":56}},"339":{"start":{"line":840,"column":0},"end":{"line":842,"column":2}},"340":{"start":{"line":841,"column":2},"end":{"line":841,"column":49}},"341":{"start":{"line":848,"column":0},"end":{"line":850,"column":2}},"342":{"start":{"line":849,"column":2},"end":{"line":849,"column":25}},"343":{"start":{"line":852,"column":0},"end":{"line":852,"column":25}}},"branchMap":{"1":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":4},"end":{"line":55,"column":4}},{"start":{"line":55,"column":4},"end":{"line":55,"column":4}}]},"2":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":8},"end":{"line":55,"column":12}},{"start":{"line":55,"column":16},"end":{"line":55,"column":27}}]},"3":{"line":81,"type":"if","locations":[{"start":{"line":81,"column":2},"end":{"line":81,"column":2}},{"start":{"line":81,"column":2},"end":{"line":81,"column":2}}]},"4":{"line":81,"type":"binary-expr","locations":[{"start":{"line":81,"column":6},"end":{"line":81,"column":19}},{"start":{"line":81,"column":23},"end":{"line":81,"column":34}}]},"5":{"line":83,"type":"if","locations":[{"start":{"line":83,"column":4},"end":{"line":83,"column":4}},{"start":{"line":83,"column":4},"end":{"line":83,"column":4}}]},"6":{"line":88,"type":"cond-expr","locations":[{"start":{"line":88,"column":49},"end":{"line":88,"column":51}},{"start":{"line":88,"column":54},"end":{"line":88,"column":55}}]},"7":{"line":89,"type":"if","locations":[{"start":{"line":89,"column":2},"end":{"line":89,"column":2}},{"start":{"line":89,"column":2},"end":{"line":89,"column":2}}]},"8":{"line":89,"type":"binary-expr","locations":[{"start":{"line":89,"column":6},"end":{"line":89,"column":19}},{"start":{"line":89,"column":23},"end":{"line":89,"column":34}}]},"9":{"line":103,"type":"if","locations":[{"start":{"line":103,"column":2},"end":{"line":103,"column":2}},{"start":{"line":103,"column":2},"end":{"line":103,"column":2}}]},"10":{"line":103,"type":"binary-expr","locations":[{"start":{"line":103,"column":6},"end":{"line":103,"column":18}},{"start":{"line":103,"column":22},"end":{"line":103,"column":38}}]},"11":{"line":105,"type":"if","locations":[{"start":{"line":105,"column":9},"end":{"line":105,"column":9}},{"start":{"line":105,"column":9},"end":{"line":105,"column":9}}]},"12":{"line":131,"type":"cond-expr","locations":[{"start":{"line":131,"column":46},"end":{"line":131,"column":48}},{"start":{"line":131,"column":51},"end":{"line":131,"column":52}}]},"13":{"line":143,"type":"if","locations":[{"start":{"line":143,"column":2},"end":{"line":143,"column":2}},{"start":{"line":143,"column":2},"end":{"line":143,"column":2}}]},"14":{"line":147,"type":"binary-expr","locations":[{"start":{"line":147,"column":14},"end":{"line":147,"column":23}},{"start":{"line":147,"column":27},"end":{"line":147,"column":29}}]},"15":{"line":148,"type":"if","locations":[{"start":{"line":148,"column":2},"end":{"line":148,"column":2}},{"start":{"line":148,"column":2},"end":{"line":148,"column":2}}]},"16":{"line":148,"type":"binary-expr","locations":[{"start":{"line":148,"column":6},"end":{"line":148,"column":15}},{"start":{"line":148,"column":19},"end":{"line":148,"column":29}}]},"17":{"line":152,"type":"if","locations":[{"start":{"line":152,"column":2},"end":{"line":152,"column":2}},{"start":{"line":152,"column":2},"end":{"line":152,"column":2}}]},"18":{"line":154,"type":"if","locations":[{"start":{"line":154,"column":9},"end":{"line":154,"column":9}},{"start":{"line":154,"column":9},"end":{"line":154,"column":9}}]},"19":{"line":166,"type":"if","locations":[{"start":{"line":166,"column":4},"end":{"line":166,"column":4}},{"start":{"line":166,"column":4},"end":{"line":166,"column":4}}]},"20":{"line":186,"type":"cond-expr","locations":[{"start":{"line":186,"column":33},"end":{"line":186,"column":35}},{"start":{"line":186,"column":38},"end":{"line":186,"column":39}}]},"21":{"line":190,"type":"if","locations":[{"start":{"line":190,"column":4},"end":{"line":190,"column":4}},{"start":{"line":190,"column":4},"end":{"line":190,"column":4}}]},"22":{"line":196,"type":"if","locations":[{"start":{"line":196,"column":8},"end":{"line":196,"column":8}},{"start":{"line":196,"column":8},"end":{"line":196,"column":8}}]},"23":{"line":202,"type":"if","locations":[{"start":{"line":202,"column":6},"end":{"line":202,"column":6}},{"start":{"line":202,"column":6},"end":{"line":202,"column":6}}]},"24":{"line":226,"type":"if","locations":[{"start":{"line":226,"column":2},"end":{"line":226,"column":2}},{"start":{"line":226,"column":2},"end":{"line":226,"column":2}}]},"25":{"line":232,"type":"if","locations":[{"start":{"line":232,"column":2},"end":{"line":232,"column":2}},{"start":{"line":232,"column":2},"end":{"line":232,"column":2}}]},"26":{"line":236,"type":"if","locations":[{"start":{"line":236,"column":2},"end":{"line":236,"column":2}},{"start":{"line":236,"column":2},"end":{"line":236,"column":2}}]},"27":{"line":239,"type":"if","locations":[{"start":{"line":239,"column":2},"end":{"line":239,"column":2}},{"start":{"line":239,"column":2},"end":{"line":239,"column":2}}]},"28":{"line":242,"type":"if","locations":[{"start":{"line":242,"column":2},"end":{"line":242,"column":2}},{"start":{"line":242,"column":2},"end":{"line":242,"column":2}}]},"29":{"line":246,"type":"if","locations":[{"start":{"line":246,"column":2},"end":{"line":246,"column":2}},{"start":{"line":246,"column":2},"end":{"line":246,"column":2}}]},"30":{"line":248,"type":"if","locations":[{"start":{"line":248,"column":4},"end":{"line":248,"column":4}},{"start":{"line":248,"column":4},"end":{"line":248,"column":4}}]},"31":{"line":253,"type":"if","locations":[{"start":{"line":253,"column":7},"end":{"line":253,"column":7}},{"start":{"line":253,"column":7},"end":{"line":253,"column":7}}]},"32":{"line":260,"type":"if","locations":[{"start":{"line":260,"column":4},"end":{"line":260,"column":4}},{"start":{"line":260,"column":4},"end":{"line":260,"column":4}}]},"33":{"line":305,"type":"cond-expr","locations":[{"start":{"line":305,"column":33},"end":{"line":305,"column":46}},{"start":{"line":305,"column":49},"end":{"line":305,"column":59}}]},"34":{"line":311,"type":"if","locations":[{"start":{"line":311,"column":2},"end":{"line":311,"column":2}},{"start":{"line":311,"column":2},"end":{"line":311,"column":2}}]},"35":{"line":331,"type":"binary-expr","locations":[{"start":{"line":331,"column":14},"end":{"line":331,"column":23}},{"start":{"line":331,"column":27},"end":{"line":331,"column":29}}]},"36":{"line":332,"type":"if","locations":[{"start":{"line":332,"column":2},"end":{"line":332,"column":2}},{"start":{"line":332,"column":2},"end":{"line":332,"column":2}}]},"37":{"line":332,"type":"binary-expr","locations":[{"start":{"line":332,"column":6},"end":{"line":332,"column":15}},{"start":{"line":332,"column":19},"end":{"line":332,"column":29}}]},"38":{"line":336,"type":"if","locations":[{"start":{"line":336,"column":2},"end":{"line":336,"column":2}},{"start":{"line":336,"column":2},"end":{"line":336,"column":2}}]},"39":{"line":338,"type":"if","locations":[{"start":{"line":338,"column":9},"end":{"line":338,"column":9}},{"start":{"line":338,"column":9},"end":{"line":338,"column":9}}]},"40":{"line":354,"type":"if","locations":[{"start":{"line":354,"column":4},"end":{"line":354,"column":4}},{"start":{"line":354,"column":4},"end":{"line":354,"column":4}}]},"41":{"line":373,"type":"if","locations":[{"start":{"line":373,"column":2},"end":{"line":373,"column":2}},{"start":{"line":373,"column":2},"end":{"line":373,"column":2}}]},"42":{"line":375,"type":"if","locations":[{"start":{"line":375,"column":9},"end":{"line":375,"column":9}},{"start":{"line":375,"column":9},"end":{"line":375,"column":9}}]},"43":{"line":390,"type":"cond-expr","locations":[{"start":{"line":390,"column":20},"end":{"line":390,"column":23}},{"start":{"line":390,"column":26},"end":{"line":390,"column":55}}]},"44":{"line":402,"type":"if","locations":[{"start":{"line":402,"column":2},"end":{"line":402,"column":2}},{"start":{"line":402,"column":2},"end":{"line":402,"column":2}}]},"45":{"line":406,"type":"if","locations":[{"start":{"line":406,"column":4},"end":{"line":406,"column":4}},{"start":{"line":406,"column":4},"end":{"line":406,"column":4}}]},"46":{"line":422,"type":"binary-expr","locations":[{"start":{"line":422,"column":10},"end":{"line":422,"column":32}},{"start":{"line":422,"column":38},"end":{"line":422,"column":54}},{"start":{"line":423,"column":5},"end":{"line":423,"column":26}},{"start":{"line":423,"column":32},"end":{"line":423,"column":56}}]},"47":{"line":432,"type":"if","locations":[{"start":{"line":432,"column":2},"end":{"line":432,"column":2}},{"start":{"line":432,"column":2},"end":{"line":432,"column":2}}]},"48":{"line":437,"type":"if","locations":[{"start":{"line":437,"column":4},"end":{"line":437,"column":4}},{"start":{"line":437,"column":4},"end":{"line":437,"column":4}}]},"49":{"line":498,"type":"if","locations":[{"start":{"line":498,"column":2},"end":{"line":498,"column":2}},{"start":{"line":498,"column":2},"end":{"line":498,"column":2}}]},"50":{"line":500,"type":"if","locations":[{"start":{"line":500,"column":9},"end":{"line":500,"column":9}},{"start":{"line":500,"column":9},"end":{"line":500,"column":9}}]},"51":{"line":521,"type":"cond-expr","locations":[{"start":{"line":521,"column":34},"end":{"line":521,"column":44}},{"start":{"line":521,"column":47},"end":{"line":521,"column":73}}]},"52":{"line":524,"type":"if","locations":[{"start":{"line":524,"column":2},"end":{"line":524,"column":2}},{"start":{"line":524,"column":2},"end":{"line":524,"column":2}}]},"53":{"line":585,"type":"if","locations":[{"start":{"line":585,"column":2},"end":{"line":585,"column":2}},{"start":{"line":585,"column":2},"end":{"line":585,"column":2}}]},"54":{"line":587,"type":"if","locations":[{"start":{"line":587,"column":9},"end":{"line":587,"column":9}},{"start":{"line":587,"column":9},"end":{"line":587,"column":9}}]},"55":{"line":591,"type":"if","locations":[{"start":{"line":591,"column":2},"end":{"line":591,"column":2}},{"start":{"line":591,"column":2},"end":{"line":591,"column":2}}]},"56":{"line":592,"type":"if","locations":[{"start":{"line":592,"column":4},"end":{"line":592,"column":4}},{"start":{"line":592,"column":4},"end":{"line":592,"column":4}}]},"57":{"line":597,"type":"if","locations":[{"start":{"line":597,"column":9},"end":{"line":597,"column":9}},{"start":{"line":597,"column":9},"end":{"line":597,"column":9}}]},"58":{"line":602,"type":"if","locations":[{"start":{"line":602,"column":2},"end":{"line":602,"column":2}},{"start":{"line":602,"column":2},"end":{"line":602,"column":2}}]},"59":{"line":602,"type":"binary-expr","locations":[{"start":{"line":602,"column":6},"end":{"line":602,"column":40}},{"start":{"line":603,"column":4},"end":{"line":603,"column":39}}]},"60":{"line":663,"type":"if","locations":[{"start":{"line":663,"column":2},"end":{"line":663,"column":2}},{"start":{"line":663,"column":2},"end":{"line":663,"column":2}}]},"61":{"line":665,"type":"if","locations":[{"start":{"line":665,"column":9},"end":{"line":665,"column":9}},{"start":{"line":665,"column":9},"end":{"line":665,"column":9}}]},"62":{"line":669,"type":"if","locations":[{"start":{"line":669,"column":2},"end":{"line":669,"column":2}},{"start":{"line":669,"column":2},"end":{"line":669,"column":2}}]},"63":{"line":670,"type":"if","locations":[{"start":{"line":670,"column":4},"end":{"line":670,"column":4}},{"start":{"line":670,"column":4},"end":{"line":670,"column":4}}]},"64":{"line":675,"type":"if","locations":[{"start":{"line":675,"column":9},"end":{"line":675,"column":9}},{"start":{"line":675,"column":9},"end":{"line":675,"column":9}}]},"65":{"line":694,"type":"cond-expr","locations":[{"start":{"line":694,"column":31},"end":{"line":694,"column":32}},{"start":{"line":694,"column":35},"end":{"line":694,"column":57}}]},"66":{"line":700,"type":"binary-expr","locations":[{"start":{"line":700,"column":11},"end":{"line":700,"column":33}},{"start":{"line":700,"column":37},"end":{"line":700,"column":63}}]},"67":{"line":708,"type":"if","locations":[{"start":{"line":708,"column":4},"end":{"line":708,"column":4}},{"start":{"line":708,"column":4},"end":{"line":708,"column":4}}]},"68":{"line":793,"type":"cond-expr","locations":[{"start":{"line":793,"column":61},"end":{"line":793,"column":62}},{"start":{"line":793,"column":65},"end":{"line":793,"column":66}}]},"69":{"line":796,"type":"if","locations":[{"start":{"line":796,"column":4},"end":{"line":796,"column":4}},{"start":{"line":796,"column":4},"end":{"line":796,"column":4}}]},"70":{"line":818,"type":"if","locations":[{"start":{"line":818,"column":4},"end":{"line":818,"column":4}},{"start":{"line":818,"column":4},"end":{"line":818,"column":4}}]},"71":{"line":841,"type":"cond-expr","locations":[{"start":{"line":841,"column":28},"end":{"line":841,"column":32}},{"start":{"line":841,"column":35},"end":{"line":841,"column":48}}]}},"code":["// Copyright 2009 The Closure Library Authors. All Rights Reserved.","//","// Licensed under the Apache License, Version 2.0 (the \"License\");","// you may not use this file except in compliance with the License.","// You may obtain a copy of the License at","//","//      http://www.apache.org/licenses/LICENSE-2.0","//","// Unless required by applicable law or agreed to in writing, software","// distributed under the License is distributed on an \"AS-IS\" BASIS,","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.","// See the License for the specific language governing permissions and","// limitations under the License.","","/** @module types */","/**"," * Constructs a two's-complement integer an array containing bits of the"," * integer in 32-bit (signed) pieces, given in little-endian order (i.e.,"," * lowest-order bits in the first piece), and the sign of -1 or 0."," *"," * See the from* functions below for other convenient ways of constructing"," * Integers."," *"," * The internal representation of an integer is an array of 32-bit signed"," * pieces, along with a sign (0 or -1) that indicates the contents of all the"," * other 32-bit pieces out to infinity.  We use 32-bit pieces because these are"," * the size of integers on which Javascript performs bit-operations.  For"," * operations like addition and multiplication, we split each number into 16-bit"," * pieces, which can easily be multiplied within Javascript's floating-point"," * representation without overflow or change in sign."," *"," * @constructor"," * @param {Array.<number>} bits Array containing the bits of the number."," * @param {number} sign The sign of the number: -1 for negative and 0 positive."," * @final"," */","function Integer (bits, sign) {","  /**","   * @type {!Array.<number>}","   * @private","   */","  this.bits_ = [];","","  /**","   * @type {number}","   * @private","   */","  this.sign_ = sign;","","  // Copy the 32-bit signed integer values passed in.  We prune out those at the","  // top that equal the sign since they are redundant.","  var top = true;","  for (var i = bits.length - 1; i >= 0; i--) {","    var val = bits[i] | 0;","    if (!top || val != sign) {","      this.bits_[i] = val;","      top = false;","    }","  }","}","","","// NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the","// from* methods on which they depend.","","","/**"," * A cache of the Integer representations of small integer values."," * @type {!Object}"," * @private"," */","Integer.IntCache_ = {};","","","/**"," * Returns an Integer representing the given (32-bit) integer value."," * @param {number} value A 32-bit integer value."," * @return {!Integer} The corresponding Integer value."," */","Integer.fromInt = function(value) {","  if (-128 <= value && value < 128) {","    var cachedObj = Integer.IntCache_[value];","    if (cachedObj) {","      return cachedObj;","    }","  }","","  var obj = new Integer([value | 0], value < 0 ? -1 : 0);","  if (-128 <= value && value < 128) {","    Integer.IntCache_[value] = obj;","  }","  return obj;","};","","","/**"," * Returns an Integer representing the given value, provided that it is a finite"," * number.  Otherwise, zero is returned."," * @param {number} value The value in question."," * @return {!Integer} The corresponding Integer value."," */","Integer.fromNumber = function(value) {","  if (isNaN(value) || !isFinite(value)) {","    return Integer.ZERO;","  } else if (value < 0) {","    return Integer.fromNumber(-value).negate();","  } else {","    var bits = [];","    var pow = 1;","    for (var i = 0; value >= pow; i++) {","      bits[i] = (value / pow) | 0;","      pow *= Integer.TWO_PWR_32_DBL_;","    }","    return new Integer(bits, 0);","  }","};","","","/**"," * Returns a Integer representing the value that comes by concatenating the"," * given entries, each is assumed to be 32 signed bits, given in little-endian"," * order (lowest order bits in the lowest index), and sign-extending the highest"," * order 32-bit value."," * @param {Array.<number>} bits The bits of the number, in 32-bit signed pieces,"," *     in little-endian order."," * @return {!Integer} The corresponding Integer value."," */","Integer.fromBits = function(bits) {","  var high = bits[bits.length - 1];","  //noinspection JSBitwiseOperatorUsage","  return new Integer(bits, high & (1 << 31) ? -1 : 0);","};","","","/**"," * Returns an Integer representation of the given string, written using the"," * given radix."," * @param {string} str The textual representation of the Integer."," * @param {number=} opt_radix The radix in which the text is written."," * @return {!Integer} The corresponding Integer value."," */","Integer.fromString = function(str, opt_radix) {","  if (str.length == 0) {","    throw TypeError('number format error: empty string');","  }","","  var radix = opt_radix || 10;","  if (radix < 2 || 36 < radix) {","    throw Error('radix out of range: ' + radix);","  }","","  if (str.charAt(0) == '-') {","    return Integer.fromString(str.substring(1), radix).negate();","  } else if (str.indexOf('-') >= 0) {","    throw TypeError('number format error: interior \"-\" character');","  }","","  // Do several (8) digits each time through the loop, so as to","  // minimize the calls to the very expensive emulated div.","  var radixToPower = Integer.fromNumber(Math.pow(radix, 8));","","  var result = Integer.ZERO;","  for (var i = 0; i < str.length; i += 8) {","    var size = Math.min(8, str.length - i);","    var value = parseInt(str.substring(i, i + size), radix);","    if (size < 8) {","      var power = Integer.fromNumber(Math.pow(radix, size));","      result = result.multiply(power).add(Integer.fromNumber(value));","    } else {","      result = result.multiply(radixToPower);","      result = result.add(Integer.fromNumber(value));","    }","  }","  return result;","};","","/**"," * Returns an Integer representation of a given big endian Buffer."," * The internal representation of bits contains bytes in groups of 4"," * @param {Buffer} buf"," * @returns {Integer}"," */","Integer.fromBuffer = function (buf) {","  var bits = new Array(Math.ceil(buf.length / 4));","  //noinspection JSBitwiseOperatorUsage","  var sign = buf[0] & (1 << 7) ? -1 : 0;","  for (var i = 0; i < bits.length; i++) {","    var offset = buf.length - ((i + 1) * 4);","    var value;","    if (offset < 0) {","      //The buffer length is not multiple of 4","      offset = offset + 4;","      value = 0;","      for (var j = 0; j < offset; j++) {","        var byte = buf[j];","        if (sign === -1) {","          //invert the bits","          byte = ~byte & 0xff;","        }","        value = value | (byte << (offset - j - 1) * 8);","      }","      if (sign === -1) {","        //invert all the bits","        value = ~value;","      }","    }","    else {","      value = buf.readInt32BE(offset);","    }","    bits[i] = value;","  }","  return new Integer(bits, sign);","};","","/**"," * Returns a big endian buffer representation of an Integer."," * Internally the bits are represented using 4 bytes groups (numbers),"," * in the Buffer representation there might be the case where we need less than the 4 bytes."," * For example: 0x00000001 -> '01', 0xFFFFFFFF -> 'FF', 0xFFFFFF01 -> 'FF01'"," * @param {Integer} value"," * @returns {Buffer}","*/","Integer.toBuffer = function (value) {","  var sign = value.sign_;","  var bits = value.bits_;","  if (bits.length === 0) {","    //[0] or [0xffffffff]","    return new Buffer([value.sign_]);","  }","  //the high bits might need to be represented in less than 4 bytes","  var highBits = bits[bits.length-1];","  if (sign === -1) {","    highBits = ~highBits;","  }","  var high = [];","  if (highBits >>> 24 > 0) {","    high.push((highBits >> 24) & 0xff);","  }","  if (highBits >>> 16 > 0) {","    high.push((highBits >> 16) & 0xff);","  }","  if (highBits >>> 8 > 0) {","    high.push((highBits >> 8) & 0xff);","  }","  high.push(highBits & 0xff);","  if (sign === -1) {","    //The byte containing the sign bit got removed","    if (high[0] >> 7 !== 0) {","      //it is going to be negated","      high.unshift(0);","    }","  }","  else if (high[0] >> 7 !== 0) {","    //its positive but it lost the byte containing the sign bit","    high.unshift(0);","  }","  var buf = new Buffer(high.length + ((bits.length-1) * 4));","  for (var j = 0; j < high.length; j++) {","    var b = high[j];","    if (sign === -1) {","      buf[j] = ~b;","    }","    else {","      buf[j] = b;","    }","  }","  for (var i = 0; i < bits.length - 1; i++) {","    var group = bits[bits.length - 2 - i];","    var offset = high.length + i * 4;","    buf.writeInt32BE(group, offset);","  }","  return buf;","};","","","/**"," * A number used repeatedly in calculations.  This must appear before the first"," * call to the from* functions below."," * @type {number}"," * @private"," */","Integer.TWO_PWR_32_DBL_ = (1 << 16) * (1 << 16);","","","/** @type {!Integer} */","Integer.ZERO = Integer.fromInt(0);","","","/** @type {!Integer} */","Integer.ONE = Integer.fromInt(1);","","","/**"," * @type {!Integer}"," * @private"," */","Integer.TWO_PWR_24_ = Integer.fromInt(1 << 24);","","","/**"," * Returns the value, assuming it is a 32-bit integer."," * @return {number} The corresponding int value."," */","Integer.prototype.toInt = function() {","  return this.bits_.length > 0 ? this.bits_[0] : this.sign_;","};","","","/** @return {number} The closest floating-point representation to this value. */","Integer.prototype.toNumber = function() {","  if (this.isNegative()) {","    return -this.negate().toNumber();","  } else {","    var val = 0;","    var pow = 1;","    for (var i = 0; i < this.bits_.length; i++) {","      val += this.getBitsUnsigned(i) * pow;","      pow *= Integer.TWO_PWR_32_DBL_;","    }","    return val;","  }","};","","","/**"," * @param {number=} opt_radix The radix in which the text should be written."," * @return {string} The textual representation of this value."," * @override"," */","Integer.prototype.toString = function(opt_radix) {","  var radix = opt_radix || 10;","  if (radix < 2 || 36 < radix) {","    throw Error('radix out of range: ' + radix);","  }","","  if (this.isZero()) {","    return '0';","  } else if (this.isNegative()) {","    return '-' + this.negate().toString(radix);","  }","","  // Do several (6) digits each time through the loop, so as to","  // minimize the calls to the very expensive emulated div.","  var radixToPower = Integer.fromNumber(Math.pow(radix, 6));","","  var rem = this;","  var result = '';","  while (true) {","    var remDiv = rem.divide(radixToPower);","    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();","    var digits = intval.toString(radix);","","    rem = remDiv;","    if (rem.isZero()) {","      return digits + result;","    } else {","      while (digits.length < 6) {","        digits = '0' + digits;","      }","      result = '' + digits + result;","    }","  }","};","","","/**"," * Returns the index-th 32-bit (signed) piece of the Integer according to"," * little-endian order (i.e., index 0 contains the smallest bits)."," * @param {number} index The index in question."," * @return {number} The requested 32-bits as a signed number."," */","Integer.prototype.getBits = function(index) {","  if (index < 0) {","    return 0;  // Allowing this simplifies bit shifting operations below...","  } else if (index < this.bits_.length) {","    return this.bits_[index];","  } else {","    return this.sign_;","  }","};","","","/**"," * Returns the index-th 32-bit piece as an unsigned number."," * @param {number} index The index in question."," * @return {number} The requested 32-bits as an unsigned number."," */","Integer.prototype.getBitsUnsigned = function(index) {","  var val = this.getBits(index);","  return val >= 0 ? val : Integer.TWO_PWR_32_DBL_ + val;","};","","","/** @return {number} The sign bit of this number, -1 or 0. */","Integer.prototype.getSign = function() {","  return this.sign_;","};","","","/** @return {boolean} Whether this value is zero. */","Integer.prototype.isZero = function() {","  if (this.sign_ != 0) {","    return false;","  }","  for (var i = 0; i < this.bits_.length; i++) {","    if (this.bits_[i] != 0) {","      return false;","    }","  }","  return true;","};","","","/** @return {boolean} Whether this value is negative. */","Integer.prototype.isNegative = function() {","  return this.sign_ == -1;","};","","","/** @return {boolean} Whether this value is odd. */","Integer.prototype.isOdd = function() {","  return (this.bits_.length == 0) && (this.sign_ == -1) ||","    (this.bits_.length > 0) && ((this.bits_[0] & 1) != 0);","};","","","/**"," * @param {Integer} other Integer to compare against."," * @return {boolean} Whether this Integer equals the other."," */","Integer.prototype.equals = function(other) {","  if (this.sign_ != other.sign_) {","    return false;","  }","  var len = Math.max(this.bits_.length, other.bits_.length);","  for (var i = 0; i < len; i++) {","    if (this.getBits(i) != other.getBits(i)) {","      return false;","    }","  }","  return true;","};","","","/**"," * @param {Integer} other Integer to compare against."," * @return {boolean} Whether this Integer does not equal the other."," */","Integer.prototype.notEquals = function(other) {","  return !this.equals(other);","};","","","/**"," * @param {Integer} other Integer to compare against."," * @return {boolean} Whether this Integer is greater than the other."," */","Integer.prototype.greaterThan = function(other) {","  return this.compare(other) > 0;","};","","","/**"," * @param {Integer} other Integer to compare against."," * @return {boolean} Whether this Integer is greater than or equal to the other."," */","Integer.prototype.greaterThanOrEqual = function(other) {","  return this.compare(other) >= 0;","};","","","/**"," * @param {Integer} other Integer to compare against."," * @return {boolean} Whether this Integer is less than the other."," */","Integer.prototype.lessThan = function(other) {","  return this.compare(other) < 0;","};","","","/**"," * @param {Integer} other Integer to compare against."," * @return {boolean} Whether this Integer is less than or equal to the other."," */","Integer.prototype.lessThanOrEqual = function(other) {","  return this.compare(other) <= 0;","};","","","/**"," * Compares this Integer with the given one."," * @param {Integer} other Integer to compare against."," * @return {number} 0 if they are the same, 1 if the this is greater, and -1"," *     if the given one is greater."," */","Integer.prototype.compare = function(other) {","  var diff = this.subtract(other);","  if (diff.isNegative()) {","    return -1;","  } else if (diff.isZero()) {","    return 0;","  } else {","    return +1;","  }","};","","","/**"," * Returns an integer with only the first numBits bits of this value, sign"," * extended from the final bit."," * @param {number} numBits The number of bits by which to shift."," * @return {!Integer} The shorted integer value."," */","Integer.prototype.shorten = function(numBits) {","  var arr_index = (numBits - 1) >> 5;","  var bit_index = (numBits - 1) % 32;","  var bits = [];","  for (var i = 0; i < arr_index; i++) {","    bits[i] = this.getBits(i);","  }","  var sigBits = bit_index == 31 ? 0xFFFFFFFF : (1 << (bit_index + 1)) - 1;","  var val = this.getBits(arr_index) & sigBits;","  //noinspection JSBitwiseOperatorUsage","  if (val & (1 << bit_index)) {","    val |= 0xFFFFFFFF - sigBits;","    bits[arr_index] = val;","    return new Integer(bits, -1);","  } else {","    bits[arr_index] = val;","    return new Integer(bits, 0);","  }","};","","","/** @return {!Integer} The negation of this value. */","Integer.prototype.negate = function() {","  return this.not().add(Integer.ONE);","};","","","/**"," * Returns the sum of this and the given Integer."," * @param {Integer} other The Integer to add to this."," * @return {!Integer} The Integer result."," */","Integer.prototype.add = function(other) {","  var len = Math.max(this.bits_.length, other.bits_.length);","  var arr = [];","  var carry = 0;","","  for (var i = 0; i <= len; i++) {","    var a1 = this.getBits(i) >>> 16;","    var a0 = this.getBits(i) & 0xFFFF;","","    var b1 = other.getBits(i) >>> 16;","    var b0 = other.getBits(i) & 0xFFFF;","","    var c0 = carry + a0 + b0;","    var c1 = (c0 >>> 16) + a1 + b1;","    carry = c1 >>> 16;","    c0 &= 0xFFFF;","    c1 &= 0xFFFF;","    arr[i] = (c1 << 16) | c0;","  }","  return Integer.fromBits(arr);","};","","","/**"," * Returns the difference of this and the given Integer."," * @param {Integer} other The Integer to subtract from this."," * @return {!Integer} The Integer result."," */","Integer.prototype.subtract = function(other) {","  return this.add(other.negate());","};","","","/**"," * Returns the product of this and the given Integer."," * @param {Integer} other The Integer to multiply against this."," * @return {!Integer} The product of this and the other."," */","Integer.prototype.multiply = function(other) {","  if (this.isZero()) {","    return Integer.ZERO;","  } else if (other.isZero()) {","    return Integer.ZERO;","  }","","  if (this.isNegative()) {","    if (other.isNegative()) {","      return this.negate().multiply(other.negate());","    } else {","      return this.negate().multiply(other).negate();","    }","  } else if (other.isNegative()) {","    return this.multiply(other.negate()).negate();","  }","","  // If both numbers are small, use float multiplication","  if (this.lessThan(Integer.TWO_PWR_24_) &&","    other.lessThan(Integer.TWO_PWR_24_)) {","    return Integer.fromNumber(this.toNumber() * other.toNumber());","  }","","  // Fill in an array of 16-bit products.","  var len = this.bits_.length + other.bits_.length;","  var arr = [];","  for (var i = 0; i < 2 * len; i++) {","    arr[i] = 0;","  }","  for (var i = 0; i < this.bits_.length; i++) {","    for (var j = 0; j < other.bits_.length; j++) {","      var a1 = this.getBits(i) >>> 16;","      var a0 = this.getBits(i) & 0xFFFF;","","      var b1 = other.getBits(j) >>> 16;","      var b0 = other.getBits(j) & 0xFFFF;","","      arr[2 * i + 2 * j] += a0 * b0;","      Integer.carry16_(arr, 2 * i + 2 * j);","      arr[2 * i + 2 * j + 1] += a1 * b0;","      Integer.carry16_(arr, 2 * i + 2 * j + 1);","      arr[2 * i + 2 * j + 1] += a0 * b1;","      Integer.carry16_(arr, 2 * i + 2 * j + 1);","      arr[2 * i + 2 * j + 2] += a1 * b1;","      Integer.carry16_(arr, 2 * i + 2 * j + 2);","    }","  }","","  // Combine the 16-bit values into 32-bit values.","  for (var i = 0; i < len; i++) {","    arr[i] = (arr[2 * i + 1] << 16) | arr[2 * i];","  }","  for (var i = len; i < 2 * len; i++) {","    arr[i] = 0;","  }","  return new Integer(arr, 0);","};","","","/**"," * Carries any overflow from the given index into later entries."," * @param {Array.<number>} bits Array of 16-bit values in little-endian order."," * @param {number} index The index in question."," * @private"," */","Integer.carry16_ = function(bits, index) {","  while ((bits[index] & 0xFFFF) != bits[index]) {","    bits[index + 1] += bits[index] >>> 16;","    bits[index] &= 0xFFFF;","  }","};","","","/**"," * Returns this Integer divided by the given one."," * @param {Integer} other Th Integer to divide this by."," * @return {!Integer} This value divided by the given one."," */","Integer.prototype.divide = function(other) {","  if (other.isZero()) {","    throw Error('division by zero');","  } else if (this.isZero()) {","    return Integer.ZERO;","  }","","  if (this.isNegative()) {","    if (other.isNegative()) {","      return this.negate().divide(other.negate());","    } else {","      return this.negate().divide(other).negate();","    }","  } else if (other.isNegative()) {","    return this.divide(other.negate()).negate();","  }","","  // Repeat the following until the remainder is less than other:  find a","  // floating-point that approximates remainder / other *from below*, add this","  // into the result, and subtract it from the remainder.  It is critical that","  // the approximate value is less than or equal to the real value so that the","  // remainder never becomes negative.","  var res = Integer.ZERO;","  var rem = this;","  while (rem.greaterThanOrEqual(other)) {","    // Approximate the result of division. This may be a little greater or","    // smaller than the actual value.","    var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));","","    // We will tweak the approximate result by changing it in the 48-th digit or","    // the smallest non-fractional digit, whichever is larger.","    var log2 = Math.ceil(Math.log(approx) / Math.LN2);","    var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);","","    // Decrease the approximation until it is smaller than the remainder.  Note","    // that if it is too large, the product overflows and is negative.","    var approxRes = Integer.fromNumber(approx);","    var approxRem = approxRes.multiply(other);","    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {","      approx -= delta;","      approxRes = Integer.fromNumber(approx);","      approxRem = approxRes.multiply(other);","    }","","    // We know the answer can't be zero... and actually, zero would cause","    // infinite recursion since we would make no progress.","    if (approxRes.isZero()) {","      approxRes = Integer.ONE;","    }","","    res = res.add(approxRes);","    rem = rem.subtract(approxRem);","  }","  return res;","};","","","/**"," * Returns this Integer modulo the given one."," * @param {Integer} other The Integer by which to mod."," * @return {!Integer} This value modulo the given one."," */","Integer.prototype.modulo = function(other) {","  return this.subtract(this.divide(other).multiply(other));","};","","","/** @return {!Integer} The bitwise-NOT of this value. */","Integer.prototype.not = function() {","  var len = this.bits_.length;","  var arr = [];","  for (var i = 0; i < len; i++) {","    arr[i] = ~this.bits_[i];","  }","  return new Integer(arr, ~this.sign_);","};","","","/**"," * Returns the bitwise-AND of this Integer and the given one."," * @param {Integer} other The Integer to AND with this."," * @return {!Integer} The bitwise-AND of this and the other."," */","Integer.prototype.and = function(other) {","  var len = Math.max(this.bits_.length, other.bits_.length);","  var arr = [];","  for (var i = 0; i < len; i++) {","    arr[i] = this.getBits(i) & other.getBits(i);","  }","  return new Integer(arr, this.sign_ & other.sign_);","};","","","/**"," * Returns the bitwise-OR of this Integer and the given one."," * @param {Integer} other The Integer to OR with this."," * @return {!Integer} The bitwise-OR of this and the other."," */","Integer.prototype.or = function(other) {","  var len = Math.max(this.bits_.length, other.bits_.length);","  var arr = [];","  for (var i = 0; i < len; i++) {","    arr[i] = this.getBits(i) | other.getBits(i);","  }","  return new Integer(arr, this.sign_ | other.sign_);","};","","","/**"," * Returns the bitwise-XOR of this Integer and the given one."," * @param {Integer} other The Integer to XOR with this."," * @return {!Integer} The bitwise-XOR of this and the other."," */","Integer.prototype.xor = function(other) {","  var len = Math.max(this.bits_.length, other.bits_.length);","  var arr = [];","  for (var i = 0; i < len; i++) {","    arr[i] = this.getBits(i) ^ other.getBits(i);","  }","  return new Integer(arr, this.sign_ ^ other.sign_);","};","","","/**"," * Returns this value with bits shifted to the left by the given amount."," * @param {number} numBits The number of bits by which to shift."," * @return {!Integer} This shifted to the left by the given amount."," */","Integer.prototype.shiftLeft = function(numBits) {","  var arr_delta = numBits >> 5;","  var bit_delta = numBits % 32;","  var len = this.bits_.length + arr_delta + (bit_delta > 0 ? 1 : 0);","  var arr = [];","  for (var i = 0; i < len; i++) {","    if (bit_delta > 0) {","      arr[i] = (this.getBits(i - arr_delta) << bit_delta) |","      (this.getBits(i - arr_delta - 1) >>> (32 - bit_delta));","    } else {","      arr[i] = this.getBits(i - arr_delta);","    }","  }","  return new Integer(arr, this.sign_);","};","","","/**"," * Returns this value with bits shifted to the right by the given amount."," * @param {number} numBits The number of bits by which to shift."," * @return {!Integer} This shifted to the right by the given amount."," */","Integer.prototype.shiftRight = function(numBits) {","  var arr_delta = numBits >> 5;","  var bit_delta = numBits % 32;","  var len = this.bits_.length - arr_delta;","  var arr = [];","  for (var i = 0; i < len; i++) {","    if (bit_delta > 0) {","      arr[i] = (this.getBits(i + arr_delta) >>> bit_delta) |","      (this.getBits(i + arr_delta + 1) << (32 - bit_delta));","    } else {","      arr[i] = this.getBits(i + arr_delta);","    }","  }","  return new Integer(arr, this.sign_);","};","","/**"," * Provide the name of the constructor and the string representation"," * @returns {string}"," */","Integer.prototype.inspect = function () {","  return this.constructor.name + ': ' + this.toString();","};","","/**"," * Returns a Integer whose value is the absolute value of this"," * @returns {Integer}"," */","Integer.prototype.abs = function () {","  return this.sign_ === 0 ? this : this.negate();","};","","/**"," * Returns the string representation."," * Method used by the native JSON.stringify() to serialize this instance."," */","Integer.prototype.toJSON = function () {","  return this.toString();","};","","module.exports = Integer;",""],"l":{"37":1,"42":3,"48":3,"52":3,"53":3,"54":3,"55":3,"56":2,"57":2,"72":1,"80":1,"81":3,"82":2,"83":2,"84":0,"88":3,"89":3,"90":2,"92":3,"102":1,"103":0,"104":0,"105":0,"106":0,"108":0,"109":0,"110":0,"111":0,"112":0,"114":0,"128":1,"129":0,"131":0,"142":1,"143":0,"144":0,"147":0,"148":0,"149":0,"152":0,"153":0,"154":0,"155":0,"160":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"170":0,"171":0,"174":0,"183":1,"184":0,"186":0,"187":0,"188":0,"189":0,"190":0,"192":0,"193":0,"194":0,"195":0,"196":0,"198":0,"200":0,"202":0,"204":0,"208":0,"210":0,"212":0,"223":1,"224":0,"225":0,"226":0,"228":0,"231":0,"232":0,"233":0,"235":0,"236":0,"237":0,"239":0,"240":0,"242":0,"243":0,"245":0,"246":0,"248":0,"250":0,"253":0,"255":0,"257":0,"258":0,"259":0,"260":0,"261":0,"264":0,"267":0,"268":0,"269":0,"270":0,"272":0,"282":1,"286":1,"290":1,"297":1,"304":1,"305":0,"310":1,"311":0,"312":0,"314":0,"315":0,"316":0,"317":0,"318":0,"320":0,"330":1,"331":0,"332":0,"333":0,"336":0,"337":0,"338":0,"339":0,"344":0,"346":0,"347":0,"348":0,"349":0,"350":0,"351":0,"353":0,"354":0,"355":0,"357":0,"358":0,"360":0,"372":1,"373":0,"374":0,"375":0,"376":0,"378":0,"388":1,"389":0,"390":0,"395":1,"396":0,"401":1,"402":0,"403":0,"405":0,"406":0,"407":0,"410":0,"415":1,"416":0,"421":1,"422":0,"431":1,"432":0,"433":0,"435":0,"436":0,"437":0,"438":0,"441":0,"449":1,"450":0,"458":1,"459":0,"467":1,"468":0,"476":1,"477":0,"485":1,"486":0,"496":1,"497":0,"498":0,"499":0,"500":0,"501":0,"503":0,"514":1,"515":0,"516":0,"517":0,"518":0,"519":0,"521":0,"522":0,"524":0,"525":0,"526":0,"527":0,"529":0,"530":0,"536":1,"537":0,"546":1,"547":0,"548":0,"549":0,"551":0,"552":0,"553":0,"555":0,"556":0,"558":0,"559":0,"560":0,"561":0,"562":0,"563":0,"565":0,"574":1,"575":0,"584":1,"585":0,"586":0,"587":0,"588":0,"591":0,"592":0,"593":0,"595":0,"597":0,"598":0,"602":0,"604":0,"608":0,"609":0,"610":0,"611":0,"613":0,"614":0,"615":0,"616":0,"618":0,"619":0,"621":0,"622":0,"623":0,"624":0,"625":0,"626":0,"627":0,"628":0,"633":0,"634":0,"636":0,"637":0,"639":0,"649":1,"650":0,"651":0,"652":0,"662":1,"663":0,"664":0,"665":0,"666":0,"669":0,"670":0,"671":0,"673":0,"675":0,"676":0,"684":0,"685":0,"686":0,"689":0,"693":0,"694":0,"698":0,"699":0,"700":0,"701":0,"702":0,"703":0,"708":0,"709":0,"712":0,"713":0,"715":0,"724":1,"725":0,"730":1,"731":0,"732":0,"733":0,"734":0,"736":0,"745":1,"746":0,"747":0,"748":0,"749":0,"751":0,"760":1,"761":0,"762":0,"763":0,"764":0,"766":0,"775":1,"776":0,"777":0,"778":0,"779":0,"781":0,"790":1,"791":0,"792":0,"793":0,"794":0,"795":0,"796":0,"797":0,"800":0,"803":0,"812":1,"813":0,"814":0,"815":0,"816":0,"817":0,"818":0,"819":0,"822":0,"825":0,"832":1,"833":0,"840":1,"841":0,"848":1,"849":0,"852":1}},"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/types/inet-address.js":{"path":"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/types/inet-address.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":1,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":1,"51":0,"52":0,"53":0,"54":1,"55":0,"56":1,"57":0,"58":1,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":1,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":1,"94":0,"95":1,"96":0,"97":0,"98":0,"99":0,"100":1},"b":{"1":[0,0],"2":[0,0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},"fnMap":{"1":{"name":"InetAddress","line":11,"loc":{"start":{"line":11,"column":0},"end":{"line":11,"column":29}}},"2":{"name":"(anonymous_2)","line":22,"loc":{"start":{"line":22,"column":46},"end":{"line":22,"column":58}}},"3":{"name":"(anonymous_3)","line":29,"loc":{"start":{"line":29,"column":47},"end":{"line":29,"column":59}}},"4":{"name":"(anonymous_4)","line":36,"loc":{"start":{"line":36,"column":25},"end":{"line":36,"column":42}}},"5":{"name":"writeItem","line":64,"loc":{"start":{"line":64,"column":2},"end":{"line":64,"column":32}}},"6":{"name":"(anonymous_6)","line":100,"loc":{"start":{"line":100,"column":31},"end":{"line":100,"column":48}}},"7":{"name":"(anonymous_7)","line":112,"loc":{"start":{"line":112,"column":34},"end":{"line":112,"column":46}}},"8":{"name":"(anonymous_8)","line":120,"loc":{"start":{"line":120,"column":32},"end":{"line":120,"column":44}}},"9":{"name":"(anonymous_9)","line":136,"loc":{"start":{"line":136,"column":33},"end":{"line":136,"column":53}}},"10":{"name":"checkLongest","line":151,"loc":{"start":{"line":151,"column":2},"end":{"line":151,"column":28}}},"11":{"name":"(anonymous_11)","line":205,"loc":{"start":{"line":205,"column":31},"end":{"line":205,"column":43}}},"12":{"name":"isValidIPv4Mapped","line":214,"loc":{"start":{"line":214,"column":0},"end":{"line":214,"column":35}}}},"statementMap":{"1":{"start":{"line":11,"column":0},"end":{"line":30,"column":1}},"2":{"start":{"line":12,"column":2},"end":{"line":14,"column":3}},"3":{"start":{"line":13,"column":4},"end":{"line":13,"column":69}},"4":{"start":{"line":15,"column":2},"end":{"line":15,"column":23}},"5":{"start":{"line":22,"column":2},"end":{"line":22,"column":104}},"6":{"start":{"line":22,"column":60},"end":{"line":22,"column":81}},"7":{"start":{"line":29,"column":2},"end":{"line":29,"column":119}},"8":{"start":{"line":29,"column":61},"end":{"line":29,"column":96}},"9":{"start":{"line":36,"column":0},"end":{"line":93,"column":2}},"10":{"start":{"line":37,"column":2},"end":{"line":39,"column":3}},"11":{"start":{"line":38,"column":4},"end":{"line":38,"column":53}},"12":{"start":{"line":40,"column":2},"end":{"line":40,"column":59}},"13":{"start":{"line":41,"column":2},"end":{"line":41,"column":36}},"14":{"start":{"line":42,"column":2},"end":{"line":42,"column":12}},"15":{"start":{"line":43,"column":2},"end":{"line":46,"column":3}},"16":{"start":{"line":44,"column":4},"end":{"line":44,"column":29}},"17":{"start":{"line":45,"column":4},"end":{"line":45,"column":46}},"18":{"start":{"line":47,"column":2},"end":{"line":49,"column":3}},"19":{"start":{"line":48,"column":4},"end":{"line":48,"column":78}},"20":{"start":{"line":50,"column":2},"end":{"line":50,"column":27}},"21":{"start":{"line":51,"column":2},"end":{"line":53,"column":3}},"22":{"start":{"line":52,"column":4},"end":{"line":52,"column":78}},"23":{"start":{"line":54,"column":2},"end":{"line":54,"column":30}},"24":{"start":{"line":55,"column":2},"end":{"line":55,"column":37}},"25":{"start":{"line":56,"column":2},"end":{"line":56,"column":22}},"26":{"start":{"line":57,"column":2},"end":{"line":57,"column":17}},"27":{"start":{"line":58,"column":2},"end":{"line":58,"column":62}},"28":{"start":{"line":59,"column":2},"end":{"line":63,"column":3}},"29":{"start":{"line":62,"column":4},"end":{"line":62,"column":17}},"30":{"start":{"line":64,"column":2},"end":{"line":66,"column":3}},"31":{"start":{"line":65,"column":4},"end":{"line":65,"column":44}},"32":{"start":{"line":67,"column":2},"end":{"line":88,"column":3}},"33":{"start":{"line":68,"column":4},"end":{"line":68,"column":24}},"34":{"start":{"line":69,"column":4},"end":{"line":77,"column":5}},"35":{"start":{"line":70,"column":6},"end":{"line":73,"column":7}},"36":{"start":{"line":71,"column":8},"end":{"line":71,"column":43}},"37":{"start":{"line":72,"column":8},"end":{"line":72,"column":14}},"38":{"start":{"line":74,"column":6},"end":{"line":74,"column":55}},"39":{"start":{"line":75,"column":6},"end":{"line":75,"column":26}},"40":{"start":{"line":76,"column":6},"end":{"line":76,"column":15}},"41":{"start":{"line":79,"column":4},"end":{"line":82,"column":5}},"42":{"start":{"line":81,"column":6},"end":{"line":81,"column":18}},"43":{"start":{"line":83,"column":4},"end":{"line":83,"column":19}},"44":{"start":{"line":84,"column":4},"end":{"line":87,"column":5}},"45":{"start":{"line":85,"column":6},"end":{"line":85,"column":27}},"46":{"start":{"line":86,"column":6},"end":{"line":86,"column":27}},"47":{"start":{"line":89,"column":2},"end":{"line":91,"column":3}},"48":{"start":{"line":90,"column":4},"end":{"line":90,"column":114}},"49":{"start":{"line":92,"column":2},"end":{"line":92,"column":33}},"50":{"start":{"line":100,"column":0},"end":{"line":106,"column":2}},"51":{"start":{"line":101,"column":2},"end":{"line":103,"column":3}},"52":{"start":{"line":102,"column":4},"end":{"line":102,"column":17}},"53":{"start":{"line":104,"column":2},"end":{"line":105,"column":66}},"54":{"start":{"line":112,"column":0},"end":{"line":114,"column":2}},"55":{"start":{"line":113,"column":2},"end":{"line":113,"column":21}},"56":{"start":{"line":120,"column":0},"end":{"line":122,"column":2}},"57":{"start":{"line":121,"column":2},"end":{"line":121,"column":56}},"58":{"start":{"line":136,"column":0},"end":{"line":199,"column":2}},"59":{"start":{"line":137,"column":2},"end":{"line":140,"column":3}},"60":{"start":{"line":139,"column":4},"end":{"line":139,"column":39}},"61":{"start":{"line":141,"column":2},"end":{"line":148,"column":3}},"62":{"start":{"line":142,"column":4},"end":{"line":147,"column":6}},"63":{"start":{"line":149,"column":2},"end":{"line":149,"column":17}},"64":{"start":{"line":150,"column":2},"end":{"line":150,"column":40}},"65":{"start":{"line":151,"column":2},"end":{"line":161,"column":3}},"66":{"start":{"line":152,"column":4},"end":{"line":160,"column":5}},"67":{"start":{"line":154,"column":6},"end":{"line":154,"column":29}},"68":{"start":{"line":155,"column":6},"end":{"line":159,"column":7}},"69":{"start":{"line":156,"column":8},"end":{"line":156,"column":32}},"70":{"start":{"line":157,"column":8},"end":{"line":157,"column":30}},"71":{"start":{"line":158,"column":8},"end":{"line":158,"column":19}},"72":{"start":{"line":163,"column":2},"end":{"line":178,"column":3}},"73":{"start":{"line":164,"column":4},"end":{"line":175,"column":5}},"74":{"start":{"line":166,"column":6},"end":{"line":168,"column":7}},"75":{"start":{"line":167,"column":8},"end":{"line":167,"column":18}},"76":{"start":{"line":171,"column":6},"end":{"line":173,"column":7}},"77":{"start":{"line":172,"column":8},"end":{"line":172,"column":26}},"78":{"start":{"line":174,"column":6},"end":{"line":174,"column":15}},"79":{"start":{"line":177,"column":4},"end":{"line":177,"column":20}},"80":{"start":{"line":180,"column":2},"end":{"line":180,"column":19}},"81":{"start":{"line":181,"column":2},"end":{"line":194,"column":3}},"82":{"start":{"line":182,"column":4},"end":{"line":185,"column":5}},"83":{"start":{"line":183,"column":6},"end":{"line":183,"column":21}},"84":{"start":{"line":184,"column":6},"end":{"line":184,"column":15}},"85":{"start":{"line":186,"column":4},"end":{"line":189,"column":5}},"86":{"start":{"line":188,"column":6},"end":{"line":188,"column":15}},"87":{"start":{"line":190,"column":4},"end":{"line":192,"column":5}},"88":{"start":{"line":191,"column":6},"end":{"line":191,"column":21}},"89":{"start":{"line":193,"column":4},"end":{"line":193,"column":71}},"90":{"start":{"line":195,"column":2},"end":{"line":197,"column":3}},"91":{"start":{"line":196,"column":4},"end":{"line":196,"column":19}},"92":{"start":{"line":198,"column":2},"end":{"line":198,"column":17}},"93":{"start":{"line":205,"column":0},"end":{"line":207,"column":2}},"94":{"start":{"line":206,"column":2},"end":{"line":206,"column":25}},"95":{"start":{"line":214,"column":0},"end":{"line":226,"column":1}},"96":{"start":{"line":220,"column":2},"end":{"line":224,"column":3}},"97":{"start":{"line":221,"column":4},"end":{"line":223,"column":5}},"98":{"start":{"line":222,"column":6},"end":{"line":222,"column":19}},"99":{"start":{"line":225,"column":2},"end":{"line":225,"column":53}},"100":{"start":{"line":228,"column":0},"end":{"line":228,"column":29}}},"branchMap":{"1":{"line":12,"type":"if","locations":[{"start":{"line":12,"column":2},"end":{"line":12,"column":2}},{"start":{"line":12,"column":2},"end":{"line":12,"column":2}}]},"2":{"line":12,"type":"binary-expr","locations":[{"start":{"line":12,"column":6},"end":{"line":12,"column":33}},{"start":{"line":12,"column":38},"end":{"line":12,"column":57}},{"start":{"line":12,"column":61},"end":{"line":12,"column":81}}]},"3":{"line":29,"type":"cond-expr","locations":[{"start":{"line":29,"column":90},"end":{"line":29,"column":91}},{"start":{"line":29,"column":94},"end":{"line":29,"column":95}}]},"4":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":2},"end":{"line":37,"column":2}},{"start":{"line":37,"column":2},"end":{"line":37,"column":2}}]},"5":{"line":43,"type":"if","locations":[{"start":{"line":43,"column":2},"end":{"line":43,"column":2}},{"start":{"line":43,"column":2},"end":{"line":43,"column":2}}]},"6":{"line":47,"type":"if","locations":[{"start":{"line":47,"column":2},"end":{"line":47,"column":2}},{"start":{"line":47,"column":2},"end":{"line":47,"column":2}}]},"7":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":2},"end":{"line":51,"column":2}},{"start":{"line":51,"column":2},"end":{"line":51,"column":2}}]},"8":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":2},"end":{"line":59,"column":2}},{"start":{"line":59,"column":2},"end":{"line":59,"column":2}}]},"9":{"line":69,"type":"if","locations":[{"start":{"line":69,"column":4},"end":{"line":69,"column":4}},{"start":{"line":69,"column":4},"end":{"line":69,"column":4}}]},"10":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":6},"end":{"line":70,"column":6}},{"start":{"line":70,"column":6},"end":{"line":70,"column":6}}]},"11":{"line":70,"type":"binary-expr","locations":[{"start":{"line":70,"column":10},"end":{"line":70,"column":21}},{"start":{"line":70,"column":25},"end":{"line":70,"column":47}}]},"12":{"line":79,"type":"if","locations":[{"start":{"line":79,"column":4},"end":{"line":79,"column":4}},{"start":{"line":79,"column":4},"end":{"line":79,"column":4}}]},"13":{"line":89,"type":"if","locations":[{"start":{"line":89,"column":2},"end":{"line":89,"column":2}},{"start":{"line":89,"column":2},"end":{"line":89,"column":2}}]},"14":{"line":89,"type":"binary-expr","locations":[{"start":{"line":89,"column":6},"end":{"line":89,"column":17}},{"start":{"line":89,"column":21},"end":{"line":89,"column":47}}]},"15":{"line":101,"type":"if","locations":[{"start":{"line":101,"column":2},"end":{"line":101,"column":2}},{"start":{"line":101,"column":2},"end":{"line":101,"column":2}}]},"16":{"line":104,"type":"binary-expr","locations":[{"start":{"line":104,"column":10},"end":{"line":104,"column":52}},{"start":{"line":105,"column":4},"end":{"line":105,"column":64}}]},"17":{"line":137,"type":"if","locations":[{"start":{"line":137,"column":2},"end":{"line":137,"column":2}},{"start":{"line":137,"column":2},"end":{"line":137,"column":2}}]},"18":{"line":141,"type":"if","locations":[{"start":{"line":141,"column":2},"end":{"line":141,"column":2}},{"start":{"line":141,"column":2},"end":{"line":141,"column":2}}]},"19":{"line":152,"type":"if","locations":[{"start":{"line":152,"column":4},"end":{"line":152,"column":4}},{"start":{"line":152,"column":4},"end":{"line":152,"column":4}}]},"20":{"line":155,"type":"if","locations":[{"start":{"line":155,"column":6},"end":{"line":155,"column":6}},{"start":{"line":155,"column":6},"end":{"line":155,"column":6}}]},"21":{"line":164,"type":"if","locations":[{"start":{"line":164,"column":4},"end":{"line":164,"column":4}},{"start":{"line":164,"column":4},"end":{"line":164,"column":4}}]},"22":{"line":164,"type":"binary-expr","locations":[{"start":{"line":164,"column":8},"end":{"line":164,"column":28}},{"start":{"line":164,"column":32},"end":{"line":164,"column":56}}]},"23":{"line":166,"type":"if","locations":[{"start":{"line":166,"column":6},"end":{"line":166,"column":6}},{"start":{"line":166,"column":6},"end":{"line":166,"column":6}}]},"24":{"line":171,"type":"if","locations":[{"start":{"line":171,"column":6},"end":{"line":171,"column":6}},{"start":{"line":171,"column":6},"end":{"line":171,"column":6}}]},"25":{"line":182,"type":"if","locations":[{"start":{"line":182,"column":4},"end":{"line":182,"column":4}},{"start":{"line":182,"column":4},"end":{"line":182,"column":4}}]},"26":{"line":186,"type":"if","locations":[{"start":{"line":186,"column":4},"end":{"line":186,"column":4}},{"start":{"line":186,"column":4},"end":{"line":186,"column":4}}]},"27":{"line":186,"type":"binary-expr","locations":[{"start":{"line":186,"column":8},"end":{"line":186,"column":44}},{"start":{"line":186,"column":48},"end":{"line":186,"column":65}}]},"28":{"line":190,"type":"if","locations":[{"start":{"line":190,"column":4},"end":{"line":190,"column":4}},{"start":{"line":190,"column":4},"end":{"line":190,"column":4}}]},"29":{"line":195,"type":"if","locations":[{"start":{"line":195,"column":2},"end":{"line":195,"column":2}},{"start":{"line":195,"column":2},"end":{"line":195,"column":2}}]},"30":{"line":221,"type":"if","locations":[{"start":{"line":221,"column":4},"end":{"line":221,"column":4}},{"start":{"line":221,"column":4},"end":{"line":221,"column":4}}]},"31":{"line":225,"type":"binary-expr","locations":[{"start":{"line":225,"column":11},"end":{"line":225,"column":29}},{"start":{"line":225,"column":33},"end":{"line":225,"column":51}}]}},"code":["\"use strict\";","","/** @module types */","/**"," * Creates a new instance of InetAddress"," * @class"," * @classdesc Represents an v4 or v6 Internet Protocol (IP) address."," * @param {Buffer} buffer"," * @constructor"," */","function InetAddress(buffer) {","  if (!(buffer instanceof Buffer) || (buffer.length !== 4 && buffer.length !== 16)) {","    throw new TypeError('The ip address must contain 4 or 16 bytes');","  }","  this.buffer = buffer;","  /**","   * Returns the length of the underlying buffer","   * @name length","   * @type Number","   * @memberof module:types~InetAddress#","   */","  Object.defineProperty(this, 'length', {get: function () { return buffer.length; }, enumerable: true});","  /**","   * Returns the Ip version (4 or 6)","   * @name version","   * @type Number","   * @memberof module:types~InetAddress#","   */","  Object.defineProperty(this, 'version', {get: function () { return buffer.length === 4 ? 4 : 6; }, enumerable: true});","}","","/**"," * Parses the string representation and returns an Ip address"," * @param {String} value"," */","InetAddress.fromString = function (value) {","  if (!value) {","    return new InetAddress(new Buffer([0, 0, 0, 0]));","  }","  var ipv4Pattern = /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/;","  var ipv6Pattern = /^[\\da-f:.]+$/i;","  var parts;","  if (ipv4Pattern.test(value)) {","    parts = value.split('.');","    return new InetAddress(new Buffer(parts));","  }","  if (!ipv6Pattern.test(value)) {","    throw new TypeError('Value could not be parsed as InetAddress: ' + value);","  }","  parts = value.split(':');","  if (parts.length < 3) {","    throw new TypeError('Value could not be parsed as InetAddress: ' + value);","  }","  var buffer = new Buffer(16);","  var filling = 8 - parts.length + 1;","  var applied = false;","  var offset = 0;","  var embeddedIp4 = ipv4Pattern.test(parts[parts.length - 1]);","  if (embeddedIp4) {","    // Its IPv6 address with an embedded IPv4 address:","    // subtract 1 from the potential empty filling as ip4 contains 4 bytes instead of 2 of a ipv6 section","    filling -= 1;","  }","  function writeItem(uIntValue) {","    buffer.writeUInt8(+uIntValue, offset++);","  }","  for (var i = 0; i < parts.length; i++) {","    var item = parts[i];","    if (item) {","      if (embeddedIp4 && i === parts.length - 1) {","        item.split('.').forEach(writeItem);","        break;","      }","      buffer.writeUInt16BE(parseInt(item, 16), offset);","      offset = offset + 2;","      continue;","    }","    //its an empty string","    if (applied) {","      //there could be 2 occurrences of empty string","      filling = 1;","    }","    applied = true;","    for (var j = 0; j < filling; j++) {","      buffer[offset++] = 0;","      buffer[offset++] = 0;","    }","  }","  if (embeddedIp4 && !isValidIPv4Mapped(buffer)) {","    throw new TypeError('Only IPv4-Mapped IPv6 addresses are allowed as IPv6 address with embedded IPv4 address');","  }","  return new InetAddress(buffer);","};","","/**"," * Compares 2 addresses and returns true if the underlying bytes are the same"," * @param {InetAddress} other"," * @returns {Boolean}"," */","InetAddress.prototype.equals = function (other) {","  if (!(other instanceof InetAddress)) {","    return false;","  }","  return (this.buffer.length === other.buffer.length &&","    this.buffer.toString('hex') === other.buffer.toString('hex'));","};","","/**"," * Returns the underlying buffer"," * @returns {Buffer}"," */","InetAddress.prototype.getBuffer = function () {","  return this.buffer;","};","","/**"," * Provide the name of the constructor and the string representation"," * @returns {string}"," */","InetAddress.prototype.inspect = function () {","  return this.constructor.name + ': ' + this.toString();","};","","/**"," * Returns the string representation of the IP address."," * <p>For v4 IP addresses, a string in the form of d.d.d.d is returned.</p>"," * <p>"," *   For v6 IP addresses, a string in the form of x:x:x:x:x:x:x:x is returned, where the 'x's are the hexadecimal"," *   values of the eight 16-bit pieces of the address, according to rfc5952."," *   In cases where there is more than one field of only zeros, it can be shortened. For example, 2001:0db8:0:0:0:1:0:1"," *   will be expressed as 2001:0db8::1:0:1."," * </p>"," * @param {String} [encoding]"," * @returns {String}"," */","InetAddress.prototype.toString = function (encoding) {","  if (encoding === 'hex') {","    //backward compatibility: behave in the same way as the buffer","    return this.buffer.toString('hex');","  }","  if (this.buffer.length === 4) {","    return (","      this.buffer[0] + '.' +","      this.buffer[1] + '.' +","      this.buffer[2] + '.' +","      this.buffer[3]","    );","  }","  var start = -1;","  var longest = { length: 0, start: -1};","  function checkLongest (i) {","    if (start >= 0) {","      //close the group","      var length = i - start;","      if (length > longest.length) {","        longest.length = length;","        longest.start = start;","        start = -1;","      }","    }","  }","  //get the longest 16-bit group of zeros","  for (var i = 0; i < this.buffer.length; i = i + 2) {","    if (this.buffer[i] === 0 && this.buffer[i + 1] === 0) {","      //its a group of zeros","      if (start < 0) {","        start = i;","      }","","      // at the end of the buffer, make a final call to checkLongest.","      if(i === this.buffer.length - 2) {","        checkLongest(i+2);","      }","      continue;","    }","    //its a group of non-zeros","    checkLongest(i);","  }","","  var address = '';","  for (var h = 0; h < this.buffer.length; h = h + 2) {","    if (h === longest.start) {","      address += ':';","      continue;","    }","    if (h < (longest.start + longest.length) && h > longest.start) {","      //its a group of zeros","      continue;","    }","    if (address.length > 0) {","      address += ':';","    }","    address += ((this.buffer[h] << 8) | this.buffer[h+1]).toString(16);","  }","  if (address.charAt(address.length-1) === ':') {","    address += ':';","  }","  return address;","};","","/**"," * Returns the string representation."," * Method used by the native JSON.stringify() to serialize this instance."," */","InetAddress.prototype.toJSON = function () {","  return this.toString();","};","","/**"," * Validates for a IPv4-Mapped IPv6 according to https://tools.ietf.org/html/rfc4291#section-2.5.5"," * @private"," * @param {Buffer} buffer"," */","function isValidIPv4Mapped(buffer) {","  // check the form","  // |      80 bits   | 16 |   32 bits","  // +----------------+----+-------------","  // |0000........0000|FFFF| IPv4 address","","  for (var i = 0; i < buffer.length - 6; i++) {","    if (buffer[i] !== 0) {","      return false;","    }","  }","  return !(buffer[10] !== 255 || buffer[11] !== 255);","}","","module.exports = InetAddress;"],"l":{"11":1,"12":0,"13":0,"15":0,"22":0,"29":0,"36":1,"37":0,"38":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"47":0,"48":0,"50":0,"51":0,"52":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"62":0,"64":1,"65":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"74":0,"75":0,"76":0,"79":0,"81":0,"83":0,"84":0,"85":0,"86":0,"89":0,"90":0,"92":0,"100":1,"101":0,"102":0,"104":0,"112":1,"113":0,"120":1,"121":0,"136":1,"137":0,"139":0,"141":0,"142":0,"149":0,"150":0,"151":1,"152":0,"154":0,"155":0,"156":0,"157":0,"158":0,"163":0,"164":0,"166":0,"167":0,"171":0,"172":0,"174":0,"177":0,"180":0,"181":0,"182":0,"183":0,"184":0,"186":0,"188":0,"190":0,"191":0,"193":0,"195":0,"196":0,"198":0,"205":1,"206":0,"214":1,"220":0,"221":0,"222":0,"225":0,"228":1}},"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/types/local-date.js":{"path":"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/types/local-date.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":1,"27":0,"28":1,"29":0,"30":1,"31":0,"32":0,"33":0,"34":1,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":1,"47":0,"48":1,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":1,"58":0,"59":1,"60":0,"61":1,"62":0,"63":0,"64":0,"65":0,"66":0,"67":1,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":1,"80":0,"81":1,"82":0,"83":0,"84":0,"85":1},"b":{"1":[0,0],"2":[0,0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0},"fnMap":{"1":{"name":"LocalDate","line":40,"loc":{"start":{"line":40,"column":0},"end":{"line":40,"column":37}}},"2":{"name":"(anonymous_2)","line":98,"loc":{"start":{"line":98,"column":37},"end":{"line":98,"column":49}}},"3":{"name":"(anonymous_3)","line":101,"loc":{"start":{"line":101,"column":38},"end":{"line":101,"column":50}}},"4":{"name":"(anonymous_4)","line":104,"loc":{"start":{"line":104,"column":36},"end":{"line":104,"column":48}}},"5":{"name":"(anonymous_5)","line":113,"loc":{"start":{"line":113,"column":16},"end":{"line":113,"column":28}}},"6":{"name":"(anonymous_6)","line":121,"loc":{"start":{"line":121,"column":19},"end":{"line":121,"column":31}}},"7":{"name":"(anonymous_7)","line":131,"loc":{"start":{"line":131,"column":21},"end":{"line":131,"column":37}}},"8":{"name":"(anonymous_8)","line":143,"loc":{"start":{"line":143,"column":23},"end":{"line":143,"column":40}}},"9":{"name":"(anonymous_9)","line":165,"loc":{"start":{"line":165,"column":23},"end":{"line":165,"column":41}}},"10":{"name":"(anonymous_10)","line":177,"loc":{"start":{"line":177,"column":30},"end":{"line":177,"column":47}}},"11":{"name":"(anonymous_11)","line":195,"loc":{"start":{"line":195,"column":29},"end":{"line":195,"column":46}}},"12":{"name":"(anonymous_12)","line":199,"loc":{"start":{"line":199,"column":30},"end":{"line":199,"column":42}}},"13":{"name":"(anonymous_13)","line":207,"loc":{"start":{"line":207,"column":31},"end":{"line":207,"column":43}}},"14":{"name":"(anonymous_14)","line":221,"loc":{"start":{"line":221,"column":31},"end":{"line":221,"column":43}}},"15":{"name":"(anonymous_15)","line":244,"loc":{"start":{"line":244,"column":29},"end":{"line":244,"column":41}}},"16":{"name":"fillZeros","line":253,"loc":{"start":{"line":253,"column":0},"end":{"line":253,"column":34}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":27}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":32}},"3":{"start":{"line":11,"column":0},"end":{"line":11,"column":34}},"4":{"start":{"line":15,"column":0},"end":{"line":15,"column":32}},"5":{"start":{"line":40,"column":0},"end":{"line":108,"column":1}},"6":{"start":{"line":42,"column":2},"end":{"line":63,"column":3}},"7":{"start":{"line":46,"column":4},"end":{"line":46,"column":27}},"8":{"start":{"line":47,"column":4},"end":{"line":47,"column":38}},"9":{"start":{"line":48,"column":4},"end":{"line":48,"column":49}},"10":{"start":{"line":49,"column":4},"end":{"line":52,"column":5}},"11":{"start":{"line":50,"column":6},"end":{"line":51,"column":27}},"12":{"start":{"line":54,"column":7},"end":{"line":63,"column":3}},"13":{"start":{"line":55,"column":4},"end":{"line":62,"column":5}},"14":{"start":{"line":57,"column":6},"end":{"line":59,"column":7}},"15":{"start":{"line":58,"column":8},"end":{"line":58,"column":117}},"16":{"start":{"line":61,"column":6},"end":{"line":61,"column":54}},"17":{"start":{"line":65,"column":2},"end":{"line":67,"column":3}},"18":{"start":{"line":66,"column":4},"end":{"line":66,"column":68}},"19":{"start":{"line":71,"column":2},"end":{"line":71,"column":55}},"20":{"start":{"line":72,"column":2},"end":{"line":72,"column":77}},"21":{"start":{"line":74,"column":2},"end":{"line":74,"column":18}},"22":{"start":{"line":97,"column":2},"end":{"line":107,"column":5}},"23":{"start":{"line":99,"column":6},"end":{"line":99,"column":40}},"24":{"start":{"line":102,"column":6},"end":{"line":102,"column":41}},"25":{"start":{"line":105,"column":6},"end":{"line":105,"column":36}},"26":{"start":{"line":113,"column":0},"end":{"line":116,"column":2}},"27":{"start":{"line":115,"column":2},"end":{"line":115,"column":40}},"28":{"start":{"line":121,"column":0},"end":{"line":124,"column":2}},"29":{"start":{"line":123,"column":2},"end":{"line":123,"column":35}},"30":{"start":{"line":131,"column":0},"end":{"line":136,"column":2}},"31":{"start":{"line":132,"column":2},"end":{"line":134,"column":3}},"32":{"start":{"line":133,"column":4},"end":{"line":133,"column":49}},"33":{"start":{"line":135,"column":2},"end":{"line":135,"column":80}},"34":{"start":{"line":143,"column":0},"end":{"line":159,"column":2}},"35":{"start":{"line":144,"column":2},"end":{"line":144,"column":51}},"36":{"start":{"line":145,"column":2},"end":{"line":153,"column":3}},"37":{"start":{"line":146,"column":4},"end":{"line":146,"column":23}},"38":{"start":{"line":147,"column":4},"end":{"line":150,"column":5}},"39":{"start":{"line":148,"column":6},"end":{"line":148,"column":33}},"40":{"start":{"line":149,"column":6},"end":{"line":149,"column":22}},"41":{"start":{"line":151,"column":4},"end":{"line":151,"column":33}},"42":{"start":{"line":152,"column":4},"end":{"line":152,"column":110}},"43":{"start":{"line":154,"column":2},"end":{"line":157,"column":3}},"44":{"start":{"line":156,"column":4},"end":{"line":156,"column":46}},"45":{"start":{"line":158,"column":2},"end":{"line":158,"column":52}},"46":{"start":{"line":165,"column":0},"end":{"line":169,"column":2}},"47":{"start":{"line":168,"column":2},"end":{"line":168,"column":62}},"48":{"start":{"line":177,"column":0},"end":{"line":188,"column":2}},"49":{"start":{"line":178,"column":2},"end":{"line":178,"column":102}},"50":{"start":{"line":179,"column":2},"end":{"line":179,"column":106}},"51":{"start":{"line":180,"column":2},"end":{"line":180,"column":36}},"52":{"start":{"line":181,"column":2},"end":{"line":183,"column":3}},"53":{"start":{"line":182,"column":4},"end":{"line":182,"column":14}},"54":{"start":{"line":184,"column":2},"end":{"line":186,"column":3}},"55":{"start":{"line":185,"column":4},"end":{"line":185,"column":13}},"56":{"start":{"line":187,"column":2},"end":{"line":187,"column":11}},"57":{"start":{"line":195,"column":0},"end":{"line":197,"column":2}},"58":{"start":{"line":196,"column":2},"end":{"line":196,"column":69}},"59":{"start":{"line":199,"column":0},"end":{"line":201,"column":2}},"60":{"start":{"line":200,"column":2},"end":{"line":200,"column":56}},"61":{"start":{"line":207,"column":0},"end":{"line":214,"column":2}},"62":{"start":{"line":209,"column":2},"end":{"line":209,"column":119}},"63":{"start":{"line":210,"column":2},"end":{"line":210,"column":42}},"64":{"start":{"line":211,"column":2},"end":{"line":211,"column":26}},"65":{"start":{"line":212,"column":2},"end":{"line":212,"column":30}},"66":{"start":{"line":213,"column":2},"end":{"line":213,"column":13}},"67":{"start":{"line":221,"column":0},"end":{"line":238,"column":2}},"68":{"start":{"line":222,"column":2},"end":{"line":222,"column":13}},"69":{"start":{"line":224,"column":2},"end":{"line":226,"column":3}},"70":{"start":{"line":225,"column":4},"end":{"line":225,"column":34}},"71":{"start":{"line":227,"column":2},"end":{"line":227,"column":40}},"72":{"start":{"line":228,"column":2},"end":{"line":228,"column":42}},"73":{"start":{"line":229,"column":2},"end":{"line":229,"column":35}},"74":{"start":{"line":230,"column":2},"end":{"line":235,"column":3}},"75":{"start":{"line":231,"column":4},"end":{"line":231,"column":56}},"76":{"start":{"line":234,"column":4},"end":{"line":234,"column":43}},"77":{"start":{"line":236,"column":2},"end":{"line":236,"column":86}},"78":{"start":{"line":237,"column":2},"end":{"line":237,"column":16}},"79":{"start":{"line":244,"column":0},"end":{"line":246,"column":2}},"80":{"start":{"line":245,"column":2},"end":{"line":245,"column":25}},"81":{"start":{"line":253,"column":0},"end":{"line":258,"column":1}},"82":{"start":{"line":254,"column":2},"end":{"line":256,"column":3}},"83":{"start":{"line":255,"column":4},"end":{"line":255,"column":17}},"84":{"start":{"line":257,"column":2},"end":{"line":257,"column":64}},"85":{"start":{"line":260,"column":0},"end":{"line":260,"column":27}}},"branchMap":{"1":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":2},"end":{"line":42,"column":2}},{"start":{"line":42,"column":2},"end":{"line":42,"column":2}}]},"2":{"line":42,"type":"binary-expr","locations":[{"start":{"line":42,"column":6},"end":{"line":42,"column":30}},{"start":{"line":42,"column":34},"end":{"line":42,"column":59}},{"start":{"line":42,"column":63},"end":{"line":42,"column":86}}]},"3":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":4},"end":{"line":49,"column":4}},{"start":{"line":49,"column":4},"end":{"line":49,"column":4}}]},"4":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":7},"end":{"line":54,"column":7}},{"start":{"line":54,"column":7},"end":{"line":54,"column":7}}]},"5":{"line":54,"type":"binary-expr","locations":[{"start":{"line":54,"column":11},"end":{"line":54,"column":39}},{"start":{"line":54,"column":43},"end":{"line":54,"column":69}}]},"6":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":4},"end":{"line":55,"column":4}},{"start":{"line":55,"column":4},"end":{"line":55,"column":4}}]},"7":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":6},"end":{"line":57,"column":6}},{"start":{"line":57,"column":6},"end":{"line":57,"column":6}}]},"8":{"line":57,"type":"binary-expr","locations":[{"start":{"line":57,"column":9},"end":{"line":57,"column":27}},{"start":{"line":57,"column":31},"end":{"line":57,"column":48}}]},"9":{"line":65,"type":"if","locations":[{"start":{"line":65,"column":2},"end":{"line":65,"column":2}},{"start":{"line":65,"column":2},"end":{"line":65,"column":2}}]},"10":{"line":71,"type":"cond-expr","locations":[{"start":{"line":71,"column":43},"end":{"line":71,"column":47}},{"start":{"line":71,"column":50},"end":{"line":71,"column":54}}]},"11":{"line":132,"type":"if","locations":[{"start":{"line":132,"column":2},"end":{"line":132,"column":2}},{"start":{"line":132,"column":2},"end":{"line":132,"column":2}}]},"12":{"line":144,"type":"binary-expr","locations":[{"start":{"line":144,"column":19},"end":{"line":144,"column":36}},{"start":{"line":144,"column":40},"end":{"line":144,"column":42}}]},"13":{"line":145,"type":"if","locations":[{"start":{"line":145,"column":2},"end":{"line":145,"column":2}},{"start":{"line":145,"column":2},"end":{"line":145,"column":2}}]},"14":{"line":147,"type":"if","locations":[{"start":{"line":147,"column":4},"end":{"line":147,"column":4}},{"start":{"line":147,"column":4},"end":{"line":147,"column":4}}]},"15":{"line":154,"type":"if","locations":[{"start":{"line":154,"column":2},"end":{"line":154,"column":2}},{"start":{"line":154,"column":2},"end":{"line":154,"column":2}}]},"16":{"line":178,"type":"cond-expr","locations":[{"start":{"line":178,"column":47},"end":{"line":178,"column":79}},{"start":{"line":178,"column":82},"end":{"line":178,"column":101}}]},"17":{"line":179,"type":"cond-expr","locations":[{"start":{"line":179,"column":49},"end":{"line":179,"column":82}},{"start":{"line":179,"column":85},"end":{"line":179,"column":105}}]},"18":{"line":181,"type":"if","locations":[{"start":{"line":181,"column":2},"end":{"line":181,"column":2}},{"start":{"line":181,"column":2},"end":{"line":181,"column":2}}]},"19":{"line":184,"type":"if","locations":[{"start":{"line":184,"column":2},"end":{"line":184,"column":2}},{"start":{"line":184,"column":2},"end":{"line":184,"column":2}}]},"20":{"line":196,"type":"binary-expr","locations":[{"start":{"line":196,"column":11},"end":{"line":196,"column":37}},{"start":{"line":196,"column":43},"end":{"line":196,"column":68}}]},"21":{"line":209,"type":"cond-expr","locations":[{"start":{"line":209,"column":52},"end":{"line":209,"column":63}},{"start":{"line":209,"column":66},"end":{"line":209,"column":118}}]},"22":{"line":224,"type":"if","locations":[{"start":{"line":224,"column":2},"end":{"line":224,"column":2}},{"start":{"line":224,"column":2},"end":{"line":224,"column":2}}]},"23":{"line":230,"type":"if","locations":[{"start":{"line":230,"column":2},"end":{"line":230,"column":2}},{"start":{"line":230,"column":2},"end":{"line":230,"column":2}}]},"24":{"line":254,"type":"if","locations":[{"start":{"line":254,"column":2},"end":{"line":254,"column":2}},{"start":{"line":254,"column":2},"end":{"line":254,"column":2}}]}},"code":["\"use strict\";","var util = require('util');","","var utils = require('../utils');","/** @module types */","","/**"," * @private"," * @const"," */","var millisecondsPerDay = 86400000;","/**"," * @private"," */","var dateCenter = Math.pow(2,31);","/**"," *"," * Creates a new instance of LocalDate."," * @class"," * @classdesc A date without a time-zone in the ISO-8601 calendar system, such as 2010-08-05."," * <p>"," *   LocalDate is an immutable object that represents a date, often viewed as year-month-day. For example, the value \"1st October 2014\" can be stored in a LocalDate."," * </p>"," * <p>"," *   This class does not store or represent a time or time-zone. Instead, it is a description of the date, as used for birthdays. It cannot represent an instant on the time-line without additional information such as an offset or time-zone."," * </p>"," * <p>"," *   Note that this type can represent dates in the range [-5877641-06-23; 5881580-07-17] while the ES5 date type can only represent values in the range of [-271821-04-20; 275760-09-13]."," *   In the event that year, month, day parameters do not fall within the ES5 date range an Error will be thrown.  If you wish to represent a date outside of this range, pass a single"," *   parameter indicating the days since epoch.  For example, -1 represents 1969-12-31."," * </p>"," * @param {Number} year The year or days since epoch.  If days since epoch, month and day should not be provided."," * @param {Number} month Between 1 and 12 inclusive."," * @param {Number} day Between 1 and the number of days in the given month of the given year."," *"," * @property {Date} date The date representation if falls within a range of an ES5 data type, otherwise an invalid date."," *"," * @constructor"," */","function LocalDate(year, month, day) {","  //implementation detail: internally uses a UTC based date","  if (typeof year === 'number' && typeof month === 'number' && typeof day === 'number') {","    //Use setUTCFullYear as if there is a 2 digit year, Date.UTC() assumes","    //that is the 20th century.  Thanks ECMAScript!","    //noinspection JSValidateTypes","    this.date = new Date();","    this.date.setUTCHours(0, 0, 0, 0);","    this.date.setUTCFullYear(year, month-1, day);","    if(isNaN(this.date.getTime())) {","      throw new Error(util.format('%d-%d-%d does not form a valid ES5 date!',","        year, month, day));","    }","  }","  else if (typeof month === 'undefined' && typeof day === 'undefined') {","    if (typeof year === 'number') {","      //in days since epoch.","      if(year < -2147483648 || year > 2147483647) {","        throw new Error('You must provide a valid value for days since epoch (-2147483648 <= value <= 2147483647).');","      }","      //noinspection JSValidateTypes","      this.date = new Date(year * millisecondsPerDay);","    }","  }","","  if (typeof this.date === 'undefined') {","    throw new Error('You must provide a valid year, month and day');","  }","","  //If date cannot be represented yet given a valid days since epoch, track","  //it internally.","  var value = isNaN(this.date.getTime()) ? year : null;","  Object.defineProperty(this, '_value', { enumerable: false, value: value });","","  var self = this;","","  /**","   * A number representing the year.  May return NaN if cannot be represented as","   * a Date.","   * @name year","   * @type Number","   * @memberof module:types~LocalDate#","   */","  /**","   * A number between 1 and 12 inclusive representing the month.  May return","   * NaN if cannot be represented as a Date.","   * @name month","   * @type Number","   * @memberof module:types~LocalDate#","   */","  /**","   * A number between 1 and the number of days in the given month of the given year (28, 29, 30, 31).","   * May return NaN if cannot be represented as a Date.","   * @name day","   * @type Number","   * @memberof module:types~LocalDate#","   */","  Object.defineProperties(this, {","    'year': { enumerable: true, get: function () {","      return self.date.getUTCFullYear();","    }},","    'month': { enumerable: true, get: function () {","      return self.date.getUTCMonth() + 1;","    }},","    'day': { enumerable: true, get: function () {","      return self.date.getUTCDate();","    }}","  });","}","","/**"," * Creates a new instance of LocalDate using the current year, month and day from the system clock in the default time-zone."," */","LocalDate.now = function () {","  //noinspection JSCheckFunctionSignatures","  return LocalDate.fromDate(new Date());","};","","/**"," * Creates a new instance of LocalDate using the current date from the system clock at UTC."," */","LocalDate.utcNow = function () {","  //noinspection JSCheckFunctionSignatures","  return new LocalDate(Date.now());","};","","","/**"," * Creates a new instance of LocalDate using the year, month and day from the provided local date time."," * @param {Date} date"," */","LocalDate.fromDate = function (date) {","  if (isNaN(date.getTime())) {","    throw new TypeError('Invalid date: ' + date);","  }","  return new LocalDate(date.getFullYear(), date.getMonth() + 1, date.getDate());","};","","/**"," * Creates a new instance of LocalDate using the year, month and day provided in the form: yyyy-mm-dd or"," * days since epoch (i.e. -1 for Dec 31, 1969)."," * @param {String} value"," */","LocalDate.fromString = function (value) {","  var dashCount = (value.match(/-/g) || []).length;","  if(dashCount >= 2) {","    var multiplier = 1;","    if (value[0] === '-') {","      value = value.substring(1);","      multiplier = -1;","    }","    var parts = value.split('-');","    return new LocalDate(multiplier * parseInt(parts[0], 10), parseInt(parts[1], 10), parseInt(parts[2], 10));","  }","  if(value.match(/^-?\\d+$/)) {","    // Parse as days since epoch.","    return new LocalDate(parseInt(value, 10));","  }","  throw new Error(\"Invalid input '\" + value + \"'.\");","};","","/**"," * Creates a new instance of LocalDate using the bytes representation."," * @param {Buffer} buffer"," */","LocalDate.fromBuffer = function (buffer) {","  //move to unix epoch: 0.","  //noinspection JSCheckFunctionSignatures","  return new LocalDate((buffer.readUInt32BE(0) - dateCenter));","};","","/**"," * Compares this LocalDate with the given one."," * @param {LocalDate} other date to compare against."," * @return {number} 0 if they are the same, 1 if the this is greater, and -1"," * if the given one is greater."," */","LocalDate.prototype.compare = function (other) {","  var thisValue = isNaN(this.date.getTime()) ? this._value * millisecondsPerDay : this.date.getTime();","  var otherValue = isNaN(other.date.getTime()) ? other._value * millisecondsPerDay : other.date.getTime();","  var diff = thisValue - otherValue;","  if (diff < 0) {","    return -1;","  }","  if (diff > 0) {","    return 1;","  }","  return 0;","};","","/**"," * Returns true if the value of the LocalDate instance and other are the same"," * @param {LocalDate} other"," * @returns {Boolean}"," */","LocalDate.prototype.equals = function (other) {","  return ((other instanceof LocalDate)) && this.compare(other) === 0;","};","","LocalDate.prototype.inspect = function () {","  return this.constructor.name + ': ' + this.toString();","};","","/**"," * Gets the bytes representation of the instance."," * @returns {Buffer}"," */","LocalDate.prototype.toBuffer = function () {","  //days since unix epoch","  var daysSinceEpoch = isNaN(this.date.getTime()) ? this._value : Math.floor(this.date.getTime() / millisecondsPerDay);","  var value = daysSinceEpoch + dateCenter;","  var buf = new Buffer(4);","  buf.writeUInt32BE(value, 0);","  return buf;","};","","/**"," * Gets the string representation of the instance in the form: yyyy-mm-dd if"," * the value can be parsed as a Date, otherwise days since epoch."," * @returns {String}"," */","LocalDate.prototype.toString = function () {","  var result;","  //if cannot be parsed as date, return days since epoch representation.","  if (isNaN(this.date.getTime())) {","    return this._value.toString();","  }","  var year = this.date.getUTCFullYear();","  var month = this.date.getUTCMonth() + 1;","  var day = this.date.getUTCDate();","  if (year < 0) {","    result = '-' + fillZeros((year * -1).toString(), 4);","  }","  else {","    result = fillZeros(year.toString(), 4);","  }","  result += '-' + fillZeros(month.toString(), 2) + '-' + fillZeros(day.toString(), 2);","  return result;","};","","/**"," * Gets the string representation of the instance in the form: yyyy-mm-dd, valid for JSON."," * @returns {String}"," */","LocalDate.prototype.toJSON = function () {","  return this.toString();","};","","/**"," * @param {String} value"," * @param {Number} amount"," * @private"," */","function fillZeros(value, amount) {","  if (value.length >= amount) {","    return value;","  }","  return utils.stringRepeat('0', amount - value.length) + value;","}","","module.exports = LocalDate;"],"l":{"2":1,"4":1,"11":1,"15":1,"40":1,"42":0,"46":0,"47":0,"48":0,"49":0,"50":0,"54":0,"55":0,"57":0,"58":0,"61":0,"65":0,"66":0,"71":0,"72":0,"74":0,"97":0,"99":0,"102":0,"105":0,"113":1,"115":0,"121":1,"123":0,"131":1,"132":0,"133":0,"135":0,"143":1,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"151":0,"152":0,"154":0,"156":0,"158":0,"165":1,"168":0,"177":1,"178":0,"179":0,"180":0,"181":0,"182":0,"184":0,"185":0,"187":0,"195":1,"196":0,"199":1,"200":0,"207":1,"209":0,"210":0,"211":0,"212":0,"213":0,"221":1,"222":0,"224":0,"225":0,"227":0,"228":0,"229":0,"230":0,"231":0,"234":0,"236":0,"237":0,"244":1,"245":0,"253":1,"254":0,"255":0,"257":0,"260":1}},"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/types/local-time.js":{"path":"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/types/local-time.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":1,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":1,"34":0,"35":1,"36":0,"37":0,"38":0,"39":0,"40":0,"41":1,"42":0,"43":0,"44":0,"45":1,"46":0,"47":0,"48":0,"49":1,"50":0,"51":1,"52":0,"53":1,"54":0,"55":1,"56":0,"57":1,"58":0,"59":0,"60":0,"61":0,"62":1,"63":0,"64":1,"65":0,"66":1,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":1,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0},"fnMap":{"1":{"name":"LocalTime","line":41,"loc":{"start":{"line":41,"column":0},"end":{"line":41,"column":37}}},"2":{"name":"(anonymous_2)","line":75,"loc":{"start":{"line":75,"column":37},"end":{"line":75,"column":49}}},"3":{"name":"(anonymous_3)","line":78,"loc":{"start":{"line":78,"column":39},"end":{"line":78,"column":51}}},"4":{"name":"(anonymous_4)","line":81,"loc":{"start":{"line":81,"column":39},"end":{"line":81,"column":51}}},"5":{"name":"(anonymous_5)","line":84,"loc":{"start":{"line":84,"column":43},"end":{"line":84,"column":55}}},"6":{"name":"(anonymous_6)","line":95,"loc":{"start":{"line":95,"column":23},"end":{"line":95,"column":40}}},"7":{"name":"(anonymous_7)","line":119,"loc":{"start":{"line":119,"column":16},"end":{"line":119,"column":39}}},"8":{"name":"(anonymous_8)","line":129,"loc":{"start":{"line":129,"column":21},"end":{"line":129,"column":50}}},"9":{"name":"(anonymous_9)","line":146,"loc":{"start":{"line":146,"column":29},"end":{"line":146,"column":66}}},"10":{"name":"(anonymous_10)","line":161,"loc":{"start":{"line":161,"column":23},"end":{"line":161,"column":40}}},"11":{"name":"(anonymous_11)","line":174,"loc":{"start":{"line":174,"column":30},"end":{"line":174,"column":47}}},"12":{"name":"(anonymous_12)","line":183,"loc":{"start":{"line":183,"column":29},"end":{"line":183,"column":46}}},"13":{"name":"(anonymous_13)","line":191,"loc":{"start":{"line":191,"column":42},"end":{"line":191,"column":54}}},"14":{"name":"(anonymous_14)","line":195,"loc":{"start":{"line":195,"column":30},"end":{"line":195,"column":42}}},"15":{"name":"(anonymous_15)","line":203,"loc":{"start":{"line":203,"column":31},"end":{"line":203,"column":43}}},"16":{"name":"(anonymous_16)","line":214,"loc":{"start":{"line":214,"column":31},"end":{"line":214,"column":43}}},"17":{"name":"(anonymous_17)","line":222,"loc":{"start":{"line":222,"column":29},"end":{"line":222,"column":41}}},"18":{"name":"(anonymous_18)","line":230,"loc":{"start":{"line":230,"column":32},"end":{"line":230,"column":44}}},"19":{"name":"formatTime","line":259,"loc":{"start":{"line":259,"column":0},"end":{"line":259,"column":28}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":27}},"2":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"3":{"start":{"line":4,"column":0},"end":{"line":4,"column":32}},"4":{"start":{"line":11,"column":0},"end":{"line":11,"column":49}},"5":{"start":{"line":17,"column":0},"end":{"line":17,"column":47}},"6":{"start":{"line":23,"column":0},"end":{"line":23,"column":47}},"7":{"start":{"line":29,"column":0},"end":{"line":29,"column":27}},"8":{"start":{"line":41,"column":0},"end":{"line":88,"column":1}},"9":{"start":{"line":42,"column":2},"end":{"line":44,"column":3}},"10":{"start":{"line":43,"column":4},"end":{"line":43,"column":73}},"11":{"start":{"line":45,"column":2},"end":{"line":47,"column":3}},"12":{"start":{"line":46,"column":4},"end":{"line":46,"column":54}},"13":{"start":{"line":48,"column":2},"end":{"line":48,"column":32}},"14":{"start":{"line":49,"column":2},"end":{"line":49,"column":18}},"15":{"start":{"line":74,"column":2},"end":{"line":87,"column":5}},"16":{"start":{"line":76,"column":6},"end":{"line":76,"column":33}},"17":{"start":{"line":79,"column":6},"end":{"line":79,"column":33}},"18":{"start":{"line":82,"column":6},"end":{"line":82,"column":33}},"19":{"start":{"line":85,"column":6},"end":{"line":85,"column":33}},"20":{"start":{"line":95,"column":0},"end":{"line":112,"column":2}},"21":{"start":{"line":96,"column":2},"end":{"line":98,"column":3}},"22":{"start":{"line":97,"column":4},"end":{"line":97,"column":69}},"23":{"start":{"line":99,"column":2},"end":{"line":99,"column":31}},"24":{"start":{"line":100,"column":2},"end":{"line":100,"column":81}},"25":{"start":{"line":101,"column":2},"end":{"line":101,"column":12}},"26":{"start":{"line":102,"column":2},"end":{"line":110,"column":3}},"27":{"start":{"line":103,"column":4},"end":{"line":103,"column":39}},"28":{"start":{"line":104,"column":4},"end":{"line":104,"column":47}},"29":{"start":{"line":105,"column":4},"end":{"line":109,"column":5}},"30":{"start":{"line":106,"column":6},"end":{"line":106,"column":26}},"31":{"start":{"line":108,"column":6},"end":{"line":108,"column":64}},"32":{"start":{"line":111,"column":2},"end":{"line":111,"column":70}},"33":{"start":{"line":119,"column":0},"end":{"line":121,"column":2}},"34":{"start":{"line":120,"column":2},"end":{"line":120,"column":53}},"35":{"start":{"line":129,"column":0},"end":{"line":138,"column":2}},"36":{"start":{"line":130,"column":2},"end":{"line":132,"column":3}},"37":{"start":{"line":131,"column":4},"end":{"line":131,"column":40}},"38":{"start":{"line":134,"column":2},"end":{"line":134,"column":66}},"39":{"start":{"line":136,"column":2},"end":{"line":136,"column":32}},"40":{"start":{"line":137,"column":2},"end":{"line":137,"column":57}},"41":{"start":{"line":146,"column":0},"end":{"line":154,"column":2}},"42":{"start":{"line":147,"column":2},"end":{"line":149,"column":3}},"43":{"start":{"line":148,"column":4},"end":{"line":148,"column":20}},"44":{"start":{"line":150,"column":2},"end":{"line":153,"column":40}},"45":{"start":{"line":161,"column":0},"end":{"line":166,"column":2}},"46":{"start":{"line":162,"column":2},"end":{"line":164,"column":3}},"47":{"start":{"line":163,"column":4},"end":{"line":163,"column":76}},"48":{"start":{"line":165,"column":2},"end":{"line":165,"column":77}},"49":{"start":{"line":174,"column":0},"end":{"line":176,"column":2}},"50":{"start":{"line":175,"column":2},"end":{"line":175,"column":41}},"51":{"start":{"line":183,"column":0},"end":{"line":185,"column":2}},"52":{"start":{"line":184,"column":2},"end":{"line":184,"column":69}},"53":{"start":{"line":191,"column":0},"end":{"line":193,"column":2}},"54":{"start":{"line":192,"column":2},"end":{"line":192,"column":20}},"55":{"start":{"line":195,"column":0},"end":{"line":197,"column":2}},"56":{"start":{"line":196,"column":2},"end":{"line":196,"column":56}},"57":{"start":{"line":203,"column":0},"end":{"line":208,"column":2}},"58":{"start":{"line":204,"column":2},"end":{"line":204,"column":29}},"59":{"start":{"line":205,"column":2},"end":{"line":205,"column":60}},"60":{"start":{"line":206,"column":2},"end":{"line":206,"column":59}},"61":{"start":{"line":207,"column":2},"end":{"line":207,"column":16}},"62":{"start":{"line":214,"column":0},"end":{"line":216,"column":2}},"63":{"start":{"line":215,"column":2},"end":{"line":215,"column":38}},"64":{"start":{"line":222,"column":0},"end":{"line":224,"column":2}},"65":{"start":{"line":223,"column":2},"end":{"line":223,"column":25}},"66":{"start":{"line":230,"column":0},"end":{"line":253,"column":2}},"67":{"start":{"line":231,"column":2},"end":{"line":251,"column":3}},"68":{"start":{"line":233,"column":4},"end":{"line":233,"column":29}},"69":{"start":{"line":234,"column":4},"end":{"line":234,"column":44}},"70":{"start":{"line":237,"column":4},"end":{"line":237,"column":75}},"71":{"start":{"line":239,"column":4},"end":{"line":239,"column":31}},"72":{"start":{"line":240,"column":4},"end":{"line":244,"column":5}},"73":{"start":{"line":242,"column":6},"end":{"line":242,"column":43}},"74":{"start":{"line":243,"column":6},"end":{"line":243,"column":31}},"75":{"start":{"line":245,"column":4},"end":{"line":249,"column":5}},"76":{"start":{"line":247,"column":6},"end":{"line":247,"column":43}},"77":{"start":{"line":248,"column":6},"end":{"line":248,"column":31}},"78":{"start":{"line":250,"column":4},"end":{"line":250,"column":29}},"79":{"start":{"line":252,"column":2},"end":{"line":252,"column":26}},"80":{"start":{"line":259,"column":0},"end":{"line":298,"column":1}},"81":{"start":{"line":260,"column":2},"end":{"line":260,"column":13}},"82":{"start":{"line":261,"column":2},"end":{"line":266,"column":3}},"83":{"start":{"line":262,"column":4},"end":{"line":262,"column":35}},"84":{"start":{"line":265,"column":4},"end":{"line":265,"column":29}},"85":{"start":{"line":267,"column":2},"end":{"line":272,"column":3}},"86":{"start":{"line":268,"column":4},"end":{"line":268,"column":36}},"87":{"start":{"line":271,"column":4},"end":{"line":271,"column":30}},"88":{"start":{"line":273,"column":2},"end":{"line":278,"column":3}},"89":{"start":{"line":274,"column":4},"end":{"line":274,"column":30}},"90":{"start":{"line":277,"column":4},"end":{"line":277,"column":24}},"91":{"start":{"line":279,"column":2},"end":{"line":296,"column":3}},"92":{"start":{"line":280,"column":4},"end":{"line":280,"column":37}},"93":{"start":{"line":282,"column":4},"end":{"line":284,"column":5}},"94":{"start":{"line":283,"column":6},"end":{"line":283,"column":64}},"95":{"start":{"line":285,"column":4},"end":{"line":285,"column":21}},"96":{"start":{"line":286,"column":4},"end":{"line":291,"column":5}},"97":{"start":{"line":287,"column":6},"end":{"line":289,"column":7}},"98":{"start":{"line":288,"column":8},"end":{"line":288,"column":14}},"99":{"start":{"line":290,"column":6},"end":{"line":290,"column":23}},"100":{"start":{"line":292,"column":4},"end":{"line":294,"column":5}},"101":{"start":{"line":293,"column":6},"end":{"line":293,"column":47}},"102":{"start":{"line":295,"column":4},"end":{"line":295,"column":26}},"103":{"start":{"line":297,"column":2},"end":{"line":297,"column":16}},"104":{"start":{"line":300,"column":0},"end":{"line":300,"column":27}}},"branchMap":{"1":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":2},"end":{"line":42,"column":2}},{"start":{"line":42,"column":2},"end":{"line":42,"column":2}}]},"2":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":2},"end":{"line":45,"column":2}},{"start":{"line":45,"column":2},"end":{"line":45,"column":2}}]},"3":{"line":45,"type":"binary-expr","locations":[{"start":{"line":45,"column":6},"end":{"line":45,"column":42}},{"start":{"line":45,"column":46},"end":{"line":45,"column":84}}]},"4":{"line":96,"type":"if","locations":[{"start":{"line":96,"column":2},"end":{"line":96,"column":2}},{"start":{"line":96,"column":2},"end":{"line":96,"column":2}}]},"5":{"line":102,"type":"if","locations":[{"start":{"line":102,"column":2},"end":{"line":102,"column":2}},{"start":{"line":102,"column":2},"end":{"line":102,"column":2}}]},"6":{"line":105,"type":"if","locations":[{"start":{"line":105,"column":4},"end":{"line":105,"column":4}},{"start":{"line":105,"column":4},"end":{"line":105,"column":4}}]},"7":{"line":111,"type":"binary-expr","locations":[{"start":{"line":111,"column":44},"end":{"line":111,"column":63}},{"start":{"line":111,"column":67},"end":{"line":111,"column":68}}]},"8":{"line":130,"type":"if","locations":[{"start":{"line":130,"column":2},"end":{"line":130,"column":2}},{"start":{"line":130,"column":2},"end":{"line":130,"column":2}}]},"9":{"line":147,"type":"if","locations":[{"start":{"line":147,"column":2},"end":{"line":147,"column":2}},{"start":{"line":147,"column":2},"end":{"line":147,"column":2}}]},"10":{"line":162,"type":"if","locations":[{"start":{"line":162,"column":2},"end":{"line":162,"column":2}},{"start":{"line":162,"column":2},"end":{"line":162,"column":2}}]},"11":{"line":184,"type":"binary-expr","locations":[{"start":{"line":184,"column":11},"end":{"line":184,"column":37}},{"start":{"line":184,"column":43},"end":{"line":184,"column":68}}]},"12":{"line":231,"type":"if","locations":[{"start":{"line":231,"column":2},"end":{"line":231,"column":2}},{"start":{"line":231,"column":2},"end":{"line":231,"column":2}}]},"13":{"line":240,"type":"if","locations":[{"start":{"line":240,"column":4},"end":{"line":240,"column":4}},{"start":{"line":240,"column":4},"end":{"line":240,"column":4}}]},"14":{"line":245,"type":"if","locations":[{"start":{"line":245,"column":4},"end":{"line":245,"column":4}},{"start":{"line":245,"column":4},"end":{"line":245,"column":4}}]},"15":{"line":261,"type":"if","locations":[{"start":{"line":261,"column":2},"end":{"line":261,"column":2}},{"start":{"line":261,"column":2},"end":{"line":261,"column":2}}]},"16":{"line":267,"type":"if","locations":[{"start":{"line":267,"column":2},"end":{"line":267,"column":2}},{"start":{"line":267,"column":2},"end":{"line":267,"column":2}}]},"17":{"line":273,"type":"if","locations":[{"start":{"line":273,"column":2},"end":{"line":273,"column":2}},{"start":{"line":273,"column":2},"end":{"line":273,"column":2}}]},"18":{"line":279,"type":"if","locations":[{"start":{"line":279,"column":2},"end":{"line":279,"column":2}},{"start":{"line":279,"column":2},"end":{"line":279,"column":2}}]},"19":{"line":282,"type":"if","locations":[{"start":{"line":282,"column":4},"end":{"line":282,"column":4}},{"start":{"line":282,"column":4},"end":{"line":282,"column":4}}]},"20":{"line":287,"type":"if","locations":[{"start":{"line":287,"column":6},"end":{"line":287,"column":6}},{"start":{"line":287,"column":6},"end":{"line":287,"column":6}}]},"21":{"line":292,"type":"if","locations":[{"start":{"line":292,"column":4},"end":{"line":292,"column":4}},{"start":{"line":292,"column":4},"end":{"line":292,"column":4}}]}},"code":["\"use strict\";","var Long = require('long');","var util = require('util');","var utils = require('../utils');","/** @module types */","","/**"," * @const"," * @private"," * */","var maxNanos = Long.fromString('86399999999999');","/**"," * Nanoseconds in a second"," * @const"," * @private"," * */","var nanoSecInSec = Long.fromNumber(1000000000);","/**"," * Nanoseconds in a millisecond"," * @const"," * @private"," * */","var nanoSecInMillis = Long.fromNumber(1000000);","/**"," * Milliseconds in day"," * @const"," * @private"," * */","var millisInDay = 86400000;","/**"," *"," * Creates a new instance of LocalTime."," * @class"," * @classdesc A time without a time-zone in the ISO-8601 calendar system, such as 10:30:05."," * <p>"," *   LocalTime is an immutable date-time object that represents a time, often viewed as hour-minute-second. Time is represented to nanosecond precision. For example, the value \"13:45.30.123456789\" can be stored in a LocalTime."," * </p>"," * @param {Long} totalNanoseconds Total nanoseconds since midnight."," * @constructor"," */","function LocalTime(totalNanoseconds) {","  if (!(totalNanoseconds instanceof Long)) {","    throw new Error('You must specify a Long value as totalNanoseconds');","  }","  if (totalNanoseconds.lessThan(Long.ZERO) || totalNanoseconds.greaterThan(maxNanos)) {","    throw new Error('Total nanoseconds out of range');","  }","  this.value = totalNanoseconds;","  var self = this;","  /**","   * Gets the hour component of the time represented by the current instance, a number from 0 to 23.","   * @name hour","   * @type Number","   * @memberof module:types~LocalTime#","   */","  /**","   * Gets the minute component of the time represented by the current instance, a number from 0 to 59.","   * @name minute","   * @type Number","   * @memberof module:types~LocalTime#","   */","  /**","   * Gets the second component of the time represented by the current instance, a number from 0 to 59.","   * @name day","   * @type Number","   * @memberof module:types~LocalTime#","   */","  /**","   * Gets the nanoseconds component of the time represented by the current instance, a number from 0 to 999999999.","   * @name nanosecond","   * @type Number","   * @memberof module:types~LocalTime#","   */","  Object.defineProperties(this, {","    'hour': { enumerable: true, get: function () {","      return self._getParts()[0];","    }},","    'minute': { enumerable: true, get: function () {","      return self._getParts()[1];","    }},","    'second': { enumerable: true, get: function () {","      return self._getParts()[2];","    }},","    'nanosecond': { enumerable: true, get: function () {","      return self._getParts()[3];","    }}","  });","}","","/**"," * Parses an string representation and returns a new LocalDate."," * @param {String} value"," * @returns {LocalTime}"," */","LocalTime.fromString = function (value) {","  if (typeof value !== 'string') {","    throw new Error('Argument type invalid: ' + util.inspect(value));","  }","  var parts = value.split(':');","  var millis = parseInt(parts[0], 10) * 3600000 + parseInt(parts[1], 10) * 60000;","  var nanos;","  if (parts.length === 3) {","    var secParts = parts[2].split('.');","    millis += parseInt(secParts[0], 10) * 1000;","    if (secParts.length === 2) {","      nanos = secParts[1];","      //add zeros at the end","      nanos = nanos + utils.stringRepeat('0', 9 - nanos.length);","    }","  }","  return LocalTime.fromMilliseconds(millis, parseInt(nanos, 10) || 0);","};","","/**"," * Uses the current local time (in milliseconds) and the nanoseconds to create a new instance of LocalTime"," * @param {Number} [nanoseconds] A Number from 0 to 999,999, representing the time nanosecond portion."," * @returns {LocalTime}"," */","LocalTime.now = function (nanoseconds) {","  return LocalTime.fromDate(new Date(), nanoseconds);","};","","/**"," * Uses the provided local time (in milliseconds) and the nanoseconds to create a new instance of LocalTime"," * @param {Date} date Local date portion to extract the time passed since midnight."," * @param {Number} [nanoseconds] A Number from 0 to 999,999, representing the nanosecond time portion."," * @returns {LocalTime}"," */","LocalTime.fromDate = function (date, nanoseconds) {","  if (!util.isDate(date)) {","    throw new Error('Not a valid date');","  }","  //Use the local representation","  var millis = date.getTime() + date.getTimezoneOffset() * -60000;","  //Only the milliseconds part","  millis = millis % millisInDay;","  return LocalTime.fromMilliseconds(millis, nanoseconds);","};","","/**"," * Uses the provided local time (in milliseconds) and the nanoseconds to create a new instance of LocalTime"," * @param {Number} milliseconds A Number from 0 to 86,399,999."," * @param {Number} [nanoseconds] A Number from 0 to 999,999, representing the time nanosecond portion."," * @returns {LocalTime}"," */","LocalTime.fromMilliseconds = function (milliseconds, nanoseconds) {","  if (typeof nanoseconds !== 'number') {","    nanoseconds = 0;","  }","  return new LocalTime(Long","    .fromNumber(milliseconds)","    .multiply(nanoSecInMillis)","    .add(Long.fromNumber(nanoseconds)));","};","","/**"," * Creates a new instance of LocalTime from the bytes representation."," * @param {Buffer} value"," * @returns {LocalTime}"," */","LocalTime.fromBuffer = function (value) {","  if (!(value instanceof Buffer)) {","    throw new TypeError('Expected Buffer, obtained ' + util.inspect(value));","  }","  return new LocalTime(new Long(value.readInt32BE(4), value.readInt32BE(0)));","};","","/**"," * Compares this LocalTime with the given one."," * @param {LocalTime} other time to compare against."," * @return {number} 0 if they are the same, 1 if the this is greater, and -1"," * if the given one is greater."," */","LocalTime.prototype.compare = function (other) {","  return this.value.compare(other.value);","};","","/**"," * Returns true if the value of the LocalTime instance and other are the same"," * @param {LocalTime} other"," * @returns {Boolean}"," */","LocalTime.prototype.equals = function (other) {","  return ((other instanceof LocalTime)) && this.compare(other) === 0;","};","","/**"," * Gets the total amount of nanoseconds since midnight for this instance."," * @returns {Long}"," */","LocalTime.prototype.getTotalNanoseconds = function () {","  return this.value;","};","","LocalTime.prototype.inspect = function () {","  return this.constructor.name + ': ' + this.toString();","};","","/**"," * Returns a big-endian bytes representation of the instance"," * @returns {Buffer}"," */","LocalTime.prototype.toBuffer = function () {","  var buffer = new Buffer(8);","  buffer.writeUInt32BE(this.value.getHighBitsUnsigned(), 0);","  buffer.writeUInt32BE(this.value.getLowBitsUnsigned(), 4);","  return buffer;","};","","/**"," * Returns the string representation of the instance in the form of hh:MM:ss.ns"," * @returns {String}"," */","LocalTime.prototype.toString = function () {","  return formatTime(this._getParts());","};","","/**"," * Gets the string representation of the instance in the form: hh:MM:ss.ns"," * @returns {String}"," */","LocalTime.prototype.toJSON = function () {","  return this.toString();","};","","/**"," * @returns {Array.<Number>}"," * @ignore"," */","LocalTime.prototype._getParts = function () {","  if (!this._partsCache) {","    //hours, minutes, seconds and nanos","    var parts = [0, 0, 0, 0];","    var secs = this.value.div(nanoSecInSec);","    //faster modulo","    //total nanos","    parts[3] = this.value.subtract(secs.multiply(nanoSecInSec)).toNumber();","    //seconds","    parts[2] = secs.toNumber();","    if (parts[2] >= 60) {","      //minutes","      parts[1] = Math.floor(parts[2] / 60);","      parts[2] = parts[2] % 60;","    }","    if (parts[1] >= 60) {","      //hours","      parts[0] = Math.floor(parts[1] / 60);","      parts[1] = parts[1] % 60;","    }","    this._partsCache = parts;","  }","  return this._partsCache;","};","","/**"," * @param {Array.<Number>} values"," * @private"," */","function formatTime(values) {","  var result;","  if (values[0] < 10) {","    result = '0' + values[0] + ':';","  }","  else {","    result = values[0] + ':';","  }","  if (values[1] < 10) {","    result += '0' + values[1] + ':';","  }","  else {","    result += values[1] + ':';","  }","  if (values[2] < 10) {","    result += '0' + values[2];","  }","  else {","    result += values[2];","  }","  if (values[3] > 0) {","    var nanos = values[3].toString();","    //nine digits","    if (nanos.length < 9) {","      nanos = utils.stringRepeat('0', 9 - nanos.length) + nanos;","    }","    var lastPosition;","    for (var i = nanos.length - 1; i > 0; i--) {","      if (nanos[i] !== '0') {","        break;","      }","      lastPosition = i;","    }","    if (lastPosition) {","      nanos = nanos.substring(0, lastPosition);","    }","    result += '.' + nanos;","  }","  return result;","}","","module.exports = LocalTime;"],"l":{"2":1,"3":1,"4":1,"11":1,"17":1,"23":1,"29":1,"41":1,"42":0,"43":0,"45":0,"46":0,"48":0,"49":0,"74":0,"76":0,"79":0,"82":0,"85":0,"95":1,"96":0,"97":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"108":0,"111":0,"119":1,"120":0,"129":1,"130":0,"131":0,"134":0,"136":0,"137":0,"146":1,"147":0,"148":0,"150":0,"161":1,"162":0,"163":0,"165":0,"174":1,"175":0,"183":1,"184":0,"191":1,"192":0,"195":1,"196":0,"203":1,"204":0,"205":0,"206":0,"207":0,"214":1,"215":0,"222":1,"223":0,"230":1,"231":0,"233":0,"234":0,"237":0,"239":0,"240":0,"242":0,"243":0,"245":0,"247":0,"248":0,"250":0,"252":0,"259":1,"260":0,"261":0,"262":0,"265":0,"267":0,"268":0,"271":0,"273":0,"274":0,"277":0,"279":0,"280":0,"282":0,"283":0,"285":0,"286":0,"287":0,"288":0,"290":0,"292":0,"293":0,"295":0,"297":0,"300":1}},"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/types/result-set.js":{"path":"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/types/result-set.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":1,"24":0,"25":0,"26":0,"27":1,"28":0,"29":1,"30":0,"31":1,"32":1,"33":0,"34":0,"35":0,"36":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[1,0],"10":[1,1],"11":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"ResultSet","line":16,"loc":{"start":{"line":16,"column":0},"end":{"line":16,"column":60}}},"2":{"name":"(anonymous_2)","line":93,"loc":{"start":{"line":93,"column":28},"end":{"line":93,"column":40}}},"3":{"name":"(anonymous_3)","line":100,"loc":{"start":{"line":100,"column":35},"end":{"line":100,"column":47}}},"4":{"name":"(anonymous_4)","line":105,"loc":{"start":{"line":105,"column":33},"end":{"line":105,"column":45}}},"5":{"name":"getIterator","line":127,"loc":{"start":{"line":127,"column":41},"end":{"line":127,"column":64}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":32}},"2":{"start":{"line":16,"column":0},"end":{"line":88,"column":1}},"3":{"start":{"line":27,"column":2},"end":{"line":34,"column":4}},"4":{"start":{"line":35,"column":2},"end":{"line":39,"column":3}},"5":{"start":{"line":36,"column":4},"end":{"line":36,"column":47}},"6":{"start":{"line":37,"column":4},"end":{"line":37,"column":49}},"7":{"start":{"line":38,"column":4},"end":{"line":38,"column":59}},"8":{"start":{"line":44,"column":2},"end":{"line":44,"column":28}},"9":{"start":{"line":49,"column":2},"end":{"line":49,"column":69}},"10":{"start":{"line":55,"column":2},"end":{"line":55,"column":22}},"11":{"start":{"line":62,"column":2},"end":{"line":62,"column":24}},"12":{"start":{"line":69,"column":2},"end":{"line":69,"column":28}},"13":{"start":{"line":71,"column":2},"end":{"line":71,"column":27}},"14":{"start":{"line":72,"column":2},"end":{"line":77,"column":3}},"15":{"start":{"line":73,"column":4},"end":{"line":73,"column":32}},"16":{"start":{"line":74,"column":4},"end":{"line":76,"column":5}},"17":{"start":{"line":75,"column":6},"end":{"line":75,"column":54}},"18":{"start":{"line":78,"column":2},"end":{"line":87,"column":3}},"19":{"start":{"line":80,"column":4},"end":{"line":80,"column":80}},"20":{"start":{"line":81,"column":4},"end":{"line":81,"column":84}},"21":{"start":{"line":83,"column":7},"end":{"line":87,"column":3}},"22":{"start":{"line":86,"column":4},"end":{"line":86,"column":84}},"23":{"start":{"line":93,"column":0},"end":{"line":98,"column":2}},"24":{"start":{"line":94,"column":2},"end":{"line":96,"column":3}},"25":{"start":{"line":95,"column":4},"end":{"line":95,"column":24}},"26":{"start":{"line":97,"column":2},"end":{"line":97,"column":14}},"27":{"start":{"line":100,"column":0},"end":{"line":103,"column":2}},"28":{"start":{"line":102,"column":2},"end":{"line":102,"column":24}},"29":{"start":{"line":105,"column":0},"end":{"line":108,"column":2}},"30":{"start":{"line":107,"column":2},"end":{"line":107,"column":22}},"31":{"start":{"line":110,"column":0},"end":{"line":133,"column":1}},"32":{"start":{"line":127,"column":2},"end":{"line":132,"column":4}},"33":{"start":{"line":128,"column":4},"end":{"line":130,"column":5}},"34":{"start":{"line":129,"column":6},"end":{"line":129,"column":49}},"35":{"start":{"line":131,"column":4},"end":{"line":131,"column":40}},"36":{"start":{"line":135,"column":0},"end":{"line":135,"column":27}}},"branchMap":{"1":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":2},"end":{"line":35,"column":2}},{"start":{"line":35,"column":2},"end":{"line":35,"column":2}}]},"2":{"line":49,"type":"cond-expr","locations":[{"start":{"line":49,"column":31},"end":{"line":49,"column":47}},{"start":{"line":49,"column":50},"end":{"line":49,"column":68}}]},"3":{"line":72,"type":"if","locations":[{"start":{"line":72,"column":2},"end":{"line":72,"column":2}},{"start":{"line":72,"column":2},"end":{"line":72,"column":2}}]},"4":{"line":74,"type":"if","locations":[{"start":{"line":74,"column":4},"end":{"line":74,"column":4}},{"start":{"line":74,"column":4},"end":{"line":74,"column":4}}]},"5":{"line":78,"type":"if","locations":[{"start":{"line":78,"column":2},"end":{"line":78,"column":2}},{"start":{"line":78,"column":2},"end":{"line":78,"column":2}}]},"6":{"line":83,"type":"if","locations":[{"start":{"line":83,"column":7},"end":{"line":83,"column":7}},{"start":{"line":83,"column":7},"end":{"line":83,"column":7}}]},"7":{"line":94,"type":"if","locations":[{"start":{"line":94,"column":2},"end":{"line":94,"column":2}},{"start":{"line":94,"column":2},"end":{"line":94,"column":2}}]},"8":{"line":94,"type":"binary-expr","locations":[{"start":{"line":94,"column":6},"end":{"line":94,"column":15}},{"start":{"line":94,"column":19},"end":{"line":94,"column":35}}]},"9":{"line":110,"type":"if","locations":[{"start":{"line":110,"column":0},"end":{"line":110,"column":0}},{"start":{"line":110,"column":0},"end":{"line":110,"column":0}}]},"10":{"line":110,"type":"binary-expr","locations":[{"start":{"line":110,"column":4},"end":{"line":110,"column":33}},{"start":{"line":110,"column":37},"end":{"line":110,"column":72}}]},"11":{"line":128,"type":"if","locations":[{"start":{"line":128,"column":4},"end":{"line":128,"column":4}},{"start":{"line":128,"column":4},"end":{"line":128,"column":4}}]}},"code":["\"use strict\";","var utils = require('../utils');","","/** @module types */","","/**"," * Creates a new instance of ResultSet."," * @class"," * @classdesc Represents the result of a query."," * @param {Object} response"," * @param {String} host"," * @param {Object} triedHosts"," * @param {Number} consistency"," * @constructor"," */","function ResultSet(response, host, triedHosts, consistency) {","  /**","   * Information on the execution of a successful query:","   * @member {Object}","   * @property {Number} achievedConsistency The consistency level that has been actually achieved by the query.","   * @property {String} queriedHost The Cassandra host that coordinated this query.","   * @property {Object} triedHosts Gets the associative array of host that were queried before getting a valid response,","   * being the last host the one that replied correctly.","   * @property {Uuid} traceId Identifier of the trace session.","   * @property {Array.<string>} warnings Warning messages generated by the server when executing the query.","   */","  this.info = {","    queriedHost: host,","    triedHosts: triedHosts,","    achievedConsistency: consistency,","    traceId: null,","    warnings: null,","    customPayload: null","  };","  if (response.flags) {","    this.info.traceId = response.flags.traceId;","    this.info.warnings = response.flags.warnings;","    this.info.customPayload = response.flags.customPayload;","  }","  /**","   * Gets an array rows returned by the query, in case the result was buffered.","   * @type {Array.<Row>}","   */","  this.rows = response.rows;","  /**","   * Gets the row length of the result, regardless if the result has been buffered or not","   * @type {Number}","   */","  this.rowLength = this.rows ? this.rows.length : response.rowLength;","  /**","   * Gets the columns returned in this ResultSet.","   * @type {Array.<{name, type}>}","   * @default null","   */","  this.columns = null;","  /**","   * A string token representing the current page state of query. It can be used in the following executions to","   * continue paging and retrieve the remained of the result for the query.","   * @type String","   * @default null","   */","  this.pageState = null;","  /**","   * Method used to manually fetch the next page of results.","   * This method is only exposed when using the {@link Client#eachRow} method and there are more rows available in","   * following pages.","   * @type Function","   */","  this.nextPage = undefined;","","  var meta = response.meta;","  if (meta) {","    this.columns = meta.columns;","    if (meta.pageState) {","      this.pageState = meta.pageState.toString('hex');","    }","  }","  if (response.id) {","    // internal properties for prepared responses","    Object.defineProperty(this, 'id', { value: response.id, enumerable: false});","    Object.defineProperty(this, 'meta', { value: response.meta, enumerable: false});","  }","  else if (this.pageState !== null) {","    // page state was exposed in version 1 via result.meta.pageState as a Buffer.","    // it was not specified in the upgrade guide to v2, we must wait for a next major to remove it","    Object.defineProperty(this, 'meta', { value: response.meta, enumerable: false});","  }","}","","/**"," * Returns the first row or null if the result rows are empty."," */","ResultSet.prototype.first = function () {","  if (this.rows && this.rows.length) {","    return this.rows[0];","  }","  return null;","};","","ResultSet.prototype.getPageState = function () {","  // backward-compatibility","  return this.pageState;","};","","ResultSet.prototype.getColumns = function () {","  // backward-compatibility","  return this.columns;","};","","if (typeof Symbol !== 'undefined' && typeof Symbol.iterator === 'symbol') {","  /**","   * Gets the iterator function.","   * <p>","   *   Retrieves the iterator of the underlying fetched rows and will not cause the driver to fetch the following","   *   result pages. For more information on result paging,","   *   [visit the documentation]{@link http://docs.datastax.com/en/developer/nodejs-driver/latest/features/paging/}.","   * </p>","   * @alias module:types~ResultSet#@@iterator","   * @example <caption>Using for...of statement</caption>","   * const query = 'SELECT name, email, address FROM users WHERE id = ?';","   * const result = await client.execute(query, [ id ], { prepare: true });","   * for (let row of result) {","   *   console.log(row['email']);","   * }","   * @returns {Iterator.<Row>}","   */","  ResultSet.prototype[Symbol.iterator] = function getIterator() {","    if (!this.rows) {","      return utils.emptyArray[Symbol.iterator]();","    }","    return this.rows[Symbol.iterator]();","  };","}","","module.exports = ResultSet;"],"l":{"2":1,"16":1,"27":0,"35":0,"36":0,"37":0,"38":0,"44":0,"49":0,"55":0,"62":0,"69":0,"71":0,"72":0,"73":0,"74":0,"75":0,"78":0,"80":0,"81":0,"83":0,"86":0,"93":1,"94":0,"95":0,"97":0,"100":1,"102":0,"105":1,"107":0,"110":1,"127":1,"128":0,"129":0,"131":0,"135":1}},"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/types/result-stream.js":{"path":"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/types/result-stream.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":1,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":1,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":1,"25":0,"26":0,"27":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"ResultStream","line":10,"loc":{"start":{"line":10,"column":0},"end":{"line":10,"column":27}}},"2":{"name":"(anonymous_2)","line":18,"loc":{"start":{"line":18,"column":31},"end":{"line":18,"column":42}}},"3":{"name":"(anonymous_3)","line":36,"loc":{"start":{"line":36,"column":32},"end":{"line":36,"column":53}}},"4":{"name":"(anonymous_4)","line":49,"loc":{"start":{"line":49,"column":29},"end":{"line":49,"column":46}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":27}},"2":{"start":{"line":3,"column":0},"end":{"line":3,"column":31}},"3":{"start":{"line":10,"column":0},"end":{"line":14,"column":1}},"4":{"start":{"line":11,"column":2},"end":{"line":11,"column":34}},"5":{"start":{"line":12,"column":2},"end":{"line":12,"column":19}},"6":{"start":{"line":13,"column":2},"end":{"line":13,"column":21}},"7":{"start":{"line":16,"column":0},"end":{"line":16,"column":45}},"8":{"start":{"line":18,"column":0},"end":{"line":30,"column":2}},"9":{"start":{"line":19,"column":2},"end":{"line":19,"column":22}},"10":{"start":{"line":20,"column":2},"end":{"line":22,"column":3}},"11":{"start":{"line":21,"column":4},"end":{"line":21,"column":40}},"12":{"start":{"line":23,"column":2},"end":{"line":25,"column":3}},"13":{"start":{"line":24,"column":4},"end":{"line":24,"column":50}},"14":{"start":{"line":26,"column":2},"end":{"line":29,"column":3}},"15":{"start":{"line":27,"column":4},"end":{"line":27,"column":21}},"16":{"start":{"line":28,"column":4},"end":{"line":28,"column":26}},"17":{"start":{"line":36,"column":0},"end":{"line":47,"column":2}},"18":{"start":{"line":37,"column":2},"end":{"line":37,"column":24}},"19":{"start":{"line":38,"column":2},"end":{"line":40,"column":3}},"20":{"start":{"line":39,"column":4},"end":{"line":39,"column":11}},"21":{"start":{"line":41,"column":2},"end":{"line":46,"column":3}},"22":{"start":{"line":42,"column":4},"end":{"line":42,"column":30}},"23":{"start":{"line":45,"column":4},"end":{"line":45,"column":15}},"24":{"start":{"line":49,"column":0},"end":{"line":52,"column":2}},"25":{"start":{"line":50,"column":2},"end":{"line":50,"column":26}},"26":{"start":{"line":51,"column":2},"end":{"line":51,"column":15}},"27":{"start":{"line":54,"column":0},"end":{"line":54,"column":30}}},"branchMap":{"1":{"line":20,"type":"if","locations":[{"start":{"line":20,"column":2},"end":{"line":20,"column":2}},{"start":{"line":20,"column":2},"end":{"line":20,"column":2}}]},"2":{"line":23,"type":"binary-expr","locations":[{"start":{"line":23,"column":9},"end":{"line":23,"column":21}},{"start":{"line":23,"column":25},"end":{"line":23,"column":47}}]},"3":{"line":26,"type":"if","locations":[{"start":{"line":26,"column":2},"end":{"line":26,"column":2}},{"start":{"line":26,"column":2},"end":{"line":26,"column":2}}]},"4":{"line":26,"type":"binary-expr","locations":[{"start":{"line":26,"column":7},"end":{"line":26,"column":19}},{"start":{"line":26,"column":23},"end":{"line":26,"column":42}},{"start":{"line":26,"column":46},"end":{"line":26,"column":60}}]},"5":{"line":38,"type":"if","locations":[{"start":{"line":38,"column":2},"end":{"line":38,"column":2}},{"start":{"line":38,"column":2},"end":{"line":38,"column":2}}]},"6":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":2},"end":{"line":41,"column":2}},{"start":{"line":41,"column":2},"end":{"line":41,"column":2}}]},"7":{"line":41,"type":"binary-expr","locations":[{"start":{"line":41,"column":7},"end":{"line":41,"column":18}},{"start":{"line":41,"column":22},"end":{"line":41,"column":40}}]}},"code":["'use strict';","var util = require('util');","var stream = require('stream');","","/** @module types */","/**"," * Readable stream using to yield data from a result or a field"," * @constructor"," */","function ResultStream(opt) {","  stream.Readable.call(this, opt);","  this.buffer = [];","  this.paused = true;","}","","util.inherits(ResultStream, stream.Readable);","","ResultStream.prototype._read = function() {","  this.paused = false;","  if (this.buffer.length === 0) {","    this._readableState.reading = false;","  }","  while (!this.paused && this.buffer.length > 0) {","    this.paused = !this.push(this.buffer.shift());","  }","  if ( !this.paused && !this.buffer.length && this._readNext ) {","    this._readNext();","    this._readNext = null;","  }","};","","/**"," * Allows for throttling, helping nodejs keep the internal buffers reasonably sized."," * @param {function} readNext function that triggers reading the next result chunk"," */","ResultStream.prototype._valve = function( readNext ) {","  this._readNext = null;","  if ( !readNext ) {","    return;","  }","  if ( this.paused || this.buffer.length ) {","    this._readNext = readNext;","  }","  else {","    readNext();","  }","};","","ResultStream.prototype.add = function (chunk) {","  this.buffer.push(chunk);","  this.read(0);","};","","module.exports = ResultStream;"],"l":{"2":1,"3":1,"10":1,"11":0,"12":0,"13":0,"16":1,"18":1,"19":0,"20":0,"21":0,"23":0,"24":0,"26":0,"27":0,"28":0,"36":1,"37":0,"38":0,"39":0,"41":0,"42":0,"45":0,"49":1,"50":0,"51":0,"54":1}},"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/types/row.js":{"path":"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/types/row.js","s":{"1":1,"2":0,"3":0,"4":0,"5":1,"6":0,"7":0,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":1,"15":0,"16":0,"17":0,"18":0,"19":1,"20":0,"21":0,"22":0,"23":0,"24":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"Row","line":8,"loc":{"start":{"line":8,"column":0},"end":{"line":8,"column":22}}},"2":{"name":"(anonymous_2)","line":20,"loc":{"start":{"line":20,"column":20},"end":{"line":20,"column":42}}},"3":{"name":"(anonymous_3)","line":32,"loc":{"start":{"line":32,"column":23},"end":{"line":32,"column":35}}},"4":{"name":"(anonymous_4)","line":34,"loc":{"start":{"line":34,"column":15},"end":{"line":34,"column":30}}},"5":{"name":"(anonymous_5)","line":44,"loc":{"start":{"line":44,"column":21},"end":{"line":44,"column":33}}},"6":{"name":"(anonymous_6)","line":46,"loc":{"start":{"line":46,"column":15},"end":{"line":46,"column":35}}},"7":{"name":"(anonymous_7)","line":56,"loc":{"start":{"line":56,"column":24},"end":{"line":56,"column":44}}}},"statementMap":{"1":{"start":{"line":8,"column":0},"end":{"line":14,"column":1}},"2":{"start":{"line":9,"column":2},"end":{"line":11,"column":3}},"3":{"start":{"line":10,"column":4},"end":{"line":10,"column":43}},"4":{"start":{"line":13,"column":2},"end":{"line":13,"column":98}},"5":{"start":{"line":20,"column":0},"end":{"line":26,"column":2}},"6":{"start":{"line":21,"column":2},"end":{"line":24,"column":3}},"7":{"start":{"line":23,"column":4},"end":{"line":23,"column":49}},"8":{"start":{"line":25,"column":2},"end":{"line":25,"column":26}},"9":{"start":{"line":32,"column":0},"end":{"line":38,"column":2}},"10":{"start":{"line":33,"column":2},"end":{"line":33,"column":23}},"11":{"start":{"line":34,"column":2},"end":{"line":36,"column":5}},"12":{"start":{"line":35,"column":4},"end":{"line":35,"column":26}},"13":{"start":{"line":37,"column":2},"end":{"line":37,"column":21}},"14":{"start":{"line":44,"column":0},"end":{"line":50,"column":2}},"15":{"start":{"line":45,"column":2},"end":{"line":45,"column":21}},"16":{"start":{"line":46,"column":2},"end":{"line":48,"column":5}},"17":{"start":{"line":47,"column":4},"end":{"line":47,"column":24}},"18":{"start":{"line":49,"column":2},"end":{"line":49,"column":19}},"19":{"start":{"line":56,"column":0},"end":{"line":63,"column":2}},"20":{"start":{"line":57,"column":2},"end":{"line":62,"column":3}},"21":{"start":{"line":58,"column":4},"end":{"line":60,"column":5}},"22":{"start":{"line":59,"column":6},"end":{"line":59,"column":15}},"23":{"start":{"line":61,"column":4},"end":{"line":61,"column":43}},"24":{"start":{"line":65,"column":0},"end":{"line":65,"column":21}}},"branchMap":{"1":{"line":9,"type":"if","locations":[{"start":{"line":9,"column":2},"end":{"line":9,"column":2}},{"start":{"line":9,"column":2},"end":{"line":9,"column":2}}]},"2":{"line":21,"type":"if","locations":[{"start":{"line":21,"column":2},"end":{"line":21,"column":2}},{"start":{"line":21,"column":2},"end":{"line":21,"column":2}}]},"3":{"line":58,"type":"if","locations":[{"start":{"line":58,"column":4},"end":{"line":58,"column":4}},{"start":{"line":58,"column":4},"end":{"line":58,"column":4}}]}},"code":["\"use strict\";","/** @module types */","/**"," * Represents a result row"," * @param {Array} columns"," * @constructor"," */","function Row(columns) {","  if (!columns) {","    throw new Error('Columns not defined');","  }","  //Private non-enumerable properties, with double underscore to avoid interfering with column names","  Object.defineProperty(this, '__columns', { value: columns, enumerable: false, writable: false});","}","","/**"," * Returns the cell value."," * @param {String|Number} columnName Name or index of the column"," */","Row.prototype.get = function (columnName) {","  if (typeof columnName === 'number') {","    //its an index","    return this[this.__columns[columnName].name];","  }","  return this[columnName];","};","","/**"," * Returns an array of the values of the row"," * @returns {Array}"," */","Row.prototype.values = function () {","  var valuesArray = [];","  this.forEach(function (val) {","    valuesArray.push(val);","  });","  return valuesArray;","};","","/**"," * Returns an array of the column names of the row"," * @returns {Array}"," */","Row.prototype.keys = function () {","  var keysArray = [];","  this.forEach(function (val, key) {","    keysArray.push(key);","  });","  return keysArray;","};","","/**"," * Executes the callback for each field in the row, containing the value as first parameter followed by the columnName"," * @param {Function} callback"," */","Row.prototype.forEach = function (callback) {","  for (var columnName in this) {","    if (!this.hasOwnProperty(columnName)) {","      continue;","    }","    callback(this[columnName], columnName);","  }","};","","module.exports = Row;"],"l":{"8":1,"9":0,"10":0,"13":0,"20":1,"21":0,"23":0,"25":0,"32":1,"33":0,"34":0,"35":0,"37":0,"44":1,"45":0,"46":0,"47":0,"49":0,"56":1,"57":0,"58":0,"59":0,"61":0,"65":1}},"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/types/tuple.js":{"path":"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/types/tuple.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1,"11":0,"12":1,"13":0,"14":1,"15":0,"16":0,"17":1,"18":0,"19":1,"20":0,"21":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"Tuple","line":16,"loc":{"start":{"line":16,"column":0},"end":{"line":16,"column":17}}},"2":{"name":"(anonymous_2)","line":40,"loc":{"start":{"line":40,"column":18},"end":{"line":40,"column":38}}},"3":{"name":"(anonymous_3)","line":49,"loc":{"start":{"line":49,"column":22},"end":{"line":49,"column":39}}},"4":{"name":"(anonymous_4)","line":60,"loc":{"start":{"line":60,"column":27},"end":{"line":60,"column":39}}},"5":{"name":"(anonymous_5)","line":62,"loc":{"start":{"line":62,"column":25},"end":{"line":62,"column":47}}},"6":{"name":"(anonymous_6)","line":72,"loc":{"start":{"line":72,"column":25},"end":{"line":72,"column":37}}},"7":{"name":"(anonymous_7)","line":80,"loc":{"start":{"line":80,"column":25},"end":{"line":80,"column":37}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":27}},"2":{"start":{"line":16,"column":0},"end":{"line":33,"column":1}},"3":{"start":{"line":17,"column":2},"end":{"line":17,"column":55}},"4":{"start":{"line":18,"column":2},"end":{"line":20,"column":3}},"5":{"start":{"line":19,"column":4},"end":{"line":19,"column":65}},"6":{"start":{"line":21,"column":2},"end":{"line":24,"column":3}},"7":{"start":{"line":23,"column":4},"end":{"line":23,"column":27}},"8":{"start":{"line":25,"column":2},"end":{"line":25,"column":99}},"9":{"start":{"line":32,"column":2},"end":{"line":32,"column":104}},"10":{"start":{"line":40,"column":0},"end":{"line":43,"column":2}},"11":{"start":{"line":42,"column":2},"end":{"line":42,"column":38}},"12":{"start":{"line":49,"column":0},"end":{"line":51,"column":2}},"13":{"start":{"line":50,"column":2},"end":{"line":50,"column":35}},"14":{"start":{"line":60,"column":0},"end":{"line":66,"column":2}},"15":{"start":{"line":61,"column":2},"end":{"line":65,"column":9}},"16":{"start":{"line":63,"column":6},"end":{"line":63,"column":54}},"17":{"start":{"line":72,"column":0},"end":{"line":74,"column":2}},"18":{"start":{"line":73,"column":2},"end":{"line":73,"column":23}},"19":{"start":{"line":80,"column":0},"end":{"line":82,"column":2}},"20":{"start":{"line":81,"column":2},"end":{"line":81,"column":32}},"21":{"start":{"line":84,"column":0},"end":{"line":84,"column":23}}},"branchMap":{"1":{"line":18,"type":"if","locations":[{"start":{"line":18,"column":2},"end":{"line":18,"column":2}},{"start":{"line":18,"column":2},"end":{"line":18,"column":2}}]},"2":{"line":21,"type":"if","locations":[{"start":{"line":21,"column":2},"end":{"line":21,"column":2}},{"start":{"line":21,"column":2},"end":{"line":21,"column":2}}]},"3":{"line":21,"type":"binary-expr","locations":[{"start":{"line":21,"column":6},"end":{"line":21,"column":27}},{"start":{"line":21,"column":31},"end":{"line":21,"column":53}}]},"4":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":23},"end":{"line":50,"column":28}},{"start":{"line":50,"column":32},"end":{"line":50,"column":33}}]},"5":{"line":63,"type":"cond-expr","locations":[{"start":{"line":63,"column":29},"end":{"line":63,"column":32}},{"start":{"line":63,"column":35},"end":{"line":63,"column":37}}]}},"code":["\"use strict\";","var util = require('util');","/** @module types */","/**"," * Creates a new sequence of immutable objects with the parameters provided."," * @class"," * @classdesc A tuple is a sequence of immutable objects."," * Tuples are sequences, just like [Arrays]{@link Array}. The only difference is that tuples can't be changed."," * <p>"," *   As tuples can be used as a Map keys, the {@link Tuple#toString toString()} method calls toString of each element,"," *   to try to get a unique string key."," * </p>"," * @param [arguments] The sequence elements as arguments."," * @constructor"," */","function Tuple() {","  var elements = Array.prototype.slice.call(arguments);","  if (elements.length === 0) {","    throw new TypeError('Tuple must contain at least one value');","  }","  if (elements.length === 1 && util.isArray(elements)) {","    //The first argument is an array of the elements, use a copy of the array","    elements = elements[0];","  }","  Object.defineProperty(this, 'elements', { value: elements, enumerable: false, writable: false });","  /**","   * Returns the number of the elements.","   * @name length","   * @type Number","   * @memberof module:types~Tuple#","   */","  Object.defineProperty(this, 'length', { value: elements.length, enumerable: false, writable: false });","}","","/**"," * Creates a new instance of a tuple based on the Array"," * @param {Array} elements"," * @returns {Tuple}"," */","Tuple.fromArray = function (elements) {","  //Use a copy of an array","  return new Tuple(elements.slice(0));","};","","/**"," * Returns the value located at the index."," * @param {Number} index Element index"," */","Tuple.prototype.get = function (index) {","  return this.elements[index || 0];","};","","/**"," * Returns the string representation of the sequence surrounded by parenthesis, ie: (1, 2)."," * <p>"," *   The returned value attempts to be a unique string representation of its values."," * </p>"," * @returns {string}"," */","Tuple.prototype.toString = function () {","  return ('(' +","    this.elements.reduce(function (prev, x, i) {","      return prev + (i > 0 ? ',' : '') + x.toString();","    }, '') +","    ')');","};","","/**"," * Returns the Array representation of the sequence."," * @returns {Array}"," */","Tuple.prototype.toJSON = function () {","  return this.elements;","};","","/**"," * Gets the elements as an array"," * @returns {Array}"," */","Tuple.prototype.values = function () {","  return this.elements.slice(0);","};","","module.exports = Tuple;"],"l":{"2":1,"16":1,"17":0,"18":0,"19":0,"21":0,"23":0,"25":0,"32":0,"40":1,"42":0,"49":1,"50":0,"60":1,"61":0,"63":0,"72":1,"73":0,"80":1,"81":0,"84":1}},"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/policies/reconnection.js":{"path":"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/policies/reconnection.js","s":{"1":1,"2":1,"3":1,"4":0,"5":1,"6":0,"7":1,"8":1,"9":0,"10":0,"11":0,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":1,"29":1,"30":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":1,"7":0,"8":0},"fnMap":{"1":{"name":"ReconnectionPolicy","line":9,"loc":{"start":{"line":9,"column":0},"end":{"line":9,"column":30}}},"2":{"name":"(anonymous_2)","line":17,"loc":{"start":{"line":17,"column":43},"end":{"line":17,"column":55}}},"3":{"name":"ConstantReconnectionPolicy","line":26,"loc":{"start":{"line":26,"column":0},"end":{"line":26,"column":43}}},"4":{"name":"(anonymous_4)","line":36,"loc":{"start":{"line":36,"column":51},"end":{"line":36,"column":63}}},"5":{"name":"(anonymous_5)","line":39,"loc":{"start":{"line":39,"column":10},"end":{"line":39,"column":22}}},"6":{"name":"ExponentialReconnectionPolicy","line":53,"loc":{"start":{"line":53,"column":0},"end":{"line":53,"column":78}}},"7":{"name":"(anonymous_7)","line":65,"loc":{"start":{"line":65,"column":54},"end":{"line":65,"column":66}}},"8":{"name":"(anonymous_8)","line":69,"loc":{"start":{"line":69,"column":10},"end":{"line":69,"column":22}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":27}},"2":{"start":{"line":9,"column":0},"end":{"line":11,"column":1}},"3":{"start":{"line":17,"column":0},"end":{"line":19,"column":2}},"4":{"start":{"line":18,"column":2},"end":{"line":18,"column":82}},"5":{"start":{"line":26,"column":0},"end":{"line":28,"column":1}},"6":{"start":{"line":27,"column":2},"end":{"line":27,"column":21}},"7":{"start":{"line":30,"column":0},"end":{"line":30,"column":62}},"8":{"start":{"line":36,"column":0},"end":{"line":43,"column":2}},"9":{"start":{"line":37,"column":2},"end":{"line":37,"column":18}},"10":{"start":{"line":38,"column":2},"end":{"line":42,"column":4}},"11":{"start":{"line":40,"column":6},"end":{"line":40,"column":46}},"12":{"start":{"line":53,"column":0},"end":{"line":57,"column":1}},"13":{"start":{"line":54,"column":2},"end":{"line":54,"column":29}},"14":{"start":{"line":55,"column":2},"end":{"line":55,"column":27}},"15":{"start":{"line":56,"column":2},"end":{"line":56,"column":43}},"16":{"start":{"line":59,"column":0},"end":{"line":59,"column":65}},"17":{"start":{"line":65,"column":0},"end":{"line":81,"column":2}},"18":{"start":{"line":66,"column":2},"end":{"line":66,"column":18}},"19":{"start":{"line":67,"column":2},"end":{"line":67,"column":45}},"20":{"start":{"line":68,"column":2},"end":{"line":80,"column":4}},"21":{"start":{"line":70,"column":6},"end":{"line":70,"column":14}},"22":{"start":{"line":71,"column":6},"end":{"line":71,"column":20}},"23":{"start":{"line":72,"column":6},"end":{"line":77,"column":7}},"24":{"start":{"line":73,"column":8},"end":{"line":73,"column":30}},"25":{"start":{"line":75,"column":11},"end":{"line":77,"column":7}},"26":{"start":{"line":76,"column":8},"end":{"line":76,"column":77}},"27":{"start":{"line":78,"column":6},"end":{"line":78,"column":43}},"28":{"start":{"line":83,"column":0},"end":{"line":83,"column":48}},"29":{"start":{"line":84,"column":0},"end":{"line":84,"column":64}},"30":{"start":{"line":85,"column":0},"end":{"line":85,"column":70}}},"branchMap":{"1":{"line":67,"type":"cond-expr","locations":[{"start":{"line":67,"column":38},"end":{"line":67,"column":40}},{"start":{"line":67,"column":43},"end":{"line":67,"column":44}}]},"2":{"line":72,"type":"if","locations":[{"start":{"line":72,"column":6},"end":{"line":72,"column":6}},{"start":{"line":72,"column":6},"end":{"line":72,"column":6}}]},"3":{"line":75,"type":"if","locations":[{"start":{"line":75,"column":11},"end":{"line":75,"column":11}},{"start":{"line":75,"column":11},"end":{"line":75,"column":11}}]}},"code":["'use strict';","var util = require('util');","","/** @module policies/reconnection */","/**"," * Base class for Reconnection Policies"," * @constructor"," */","function ReconnectionPolicy() {","","}","","/**"," * A new reconnection schedule."," * @returns {{next: function}} An infinite iterator"," */","ReconnectionPolicy.prototype.newSchedule = function () {","  throw new Error('You must implement a new schedule for the Reconnection class');","};","","/**"," * A reconnection policy that waits a constant time between each reconnection attempt."," * @param {Number} delay Delay in ms"," * @constructor"," */","function ConstantReconnectionPolicy(delay) {","  this.delay = delay;","}","","util.inherits(ConstantReconnectionPolicy, ReconnectionPolicy);","","/**"," * A new reconnection schedule that returns the same next delay value"," * @returns {{next: next}} An infinite iterator"," */","ConstantReconnectionPolicy.prototype.newSchedule = function () {","  var self = this;","  return {","    next: function () {","      return {value: self.delay, done: false};","    }","  };","};","","/**"," * A reconnection policy that waits exponentially longer between each"," * reconnection attempt (but keeps a constant delay once a maximum delay is reached)."," * @param {Number} baseDelay Delay in ms that"," * @param {Number} maxDelay the maximum delay in ms to wait between two reconnection attempt"," * @param {Boolean} startWithNoDelay Determines if the first attempt should be zero delay"," * @constructor"," */","function ExponentialReconnectionPolicy(baseDelay, maxDelay, startWithNoDelay) {","  this.baseDelay = baseDelay;","  this.maxDelay = maxDelay;","  this.startWithNoDelay = startWithNoDelay;","}","","util.inherits(ExponentialReconnectionPolicy, ReconnectionPolicy);","","/**"," * A new schedule that uses an exponentially growing delay between reconnection attempts."," * @returns {{next: next}} An infinite iterator"," */","ExponentialReconnectionPolicy.prototype.newSchedule = function () {","  var self = this;","  var index = this.startWithNoDelay ? -1 : 0;","  return {","    next: function () {","      index++;","      var delay = 0;","      if (index > 64) {","        delay = self.maxDelay;","      }","      else if (index !== 0) {","        delay = Math.min(Math.pow(2, index) * self.baseDelay, self.maxDelay);","      }","      return { value: delay, done: false };","    }","  };","};","","exports.ReconnectionPolicy = ReconnectionPolicy;","exports.ConstantReconnectionPolicy = ConstantReconnectionPolicy;","exports.ExponentialReconnectionPolicy = ExponentialReconnectionPolicy;"],"l":{"2":1,"9":1,"17":1,"18":0,"26":1,"27":0,"30":1,"36":1,"37":0,"38":0,"40":0,"53":1,"54":1,"55":1,"56":1,"59":1,"65":1,"66":0,"67":0,"68":0,"70":0,"71":0,"72":0,"73":0,"75":0,"76":0,"78":0,"83":1,"84":1,"85":1}},"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/policies/retry.js":{"path":"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/policies/retry.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":1,"9":0,"10":0,"11":0,"12":1,"13":0,"14":0,"15":0,"16":1,"17":0,"18":0,"19":0,"20":1,"21":0,"22":1,"23":0,"24":1,"25":1,"26":0,"27":1,"28":1,"29":0,"30":1,"31":0,"32":0,"33":0,"34":1,"35":0,"36":1,"37":0,"38":0,"39":0,"40":1,"41":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},"fnMap":{"1":{"name":"RetryPolicy","line":12,"loc":{"start":{"line":12,"column":0},"end":{"line":12,"column":23}}},"2":{"name":"(anonymous_2)","line":28,"loc":{"start":{"line":28,"column":38},"end":{"line":28,"column":84}}},"3":{"name":"(anonymous_3)","line":46,"loc":{"start":{"line":46,"column":38},"end":{"line":46,"column":102}}},"4":{"name":"(anonymous_4)","line":67,"loc":{"start":{"line":67,"column":39},"end":{"line":67,"column":99}}},"5":{"name":"(anonymous_5)","line":99,"loc":{"start":{"line":99,"column":39},"end":{"line":99,"column":73}}},"6":{"name":"(anonymous_6)","line":115,"loc":{"start":{"line":115,"column":36},"end":{"line":115,"column":75}}},"7":{"name":"(anonymous_7)","line":127,"loc":{"start":{"line":127,"column":38},"end":{"line":127,"column":50}}},"8":{"name":"IdempotenceAwareRetryPolicy","line":160,"loc":{"start":{"line":160,"column":0},"end":{"line":160,"column":50}}},"9":{"name":"(anonymous_9)","line":166,"loc":{"start":{"line":166,"column":54},"end":{"line":166,"column":118}}},"10":{"name":"(anonymous_10)","line":173,"loc":{"start":{"line":173,"column":55},"end":{"line":173,"column":89}}},"11":{"name":"(anonymous_11)","line":180,"loc":{"start":{"line":180,"column":54},"end":{"line":180,"column":100}}},"12":{"name":"(anonymous_12)","line":187,"loc":{"start":{"line":187,"column":55},"end":{"line":187,"column":115}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":27}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":34}},"3":{"start":{"line":12,"column":0},"end":{"line":14,"column":1}},"4":{"start":{"line":28,"column":0},"end":{"line":33,"column":2}},"5":{"start":{"line":29,"column":2},"end":{"line":31,"column":3}},"6":{"start":{"line":30,"column":4},"end":{"line":30,"column":32}},"7":{"start":{"line":32,"column":2},"end":{"line":32,"column":44}},"8":{"start":{"line":46,"column":0},"end":{"line":53,"column":2}},"9":{"start":{"line":47,"column":2},"end":{"line":49,"column":3}},"10":{"start":{"line":48,"column":4},"end":{"line":48,"column":32}},"11":{"start":{"line":50,"column":2},"end":{"line":52,"column":26}},"12":{"start":{"line":67,"column":0},"end":{"line":73,"column":2}},"13":{"start":{"line":68,"column":2},"end":{"line":70,"column":3}},"14":{"start":{"line":69,"column":4},"end":{"line":69,"column":32}},"15":{"start":{"line":72,"column":2},"end":{"line":72,"column":79}},"16":{"start":{"line":99,"column":0},"end":{"line":106,"column":2}},"17":{"start":{"line":100,"column":2},"end":{"line":102,"column":3}},"18":{"start":{"line":101,"column":4},"end":{"line":101,"column":32}},"19":{"start":{"line":105,"column":2},"end":{"line":105,"column":44}},"20":{"start":{"line":115,"column":0},"end":{"line":121,"column":2}},"21":{"start":{"line":116,"column":2},"end":{"line":120,"column":4}},"22":{"start":{"line":127,"column":0},"end":{"line":129,"column":2}},"23":{"start":{"line":128,"column":2},"end":{"line":128,"column":57}},"24":{"start":{"line":139,"column":0},"end":{"line":143,"column":2}},"25":{"start":{"line":160,"column":0},"end":{"line":162,"column":1}},"26":{"start":{"line":161,"column":2},"end":{"line":161,"column":55}},"27":{"start":{"line":164,"column":0},"end":{"line":164,"column":56}},"28":{"start":{"line":166,"column":0},"end":{"line":168,"column":2}},"29":{"start":{"line":167,"column":2},"end":{"line":167,"column":95}},"30":{"start":{"line":173,"column":0},"end":{"line":178,"column":2}},"31":{"start":{"line":174,"column":2},"end":{"line":176,"column":3}},"32":{"start":{"line":175,"column":4},"end":{"line":175,"column":68}},"33":{"start":{"line":177,"column":2},"end":{"line":177,"column":30}},"34":{"start":{"line":180,"column":0},"end":{"line":182,"column":2}},"35":{"start":{"line":181,"column":2},"end":{"line":181,"column":77}},"36":{"start":{"line":187,"column":0},"end":{"line":192,"column":2}},"37":{"start":{"line":188,"column":2},"end":{"line":190,"column":3}},"38":{"start":{"line":189,"column":4},"end":{"line":189,"column":94}},"39":{"start":{"line":191,"column":2},"end":{"line":191,"column":30}},"40":{"start":{"line":216,"column":0},"end":{"line":216,"column":34}},"41":{"start":{"line":217,"column":0},"end":{"line":217,"column":66}}},"branchMap":{"1":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":2},"end":{"line":29,"column":2}},{"start":{"line":29,"column":2},"end":{"line":29,"column":2}}]},"2":{"line":47,"type":"if","locations":[{"start":{"line":47,"column":2},"end":{"line":47,"column":2}},{"start":{"line":47,"column":2},"end":{"line":47,"column":2}}]},"3":{"line":50,"type":"cond-expr","locations":[{"start":{"line":51,"column":4},"end":{"line":51,"column":22}},{"start":{"line":52,"column":4},"end":{"line":52,"column":24}}]},"4":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":11},"end":{"line":50,"column":31}},{"start":{"line":50,"column":35},"end":{"line":50,"column":49}}]},"5":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":2},"end":{"line":68,"column":2}},{"start":{"line":68,"column":2},"end":{"line":68,"column":2}}]},"6":{"line":72,"type":"cond-expr","locations":[{"start":{"line":72,"column":37},"end":{"line":72,"column":55}},{"start":{"line":72,"column":58},"end":{"line":72,"column":78}}]},"7":{"line":100,"type":"if","locations":[{"start":{"line":100,"column":2},"end":{"line":100,"column":2}},{"start":{"line":100,"column":2},"end":{"line":100,"column":2}}]},"8":{"line":100,"type":"binary-expr","locations":[{"start":{"line":100,"column":6},"end":{"line":100,"column":50}},{"start":{"line":100,"column":54},"end":{"line":100,"column":82}}]},"9":{"line":161,"type":"binary-expr","locations":[{"start":{"line":161,"column":22},"end":{"line":161,"column":33}},{"start":{"line":161,"column":37},"end":{"line":161,"column":54}}]},"10":{"line":174,"type":"if","locations":[{"start":{"line":174,"column":2},"end":{"line":174,"column":2}},{"start":{"line":174,"column":2},"end":{"line":174,"column":2}}]},"11":{"line":188,"type":"if","locations":[{"start":{"line":188,"column":2},"end":{"line":188,"column":2}},{"start":{"line":188,"column":2},"end":{"line":188,"column":2}}]}},"code":["\"use strict\";","var util = require('util');","","var errors = require('../errors');","","/** @module policies/retry */","/**"," * Base and default RetryPolicy."," * Determines what to do when the drivers runs into an specific Cassandra exception"," * @constructor"," */","function RetryPolicy() {","","}","","//noinspection JSUnusedLocalSymbols","/**"," * Determines what to do when the driver gets an UnavailableException response from a Cassandra node."," * @param {OperationInfo} info"," * @param {Number} consistency The [consistency]{@link module:types~consistencies} level of the query that triggered"," * the exception."," * @param {Number} required The number of replicas whose response is required to achieve the"," * required [consistency]{@link module:types~consistencies}."," * @param {Number} alive The number of replicas that were known to be alive when the request had been processed"," * (since an unavailable exception has been triggered, there will be alive &lt; required)"," * @returns {DecisionInfo}"," */","RetryPolicy.prototype.onUnavailable = function (info, consistency, required, alive) {","  if (info.nbRetry > 0) {","    return this.rethrowResult();","  }","  return this.retryResult(undefined, false);","};","","/**"," * Determines what to do when the driver gets a ReadTimeoutException response from a Cassandra node."," * @param {OperationInfo} info"," * @param {Number} consistency The [consistency]{@link module:types~consistencies} level of the query that triggered"," * the exception."," * @param {Number} received The number of nodes having answered the request."," * @param {Number} blockFor The number of replicas whose response is required to achieve the"," * required [consistency]{@link module:types~consistencies}."," * @param {Boolean} isDataPresent When <code>false</code>, it means the replica that was asked for data has not responded."," * @returns {DecisionInfo}"," */","RetryPolicy.prototype.onReadTimeout = function (info, consistency, received, blockFor, isDataPresent) {","  if (info.nbRetry > 0) {","    return this.rethrowResult();","  }","  return ((received >= blockFor && !isDataPresent) ?","    this.retryResult() :","    this.rethrowResult());","};","","/**"," * Determines what to do when the driver gets a WriteTimeoutException response from a Cassandra node."," * @param {OperationInfo} info"," * @param {Number} consistency The [consistency]{@link module:types~consistencies} level of the query that triggered"," * the exception."," * @param {Number} received The number of nodes having acknowledged the request."," * @param {Number} blockFor The number of replicas whose acknowledgement is required to achieve the required"," * [consistency]{@link module:types~consistencies}."," * @param {String} writeType A <code>string</code> that describes the type of the write that timed out (\"SIMPLE\""," * / \"BATCH\" / \"BATCH_LOG\" / \"UNLOGGED_BATCH\" / \"COUNTER\")."," * @returns {DecisionInfo}"," */","RetryPolicy.prototype.onWriteTimeout = function (info, consistency, received, blockFor, writeType) {","  if (info.nbRetry > 0) {","    return this.rethrowResult();","  }","  // If the batch log write failed, retry the operation as this might just be we were unlucky at picking candidates","  return writeType === \"BATCH_LOG\" ? this.retryResult() : this.rethrowResult();","};","","/**"," * Defines whether to retry and at which consistency level on an unexpected error."," * <p>"," * This method might be invoked in the following situations:"," * </p>"," * <ol>"," * <li>On a client timeout, while waiting for the server response"," * (see [socketOptions.readTimeout]{@link ClientOptions}), being the error an instance of"," * [OperationTimedOutError]{@link module:errors~OperationTimedOutError}.</li>"," * <li>On a connection error (socket closed, etc.).</li>"," * <li>When the contacted host replies with an error, such as <code>overloaded</code>, <code>isBootstrapping</code>,"," * </code>serverError, etc. In this case, the error is instance of [ResponseError]{@link module:errors~ResponseError}."," * </li>"," * </ol>"," * <p>"," * Note that when this method is invoked, <em>the driver cannot guarantee that the mutation has been effectively"," * applied server-side</em>; a retry should only be attempted if the request is known to be idempotent."," * </p>"," * @param {OperationInfo} info"," * @param {Number|undefined} consistency The [consistency]{@link module:types~consistencies} level of the query that triggered"," * the exception."," * @param {Error} err The error that caused this request to fail."," * @returns {DecisionInfo}"," */","RetryPolicy.prototype.onRequestError = function (info, consistency, err) {","  if (err instanceof errors.OperationTimedOutError && !info.options.retryOnTimeout) {","    return this.rethrowResult();","  }","  // The default implementation triggers a retry on the next host in the query plan with the same consistency level,","  // regardless of the statement's idempotence, for historical reasons.","  return this.retryResult(undefined, false);","};","","/**"," * Returns a {@link DecisionInfo} to retry the request with the given [consistency]{@link module:types~consistencies}."," * @param {Number|undefined} [consistency] When specified, it retries the request with the given consistency."," * @param {Boolean} [useCurrentHost] When specified, determines if the retry should be made using the same coordinator."," * Default: true."," * @returns {DecisionInfo}"," */","RetryPolicy.prototype.retryResult = function (consistency, useCurrentHost) {","  return {","    decision: RetryPolicy.retryDecision.retry,","    consistency: consistency,","    useCurrentHost: useCurrentHost !== false","  };","};","","/**"," * Returns a {@link DecisionInfo} to callback in error when a err is obtained for a given request."," * @returns {DecisionInfo}"," */","RetryPolicy.prototype.rethrowResult = function () {","  return { decision: RetryPolicy.retryDecision.rethrow };","};","","/**"," * Determines the retry decision for the retry policies."," * @type {Object}"," * @property {Number} rethrow"," * @property {Number} retry"," * @property {Number} ignore"," * @static"," */","RetryPolicy.retryDecision = {","  rethrow:  0,","  retry:    1,","  ignore:   2","};","","/**"," * Creates a new instance of <code>IdempotenceAwareRetryPolicy</code>."," * @classdesc"," * A retry policy that avoids retrying non-idempotent statements."," * <p>"," * In case of write timeouts or unexpected errors, this policy will always return"," * [rethrowResult()]{@link module:policies/retry~RetryPolicy#rethrowResult} if the statement is deemed non-idempotent"," * (see [QueryOptions.isIdempotent]{@link QueryOptions})."," * <p/>"," * For all other cases, this policy delegates the decision to the child policy."," * @param {RetryPolicy} [childPolicy] The child retry policy to wrap. When not defined, it will use an instance of"," * [RetryPolicy]{@link module:policies/retry~RetryPolicy} as child policy."," * @extends module:policies/retry~RetryPolicy"," * @constructor"," */","function IdempotenceAwareRetryPolicy(childPolicy) {","  this._childPolicy = childPolicy || new RetryPolicy();","}","","util.inherits(IdempotenceAwareRetryPolicy, RetryPolicy);","","IdempotenceAwareRetryPolicy.prototype.onReadTimeout = function (info, consistency, received, blockFor, isDataPresent) {","  return this._childPolicy.onReadTimeout(info, consistency, received, blockFor, isDataPresent);","};","","/**"," * If the query is not idempotent, it returns a rethrow decision. Otherwise, it relies on the child policy to decide."," */","IdempotenceAwareRetryPolicy.prototype.onRequestError = function (info, consistency, err) {","  if (info.options.isIdempotent) {","    return this._childPolicy.onRequestError(info, consistency, err);","  }","  return this.rethrowResult();","};","","IdempotenceAwareRetryPolicy.prototype.onUnavailable = function (info, consistency, required, alive) {","  return this._childPolicy.onUnavailable(info, consistency, required, alive);","};","","/**"," * If the query is not idempotent, it return a rethrow decision. Otherwise, it relies on the child policy to decide."," */","IdempotenceAwareRetryPolicy.prototype.onWriteTimeout = function (info, consistency, received, blockFor, writeType) {","  if (info.options.isIdempotent) {","    return this._childPolicy.onWriteTimeout(info, consistency, received, blockFor, writeType);","  }","  return this.rethrowResult();","};","","/**"," * Decision information"," * @typedef {Object} DecisionInfo"," * @property {Number} decision The decision as specified in"," * [retryDecision]{@link module:policies/retry~RetryPolicy.retryDecision}."," * @property {Number} [consistency] The [consistency level]{@link module:types~consistencies}."," * @property {useCurrentHost} [useCurrentHost] Determines if it should use the same host to retry the request."," */","","/**"," * Request information."," * @typedef {Object} OperationInfo"," * @property {String} query The query that was executed."," * @property {QueryOptions} options The options for the query that was executed."," * @property {Number} nbRetry The number of retries already performed for this operation."," * @property {Object} handler DEPRECATED: it will be removed in the next major version. The request handler."," * @property {Object} request DEPRECATED: it will be removed in the next major version. Represents the request that"," * was executed."," * @property {Boolean} retryOnTimeout. DEPRECATED: it will be removed in the next major version. The value as"," * specified in the {@link QueryOptions} for this operation. Use <code>OperationInfo.options</code> value instead."," */","","exports.RetryPolicy = RetryPolicy;","exports.IdempotenceAwareRetryPolicy = IdempotenceAwareRetryPolicy;"],"l":{"2":1,"4":1,"12":1,"28":1,"29":0,"30":0,"32":0,"46":1,"47":0,"48":0,"50":0,"67":1,"68":0,"69":0,"72":0,"99":1,"100":0,"101":0,"105":0,"115":1,"116":0,"127":1,"128":0,"139":1,"160":1,"161":0,"164":1,"166":1,"167":0,"173":1,"174":0,"175":0,"177":0,"180":1,"181":0,"187":1,"188":0,"189":0,"191":0,"216":1,"217":1}},"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/policies/timestamp-generation.js":{"path":"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/policies/timestamp-generation.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":0,"9":1,"10":1,"11":0,"12":1,"13":1,"14":1,"15":0,"16":1,"17":1,"18":1,"19":1,"20":1,"21":0,"22":1,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":1,"48":0,"49":0,"50":0,"51":1,"52":1},"b":{"1":[0,1],"2":[1,1],"3":[0,1],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0]},"f":{"1":0,"2":0,"3":1,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"TimestampGenerator","line":33,"loc":{"start":{"line":33,"column":0},"end":{"line":33,"column":30}}},"2":{"name":"(anonymous_2)","line":53,"loc":{"start":{"line":53,"column":36},"end":{"line":53,"column":54}}},"3":{"name":"MonotonicTimestampGenerator","line":72,"loc":{"start":{"line":72,"column":0},"end":{"line":72,"column":71}}},"4":{"name":"(anonymous_4)","line":93,"loc":{"start":{"line":93,"column":48},"end":{"line":93,"column":60}}},"5":{"name":"(anonymous_5)","line":97,"loc":{"start":{"line":97,"column":45},"end":{"line":97,"column":63}}},"6":{"name":"(anonymous_6)","line":142,"loc":{"start":{"line":142,"column":62},"end":{"line":142,"column":74}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":36}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":34}},"4":{"start":{"line":14,"column":0},"end":{"line":14,"column":39}},"5":{"start":{"line":21,"column":0},"end":{"line":21,"column":42}},"6":{"start":{"line":33,"column":0},"end":{"line":35,"column":1}},"7":{"start":{"line":53,"column":0},"end":{"line":55,"column":2}},"8":{"start":{"line":54,"column":2},"end":{"line":54,"column":48}},"9":{"start":{"line":72,"column":0},"end":{"line":85,"column":1}},"10":{"start":{"line":73,"column":2},"end":{"line":75,"column":3}},"11":{"start":{"line":74,"column":4},"end":{"line":74,"column":79}},"12":{"start":{"line":76,"column":2},"end":{"line":76,"column":52}},"13":{"start":{"line":77,"column":2},"end":{"line":77,"column":30}},"14":{"start":{"line":78,"column":2},"end":{"line":81,"column":3}},"15":{"start":{"line":80,"column":4},"end":{"line":80,"column":42}},"16":{"start":{"line":82,"column":2},"end":{"line":82,"column":20}},"17":{"start":{"line":83,"column":2},"end":{"line":83,"column":21}},"18":{"start":{"line":84,"column":2},"end":{"line":84,"column":24}},"19":{"start":{"line":87,"column":0},"end":{"line":87,"column":63}},"20":{"start":{"line":93,"column":0},"end":{"line":95,"column":2}},"21":{"start":{"line":94,"column":2},"end":{"line":94,"column":20}},"22":{"start":{"line":97,"column":0},"end":{"line":136,"column":2}},"23":{"start":{"line":98,"column":2},"end":{"line":98,"column":28}},"24":{"start":{"line":99,"column":2},"end":{"line":99,"column":18}},"25":{"start":{"line":100,"column":2},"end":{"line":104,"column":3}},"26":{"start":{"line":101,"column":4},"end":{"line":101,"column":21}},"27":{"start":{"line":102,"column":4},"end":{"line":102,"column":26}},"28":{"start":{"line":103,"column":4},"end":{"line":103,"column":40}},"29":{"start":{"line":106,"column":2},"end":{"line":109,"column":3}},"30":{"start":{"line":107,"column":4},"end":{"line":107,"column":36}},"31":{"start":{"line":108,"column":4},"end":{"line":108,"column":26}},"32":{"start":{"line":110,"column":2},"end":{"line":117,"column":3}},"33":{"start":{"line":111,"column":4},"end":{"line":111,"column":21}},"34":{"start":{"line":112,"column":4},"end":{"line":116,"column":5}},"35":{"start":{"line":114,"column":6},"end":{"line":114,"column":13}},"36":{"start":{"line":115,"column":6},"end":{"line":115,"column":16}},"37":{"start":{"line":118,"column":2},"end":{"line":118,"column":32}},"38":{"start":{"line":119,"column":2},"end":{"line":119,"column":24}},"39":{"start":{"line":120,"column":2},"end":{"line":120,"column":44}},"40":{"start":{"line":121,"column":2},"end":{"line":134,"column":3}},"41":{"start":{"line":124,"column":4},"end":{"line":124,"column":36}},"42":{"start":{"line":125,"column":4},"end":{"line":133,"column":5}},"43":{"start":{"line":126,"column":6},"end":{"line":130,"column":35}},"44":{"start":{"line":131,"column":6},"end":{"line":131,"column":41}},"45":{"start":{"line":132,"column":6},"end":{"line":132,"column":37}},"46":{"start":{"line":135,"column":2},"end":{"line":135,"column":16}},"47":{"start":{"line":142,"column":0},"end":{"line":152,"column":2}},"48":{"start":{"line":143,"column":2},"end":{"line":147,"column":3}},"49":{"start":{"line":146,"column":4},"end":{"line":146,"column":48}},"50":{"start":{"line":148,"column":2},"end":{"line":151,"column":37}},"51":{"start":{"line":154,"column":0},"end":{"line":154,"column":48}},"52":{"start":{"line":155,"column":0},"end":{"line":155,"column":66}}},"branchMap":{"1":{"line":73,"type":"if","locations":[{"start":{"line":73,"column":2},"end":{"line":73,"column":2}},{"start":{"line":73,"column":2},"end":{"line":73,"column":2}}]},"2":{"line":76,"type":"binary-expr","locations":[{"start":{"line":76,"column":27},"end":{"line":76,"column":43}},{"start":{"line":76,"column":47},"end":{"line":76,"column":51}}]},"3":{"line":78,"type":"if","locations":[{"start":{"line":78,"column":2},"end":{"line":78,"column":2}},{"start":{"line":78,"column":2},"end":{"line":78,"column":2}}]},"4":{"line":100,"type":"if","locations":[{"start":{"line":100,"column":2},"end":{"line":100,"column":2}},{"start":{"line":100,"column":2},"end":{"line":100,"column":2}}]},"5":{"line":106,"type":"if","locations":[{"start":{"line":106,"column":2},"end":{"line":106,"column":2}},{"start":{"line":106,"column":2},"end":{"line":106,"column":2}}]},"6":{"line":110,"type":"if","locations":[{"start":{"line":110,"column":2},"end":{"line":110,"column":2}},{"start":{"line":110,"column":2},"end":{"line":110,"column":2}}]},"7":{"line":112,"type":"if","locations":[{"start":{"line":112,"column":4},"end":{"line":112,"column":4}},{"start":{"line":112,"column":4},"end":{"line":112,"column":4}}]},"8":{"line":121,"type":"if","locations":[{"start":{"line":121,"column":2},"end":{"line":121,"column":2}},{"start":{"line":121,"column":2},"end":{"line":121,"column":2}}]},"9":{"line":125,"type":"if","locations":[{"start":{"line":125,"column":4},"end":{"line":125,"column":4}},{"start":{"line":125,"column":4},"end":{"line":125,"column":4}}]},"10":{"line":125,"type":"binary-expr","locations":[{"start":{"line":125,"column":8},"end":{"line":125,"column":32}},{"start":{"line":125,"column":36},"end":{"line":125,"column":94}}]},"11":{"line":143,"type":"if","locations":[{"start":{"line":143,"column":2},"end":{"line":143,"column":2}},{"start":{"line":143,"column":2},"end":{"line":143,"column":2}}]}},"code":["'use strict';","","var util = require('util');","var Long = require('../types').Long;","var errors = require('../errors');","","/** @module policies/timestampGeneration */","","/**"," * Defines the maximum date in milliseconds that can be represented in microseconds using Number ((2 ^ 53) / 1000)"," * @const"," * @private"," */","var _maxSafeNumberDate = 9007199254740;","","/**"," * A long representing the value 1000"," * @const"," * @private"," */","var _longOneThousand = Long.fromInt(1000);","","/**"," * Creates a new instance of {@link TimestampGenerator}."," * @classdesc"," * Generates client-side, microsecond-precision query timestamps."," * <p>"," *   Given that Cassandra uses those timestamps to resolve conflicts, implementations should generate"," *   monotonically increasing timestamps for successive invocations of {@link TimestampGenerator.next()}."," * </p>"," * @constructor"," */","function TimestampGenerator() {","","}","","/**"," * Returns the next timestamp."," * <p>"," *   Implementors should enforce increasing monotonicity of timestamps, that is,"," *   a timestamp returned should always be strictly greater that any previously returned"," *   timestamp."," * <p/>"," * <p>"," *   Implementors should strive to achieve microsecond precision in the best possible way,"," *   which is usually largely dependent on the underlying operating system's capabilities."," * </p>"," * @param {Client} client The {@link Client} instance to generate timestamps to."," * @returns {Long|Number|null} the next timestamp (in microseconds). If it's equals to <code>null</code>, it won't be"," * sent by the driver, letting the server to generate the timestamp."," * @abstract"," */","TimestampGenerator.prototype.next = function (client) {","  throw new Error('next() must be implemented');","};","","/**"," * A timestamp generator that guarantees monotonically increasing timestamps and logs warnings when timestamps"," * drift in the future."," * <p>"," *   {@link Date} has millisecond precision and client timestamps require microsecond precision. This generator"," *   keeps track of the last generated timestamp, and if the current time is within the same millisecond as the last,"," *   it fills the microsecond portion of the new timestamp with the value of an incrementing counter."," * </p>"," * @param {Number} [warningThreshold] Determines how far in the future timestamps are allowed to drift before a"," * warning is logged, expressed in milliseconds. Default: <code>1000</code>."," * @param {Number} [minLogInterval] In case of multiple log events, it determines the time separation between log"," * events, expressed in milliseconds. Use 0 to disable. Default: <code>1000</code>."," * @extends {TimestampGenerator}"," * @constructor"," */","function MonotonicTimestampGenerator(warningThreshold, minLogInterval) {","  if (warningThreshold < 0) {","    throw new errors.ArgumentError('warningThreshold can not be lower than 0');","  }","  this._warningThreshold = warningThreshold || 1000;","  this._minLogInterval = 1000;","  if (typeof minLogInterval === 'number') {","    // A value under 1 will disable logging","    this._minLogInterval = minLogInterval;","  }","  this._micros = -1;","  this._lastDate = 0;","  this._lastLogDate = 0;","}","","util.inherits(MonotonicTimestampGenerator, TimestampGenerator);","","/**"," * Returns the current time in milliseconds since UNIX epoch"," * @returns {Number}"," */","MonotonicTimestampGenerator.prototype.getDate = function () {","  return Date.now();","};","","MonotonicTimestampGenerator.prototype.next = function (client) {","  var date = this.getDate();","  var drifted = 0;","  if (date > this._lastDate) {","    this._micros = 0;","    this._lastDate = date;","    return this._generateMicroseconds();","  }","","  if (date < this._lastDate) {","    drifted = this._lastDate - date;","    date = this._lastDate;","  }","  if (++this._micros === 1000) {","    this._micros = 0;","    if (date === this._lastDate) {","      // Move date 1 millisecond into the future","      date++;","      drifted++;","    }","  }","  var lastDate = this._lastDate;","  this._lastDate = date;","  var result = this._generateMicroseconds();","  if (drifted >= this._warningThreshold) {","    // Avoid logging an unbounded amount of times within a clock-skew event or during an interval when more than 1","    // query is being issued by microsecond","    var currentLogDate = Date.now();","    if (this._minLogInterval > 0 && this._lastLogDate + this._minLogInterval <= currentLogDate){","      var message = util.format(","        'Timestamp generated using current date was %d milliseconds behind the last generated timestamp (which ' +","        'millisecond portion was %d), the returned value (%s) is being artificially incremented to guarantee ' +","        'monotonicity.',","        drifted, lastDate, result);","      this._lastLogDate = currentLogDate;","      client.log('warning', message);","    }","  }","  return result;","};","","/**"," * @private"," * @returns {Number|Long}"," */","MonotonicTimestampGenerator.prototype._generateMicroseconds = function () {","  if (this._lastDate < _maxSafeNumberDate) {","    // We are safe until Jun 06 2255, its faster to perform this operations on Number than on Long","    // We hope to have native int64 by then :)","    return this._lastDate * 1000 + this._micros;","  }","  return Long","    .fromNumber(this._lastDate)","    .multiply(_longOneThousand)","    .add(Long.fromInt(this._micros));","};","","exports.TimestampGenerator = TimestampGenerator;","exports.MonotonicTimestampGenerator = MonotonicTimestampGenerator;"],"l":{"3":1,"4":1,"5":1,"14":1,"21":1,"33":1,"53":1,"54":0,"72":1,"73":1,"74":0,"76":1,"77":1,"78":1,"80":0,"82":1,"83":1,"84":1,"87":1,"93":1,"94":0,"97":1,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"106":0,"107":0,"108":0,"110":0,"111":0,"112":0,"114":0,"115":0,"118":0,"119":0,"120":0,"121":0,"124":0,"125":0,"126":0,"131":0,"132":0,"135":0,"142":1,"143":0,"146":0,"148":0,"154":1,"155":1}},"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/client.js":{"path":"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/client.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":1,"24":1,"25":0,"26":1,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":1,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":1,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":1,"74":0,"75":1,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":1,"88":0,"89":0,"90":1,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":1,"112":0,"113":0,"114":0,"115":1,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":1,"128":0,"129":1,"130":1,"131":0,"132":1,"133":0,"134":1,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":1,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":1,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":1,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":1,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":1,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":1,"243":0,"244":0,"245":0,"246":1,"247":1,"248":0,"249":0,"250":0,"251":0,"252":0,"253":0,"254":0,"255":0,"256":0,"257":0,"258":0,"259":0,"260":0,"261":0,"262":0,"263":0,"264":0,"265":0,"266":0,"267":0,"268":0,"269":1,"270":0,"271":0,"272":0,"273":0,"274":0,"275":0,"276":0,"277":0,"278":0,"279":0,"280":0,"281":0,"282":0,"283":0,"284":0,"285":0,"286":1,"287":0,"288":0,"289":0,"290":0,"291":0,"292":0,"293":0,"294":0,"295":0,"296":0,"297":0,"298":0,"299":0,"300":0,"301":0,"302":0,"303":0,"304":1,"305":0,"306":0,"307":1,"308":0,"309":1,"310":0,"311":0,"312":1,"313":0,"314":0,"315":0,"316":0,"317":0,"318":0,"319":0,"320":0,"321":0,"322":0,"323":0,"324":0,"325":1,"326":0,"327":0,"328":0,"329":0,"330":0,"331":0,"332":0,"333":0,"334":0,"335":0,"336":0,"337":1,"338":0,"339":0,"340":0,"341":0,"342":0,"343":1,"344":0,"345":0,"346":0,"347":0,"348":0,"349":0,"350":0,"351":0,"352":0,"353":0,"354":0,"355":0,"356":0,"357":0,"358":0,"359":0,"360":0,"361":0,"362":0,"363":0,"364":0,"365":0,"366":0,"367":0,"368":0,"369":0,"370":0,"371":0,"372":0,"373":0,"374":0,"375":0,"376":0,"377":0,"378":0,"379":0,"380":0,"381":0,"382":0,"383":0,"384":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0,0],"14":[0,0],"15":[0,0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0],"56":[0,0],"57":[0,0],"58":[0,0],"59":[0,0],"60":[0,0],"61":[0,0],"62":[0,0],"63":[0,0],"64":[0,0],"65":[0,0,0,0],"66":[0,0],"67":[0,0,0,0],"68":[0,0],"69":[0,0],"70":[0,0],"71":[0,0],"72":[0,0],"73":[0,0],"74":[0,0],"75":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0},"fnMap":{"1":{"name":"Client","line":253,"loc":{"start":{"line":253,"column":0},"end":{"line":253,"column":25}}},"2":{"name":"(anonymous_2)","line":331,"loc":{"start":{"line":331,"column":27},"end":{"line":331,"column":47}}},"3":{"name":"(anonymous_3)","line":339,"loc":{"start":{"line":339,"column":30},"end":{"line":339,"column":50}}},"4":{"name":"initControlConnection","line":355,"loc":{"start":{"line":355,"column":4},"end":{"line":355,"column":41}}},"5":{"name":"initLoadBalancingPolicy","line":358,"loc":{"start":{"line":358,"column":4},"end":{"line":358,"column":43}}},"6":{"name":"setKeyspace","line":363,"loc":{"start":{"line":363,"column":4},"end":{"line":363,"column":31}}},"7":{"name":"setPoolOptionsAndWarmup","line":369,"loc":{"start":{"line":369,"column":4},"end":{"line":369,"column":43}}},"8":{"name":"connectFinished","line":381,"loc":{"start":{"line":381,"column":5},"end":{"line":381,"column":35}}},"9":{"name":"(anonymous_9)","line":424,"loc":{"start":{"line":424,"column":27},"end":{"line":424,"column":71}}},"10":{"name":"handler","line":430,"loc":{"start":{"line":430,"column":72},"end":{"line":430,"column":93}}},"11":{"name":"(anonymous_11)","line":464,"loc":{"start":{"line":464,"column":27},"end":{"line":464,"column":84}}},"12":{"name":"nextPage","line":477,"loc":{"start":{"line":477,"column":2},"end":{"line":477,"column":22}}},"13":{"name":"pageCallback","line":480,"loc":{"start":{"line":480,"column":2},"end":{"line":480,"column":38}}},"14":{"name":"(anonymous_14)","line":523,"loc":{"start":{"line":523,"column":26},"end":{"line":523,"column":70}}},"15":{"name":"onFinish","line":529,"loc":{"start":{"line":529,"column":2},"end":{"line":529,"column":33}}},"16":{"name":"pageValve","line":536,"loc":{"start":{"line":536,"column":26},"end":{"line":536,"column":47}}},"17":{"name":"rowCallback","line":552,"loc":{"start":{"line":552,"column":39},"end":{"line":552,"column":68}}},"18":{"name":"eachRowFinished","line":554,"loc":{"start":{"line":554,"column":5},"end":{"line":554,"column":43}}},"19":{"name":"eachRowFinishedImmediate","line":557,"loc":{"start":{"line":557,"column":26},"end":{"line":557,"column":62}}},"20":{"name":"(anonymous_20)","line":578,"loc":{"start":{"line":578,"column":25},"end":{"line":578,"column":63}}},"21":{"name":"handler","line":580,"loc":{"start":{"line":580,"column":72},"end":{"line":580,"column":93}}},"22":{"name":"(anonymous_22)","line":591,"loc":{"start":{"line":591,"column":28},"end":{"line":591,"column":66}}},"23":{"name":"afterConnect","line":598,"loc":{"start":{"line":598,"column":15},"end":{"line":598,"column":42}}},"24":{"name":"(anonymous_24)","line":617,"loc":{"start":{"line":617,"column":31},"end":{"line":617,"column":58}}},"25":{"name":"(anonymous_25)","line":631,"loc":{"start":{"line":631,"column":28},"end":{"line":631,"column":48}}},"26":{"name":"(anonymous_26)","line":639,"loc":{"start":{"line":639,"column":31},"end":{"line":639,"column":51}}},"27":{"name":"doShutdown","line":641,"loc":{"start":{"line":641,"column":2},"end":{"line":641,"column":24}}},"28":{"name":"(anonymous_28)","line":647,"loc":{"start":{"line":647,"column":22},"end":{"line":647,"column":41}}},"29":{"name":"(anonymous_29)","line":672,"loc":{"start":{"line":672,"column":43},"end":{"line":672,"column":75}}},"30":{"name":"condition","line":682,"loc":{"start":{"line":682,"column":15},"end":{"line":682,"column":36}}},"31":{"name":"fn","line":684,"loc":{"start":{"line":684,"column":5},"end":{"line":684,"column":23}}},"32":{"name":"(anonymous_32)","line":686,"loc":{"start":{"line":686,"column":6},"end":{"line":686,"column":22}}},"33":{"name":"(anonymous_33)","line":687,"loc":{"start":{"line":687,"column":57},"end":{"line":687,"column":80}}},"34":{"name":"(anonymous_34)","line":692,"loc":{"start":{"line":692,"column":6},"end":{"line":692,"column":22}}},"35":{"name":"seriesEnded","line":695,"loc":{"start":{"line":695,"column":7},"end":{"line":695,"column":47}}},"36":{"name":"(anonymous_36)","line":725,"loc":{"start":{"line":725,"column":51},"end":{"line":725,"column":90}}},"37":{"name":"agreementCb","line":727,"loc":{"start":{"line":727,"column":43},"end":{"line":727,"column":69}}},"38":{"name":"(anonymous_38)","line":748,"loc":{"start":{"line":748,"column":33},"end":{"line":748,"column":77}}},"39":{"name":"connecting","line":758,"loc":{"start":{"line":758,"column":4},"end":{"line":758,"column":30}}},"40":{"name":"settingOptions","line":761,"loc":{"start":{"line":761,"column":4},"end":{"line":761,"column":34}}},"41":{"name":"setOptionsCallback","line":762,"loc":{"start":{"line":762,"column":51},"end":{"line":762,"column":87}}},"42":{"name":"sendingQuery","line":767,"loc":{"start":{"line":767,"column":4},"end":{"line":767,"column":32}}},"43":{"name":"(anonymous_43)","line":786,"loc":{"start":{"line":786,"column":38},"end":{"line":786,"column":82}}},"44":{"name":"connecting","line":791,"loc":{"start":{"line":791,"column":4},"end":{"line":791,"column":30}}},"45":{"name":"preparing","line":794,"loc":{"start":{"line":794,"column":4},"end":{"line":794,"column":29}}},"46":{"name":"(anonymous_46)","line":795,"loc":{"start":{"line":795,"column":40},"end":{"line":795,"column":62}}},"47":{"name":"settingOptions","line":801,"loc":{"start":{"line":801,"column":4},"end":{"line":801,"column":34}}},"48":{"name":"(anonymous_48)","line":802,"loc":{"start":{"line":802,"column":51},"end":{"line":802,"column":69}}},"49":{"name":"sendingExecute","line":807,"loc":{"start":{"line":807,"column":4},"end":{"line":807,"column":34}}},"50":{"name":"(anonymous_50)","line":827,"loc":{"start":{"line":827,"column":34},"end":{"line":827,"column":72}}},"51":{"name":"batchQueryMap","line":829,"loc":{"start":{"line":829,"column":24},"end":{"line":829,"column":53}}},"52":{"name":"afterWait","line":833,"loc":{"start":{"line":833,"column":40},"end":{"line":833,"column":75}}},"53":{"name":"(anonymous_53)","line":844,"loc":{"start":{"line":844,"column":29},"end":{"line":844,"column":49}}},"54":{"name":"prepareCallback","line":847,"loc":{"start":{"line":847,"column":26},"end":{"line":847,"column":66}}},"55":{"name":"(anonymous_55)","line":859,"loc":{"start":{"line":859,"column":71},"end":{"line":859,"column":86}}},"56":{"name":"(anonymous_56)","line":869,"loc":{"start":{"line":869,"column":30},"end":{"line":869,"column":68}}},"57":{"name":"(anonymous_57)","line":881,"loc":{"start":{"line":881,"column":43},"end":{"line":881,"column":72}}},"58":{"name":"doWait","line":882,"loc":{"start":{"line":882,"column":2},"end":{"line":882,"column":30}}},"59":{"name":"waitIterator","line":885,"loc":{"start":{"line":885,"column":40},"end":{"line":885,"column":75}}},"60":{"name":"waitFinished","line":898,"loc":{"start":{"line":898,"column":7},"end":{"line":898,"column":34}}},"61":{"name":"pendingIOCallback","line":907,"loc":{"start":{"line":907,"column":28},"end":{"line":907,"column":57}}},"62":{"name":"(anonymous_62)","line":915,"loc":{"start":{"line":915,"column":18},"end":{"line":915,"column":34}}},"63":{"name":"validateBatchQueries","line":925,"loc":{"start":{"line":925,"column":0},"end":{"line":925,"column":39}}},"64":{"name":"(anonymous_64)","line":960,"loc":{"start":{"line":960,"column":32},"end":{"line":960,"column":68}}},"65":{"name":"(anonymous_65)","line":973,"loc":{"start":{"line":973,"column":30},"end":{"line":973,"column":53}}},"66":{"name":"(anonymous_66)","line":990,"loc":{"start":{"line":990,"column":32},"end":{"line":990,"column":52}}},"67":{"name":"(anonymous_67)","line":999,"loc":{"start":{"line":999,"column":37},"end":{"line":999,"column":49}}},"68":{"name":"getHostUpListener","line":1001,"loc":{"start":{"line":1001,"column":2},"end":{"line":1001,"column":41}}},"69":{"name":"hostUpListener","line":1002,"loc":{"start":{"line":1002,"column":12},"end":{"line":1002,"column":38}}},"70":{"name":"getHostDownListener","line":1006,"loc":{"start":{"line":1006,"column":2},"end":{"line":1006,"column":43}}},"71":{"name":"hostDownListener","line":1007,"loc":{"start":{"line":1007,"column":12},"end":{"line":1007,"column":40}}},"72":{"name":"hostAddedListener","line":1012,"loc":{"start":{"line":1012,"column":23},"end":{"line":1012,"column":53}}},"73":{"name":"hostRemovedListener","line":1018,"loc":{"start":{"line":1018,"column":26},"end":{"line":1018,"column":58}}},"74":{"name":"(anonymous_74)","line":1023,"loc":{"start":{"line":1023,"column":21},"end":{"line":1023,"column":34}}},"75":{"name":"(anonymous_75)","line":1029,"loc":{"start":{"line":1029,"column":27},"end":{"line":1029,"column":47}}},"76":{"name":"warmupEachCallback","line":1032,"loc":{"start":{"line":1032,"column":46},"end":{"line":1032,"column":83}}},"77":{"name":"(anonymous_77)","line":1039,"loc":{"start":{"line":1039,"column":17},"end":{"line":1039,"column":32}}},"78":{"name":"(anonymous_78)","line":1054,"loc":{"start":{"line":1054,"column":31},"end":{"line":1054,"column":43}}},"79":{"name":"(anonymous_79)","line":1071,"loc":{"start":{"line":1071,"column":36},"end":{"line":1071,"column":79}}},"80":{"name":"fillRoutingKeys","line":1080,"loc":{"start":{"line":1080,"column":4},"end":{"line":1080,"column":35}}},"81":{"name":"(anonymous_81)","line":1091,"loc":{"start":{"line":1091,"column":56},"end":{"line":1091,"column":82}}},"82":{"name":"(anonymous_82)","line":1101,"loc":{"start":{"line":1101,"column":61},"end":{"line":1101,"column":74}}},"83":{"name":"adaptParameterNames","line":1109,"loc":{"start":{"line":1109,"column":4},"end":{"line":1109,"column":39}}},"84":{"name":"(anonymous_84)","line":1114,"loc":{"start":{"line":1114,"column":43},"end":{"line":1114,"column":56}}},"85":{"name":"adaptParameterTypes","line":1127,"loc":{"start":{"line":1127,"column":4},"end":{"line":1127,"column":39}}},"86":{"name":"finishSettingOptions","line":1135,"loc":{"start":{"line":1135,"column":5},"end":{"line":1135,"column":40}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":31}},"2":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":34}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":36}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":31}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":56}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":67}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":50}},"9":{"start":{"line":11,"column":0},"end":{"line":11,"column":37}},"10":{"start":{"line":12,"column":0},"end":{"line":12,"column":48}},"11":{"start":{"line":18,"column":0},"end":{"line":18,"column":21}},"12":{"start":{"line":253,"column":0},"end":{"line":279,"column":1}},"13":{"start":{"line":254,"column":2},"end":{"line":254,"column":33}},"14":{"start":{"line":255,"column":2},"end":{"line":255,"column":85}},"15":{"start":{"line":256,"column":2},"end":{"line":256,"column":93}},"16":{"start":{"line":257,"column":2},"end":{"line":259,"column":4}},"17":{"start":{"line":261,"column":2},"end":{"line":261,"column":26}},"18":{"start":{"line":262,"column":2},"end":{"line":262,"column":25}},"19":{"start":{"line":263,"column":2},"end":{"line":263,"column":30}},"20":{"start":{"line":268,"column":2},"end":{"line":268,"column":35}},"21":{"start":{"line":273,"column":2},"end":{"line":273,"column":50}},"22":{"start":{"line":278,"column":2},"end":{"line":278,"column":20}},"23":{"start":{"line":281,"column":0},"end":{"line":281,"column":43}},"24":{"start":{"line":331,"column":0},"end":{"line":333,"column":2}},"25":{"start":{"line":332,"column":2},"end":{"line":332,"column":89}},"26":{"start":{"line":339,"column":0},"end":{"line":390,"column":2}},"27":{"start":{"line":340,"column":2},"end":{"line":342,"column":3}},"28":{"start":{"line":341,"column":4},"end":{"line":341,"column":22}},"29":{"start":{"line":343,"column":2},"end":{"line":346,"column":3}},"30":{"start":{"line":345,"column":4},"end":{"line":345,"column":105}},"31":{"start":{"line":347,"column":2},"end":{"line":347,"column":35}},"32":{"start":{"line":348,"column":2},"end":{"line":351,"column":3}},"33":{"start":{"line":350,"column":4},"end":{"line":350,"column":11}},"34":{"start":{"line":352,"column":2},"end":{"line":352,"column":25}},"35":{"start":{"line":353,"column":2},"end":{"line":353,"column":18}},"36":{"start":{"line":354,"column":2},"end":{"line":389,"column":5}},"37":{"start":{"line":356,"column":6},"end":{"line":356,"column":40}},"38":{"start":{"line":359,"column":6},"end":{"line":359,"column":48}},"39":{"start":{"line":360,"column":6},"end":{"line":360,"column":31}},"40":{"start":{"line":361,"column":6},"end":{"line":361,"column":55}},"41":{"start":{"line":364,"column":6},"end":{"line":366,"column":7}},"42":{"start":{"line":365,"column":8},"end":{"line":365,"column":22}},"43":{"start":{"line":367,"column":6},"end":{"line":367,"column":30}},"44":{"start":{"line":371,"column":6},"end":{"line":371,"column":74}},"45":{"start":{"line":372,"column":6},"end":{"line":374,"column":7}},"46":{"start":{"line":373,"column":8},"end":{"line":373,"column":72}},"47":{"start":{"line":375,"column":6},"end":{"line":375,"column":124}},"48":{"start":{"line":376,"column":6},"end":{"line":378,"column":7}},"49":{"start":{"line":377,"column":8},"end":{"line":377,"column":22}},"50":{"start":{"line":379,"column":6},"end":{"line":379,"column":25}},"51":{"start":{"line":382,"column":4},"end":{"line":382,"column":26}},"52":{"start":{"line":383,"column":4},"end":{"line":383,"column":28}},"53":{"start":{"line":384,"column":4},"end":{"line":384,"column":32}},"54":{"start":{"line":385,"column":4},"end":{"line":388,"column":5}},"55":{"start":{"line":387,"column":6},"end":{"line":387,"column":67}},"56":{"start":{"line":424,"column":0},"end":{"line":434,"column":2}},"57":{"start":{"line":426,"column":2},"end":{"line":426,"column":54}},"58":{"start":{"line":427,"column":2},"end":{"line":429,"column":3}},"59":{"start":{"line":428,"column":4},"end":{"line":428,"column":58}},"60":{"start":{"line":430,"column":2},"end":{"line":433,"column":5}},"61":{"start":{"line":431,"column":4},"end":{"line":431,"column":62}},"62":{"start":{"line":432,"column":4},"end":{"line":432,"column":51}},"63":{"start":{"line":464,"column":0},"end":{"line":501,"column":2}},"64":{"start":{"line":465,"column":2},"end":{"line":472,"column":3}},"65":{"start":{"line":466,"column":4},"end":{"line":466,"column":45}},"66":{"start":{"line":467,"column":4},"end":{"line":467,"column":44}},"67":{"start":{"line":470,"column":4},"end":{"line":470,"column":56}},"68":{"start":{"line":471,"column":4},"end":{"line":471,"column":69}},"69":{"start":{"line":473,"column":2},"end":{"line":473,"column":56}},"70":{"start":{"line":474,"column":2},"end":{"line":474,"column":73}},"71":{"start":{"line":475,"column":2},"end":{"line":475,"column":18}},"72":{"start":{"line":476,"column":2},"end":{"line":476,"column":20}},"73":{"start":{"line":477,"column":2},"end":{"line":479,"column":3}},"74":{"start":{"line":478,"column":4},"end":{"line":478,"column":61}},"75":{"start":{"line":480,"column":2},"end":{"line":499,"column":3}},"76":{"start":{"line":481,"column":4},"end":{"line":483,"column":5}},"77":{"start":{"line":482,"column":6},"end":{"line":482,"column":27}},"78":{"start":{"line":485,"column":4},"end":{"line":485,"column":34}},"79":{"start":{"line":486,"column":4},"end":{"line":495,"column":5}},"80":{"start":{"line":488,"column":6},"end":{"line":488,"column":48}},"81":{"start":{"line":489,"column":6},"end":{"line":492,"column":7}},"82":{"start":{"line":491,"column":8},"end":{"line":491,"column":26}},"83":{"start":{"line":494,"column":6},"end":{"line":494,"column":33}},"84":{"start":{"line":497,"column":4},"end":{"line":497,"column":33}},"85":{"start":{"line":498,"column":4},"end":{"line":498,"column":27}},"86":{"start":{"line":500,"column":2},"end":{"line":500,"column":59}},"87":{"start":{"line":523,"column":0},"end":{"line":565,"column":2}},"88":{"start":{"line":524,"column":2},"end":{"line":524,"column":54}},"89":{"start":{"line":528,"column":2},"end":{"line":528,"column":63}},"90":{"start":{"line":529,"column":2},"end":{"line":550,"column":3}},"91":{"start":{"line":530,"column":4},"end":{"line":532,"column":5}},"92":{"start":{"line":531,"column":6},"end":{"line":531,"column":38}},"93":{"start":{"line":533,"column":4},"end":{"line":545,"column":5}},"94":{"start":{"line":536,"column":6},"end":{"line":543,"column":9}},"95":{"start":{"line":537,"column":8},"end":{"line":542,"column":9}},"96":{"start":{"line":538,"column":10},"end":{"line":538,"column":28}},"97":{"start":{"line":541,"column":10},"end":{"line":541,"column":42}},"98":{"start":{"line":544,"column":6},"end":{"line":544,"column":13}},"99":{"start":{"line":547,"column":4},"end":{"line":547,"column":30}},"100":{"start":{"line":548,"column":4},"end":{"line":548,"column":27}},"101":{"start":{"line":549,"column":4},"end":{"line":549,"column":18}},"102":{"start":{"line":551,"column":2},"end":{"line":551,"column":18}},"103":{"start":{"line":552,"column":2},"end":{"line":562,"column":5}},"104":{"start":{"line":553,"column":4},"end":{"line":553,"column":26}},"105":{"start":{"line":555,"column":4},"end":{"line":560,"column":5}},"106":{"start":{"line":557,"column":6},"end":{"line":559,"column":9}},"107":{"start":{"line":558,"column":8},"end":{"line":558,"column":30}},"108":{"start":{"line":561,"column":4},"end":{"line":561,"column":26}},"109":{"start":{"line":563,"column":2},"end":{"line":563,"column":15}},"110":{"start":{"line":564,"column":2},"end":{"line":564,"column":22}},"111":{"start":{"line":578,"column":0},"end":{"line":583,"column":2}},"112":{"start":{"line":579,"column":2},"end":{"line":579,"column":33}},"113":{"start":{"line":580,"column":2},"end":{"line":582,"column":5}},"114":{"start":{"line":581,"column":4},"end":{"line":581,"column":40}},"115":{"start":{"line":591,"column":0},"end":{"line":609,"column":2}},"116":{"start":{"line":592,"column":2},"end":{"line":592,"column":18}},"117":{"start":{"line":593,"column":2},"end":{"line":593,"column":42}},"118":{"start":{"line":594,"column":2},"end":{"line":594,"column":72}},"119":{"start":{"line":595,"column":2},"end":{"line":597,"column":3}},"120":{"start":{"line":596,"column":4},"end":{"line":596,"column":29}},"121":{"start":{"line":598,"column":2},"end":{"line":608,"column":5}},"122":{"start":{"line":599,"column":4},"end":{"line":601,"column":5}},"123":{"start":{"line":600,"column":6},"end":{"line":600,"column":27}},"124":{"start":{"line":602,"column":4},"end":{"line":605,"column":5}},"125":{"start":{"line":604,"column":6},"end":{"line":604,"column":61}},"126":{"start":{"line":607,"column":4},"end":{"line":607,"column":48}},"127":{"start":{"line":617,"column":0},"end":{"line":619,"column":2}},"128":{"start":{"line":618,"column":2},"end":{"line":618,"column":52}},"129":{"start":{"line":621,"column":0},"end":{"line":621,"column":33}},"130":{"start":{"line":631,"column":0},"end":{"line":633,"column":2}},"131":{"start":{"line":632,"column":2},"end":{"line":632,"column":89}},"132":{"start":{"line":639,"column":0},"end":{"line":664,"column":2}},"133":{"start":{"line":640,"column":2},"end":{"line":640,"column":18}},"134":{"start":{"line":641,"column":2},"end":{"line":650,"column":3}},"135":{"start":{"line":642,"column":4},"end":{"line":642,"column":27}},"136":{"start":{"line":643,"column":4},"end":{"line":643,"column":31}},"137":{"start":{"line":644,"column":4},"end":{"line":644,"column":36}},"138":{"start":{"line":645,"column":4},"end":{"line":645,"column":38}},"139":{"start":{"line":647,"column":4},"end":{"line":649,"column":17}},"140":{"start":{"line":648,"column":6},"end":{"line":648,"column":30}},"141":{"start":{"line":651,"column":2},"end":{"line":651,"column":36}},"142":{"start":{"line":652,"column":2},"end":{"line":652,"column":36}},"143":{"start":{"line":653,"column":2},"end":{"line":657,"column":3}},"144":{"start":{"line":655,"column":4},"end":{"line":655,"column":27}},"145":{"start":{"line":656,"column":4},"end":{"line":656,"column":22}},"146":{"start":{"line":658,"column":2},"end":{"line":662,"column":3}},"147":{"start":{"line":659,"column":4},"end":{"line":659,"column":58}},"148":{"start":{"line":661,"column":4},"end":{"line":661,"column":46}},"149":{"start":{"line":663,"column":2},"end":{"line":663,"column":15}},"150":{"start":{"line":672,"column":0},"end":{"line":715,"column":2}},"151":{"start":{"line":673,"column":2},"end":{"line":675,"column":3}},"152":{"start":{"line":674,"column":4},"end":{"line":674,"column":34}},"153":{"start":{"line":676,"column":2},"end":{"line":676,"column":18}},"154":{"start":{"line":677,"column":2},"end":{"line":677,"column":25}},"155":{"start":{"line":678,"column":2},"end":{"line":678,"column":86}},"156":{"start":{"line":679,"column":2},"end":{"line":679,"column":51}},"157":{"start":{"line":680,"column":2},"end":{"line":680,"column":20}},"158":{"start":{"line":681,"column":2},"end":{"line":681,"column":19}},"159":{"start":{"line":682,"column":2},"end":{"line":714,"column":15}},"160":{"start":{"line":683,"column":4},"end":{"line":683,"column":64}},"161":{"start":{"line":685,"column":4},"end":{"line":713,"column":7}},"162":{"start":{"line":687,"column":8},"end":{"line":690,"column":11}},"163":{"start":{"line":688,"column":10},"end":{"line":688,"column":32}},"164":{"start":{"line":689,"column":10},"end":{"line":689,"column":20}},"165":{"start":{"line":693,"column":8},"end":{"line":693,"column":62}},"166":{"start":{"line":696,"column":6},"end":{"line":698,"column":7}},"167":{"start":{"line":697,"column":8},"end":{"line":697,"column":25}},"168":{"start":{"line":700,"column":6},"end":{"line":700,"column":27}},"169":{"start":{"line":701,"column":6},"end":{"line":701,"column":45}},"170":{"start":{"line":702,"column":6},"end":{"line":707,"column":7}},"171":{"start":{"line":703,"column":8},"end":{"line":706,"column":9}},"172":{"start":{"line":704,"column":10},"end":{"line":704,"column":32}},"173":{"start":{"line":705,"column":10},"end":{"line":705,"column":16}},"174":{"start":{"line":708,"column":6},"end":{"line":710,"column":7}},"175":{"start":{"line":709,"column":8},"end":{"line":709,"column":50}},"176":{"start":{"line":712,"column":6},"end":{"line":712,"column":28}},"177":{"start":{"line":725,"column":0},"end":{"line":738,"column":2}},"178":{"start":{"line":726,"column":2},"end":{"line":726,"column":18}},"179":{"start":{"line":727,"column":2},"end":{"line":737,"column":5}},"180":{"start":{"line":728,"column":4},"end":{"line":731,"column":5}},"181":{"start":{"line":730,"column":6},"end":{"line":730,"column":106}},"182":{"start":{"line":732,"column":4},"end":{"line":734,"column":5}},"183":{"start":{"line":733,"column":6},"end":{"line":733,"column":24}},"184":{"start":{"line":736,"column":4},"end":{"line":736,"column":69}},"185":{"start":{"line":748,"column":0},"end":{"line":776,"column":2}},"186":{"start":{"line":750,"column":2},"end":{"line":752,"column":3}},"187":{"start":{"line":751,"column":4},"end":{"line":751,"column":29}},"188":{"start":{"line":753,"column":2},"end":{"line":755,"column":3}},"189":{"start":{"line":754,"column":4},"end":{"line":754,"column":69}},"190":{"start":{"line":756,"column":2},"end":{"line":756,"column":18}},"191":{"start":{"line":757,"column":2},"end":{"line":775,"column":15}},"192":{"start":{"line":759,"column":6},"end":{"line":759,"column":25}},"193":{"start":{"line":762,"column":6},"end":{"line":765,"column":9}},"194":{"start":{"line":763,"column":8},"end":{"line":763,"column":19}},"195":{"start":{"line":764,"column":8},"end":{"line":764,"column":18}},"196":{"start":{"line":768,"column":6},"end":{"line":771,"column":17}},"197":{"start":{"line":772,"column":6},"end":{"line":772,"column":100}},"198":{"start":{"line":773,"column":6},"end":{"line":773,"column":43}},"199":{"start":{"line":786,"column":0},"end":{"line":818,"column":2}},"200":{"start":{"line":787,"column":2},"end":{"line":787,"column":14}},"201":{"start":{"line":788,"column":2},"end":{"line":788,"column":11}},"202":{"start":{"line":789,"column":2},"end":{"line":789,"column":18}},"203":{"start":{"line":790,"column":2},"end":{"line":817,"column":15}},"204":{"start":{"line":792,"column":6},"end":{"line":792,"column":25}},"205":{"start":{"line":795,"column":6},"end":{"line":799,"column":9}},"206":{"start":{"line":796,"column":8},"end":{"line":796,"column":21}},"207":{"start":{"line":797,"column":8},"end":{"line":797,"column":17}},"208":{"start":{"line":798,"column":8},"end":{"line":798,"column":18}},"209":{"start":{"line":802,"column":6},"end":{"line":805,"column":9}},"210":{"start":{"line":803,"column":8},"end":{"line":803,"column":19}},"211":{"start":{"line":804,"column":8},"end":{"line":804,"column":18}},"212":{"start":{"line":808,"column":6},"end":{"line":812,"column":17}},"213":{"start":{"line":813,"column":6},"end":{"line":813,"column":28}},"214":{"start":{"line":814,"column":6},"end":{"line":814,"column":100}},"215":{"start":{"line":815,"column":6},"end":{"line":815,"column":43}},"216":{"start":{"line":827,"column":0},"end":{"line":866,"column":2}},"217":{"start":{"line":828,"column":2},"end":{"line":828,"column":18}},"218":{"start":{"line":829,"column":2},"end":{"line":831,"column":5}},"219":{"start":{"line":830,"column":4},"end":{"line":830,"column":117}},"220":{"start":{"line":833,"column":2},"end":{"line":865,"column":5}},"221":{"start":{"line":834,"column":4},"end":{"line":836,"column":5}},"222":{"start":{"line":835,"column":6},"end":{"line":835,"column":27}},"223":{"start":{"line":837,"column":4},"end":{"line":837,"column":50}},"224":{"start":{"line":838,"column":4},"end":{"line":841,"column":5}},"225":{"start":{"line":840,"column":6},"end":{"line":840,"column":57}},"226":{"start":{"line":843,"column":4},"end":{"line":843,"column":60}},"227":{"start":{"line":844,"column":4},"end":{"line":856,"column":7}},"228":{"start":{"line":845,"column":6},"end":{"line":845,"column":34}},"229":{"start":{"line":846,"column":6},"end":{"line":846,"column":28}},"230":{"start":{"line":847,"column":6},"end":{"line":855,"column":8}},"231":{"start":{"line":848,"column":8},"end":{"line":848,"column":31}},"232":{"start":{"line":849,"column":8},"end":{"line":851,"column":9}},"233":{"start":{"line":850,"column":10},"end":{"line":850,"column":44}},"234":{"start":{"line":852,"column":8},"end":{"line":852,"column":35}},"235":{"start":{"line":853,"column":8},"end":{"line":853,"column":34}},"236":{"start":{"line":854,"column":8},"end":{"line":854,"column":61}},"237":{"start":{"line":857,"column":4},"end":{"line":857,"column":98}},"238":{"start":{"line":859,"column":4},"end":{"line":864,"column":7}},"239":{"start":{"line":860,"column":6},"end":{"line":862,"column":7}},"240":{"start":{"line":861,"column":8},"end":{"line":861,"column":29}},"241":{"start":{"line":863,"column":6},"end":{"line":863,"column":57}},"242":{"start":{"line":869,"column":0},"end":{"line":873,"column":2}},"243":{"start":{"line":870,"column":2},"end":{"line":870,"column":60}},"244":{"start":{"line":871,"column":2},"end":{"line":871,"column":96}},"245":{"start":{"line":872,"column":2},"end":{"line":872,"column":43}},"246":{"start":{"line":881,"column":0},"end":{"line":919,"column":2}},"247":{"start":{"line":882,"column":2},"end":{"line":913,"column":3}},"248":{"start":{"line":883,"column":4},"end":{"line":883,"column":23}},"249":{"start":{"line":884,"column":4},"end":{"line":884,"column":26}},"250":{"start":{"line":885,"column":4},"end":{"line":912,"column":7}},"251":{"start":{"line":886,"column":6},"end":{"line":886,"column":35}},"252":{"start":{"line":887,"column":6},"end":{"line":890,"column":7}},"253":{"start":{"line":889,"column":8},"end":{"line":889,"column":22}},"254":{"start":{"line":891,"column":6},"end":{"line":895,"column":7}},"255":{"start":{"line":893,"column":8},"end":{"line":893,"column":25}},"256":{"start":{"line":894,"column":8},"end":{"line":894,"column":43}},"257":{"start":{"line":896,"column":6},"end":{"line":896,"column":30}},"258":{"start":{"line":897,"column":6},"end":{"line":897,"column":13}},"259":{"start":{"line":899,"column":6},"end":{"line":902,"column":7}},"260":{"start":{"line":901,"column":8},"end":{"line":901,"column":29}},"261":{"start":{"line":903,"column":6},"end":{"line":910,"column":7}},"262":{"start":{"line":907,"column":8},"end":{"line":909,"column":11}},"263":{"start":{"line":908,"column":10},"end":{"line":908,"column":28}},"264":{"start":{"line":911,"column":6},"end":{"line":911,"column":32}},"265":{"start":{"line":914,"column":2},"end":{"line":914,"column":22}},"266":{"start":{"line":915,"column":2},"end":{"line":917,"column":5}},"267":{"start":{"line":916,"column":4},"end":{"line":916,"column":39}},"268":{"start":{"line":918,"column":2},"end":{"line":918,"column":21}},"269":{"start":{"line":925,"column":0},"end":{"line":948,"column":1}},"270":{"start":{"line":926,"column":2},"end":{"line":928,"column":3}},"271":{"start":{"line":927,"column":4},"end":{"line":927,"column":86}},"272":{"start":{"line":929,"column":2},"end":{"line":931,"column":3}},"273":{"start":{"line":930,"column":4},"end":{"line":930,"column":93}},"274":{"start":{"line":932,"column":2},"end":{"line":932,"column":48}},"275":{"start":{"line":933,"column":2},"end":{"line":946,"column":3}},"276":{"start":{"line":934,"column":4},"end":{"line":934,"column":26}},"277":{"start":{"line":935,"column":4},"end":{"line":937,"column":5}},"278":{"start":{"line":936,"column":6},"end":{"line":936,"column":82}},"279":{"start":{"line":938,"column":4},"end":{"line":938,"column":27}},"280":{"start":{"line":939,"column":4},"end":{"line":941,"column":5}},"281":{"start":{"line":940,"column":6},"end":{"line":940,"column":19}},"282":{"start":{"line":942,"column":4},"end":{"line":944,"column":5}},"283":{"start":{"line":943,"column":6},"end":{"line":943,"column":82}},"284":{"start":{"line":945,"column":4},"end":{"line":945,"column":60}},"285":{"start":{"line":947,"column":2},"end":{"line":947,"column":23}},"286":{"start":{"line":960,"column":0},"end":{"line":983,"column":2}},"287":{"start":{"line":961,"column":2},"end":{"line":961,"column":65}},"288":{"start":{"line":962,"column":2},"end":{"line":964,"column":3}},"289":{"start":{"line":963,"column":4},"end":{"line":963,"column":51}},"290":{"start":{"line":965,"column":2},"end":{"line":965,"column":34}},"291":{"start":{"line":966,"column":2},"end":{"line":969,"column":3}},"292":{"start":{"line":968,"column":4},"end":{"line":968,"column":11}},"293":{"start":{"line":970,"column":2},"end":{"line":970,"column":24}},"294":{"start":{"line":971,"column":2},"end":{"line":971,"column":51}},"295":{"start":{"line":972,"column":2},"end":{"line":972,"column":96}},"296":{"start":{"line":973,"column":2},"end":{"line":982,"column":5}},"297":{"start":{"line":974,"column":4},"end":{"line":974,"column":27}},"298":{"start":{"line":975,"column":4},"end":{"line":978,"column":5}},"299":{"start":{"line":976,"column":6},"end":{"line":976,"column":24}},"300":{"start":{"line":977,"column":6},"end":{"line":977,"column":40}},"301":{"start":{"line":979,"column":4},"end":{"line":979,"column":29}},"302":{"start":{"line":980,"column":4},"end":{"line":980,"column":28}},"303":{"start":{"line":981,"column":4},"end":{"line":981,"column":57}},"304":{"start":{"line":990,"column":0},"end":{"line":993,"column":2}},"305":{"start":{"line":991,"column":2},"end":{"line":991,"column":107}},"306":{"start":{"line":992,"column":2},"end":{"line":992,"column":32}},"307":{"start":{"line":999,"column":0},"end":{"line":1027,"column":2}},"308":{"start":{"line":1000,"column":2},"end":{"line":1000,"column":18}},"309":{"start":{"line":1001,"column":2},"end":{"line":1005,"column":3}},"310":{"start":{"line":1002,"column":4},"end":{"line":1004,"column":7}},"311":{"start":{"line":1003,"column":6},"end":{"line":1003,"column":32}},"312":{"start":{"line":1006,"column":2},"end":{"line":1010,"column":3}},"313":{"start":{"line":1007,"column":4},"end":{"line":1009,"column":7}},"314":{"start":{"line":1008,"column":6},"end":{"line":1008,"column":34}},"315":{"start":{"line":1012,"column":2},"end":{"line":1016,"column":5}},"316":{"start":{"line":1013,"column":4},"end":{"line":1013,"column":43}},"317":{"start":{"line":1014,"column":4},"end":{"line":1014,"column":47}},"318":{"start":{"line":1015,"column":4},"end":{"line":1015,"column":28}},"319":{"start":{"line":1018,"column":2},"end":{"line":1021,"column":5}},"320":{"start":{"line":1019,"column":4},"end":{"line":1019,"column":27}},"321":{"start":{"line":1020,"column":4},"end":{"line":1020,"column":31}},"322":{"start":{"line":1023,"column":2},"end":{"line":1026,"column":5}},"323":{"start":{"line":1024,"column":4},"end":{"line":1024,"column":43}},"324":{"start":{"line":1025,"column":4},"end":{"line":1025,"column":47}},"325":{"start":{"line":1029,"column":0},"end":{"line":1048,"column":2}},"326":{"start":{"line":1030,"column":2},"end":{"line":1030,"column":18}},"327":{"start":{"line":1031,"column":2},"end":{"line":1031,"column":34}},"328":{"start":{"line":1032,"column":2},"end":{"line":1047,"column":15}},"329":{"start":{"line":1033,"column":4},"end":{"line":1033,"column":21}},"330":{"start":{"line":1034,"column":4},"end":{"line":1034,"column":54}},"331":{"start":{"line":1035,"column":4},"end":{"line":1038,"column":5}},"332":{"start":{"line":1037,"column":6},"end":{"line":1037,"column":20}},"333":{"start":{"line":1039,"column":4},"end":{"line":1046,"column":7}},"334":{"start":{"line":1040,"column":6},"end":{"line":1044,"column":7}},"335":{"start":{"line":1043,"column":8},"end":{"line":1043,"column":112}},"336":{"start":{"line":1045,"column":6},"end":{"line":1045,"column":13}},"337":{"start":{"line":1054,"column":0},"end":{"line":1061,"column":2}},"338":{"start":{"line":1055,"column":2},"end":{"line":1055,"column":14}},"339":{"start":{"line":1056,"column":2},"end":{"line":1056,"column":48}},"340":{"start":{"line":1057,"column":2},"end":{"line":1059,"column":3}},"341":{"start":{"line":1058,"column":4},"end":{"line":1058,"column":67}},"342":{"start":{"line":1060,"column":2},"end":{"line":1060,"column":17}},"343":{"start":{"line":1071,"column":0},"end":{"line":1153,"column":2}},"344":{"start":{"line":1072,"column":2},"end":{"line":1072,"column":63}},"345":{"start":{"line":1073,"column":2},"end":{"line":1076,"column":3}},"346":{"start":{"line":1075,"column":4},"end":{"line":1075,"column":124}},"347":{"start":{"line":1077,"column":2},"end":{"line":1077,"column":17}},"348":{"start":{"line":1078,"column":2},"end":{"line":1078,"column":18}},"349":{"start":{"line":1079,"column":2},"end":{"line":1152,"column":5}},"350":{"start":{"line":1081,"column":6},"end":{"line":1085,"column":7}},"351":{"start":{"line":1084,"column":8},"end":{"line":1084,"column":22}},"352":{"start":{"line":1086,"column":6},"end":{"line":1090,"column":7}},"353":{"start":{"line":1088,"column":8},"end":{"line":1088,"column":52}},"354":{"start":{"line":1089,"column":8},"end":{"line":1089,"column":22}},"355":{"start":{"line":1091,"column":6},"end":{"line":1107,"column":9}},"356":{"start":{"line":1092,"column":8},"end":{"line":1096,"column":9}},"357":{"start":{"line":1093,"column":10},"end":{"line":1093,"column":117}},"358":{"start":{"line":1095,"column":10},"end":{"line":1095,"column":24}},"359":{"start":{"line":1097,"column":8},"end":{"line":1100,"column":9}},"360":{"start":{"line":1099,"column":10},"end":{"line":1099,"column":24}},"361":{"start":{"line":1101,"column":8},"end":{"line":1103,"column":11}},"362":{"start":{"line":1102,"column":10},"end":{"line":1102,"column":44}},"363":{"start":{"line":1105,"column":8},"end":{"line":1105,"column":52}},"364":{"start":{"line":1106,"column":8},"end":{"line":1106,"column":15}},"365":{"start":{"line":1110,"column":6},"end":{"line":1124,"column":7}},"366":{"start":{"line":1111,"column":8},"end":{"line":1120,"column":9}},"367":{"start":{"line":1112,"column":10},"end":{"line":1112,"column":76}},"368":{"start":{"line":1114,"column":10},"end":{"line":1116,"column":13}},"369":{"start":{"line":1115,"column":12},"end":{"line":1115,"column":26}},"370":{"start":{"line":1119,"column":10},"end":{"line":1119,"column":72}},"371":{"start":{"line":1123,"column":8},"end":{"line":1123,"column":25}},"372":{"start":{"line":1125,"column":6},"end":{"line":1125,"column":13}},"373":{"start":{"line":1128,"column":6},"end":{"line":1130,"column":7}},"374":{"start":{"line":1129,"column":8},"end":{"line":1129,"column":22}},"375":{"start":{"line":1133,"column":6},"end":{"line":1133,"column":71}},"376":{"start":{"line":1136,"column":4},"end":{"line":1139,"column":5}},"377":{"start":{"line":1138,"column":6},"end":{"line":1138,"column":27}},"378":{"start":{"line":1140,"column":4},"end":{"line":1150,"column":5}},"379":{"start":{"line":1141,"column":6},"end":{"line":1144,"column":7}},"380":{"start":{"line":1143,"column":8},"end":{"line":1143,"column":65}},"381":{"start":{"line":1146,"column":6},"end":{"line":1146,"column":84}},"382":{"start":{"line":1149,"column":6},"end":{"line":1149,"column":27}},"383":{"start":{"line":1151,"column":4},"end":{"line":1151,"column":38}},"384":{"start":{"line":1162,"column":0},"end":{"line":1162,"column":24}}},"branchMap":{"1":{"line":340,"type":"if","locations":[{"start":{"line":340,"column":2},"end":{"line":340,"column":2}},{"start":{"line":340,"column":2},"end":{"line":340,"column":2}}]},"2":{"line":343,"type":"if","locations":[{"start":{"line":343,"column":2},"end":{"line":343,"column":2}},{"start":{"line":343,"column":2},"end":{"line":343,"column":2}}]},"3":{"line":348,"type":"if","locations":[{"start":{"line":348,"column":2},"end":{"line":348,"column":2}},{"start":{"line":348,"column":2},"end":{"line":348,"column":2}}]},"4":{"line":364,"type":"if","locations":[{"start":{"line":364,"column":6},"end":{"line":364,"column":6}},{"start":{"line":364,"column":6},"end":{"line":364,"column":6}}]},"5":{"line":372,"type":"if","locations":[{"start":{"line":372,"column":6},"end":{"line":372,"column":6}},{"start":{"line":372,"column":6},"end":{"line":372,"column":6}}]},"6":{"line":376,"type":"if","locations":[{"start":{"line":376,"column":6},"end":{"line":376,"column":6}},{"start":{"line":376,"column":6},"end":{"line":376,"column":6}}]},"7":{"line":385,"type":"if","locations":[{"start":{"line":385,"column":4},"end":{"line":385,"column":4}},{"start":{"line":385,"column":4},"end":{"line":385,"column":4}}]},"8":{"line":426,"type":"binary-expr","locations":[{"start":{"line":426,"column":13},"end":{"line":426,"column":21}},{"start":{"line":426,"column":26},"end":{"line":426,"column":52}}]},"9":{"line":426,"type":"cond-expr","locations":[{"start":{"line":426,"column":36},"end":{"line":426,"column":43}},{"start":{"line":426,"column":46},"end":{"line":426,"column":52}}]},"10":{"line":427,"type":"if","locations":[{"start":{"line":427,"column":2},"end":{"line":427,"column":2}},{"start":{"line":427,"column":2},"end":{"line":427,"column":2}}]},"11":{"line":428,"type":"cond-expr","locations":[{"start":{"line":428,"column":44},"end":{"line":428,"column":50}},{"start":{"line":428,"column":53},"end":{"line":428,"column":57}}]},"12":{"line":465,"type":"if","locations":[{"start":{"line":465,"column":2},"end":{"line":465,"column":2}},{"start":{"line":465,"column":2},"end":{"line":465,"column":2}}]},"13":{"line":465,"type":"binary-expr","locations":[{"start":{"line":465,"column":6},"end":{"line":465,"column":15}},{"start":{"line":465,"column":19},"end":{"line":465,"column":30}},{"start":{"line":465,"column":34},"end":{"line":465,"column":63}}]},"14":{"line":470,"type":"binary-expr","locations":[{"start":{"line":470,"column":32},"end":{"line":470,"column":40}},{"start":{"line":470,"column":44},"end":{"line":470,"column":54}}]},"15":{"line":471,"type":"binary-expr","locations":[{"start":{"line":471,"column":35},"end":{"line":471,"column":46}},{"start":{"line":471,"column":50},"end":{"line":471,"column":57}},{"start":{"line":471,"column":61},"end":{"line":471,"column":67}}]},"16":{"line":473,"type":"cond-expr","locations":[{"start":{"line":473,"column":42},"end":{"line":473,"column":48}},{"start":{"line":473,"column":51},"end":{"line":473,"column":55}}]},"17":{"line":481,"type":"if","locations":[{"start":{"line":481,"column":4},"end":{"line":481,"column":4}},{"start":{"line":481,"column":4},"end":{"line":481,"column":4}}]},"18":{"line":486,"type":"if","locations":[{"start":{"line":486,"column":4},"end":{"line":486,"column":4}},{"start":{"line":486,"column":4},"end":{"line":486,"column":4}}]},"19":{"line":486,"type":"binary-expr","locations":[{"start":{"line":486,"column":8},"end":{"line":486,"column":19}},{"start":{"line":486,"column":23},"end":{"line":486,"column":44}}]},"20":{"line":489,"type":"if","locations":[{"start":{"line":489,"column":6},"end":{"line":489,"column":6}},{"start":{"line":489,"column":6},"end":{"line":489,"column":6}}]},"21":{"line":524,"type":"binary-expr","locations":[{"start":{"line":524,"column":30},"end":{"line":524,"column":38}},{"start":{"line":524,"column":42},"end":{"line":524,"column":52}}]},"22":{"line":530,"type":"if","locations":[{"start":{"line":530,"column":4},"end":{"line":530,"column":4}},{"start":{"line":530,"column":4},"end":{"line":530,"column":4}}]},"23":{"line":533,"type":"if","locations":[{"start":{"line":533,"column":4},"end":{"line":533,"column":4}},{"start":{"line":533,"column":4},"end":{"line":533,"column":4}}]},"24":{"line":533,"type":"binary-expr","locations":[{"start":{"line":533,"column":8},"end":{"line":533,"column":14}},{"start":{"line":533,"column":18},"end":{"line":533,"column":33}}]},"25":{"line":555,"type":"if","locations":[{"start":{"line":555,"column":4},"end":{"line":555,"column":4}},{"start":{"line":555,"column":4},"end":{"line":555,"column":4}}]},"26":{"line":579,"type":"binary-expr","locations":[{"start":{"line":579,"column":13},"end":{"line":579,"column":21}},{"start":{"line":579,"column":25},"end":{"line":579,"column":32}}]},"27":{"line":595,"type":"if","locations":[{"start":{"line":595,"column":2},"end":{"line":595,"column":2}},{"start":{"line":595,"column":2},"end":{"line":595,"column":2}}]},"28":{"line":595,"type":"binary-expr","locations":[{"start":{"line":595,"column":6},"end":{"line":595,"column":21}},{"start":{"line":595,"column":25},"end":{"line":595,"column":49}}]},"29":{"line":599,"type":"if","locations":[{"start":{"line":599,"column":4},"end":{"line":599,"column":4}},{"start":{"line":599,"column":4},"end":{"line":599,"column":4}}]},"30":{"line":602,"type":"if","locations":[{"start":{"line":602,"column":4},"end":{"line":602,"column":4}},{"start":{"line":602,"column":4},"end":{"line":602,"column":4}}]},"31":{"line":652,"type":"binary-expr","locations":[{"start":{"line":652,"column":13},"end":{"line":652,"column":21}},{"start":{"line":652,"column":25},"end":{"line":652,"column":35}}]},"32":{"line":653,"type":"if","locations":[{"start":{"line":653,"column":2},"end":{"line":653,"column":2}},{"start":{"line":653,"column":2},"end":{"line":653,"column":2}}]},"33":{"line":653,"type":"binary-expr","locations":[{"start":{"line":653,"column":6},"end":{"line":653,"column":17}},{"start":{"line":653,"column":21},"end":{"line":653,"column":36}}]},"34":{"line":658,"type":"if","locations":[{"start":{"line":658,"column":2},"end":{"line":658,"column":2}},{"start":{"line":658,"column":2},"end":{"line":658,"column":2}}]},"35":{"line":673,"type":"if","locations":[{"start":{"line":673,"column":2},"end":{"line":673,"column":2}},{"start":{"line":673,"column":2},"end":{"line":673,"column":2}}]},"36":{"line":683,"type":"binary-expr","locations":[{"start":{"line":683,"column":11},"end":{"line":683,"column":25}},{"start":{"line":683,"column":29},"end":{"line":683,"column":63}}]},"37":{"line":696,"type":"if","locations":[{"start":{"line":696,"column":6},"end":{"line":696,"column":6}},{"start":{"line":696,"column":6},"end":{"line":696,"column":6}}]},"38":{"line":703,"type":"if","locations":[{"start":{"line":703,"column":8},"end":{"line":703,"column":8}},{"start":{"line":703,"column":8},"end":{"line":703,"column":8}}]},"39":{"line":708,"type":"if","locations":[{"start":{"line":708,"column":6},"end":{"line":708,"column":6}},{"start":{"line":708,"column":6},"end":{"line":708,"column":6}}]},"40":{"line":728,"type":"if","locations":[{"start":{"line":728,"column":4},"end":{"line":728,"column":4}},{"start":{"line":728,"column":4},"end":{"line":728,"column":4}}]},"41":{"line":732,"type":"if","locations":[{"start":{"line":732,"column":4},"end":{"line":732,"column":4}},{"start":{"line":732,"column":4},"end":{"line":732,"column":4}}]},"42":{"line":750,"type":"if","locations":[{"start":{"line":750,"column":2},"end":{"line":750,"column":2}},{"start":{"line":750,"column":2},"end":{"line":750,"column":2}}]},"43":{"line":750,"type":"binary-expr","locations":[{"start":{"line":750,"column":6},"end":{"line":750,"column":21}},{"start":{"line":750,"column":25},"end":{"line":750,"column":49}}]},"44":{"line":753,"type":"if","locations":[{"start":{"line":753,"column":2},"end":{"line":753,"column":2}},{"start":{"line":753,"column":2},"end":{"line":753,"column":2}}]},"45":{"line":834,"type":"if","locations":[{"start":{"line":834,"column":4},"end":{"line":834,"column":4}},{"start":{"line":834,"column":4},"end":{"line":834,"column":4}}]},"46":{"line":838,"type":"if","locations":[{"start":{"line":838,"column":4},"end":{"line":838,"column":4}},{"start":{"line":838,"column":4},"end":{"line":838,"column":4}}]},"47":{"line":849,"type":"if","locations":[{"start":{"line":849,"column":8},"end":{"line":849,"column":8}},{"start":{"line":849,"column":8},"end":{"line":849,"column":8}}]},"48":{"line":860,"type":"if","locations":[{"start":{"line":860,"column":6},"end":{"line":860,"column":6}},{"start":{"line":860,"column":6},"end":{"line":860,"column":6}}]},"49":{"line":887,"type":"if","locations":[{"start":{"line":887,"column":6},"end":{"line":887,"column":6}},{"start":{"line":887,"column":6},"end":{"line":887,"column":6}}]},"50":{"line":891,"type":"if","locations":[{"start":{"line":891,"column":6},"end":{"line":891,"column":6}},{"start":{"line":891,"column":6},"end":{"line":891,"column":6}}]},"51":{"line":899,"type":"if","locations":[{"start":{"line":899,"column":6},"end":{"line":899,"column":6}},{"start":{"line":899,"column":6},"end":{"line":899,"column":6}}]},"52":{"line":903,"type":"if","locations":[{"start":{"line":903,"column":6},"end":{"line":903,"column":6}},{"start":{"line":903,"column":6},"end":{"line":903,"column":6}}]},"53":{"line":926,"type":"if","locations":[{"start":{"line":926,"column":2},"end":{"line":926,"column":2}},{"start":{"line":926,"column":2},"end":{"line":926,"column":2}}]},"54":{"line":929,"type":"if","locations":[{"start":{"line":929,"column":2},"end":{"line":929,"column":2}},{"start":{"line":929,"column":2},"end":{"line":929,"column":2}}]},"55":{"line":935,"type":"if","locations":[{"start":{"line":935,"column":4},"end":{"line":935,"column":4}},{"start":{"line":935,"column":4},"end":{"line":935,"column":4}}]},"56":{"line":939,"type":"if","locations":[{"start":{"line":939,"column":4},"end":{"line":939,"column":4}},{"start":{"line":939,"column":4},"end":{"line":939,"column":4}}]},"57":{"line":942,"type":"if","locations":[{"start":{"line":942,"column":4},"end":{"line":942,"column":4}},{"start":{"line":942,"column":4},"end":{"line":942,"column":4}}]},"58":{"line":962,"type":"if","locations":[{"start":{"line":962,"column":2},"end":{"line":962,"column":2}},{"start":{"line":962,"column":2},"end":{"line":962,"column":2}}]},"59":{"line":966,"type":"if","locations":[{"start":{"line":966,"column":2},"end":{"line":966,"column":2}},{"start":{"line":966,"column":2},"end":{"line":966,"column":2}}]},"60":{"line":975,"type":"if","locations":[{"start":{"line":975,"column":4},"end":{"line":975,"column":4}},{"start":{"line":975,"column":4},"end":{"line":975,"column":4}}]},"61":{"line":1035,"type":"if","locations":[{"start":{"line":1035,"column":4},"end":{"line":1035,"column":4}},{"start":{"line":1035,"column":4},"end":{"line":1035,"column":4}}]},"62":{"line":1040,"type":"if","locations":[{"start":{"line":1040,"column":6},"end":{"line":1040,"column":6}},{"start":{"line":1040,"column":6},"end":{"line":1040,"column":6}}]},"63":{"line":1057,"type":"if","locations":[{"start":{"line":1057,"column":2},"end":{"line":1057,"column":2}},{"start":{"line":1057,"column":2},"end":{"line":1057,"column":2}}]},"64":{"line":1073,"type":"if","locations":[{"start":{"line":1073,"column":2},"end":{"line":1073,"column":2}},{"start":{"line":1073,"column":2},"end":{"line":1073,"column":2}}]},"65":{"line":1073,"type":"binary-expr","locations":[{"start":{"line":1073,"column":6},"end":{"line":1073,"column":22}},{"start":{"line":1073,"column":26},"end":{"line":1073,"column":32}},{"start":{"line":1073,"column":36},"end":{"line":1073,"column":57}},{"start":{"line":1073,"column":61},"end":{"line":1073,"column":80}}]},"66":{"line":1081,"type":"if","locations":[{"start":{"line":1081,"column":6},"end":{"line":1081,"column":6}},{"start":{"line":1081,"column":6},"end":{"line":1081,"column":6}}]},"67":{"line":1081,"type":"binary-expr","locations":[{"start":{"line":1081,"column":10},"end":{"line":1081,"column":28}},{"start":{"line":1081,"column":32},"end":{"line":1081,"column":54}},{"start":{"line":1081,"column":58},"end":{"line":1081,"column":78}},{"start":{"line":1081,"column":82},"end":{"line":1081,"column":87}}]},"68":{"line":1086,"type":"if","locations":[{"start":{"line":1086,"column":6},"end":{"line":1086,"column":6}},{"start":{"line":1086,"column":6},"end":{"line":1086,"column":6}}]},"69":{"line":1092,"type":"if","locations":[{"start":{"line":1092,"column":8},"end":{"line":1092,"column":8}},{"start":{"line":1092,"column":8},"end":{"line":1092,"column":8}}]},"70":{"line":1097,"type":"if","locations":[{"start":{"line":1097,"column":8},"end":{"line":1097,"column":8}},{"start":{"line":1097,"column":8},"end":{"line":1097,"column":8}}]},"71":{"line":1111,"type":"if","locations":[{"start":{"line":1111,"column":8},"end":{"line":1111,"column":8}},{"start":{"line":1111,"column":8},"end":{"line":1111,"column":8}}]},"72":{"line":1128,"type":"if","locations":[{"start":{"line":1128,"column":6},"end":{"line":1128,"column":6}},{"start":{"line":1128,"column":6},"end":{"line":1128,"column":6}}]},"73":{"line":1128,"type":"binary-expr","locations":[{"start":{"line":1128,"column":10},"end":{"line":1128,"column":25}},{"start":{"line":1128,"column":29},"end":{"line":1128,"column":57}}]},"74":{"line":1136,"type":"if","locations":[{"start":{"line":1136,"column":4},"end":{"line":1136,"column":4}},{"start":{"line":1136,"column":4},"end":{"line":1136,"column":4}}]},"75":{"line":1141,"type":"if","locations":[{"start":{"line":1141,"column":6},"end":{"line":1141,"column":6}},{"start":{"line":1141,"column":6},"end":{"line":1141,"column":6}}]}},"code":["\"use strict\";","var events = require('events');","var util = require('util');","","var utils = require('./utils.js');","var errors = require('./errors.js');","var types = require('./types');","var ControlConnection = require('./control-connection');","var ProfileManager = require('./execution-profile').ProfileManager;","var RequestHandler = require('./request-handler');","var requests = require('./requests');","var clientOptions = require('./client-options');","/**"," * Max amount of pools being warmup in parallel, when warmup is enabled"," * @const {Number}"," * @private"," */","var warmupLimit = 32;","","/**"," * Client options"," * @typedef {Object} ClientOptions"," * @property {Array.<string>} contactPoints"," * Array of addresses or host names of the nodes to add as contact points."," * <p>"," *  Contact points are addresses of Cassandra nodes that the driver uses to discover the cluster topology."," * </p>"," * <p>"," *  Only one contact point is required (the driver will retrieve the address of the other nodes automatically),"," *  but it is usually a good idea to provide more than one contact point, because if that single contact point is"," *  unavailable, the driver will not be able to initialize correctly."," * </p>"," * @property {String} keyspace The logged keyspace for all the connections created within the {@link Client} instance."," * @property {Number} refreshSchemaDelay The default window size in milliseconds used to debounce node list and schema"," * refresh metadata requests. Default: 1000."," * @property {Boolean} isMetadataSyncEnabled Determines whether client-side schema metadata retrieval and update is"," * enabled."," * <p>Setting this value to <code>false</code> will cause keyspace information not to be automatically loaded, affecting"," * replica calculation per token in the different keyspaces. When disabling metadata synchronization, use"," * [Metadata.refreshKeyspaces()]{@link module:metadata~Metadata#refreshKeyspaces} to keep keyspace information up to"," * date or token-awareness will not work correctly.</p>"," * Default: <code>true</code>."," * @property {Object} policies"," * @property {LoadBalancingPolicy} policies.loadBalancing The load balancing policy instance to be used to determine"," * the coordinator per query."," * @property {RetryPolicy} policies.retry The retry policy."," * @property {ReconnectionPolicy} policies.reconnection The reconnection policy to be used."," * @property {AddressTranslator} policies.addressResolution The address resolution policy."," * @property {TimestampGenerator} policies.timestampGeneration The client-side"," * [query timestamp generator]{@link module:policies/timestampGeneration~TimestampGenerator}."," * <p>"," *   Default: <code>[MonotonicTimestampGenerator]{@link module:policies/timestampGeneration~MonotonicTimestampGenerator}"," *   </code>"," * </p>"," * <p>Use <code>null</code> to disable client-side timestamp generation.</p>"," * @property {QueryOptions} queryOptions Default options for all queries."," * @property {Object} pooling Pooling options."," * @property {Number} pooling.heartBeatInterval The amount of idle time in milliseconds that has to pass before the"," * driver issues a request on an active connection to avoid idle time disconnections. Default: 30000."," * @property {Object} pooling.coreConnectionsPerHost Associative array containing amount of connections per host"," * distance."," * @property {Boolean} pooling.warmup Determines if all connections to hosts in the local datacenter must be opened on"," * connect. Default: false."," * @property {Object} protocolOptions"," * @property {Number} protocolOptions.port The port to use to connect to the Cassandra host. If not set through this"," * method, the default port (9042) will be used instead."," * @property {Number} protocolOptions.maxSchemaAgreementWaitSeconds The maximum time in seconds to wait for schema"," * agreement between nodes before returning from a DDL query. Default: 10."," * @property {Number} protocolOptions.maxVersion When set, it limits the maximum protocol version used to connect to"," * the nodes."," * Useful for using the driver against a cluster that contains nodes with different major/minor versions of Cassandra."," * @property {Object} socketOptions"," * @property {Number} socketOptions.connectTimeout Connection timeout in milliseconds. Default: 5000."," * @property {Number} socketOptions.defunctReadTimeoutThreshold Determines the amount of requests that simultaneously"," * have to timeout before closing the connection. Default: 64."," * @property {Boolean} socketOptions.keepAlive Whether to enable TCP keep-alive on the socket. Default: true."," * @property {Number} socketOptions.keepAliveDelay TCP keep-alive delay in milliseconds. Default: 0."," * @property {Number} socketOptions.readTimeout Per-host read timeout in milliseconds."," * <p>"," *   Please note that this is not the maximum time a call to {@link Client#execute} may have to wait;"," *   this is the maximum time that call will wait for one particular Cassandra host, but other hosts will be tried if"," *   one of them timeout. In other words, a {@link Client#execute} call may theoretically wait up to"," *   <code>readTimeout * number_of_cassandra_hosts</code> (though the total number of hosts tried for a given query also"," *   depends on the LoadBalancingPolicy in use)."," * <p>When setting this value, keep in mind the following:</p>"," * <ul>"," *   <li>the timeout settings used on the Cassandra side (*_request_timeout_in_ms in cassandra.yaml) should be taken"," *   into account when picking a value for this read timeout. You should pick a value a couple of seconds greater than"," *   the Cassandra timeout settings."," *   </li>"," *   <li>"," *     the read timeout is only approximate and only control the timeout to one Cassandra host, not the full query."," *   </li>"," * </ul>"," * Setting a value of 0 disables read timeouts. Default: 0."," * @property {Boolean} socketOptions.tcpNoDelay When set to true, it disables the Nagle algorithm. Default: true."," * @property {Number} socketOptions.coalescingThreshold Buffer length in bytes use by the write queue before flushing"," * the frames. Default: 8000."," * @property {AuthProvider} authProvider Provider to be used to authenticate to an auth-enabled cluster."," * @property {Object} sslOptions Client-to-node ssl options, when set the driver will use the secure layer."," * You can specify cert, ca, ... options named after the Node.js tls.connect options."," * @property {Object} encoding"," * @property {Function} encoding.map Map constructor to use for Cassandra map<k,v> type encoding and decoding."," * If not set, it will default to Javascript Object with map keys as property names."," * @property {Function} encoding.set Set constructor to use for Cassandra set<k> type encoding and decoding."," * If not set, it will default to Javascript Array."," * @property {Boolean} encoding.copyBuffer Determines if the network buffer should be copied for buffer based data"," * types (blob, uuid, timeuuid and inet)."," * <p>"," *   Setting it to true will cause that the network buffer is copied for each row value of those types,"," *   causing additional allocations but freeing the network buffer to be reused."," *   Setting it to true is a good choice for cases where the Row and ResultSet returned by the queries are long-lived"," *   objects."," * </p>"," * <p>"," *  Setting it to false will cause less overhead and the reference of the network buffer to be maintained until the row"," *  / result set are de-referenced."," *  Default: true."," * </p>"," * @property {Boolean} encoding.useUndefinedAsUnset Valid for Cassandra 2.2 and above. Determines that, if a parameter"," * is set to"," * <code>undefined</code> it should be encoded as <code>unset</code>."," * <p>"," *  By default, ECMAScript <code>undefined</code> is encoded as <code>null</code> in the driver. Cassandra 2.2"," *  introduced the concept of unset."," *  At driver level, you can set a parameter to unset using the field <code>types.unset</code>. Setting this flag to"," *  true allows you to use ECMAScript undefined as Cassandra <code>unset</code>."," * </p>"," * <p>"," *   Default: true."," * </p>"," * @property {Array.<ExecutionProfile>} profiles The array of [execution profiles]{@link ExecutionProfile}."," * @property {Function} promiseFactory Function to be used to create a <code>Promise</code> from a"," * callback-style function."," * <p>"," *   Promise libraries often provide different methods to create a promise. For example, you can use Bluebird's"," *   <code>Promise.fromCallback()</code> method."," * </p>"," * <p>"," *   By default, the driver will use the"," *   [Promise constructor]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise}."," * </p>"," */","","/**"," * Query options"," * @typedef {Object} QueryOptions"," * @property {Boolean} [autoPage] Determines if the driver must retrieve the following result pages automatically."," * <p>"," *   This setting is only considered by the [Client#eachRow()]{@link Client#eachRow} method. For more information,"," *   check the"," *   [paging results documentation]{@link http://docs.datastax.com/en/developer/nodejs-driver/latest/features/paging/}."," * </p>"," * @property {Boolean} [captureStackTrace] Determines if the stack trace before the query execution should be"," * maintained."," * <p>"," *   Useful for debugging purposes, it should be set to <code>false</code> under production environment as it adds an"," *   unnecessary overhead to each execution."," * </p>"," * Default: false."," * @property {Number} [consistency] [Consistency level]{@link module:types~consistencies}. Default: localOne."," * @property {Object} [customPayload] Key-value payload to be passed to the server. On the Cassandra side, "," * implementations of QueryHandler can use this data."," * @property {String|ExecutionProfile} [executionProfile] Name or instance of the [profile]{@link ExecutionProfile} to"," * be used for this execution. If not set, it will the use \"default\" execution profile."," * @property {Number} [fetchSize] Amount of rows to retrieve per page."," * @property {Array|Array<Array>} [hints] Type hints for parameters given in the query, ordered as for the parameters."," * <p>For batch queries, an array of such arrays, ordered as with the queries in the batch.</p>"," * @property {Boolean} [isIdempotent] Defines whether the query can be applied multiple times without changing the result"," * beyond the initial application."," * <p>"," *   The query execution idempotence can be used at [RetryPolicy]{@link module:policies/retry~RetryPolicy} level to"," *   determine if an statement can be retried in case of request error or write timeout."," * </p>"," * <p>Default: <code>false</code>.</p>"," * @property {Boolean} [logged] Determines if the batch should be written to the batchlog. Only valid for"," * [Client#batch()]{@link Client#batch}, it will be ignored by other methods. Default: true."," * @property {Buffer|String} [pageState] Buffer or string token representing the paging state."," * <p>Useful for manual paging, if provided, the query will be executed starting from a given paging state.</p>"," * @property {Boolean} [prepare] Determines if the query must be executed as a prepared statement."," * @property {Number} [readTimeout] When defined, it overrides the default read timeout"," * (<code>socketOptions.readTimeout</code>) in milliseconds for this execution per coordinator."," * <p>"," *   Suitable for statements for which the coordinator may allow a longer server-side timeout, for example aggregation"," *   queries."," * </p>"," * <p>"," *   A value of <code>0</code> disables client side read timeout for the execution. Default: <code>undefined</code>."," * </p>"," * @property {RetryPolicy} [retry] Retry policy for the query."," * <p>"," *   This property can be used to specify a different [retry policy]{@link module:policies/retry} to the one specified"," *   in the {@link ClientOptions}.policies."," * </p>"," * @property {Boolean} [retryOnTimeout] Determines if the client should retry when it didn't hear back from a host"," * within <code>socketOptions.readTimeout</code>. Default: true."," * @property {Array} [routingIndexes] Index of the parameters that are part of the partition key to determine"," * the routing."," * @property {Buffer|Array} [routingKey] Partition key(s) to determine which coordinator should be used for the query."," * @property {Array} [routingNames] Array of the parameters names that are part of the partition key to determine the"," * routing."," * @property {Number} [serialConsistency] Serial consistency is the consistency level for the serial phase of"," * conditional updates."," * This option will be ignored for anything else that a conditional update/insert."," * @property {Number|Long} [timestamp] The default timestamp for the query in microseconds from the unix epoch"," * (00:00:00, January 1st, 1970)."," * <p>If provided, this will replace the server side assigned timestamp as default timestamp.</p>"," * <p>Use [generateTimestamp()]{@link module:types~generateTimestamp} utility method to generate a valid timestamp"," * based on a Date and microseconds parts.</p>"," * @property {Boolean} [traceQuery] Enable query tracing for the execution. Use query tracing to diagnose performance"," * problems related to query executions. Default: false."," * <p>To retrieve trace, you can call [Metadata.getTrace()]{@link module:metadata~Metadata#getTrace} method.</p>"," */","","/**"," * Creates a new instance of {@link Client}."," * @classdesc"," * A Client holds connections to a Cassandra cluster, allowing it to be queried."," * Each Client instance maintains multiple connections to the cluster nodes,"," * provides [policies]{@link module:policies} to choose which node to use for each query,"," * and handles [retries]{@link module:policies/retry} for failed query (when it makes sense), etc..."," * <p>"," * Client instances are designed to be long-lived and usually a single instance is enough"," * per application. As a given Client can only be \"logged\" into one keyspace at"," * a time (where the \"logged\" keyspace is the one used by query if the query doesn't"," * explicitly use a fully qualified table name), it can make sense to create one"," * client per keyspace used. This is however not necessary to query multiple keyspaces"," * since it is always possible to use a single session with fully qualified table name"," * in queries."," * </p>"," * @extends EventEmitter"," * @param {ClientOptions} options The options for this instance."," * @example <caption>Creating a new client instance</caption>"," * const client = new Client({ contactPoints: ['192.168.1.100'] });"," * client.connect(function (err) {"," *   if (err) return console.error(err);"," *   console.log('Connected to cluster with %d host(s): %j', client.hosts.length, client.hosts.keys());"," * });"," * @example <caption>Executing a query</caption>"," * // calling #execute() can be made without previously calling #connect(), as internally"," * // it will ensure it's connected before attempting to execute the query"," * client.execute('SELECT key FROM system.local', function (err, result) {"," *   if (err) return console.error(err);"," *   const row = result.first();"," *   console.log(row['key']);"," * });"," * @example <caption>Executing a query with promise-based API</caption>"," * const result = await client.execute('SELECT key FROM system.local');"," * const row = result.first();"," * console.log(row['key']);"," * @constructor"," */","function Client(options) {","  events.EventEmitter.call(this);","  this.options = clientOptions.extend({ logEmitter: this.emit.bind(this) }, options);","  Object.defineProperty(this, 'profileManager', { value: new ProfileManager(this.options) });","  Object.defineProperty(this, 'controlConnection', {","    value: new ControlConnection(this.options, this.profileManager), writable: true }","  );","  //Unlimited amount of listeners for internal event queues by default","  this.setMaxListeners(0);","  this.connected = false;","  this.isShuttingDown = false;","  /**","   * Gets the name of the active keyspace.","   * @type {String}","   */","  this.keyspace = options.keyspace;","  /**","   * Gets the schema and cluster metadata information.","   * @type {Metadata}","   */","  this.metadata = this.controlConnection.metadata;","  /**","   * Gets an associative array of cluster hosts.","   * @type {HostMap}","   */","  this.hosts = null;","}","","util.inherits(Client, events.EventEmitter);","","/**"," * Emitted when a new host is added to the cluster."," * <ul>"," *   <li>{@link Host} The host being added.</li>"," * </ul>"," * @event Client#hostAdd"," */","/**"," * Emitted when a host is removed from the cluster"," * <ul>"," *   <li>{@link Host} The host being removed.</li>"," * </ul>"," * @event Client#hostRemove"," */","/**"," * Emitted when a host in the cluster changed status from down to up."," * <ul>"," *   <li>{@link Host host} The host that changed the status.</li>"," * </ul>"," * @event Client#hostUp"," */","/**"," * Emitted when a host in the cluster changed status from up to down."," * <ul>"," *   <li>{@link Host host} The host that changed the status.</li>"," * </ul>"," * @event Client#hostDown"," */","","/**"," * Tries to connect to one of the [contactPoints]{@link ClientOptions} and discovers the rest the nodes of the cluster."," * <p>"," *   If a <code>callback</code> is provided, it will invoke the callback when the client is connected. Otherwise,"," *   it will return a <code>Promise</code>."," * </p>"," * <p>"," *   If the {@link Client} is already connected, it invokes callback immediately (when provided) or the promise is"," *   fulfilled ."," * </p>"," * @example <caption>Callback-based execution</caption>"," * client.connect(function (err) {"," *   if (err) return console.error(err);"," *   console.log('Connected to cluster with %d host(s): %j', client.hosts.length, client.hosts.keys());"," * });"," * @example <caption>Promise-based execution</caption>"," * await client.connect();"," * @param {function} [callback] The callback is invoked when the pool is connected it failed to connect."," */","Client.prototype.connect = function (callback) {","  return utils.promiseWrapper.call(this, this.options, callback, false, this._connectCb);","};","","/**"," * @param {Function} callback"," * @private"," */","Client.prototype._connectCb = function (callback) {","  if (this.connected) {","    return callback();","  }","  if (this.isShuttingDown) {","    //it is being shutdown, don't allow further calls to connect()","    return callback(new errors.NoHostAvailableError(null, 'Connecting after shutdown is not supported'));","  }","  this.once('connected', callback);","  if (this.connecting) {","    //the listener to connect was added, move on","    return;","  }","  this.connecting = true;","  var self = this;","  utils.series([","    function initControlConnection(next) {","      self.controlConnection.init(next);","    },","    function initLoadBalancingPolicy(next) {","      self.hosts = self.controlConnection.hosts;","      self._setHostListeners();","      self.profileManager.init(self, self.hosts, next);","    },","    function setKeyspace(next) {","      if (!self.keyspace) {","        return next();","      }","      self._setKeyspace(next);","    },","    function setPoolOptionsAndWarmup(next) {","      //Set the pooling options depending on the protocol version","      var coreConnectionsPerHost = clientOptions.coreConnectionsPerHostV3;","      if (self.controlConnection.protocolVersion < 3) {","        coreConnectionsPerHost = clientOptions.coreConnectionsPerHostV2;","      }","      self.options.pooling = utils.deepExtend({}, { coreConnectionsPerHost: coreConnectionsPerHost }, self.options.pooling);","      if (!self.options.pooling.warmup) {","        return next();","      }","      self._warmup(next);","    }","  ], function connectFinished(err) {","    self.connected = !err;","    self.connecting = false;","    self.emit('connected', err);","    if (self.connected) {","      // Set the distance of the control connection host relatively to this instance","      self.profileManager.getDistance(self.controlConnection.host);","    }","  });","};","","/**"," * Executes a query on an available connection."," * <p>"," *   If a <code>callback</code> is provided, it will invoke the callback when the execution completes. Otherwise,"," *   it will return a <code>Promise</code>."," * </p>"," * <p>The query can be prepared (recommended) or not depending on {@link QueryOptions}.prepare flag.</p>"," * <p>"," *   Some executions failures can be handled transparently by the driver, according to the"," *   [RetryPolicy]{@link module:policies/retry~RetryPolicy} defined at {@link ClientOptions} or {@link QueryOptions}"," *   level."," * </p>"," * @param {String} query The query to execute."," * @param {Array|Object} [params] Array of parameter values or an associative array (object) containing parameter names"," * as keys and its value."," * @param {QueryOptions} [options] The query options for the execution."," * @param {ResultCallback} [callback] Executes callback(err, result) when execution completed. When not defined, the"," * method will return a promise."," * @example <caption>Callback-based API</caption>"," * const query = 'SELECT name, email FROM users WHERE id = ?';"," * client.execute(query, [ id ], { prepare: true }, function (err, result) {"," *   assert.ifError(err);"," *   const row = result.first();"," *   console.log('%s: %s', row.name, row.email);"," * });"," * @example <caption>Promise-based API, using async/await</caption>"," * const query = 'SELECT name, email FROM users WHERE id = ?';"," * const result = await client.execute(query, [ id ], { prepare: true });"," * const row = result.first();"," * console.log('%s: %s', row.name, row.email);"," * @see {@link ExecutionProfile} to reuse a set of options across different query executions."," */","Client.prototype.execute = function (query, params, options, callback) {","  // set default argument values for optional parameters","  callback = callback || (options ? options : params);","  if (typeof callback === 'function') {","    params = typeof params !== 'function' ? params : null;","  }","  return utils.promiseWrapper.call(this, this.options, callback, false, function handler(cb) {","    options = clientOptions.createQueryOptions(this, options);","    this._innerExecute(query, params, options, cb);","  });","};","","/**"," * Executes the query and calls rowCallback for each row as soon as they are received. Calls final callback after all"," * rows have been sent, or when there is an error."," * <p>"," *   The query can be prepared (recommended) or not depending on {@link QueryOptions}.prepare flag. Retries on multiple"," *   hosts if needed."," * </p>"," * @param {String} query The query to execute"," * @param {Array|Object} [params] Array of parameter values or an associative array (object) containing parameter names"," * as keys and its value."," * @param {QueryOptions} [options]"," * @param {function} rowCallback Executes <code>rowCallback(n, row)</code> per each row received, where n is the row"," * index and row is the current Row."," * @param {function} [callback] Executes <code>callback(err, result)</code> after all rows have been received."," * <p>"," *   When dealing with paged results, [ResultSet#nextPage()]{@link module:types~ResultSet#nextPage} method can be used"," *   to retrieve the following page. In that case, <code>rowCallback()</code> will be again called for each row and"," *   the final callback will be invoked when all rows in the following page has been retrieved."," * </p>"," * @example <caption>Using per-row callback and arrow functions</caption>"," * client.eachRow(query, params, { prepare: true }, (n, row) => console.log(n, row), err => console.error(err));"," * @example <caption>Overloads</caption>"," * client.eachRow(query, rowCallback);"," * client.eachRow(query, params, rowCallback);"," * client.eachRow(query, params, options, rowCallback);"," * client.eachRow(query, params, rowCallback, callback);"," * client.eachRow(query, params, options, rowCallback, callback);"," */","Client.prototype.eachRow = function (query, params, options, rowCallback, callback) {","  if (!callback && rowCallback && typeof options === 'function') {","    callback = utils.bindDomain(rowCallback);","    rowCallback = utils.bindDomain(options);","  }","  else {","    callback = utils.bindDomain(callback || utils.noop);","    rowCallback = utils.bindDomain(rowCallback || options || params);","  }","  params = typeof params !== 'function' ? params : null;","  options = clientOptions.createQueryOptions(this, options, rowCallback);","  var self = this;","  var rowLength = 0;","  function nextPage() {","    self._innerExecute(query, params, options, pageCallback);","  }","  function pageCallback (err, result) {","    if (err) {","      return callback(err);","    }","    // Next requests in case paging (auto or explicit) is used","    rowLength += result.rowLength;","    if (result.meta && result.meta.pageState) {","      // Use new page state as next request page state","      options.pageState = result.meta.pageState;","      if (options.autoPage) {","        // Issue next request for the next page","        return nextPage();","      }","      // Allows for explicit (manual) paging, in case the caller needs it","      result.nextPage = nextPage;","    }","    // Finished auto-paging","    result.rowLength = rowLength;","    callback(null, result);","  }","  this._innerExecute(query, params, options, pageCallback);","};","","/**"," * Executes the query and pushes the rows to the result stream"," *  as soon as they received."," * Calls callback after all rows have been sent, or when there is an error."," * <p>"," * The stream is a [Readable Streams2]{@link http://nodejs.org/api/stream.html#stream_class_stream_readable} object"," *  that contains the raw bytes of the field value."," *  It can be piped downstream and provides automatic pause/resume logic (it buffers when not read)."," * </p>"," * <p>"," *   The query can be prepared (recommended) or not depending on {@link QueryOptions}.prepare flag. Retries on multiple"," *   hosts if needed."," * </p>"," * @param {String} query The query to prepare and execute"," * @param {Array|Object} [params] Array of parameter values or an associative array (object) containing parameter names"," * as keys and its value"," * @param {QueryOptions} [options]"," * @param {function} [callback], executes callback(err) after all rows have been received or if there is an error"," * @returns {types.ResultStream}"," */","Client.prototype.stream = function (query, params, options, callback) {","  callback = utils.bindDomain(callback || utils.noop);","  // NOTE: the nodejs stream maintains yet another internal buffer ","  // we rely on the default stream implementation to keep memory ","  // usage reasonable.","  var resultStream = new types.ResultStream({ objectMode: 1 });","  function onFinish(err, result) {","    if (err) {","      resultStream.emit('error', err);","    }","    if (result && result.nextPage ) {","      // allows for throttling as per the","      // default nodejs stream implementation","      resultStream._valve(function pageValve() {","        try {","          result.nextPage();","        }","        catch( ex ) {","          resultStream.emit('error', ex );","        }","      });","      return;","    }","    // Explicitly dropping the valve (closure)","    resultStream._valve(null);","    resultStream.add(null);","    callback(err);","  }","  var sync = true;","  this.eachRow(query, params, options, function rowCallback(n, row) {","    resultStream.add(row);","  }, function eachRowFinished(err, result) {","    if (sync) {","      // Prevent sync callback","      return setImmediate(function eachRowFinishedImmediate() {","        onFinish(err, result);","      });","    }","    onFinish(err, result);","  });","  sync = false;","  return resultStream;","};","","/**"," * Executes batch of queries on an available connection to a host."," * <p>"," *   If a <code>callback</code> is provided, it will invoke the callback when the execution completes. Otherwise,"," *   it will return a <code>Promise</code>."," * </p>"," * @param {Array.<string>|Array.<{query, params}>} queries The queries to execute as an Array of strings or as an array"," * of object containing the query and params"," * @param {QueryOptions} [options]"," * @param {ResultCallback} [callback] Executes callback(err, result) when the batch was executed"," */","Client.prototype.batch = function (queries, options, callback) {","  callback = callback || options;","  return utils.promiseWrapper.call(this, this.options, callback, false, function handler(cb) {","    this._batchCb(queries, options, cb);","  });","};","","/**"," * @param {Array.<string>|Array.<{query, params}>}queries"," * @param {QueryOptions} options"," * @param {ResultCallback} callback"," * @private"," */","Client.prototype._batchCb = function (queries, options, callback) {","  var self = this;","  queries = validateBatchQueries(queries);","  options = clientOptions.createQueryOptions(this, options, null, true);","  if (options.message && options instanceof Error) {","    return callback(options);","  }","  this.connect(function afterConnect(err) {","    if (err) {","      return callback(err);","    }","    if (options.prepare) {","      //Batch of prepared statements","      return self._batchPrepared(queries, options, callback);","    }","    //Batch of simple statements","    self._sendBatch(queries, options, callback);","  });","};","","/**"," * Gets the host list representing the replicas that contain such partition."," * @param {String} keyspace"," * @param {Buffer} token"," * @returns {Array}"," */","Client.prototype.getReplicas = function (keyspace, token) {","  return this.metadata.getReplicas(keyspace, token);","};","","Client.prototype.log = utils.log;","","/**"," * Closes all connections to all hosts."," * <p>"," *   If a <code>callback</code> is provided, it will invoke the callback when the client is disconnected. Otherwise,"," *   it will return a <code>Promise</code>."," * </p>"," * @param {Function} [callback] Optional callback to be invoked when finished closing all connections."," */","Client.prototype.shutdown = function (callback) {","  return utils.promiseWrapper.call(this, this.options, callback, true, this._shutdownCb);","};","","/**"," * @param {Function} callback"," * @private"," */","Client.prototype._shutdownCb = function (callback) {","  var self = this;","  function doShutdown() {","    self.connected = false;","    self.isShuttingDown = true;","    var hosts = self.hosts.values();","    self.controlConnection.shutdown();","    // go through all the host and shut down their pools","    utils.each(hosts, function (h, next) {","      h.shutdown(false, next);","    }, callback);","  }","  this.log('info', 'Shutting down');","  callback = callback || utils.noop;","  if (!this.hosts || !this.connected) {","    // not initialized","    this.connected = false;","    return callback();","  }","  if (this.connecting) {","    this.log('warning', 'Shutting down while connecting');","    // wait until finish connecting for easier troubleshooting","    return this.once('connected', doShutdown);","  }","  doShutdown();","};","","/**"," * Waits until that the schema version in all nodes is the same or the waiting time passed."," * @param {Connection} connection"," * @param {Function} callback"," * @ignore"," */","Client.prototype._waitForSchemaAgreement = function (connection, callback) {","  if (this.hosts.length === 1) {","    return setImmediate(callback);","  }","  var self = this;","  var start = new Date();","  var maxWaitTime = this.options.protocolOptions.maxSchemaAgreementWaitSeconds * 1000;","  this.log('info', 'Waiting for schema agreement');","  var versionsMatch;","  var peerVersions;","  utils.whilst(function condition() {","    return !versionsMatch && (new Date() - start) < maxWaitTime;","  }, function fn(next) {","    utils.series([","      function (next) {","        self.metadata.getPeersSchemaVersions(connection, function (err, result) {","          peerVersions = result;","          next(err);","        });","      },","      function (next) {","        self.metadata.getLocalSchemaVersion(connection, next);","      }","    ], function seriesEnded(err, localVersion) {","      if (err) {","        return next(err);","      }","      //check the different versions","      versionsMatch = true;","      localVersion = localVersion.toString();","      for (var i = 0; i < peerVersions.length; i++) {","        if (peerVersions[i].toString() !== localVersion) {","          versionsMatch = false;","          break;","        }","      }","      if (versionsMatch) {","        self.log('info', 'Schema versions match');","      }","      //let some time pass before the next check","      setTimeout(next, 500);","    });","  }, callback);","};","","/**"," * Waits for schema agreements and schedules schema metadata refresh."," * @param {Connection} connection"," * @param event"," * @param {Function} callback"," * @ignore"," * @internal"," */","Client.prototype.handleSchemaAgreementAndRefresh = function (connection, event, callback) {","  var self = this;","  this._waitForSchemaAgreement(connection, function agreementCb(err) {","    if (err) {","      //we issue a warning but we continue with the normal flow","      self.log('warning', 'There was an error while waiting for the schema agreement between nodes', err);","    }","    if (!self.options.isMetadataSyncEnabled) {","      return callback();","    }","    // schedule metadata refresh immediately and the callback will be invoked once it was refreshed","    self.controlConnection.handleSchemaChange(event, true, callback);","  });","};","","/**"," * Connects and handles the execution of prepared and simple statements. All parameters are mandatory."," * @param {string} query"," * @param {Array} params"," * @param {Object} options Options, contained already all the required QueryOptions."," * @param {Function} callback"," * @private"," */","Client.prototype._innerExecute = function (query, params, options, callback) {","  // Use Error#message property because is faster than checking prototypes","  if (options.message && options instanceof Error) {","    return callback(options);","  }","  if (options.prepare) {","    return this._executeAsPrepared(query, params, options, callback);","  }","  var self = this;","  utils.series([","    function connecting(next) {","      self.connect(next);","    },","    function settingOptions(next) {","      self._setQueryOptions(options, params, null, function setOptionsCallback(err, p) {","        params = p;","        next(err);","      });","    },","    function sendingQuery(next) {","      var request = new requests.QueryRequest(","        query,","        params,","        options);","      var handler = new RequestHandler(self, options.executionProfile.loadBalancing, options.retry);","      handler.send(request, options, next);","    }","  ], callback);","};","","/**"," * Prepares (the first time) and executes the prepared query, retrying on multiple hosts if needed."," * @param {String} query The query to prepare and execute"," * @param {Array|Object} params Array of params or params object with the name as keys"," * @param {Object} options"," * @param {ResultCallback} callback Executes callback(err, result) when finished"," * @private"," */","Client.prototype._executeAsPrepared = function (query, params, options, callback) {","  var queryId;","  var meta;","  var self = this;","  utils.series([","    function connecting(next) {","      self.connect(next);","    },","    function preparing(next) {","      self._getPrepared(query, options, function (err, id, m) {","        queryId = id;","        meta = m;","        next(err);","      });","    },","    function settingOptions(next) {","      self._setQueryOptions(options, params, meta, function (err, p) {","        params = p;","        next(err);","      });","    },","    function sendingExecute(next) {","      var request = new requests.ExecuteRequest(","        query,","        queryId,","        params,","        options);","      request.query = query;","      var handler = new RequestHandler(self, options.executionProfile.loadBalancing, options.retry);","      handler.send(request, options, next);","    }","  ], callback);","};","","/**"," * Prepares the queries and then executes the batch."," * @param {Array.<{query, params}>} queries Array of object instances containing query and params properties."," * @param {Object} options"," * @param {ResultCallback} callback Executes callback(err, result) when the batch was executed"," * @private"," */","Client.prototype._batchPrepared = function (queries, options, callback) {","  var self = this;","  queries = queries.map(function batchQueryMap(item) {","    return { info: self.metadata.getPreparedInfo(self.keyspace, item.query), query: item.query, params: item.params};","  });","  //Identify the query that are being prepared and wait for it","  this._waitForPendingPrepares(queries, function afterWait(err, toPrepare) {","    if (err) {","      return callback(err);","    }","    var queriesToPrepare = Object.keys(toPrepare);","    if (queriesToPrepare.length === 0) {","      //The ones that were being prepared are now prepared","      return self._sendBatch(queries, options, callback);","    }","    //Prepare the pending","    var callbacksArray = new Array(queriesToPrepare.length);","    queriesToPrepare.forEach(function (query, i) {","      var info = toPrepare[query];","      info.preparing = true;","      callbacksArray[i] = function prepareCallback(err, response) {","        info.preparing = false;","        if (err) {","          return info.emit('prepared', err);","        }","        info.queryId = response.id;","        info.meta = response.meta;","        info.emit('prepared', null, info.queryId, info.meta);","      };","    });","    var handler = new RequestHandler(self, options.executionProfile.loadBalancing, options.retry);","    //Prepare the queries that are not already prepared on a single host","    handler.prepareMultiple(queriesToPrepare, callbacksArray, options, function (err) {","      if (err) {","        return callback(err);","      }","      return self._sendBatch(queries, options, callback);","    });","  });","};","","/** @private */","Client.prototype._sendBatch = function (queries, options, callback) {","  var request = new requests.BatchRequest(queries, options);","  var handler = new RequestHandler(this, options.executionProfile.loadBalancing, options.retry);","  handler.send(request, options, callback);","};","","/**"," * Waits for all pending prepared queries to be prepared and callbacks with the queries to prepare"," * @param {Array} queries"," * @param {Function} callback"," * @private"," */","Client.prototype._waitForPendingPrepares = function (queries, callback) {","  function doWait(queriesMap) {","    var toPrepare = {};","    var pendingIO = false;","    utils.each(Object.keys(queriesMap), function waitIterator(query, next) {","      var info = queriesMap[query];","      if (info.queryId) {","        //Its already prepared","        return next();","      }","      if (info.preparing) {","        //it is already being prepared","        pendingIO = true;","        return info.once('prepared', next);","      }","      toPrepare[query] = info;","      next();","    }, function waitFinished(err) {","      if (err) {","        //There was an error with the queries being prepared","        return callback(err);","      }","      if (pendingIO) {","        //There was IO between the last call","        //it is possible that queries marked to prepare are being prepared","        //iterate again until we have the filtered list of items to prepare","        return setImmediate(function pendingIOCallback() {","          doWait(toPrepare);","        });","      }","      callback(null, toPrepare);","    });","  }","  var queriesMap = {};","  queries.forEach(function (item) {","    queriesMap[item.query] = item.info;","  });","  doWait(queriesMap);","};","","/**"," * Parses and validates the arguments received by executeBatch"," * @private"," */","function validateBatchQueries(queries) {","  if (!util.isArray(queries)) {","    throw new errors.ArgumentError('The first argument must be an Array of queries.');","  }","  if (queries.length === 0) {","    throw new errors.ArgumentError('The Array of queries to batch execute can not be empty');","  }","  var parsedQueries = new Array(queries.length);","  for (var i = 0; i < queries.length; i++) {","    var item = queries[i];","    if (!item) {","      throw new errors.ArgumentError(util.format('Invalid query at index %d', i));","    }","    var query = item.query;","    if (typeof item === 'string') {","      query = item;","    }","    if (!query) {","      throw new errors.ArgumentError(util.format('Invalid query at index %d', i));","    }","    parsedQueries[i] = { query: query, params: item.params};","  }","  return parsedQueries;","}","","/**"," * It returns the id of the prepared query."," * If its not prepared, it prepares the query."," * If its being prepared, it queues the callback"," * @param {String} query Query to prepare with ? or :param_name as parameter placeholders"," * @param {Object} options Execution query options"," * @param {function} callback Executes callback(err, queryId) when there is a prepared statement on a connection or"," * there is an error."," * @private"," */","Client.prototype._getPrepared = function (query, options, callback) {","  var info = this.metadata.getPreparedInfo(this.keyspace, query);","  if (info.queryId) {","    return callback(null, info.queryId, info.meta);","  }","  info.once('prepared', callback);","  if (info.preparing) {","    //it is already being prepared","    return;","  }","  info.preparing = true;","  var request = new requests.PrepareRequest(query);","  var handler = new RequestHandler(this, options.executionProfile.loadBalancing, options.retry);","  handler.send(request, null, function (err, result) {","    info.preparing = false;","    if (err) {","      err.query = query;","      return info.emit('prepared', err);","    }","    info.queryId = result.id;","    info.meta = result.meta;","    info.emit('prepared', null, info.queryId, info.meta);","  });","};","","/**"," * Sets the keyspace in a connection that is already opened."," * @param {Function} callback"," * @private"," */","Client.prototype._setKeyspace = function (callback) {","  var handler = new RequestHandler(this, this.options.policies.loadBalancing, this.options.policies.retry);","  handler.setKeyspace(callback);","};","","/**"," * Sets the listeners for the nodes."," * @private"," */","Client.prototype._setHostListeners = function () {","  var self = this;","  function getHostUpListener(emitter, h) {","    return (function hostUpListener() {","      emitter.emit('hostUp', h);","    });","  }","  function getHostDownListener(emitter, h) {","    return (function hostDownListener() {","      emitter.emit('hostDown', h);","    });","  }","  //Add status listeners when new nodes are added and emit hostAdd","  this.hosts.on('add', function hostAddedListener(h) {","    h.on('up', getHostUpListener(self, h));","    h.on('down', getHostDownListener(self, h));","    self.emit('hostAdd', h);","  });","  //Remove all listeners and emit hostRemove","  this.hosts.on('remove', function hostRemovedListener(h) {","    h.removeAllListeners();","    self.emit('hostRemove', h);","  });","  //Add status listeners for existing hosts","  this.hosts.forEach(function (h) {","    h.on('up', getHostUpListener(self, h));","    h.on('down', getHostDownListener(self, h));","  });","};","","Client.prototype._warmup = function (callback) {","  var self = this;","  var hosts = this.hosts.values();","  utils.timesLimit(hosts.length, warmupLimit, function warmupEachCallback(i, next) {","    var h = hosts[i];","    var distance = self.profileManager.getDistance(h);","    if (distance !== types.distance.local) {","      //do not warmup pool for remote or ignored hosts","      return next();","    }","    h.warmupPool(function (err) {","      if (err) {","        //An error while trying to create a connection","        //To 1 host is not an issue, warn the user and move on","        self.log('warning', util.format('Connection pool to host %s could not be created: %s', h.address, err));","      }","      next();","    });","  }, callback);","};","","/**"," * @returns {Encoder}"," * @private"," */","Client.prototype._getEncoder = function () {","  var encoder;","  encoder = this.controlConnection.getEncoder();","  if (!encoder) {","    throw new errors.DriverInternalError('Encoder is not defined');","  }","  return encoder;","};","","/**"," * Validates the values and sets the default values for the {@link QueryOptions} to be used in the query."," * @param {QueryOptions} options Options specified by the user"," * @param params"," * @param [meta] Prepared statement metadata"," * @param {Function} callback"," * @private"," */","Client.prototype._setQueryOptions = function (options, params, meta, callback) {","  var protocolVersion = this.controlConnection.protocolVersion;","  if (!options.prepare && params && !util.isArray(params) && protocolVersion < 3) {","    //Only Cassandra 2.1 and above supports named parameters","    return callback(new errors.ArgumentError('Named parameters for simple statements are not supported, use prepare flag'));","  }","  var paramsInfo;","  var self = this;","  utils.series([","    function fillRoutingKeys(next) {","      if (options.routingKey || options.routingIndexes || options.routingNames || !meta) {","        //it is filled by the user","        //or it is not prepared","        return next();","      }","      if (util.isArray(meta.partitionKeys)) {","        //the partition keys are provided as part of the metadata","        options.routingIndexes = meta.partitionKeys;","        return next();","      }","      self.metadata.getTable(meta.keyspace, meta.table, function (err, tableInfo) {","        if (err) {","          self.log('warning', util.format('Table %s.%s metadata could not be retrieved', meta.keyspace, meta.table));","          //execute without a routing key","          return next();","        }","        if (!tableInfo) {","          //The data is not there, maybe it is being recreated","          return next();","        }","        options.routingIndexes = tableInfo.partitionKeys.map(function (c) {","          return meta.columnsByName[c.name];","        });","        //Skip parsing metadata next time","        meta.partitionKeys = options.routingIndexes;","        next();","      });","    },","    function adaptParameterNames(next) {","      try {","        if (options.prepare) {","          paramsInfo = utils.adaptNamedParamsPrepared(params, meta.columns);","          //Add the type information provided by the prepared metadata","          options.hints = meta.columns.map(function (c) {","            return c.type;","          });","        }","        else {","          paramsInfo = utils.adaptNamedParamsWithHints(params, options);","        }","      }","      catch (err) {","        return next(err);","      }","      next();","    },","    function adaptParameterTypes(next) {","      if (options.prepare || !util.isArray(options.hints)) {","        return next();","      }","      //Only not prepared with hints","      //Adapting user hints is an async op","      self.metadata.adaptUserHints(self.keyspace, options.hints, next);","    }","  ], function finishSettingOptions(err) {","    if (err) {","      //There was an error setting the query options","      return callback(err);","    }","    try {","      if (typeof options.pageState === 'string') {","        //pageState can be a hex string","        options.pageState = new Buffer(options.pageState, 'hex');","      }","      //noinspection JSAccessibilityCheck","      self._getEncoder().setRoutingKey(paramsInfo.params, options, paramsInfo.keys);","    }","    catch (err) {","      return callback(err);","    }","    callback(null, paramsInfo.params);","  });","};","","/**"," * Callback used by execution methods."," * @callback ResultCallback"," * @param {Error} err Error occurred in the execution of the query."," * @param {ResultSet} [result] Result of the execution of the query."," */","","module.exports = Client;",""],"l":{"2":1,"3":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"18":1,"253":1,"254":0,"255":0,"256":0,"257":0,"261":0,"262":0,"263":0,"268":0,"273":0,"278":0,"281":1,"331":1,"332":0,"339":1,"340":0,"341":0,"343":0,"345":0,"347":0,"348":0,"350":0,"352":0,"353":0,"354":0,"356":0,"359":0,"360":0,"361":0,"364":0,"365":0,"367":0,"371":0,"372":0,"373":0,"375":0,"376":0,"377":0,"379":0,"382":0,"383":0,"384":0,"385":0,"387":0,"424":1,"426":0,"427":0,"428":0,"430":0,"431":0,"432":0,"464":1,"465":0,"466":0,"467":0,"470":0,"471":0,"473":0,"474":0,"475":0,"476":0,"477":1,"478":0,"480":1,"481":0,"482":0,"485":0,"486":0,"488":0,"489":0,"491":0,"494":0,"497":0,"498":0,"500":0,"523":1,"524":0,"528":0,"529":1,"530":0,"531":0,"533":0,"536":0,"537":0,"538":0,"541":0,"544":0,"547":0,"548":0,"549":0,"551":0,"552":0,"553":0,"555":0,"557":0,"558":0,"561":0,"563":0,"564":0,"578":1,"579":0,"580":0,"581":0,"591":1,"592":0,"593":0,"594":0,"595":0,"596":0,"598":0,"599":0,"600":0,"602":0,"604":0,"607":0,"617":1,"618":0,"621":1,"631":1,"632":0,"639":1,"640":0,"641":1,"642":0,"643":0,"644":0,"645":0,"647":0,"648":0,"651":0,"652":0,"653":0,"655":0,"656":0,"658":0,"659":0,"661":0,"663":0,"672":1,"673":0,"674":0,"676":0,"677":0,"678":0,"679":0,"680":0,"681":0,"682":0,"683":0,"685":0,"687":0,"688":0,"689":0,"693":0,"696":0,"697":0,"700":0,"701":0,"702":0,"703":0,"704":0,"705":0,"708":0,"709":0,"712":0,"725":1,"726":0,"727":0,"728":0,"730":0,"732":0,"733":0,"736":0,"748":1,"750":0,"751":0,"753":0,"754":0,"756":0,"757":0,"759":0,"762":0,"763":0,"764":0,"768":0,"772":0,"773":0,"786":1,"787":0,"788":0,"789":0,"790":0,"792":0,"795":0,"796":0,"797":0,"798":0,"802":0,"803":0,"804":0,"808":0,"813":0,"814":0,"815":0,"827":1,"828":0,"829":0,"830":0,"833":0,"834":0,"835":0,"837":0,"838":0,"840":0,"843":0,"844":0,"845":0,"846":0,"847":0,"848":0,"849":0,"850":0,"852":0,"853":0,"854":0,"857":0,"859":0,"860":0,"861":0,"863":0,"869":1,"870":0,"871":0,"872":0,"881":1,"882":1,"883":0,"884":0,"885":0,"886":0,"887":0,"889":0,"891":0,"893":0,"894":0,"896":0,"897":0,"899":0,"901":0,"903":0,"907":0,"908":0,"911":0,"914":0,"915":0,"916":0,"918":0,"925":1,"926":0,"927":0,"929":0,"930":0,"932":0,"933":0,"934":0,"935":0,"936":0,"938":0,"939":0,"940":0,"942":0,"943":0,"945":0,"947":0,"960":1,"961":0,"962":0,"963":0,"965":0,"966":0,"968":0,"970":0,"971":0,"972":0,"973":0,"974":0,"975":0,"976":0,"977":0,"979":0,"980":0,"981":0,"990":1,"991":0,"992":0,"999":1,"1000":0,"1001":1,"1002":0,"1003":0,"1006":1,"1007":0,"1008":0,"1012":0,"1013":0,"1014":0,"1015":0,"1018":0,"1019":0,"1020":0,"1023":0,"1024":0,"1025":0,"1029":1,"1030":0,"1031":0,"1032":0,"1033":0,"1034":0,"1035":0,"1037":0,"1039":0,"1040":0,"1043":0,"1045":0,"1054":1,"1055":0,"1056":0,"1057":0,"1058":0,"1060":0,"1071":1,"1072":0,"1073":0,"1075":0,"1077":0,"1078":0,"1079":0,"1081":0,"1084":0,"1086":0,"1088":0,"1089":0,"1091":0,"1092":0,"1093":0,"1095":0,"1097":0,"1099":0,"1101":0,"1102":0,"1105":0,"1106":0,"1110":0,"1111":0,"1112":0,"1114":0,"1115":0,"1119":0,"1123":0,"1125":0,"1128":0,"1129":0,"1133":0,"1136":0,"1138":0,"1140":0,"1141":0,"1143":0,"1146":0,"1149":0,"1151":0,"1162":1}},"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/control-connection.js":{"path":"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/control-connection.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":1,"35":1,"36":0,"37":0,"38":0,"39":1,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":1,"75":0,"76":1,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":1,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":1,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":1,"139":0,"140":0,"141":1,"142":0,"143":0,"144":0,"145":0,"146":0,"147":1,"148":0,"149":0,"150":0,"151":0,"152":0,"153":1,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":1,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":1,"196":0,"197":0,"198":0,"199":0,"200":1,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":1,"211":1,"212":0,"213":0,"214":0,"215":0,"216":0,"217":1,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":1,"238":0,"239":0,"240":0,"241":0,"242":1,"243":0,"244":0,"245":0,"246":0,"247":0,"248":0,"249":0,"250":0,"251":0,"252":0,"253":0,"254":0,"255":0,"256":0,"257":0,"258":0,"259":0,"260":0,"261":0,"262":0,"263":0,"264":0,"265":0,"266":0,"267":0,"268":0,"269":0,"270":0,"271":0,"272":0,"273":1,"274":0,"275":1,"276":0,"277":0,"278":0,"279":0,"280":1,"281":0,"282":0,"283":0,"284":0,"285":1,"286":0,"287":0,"288":0,"289":0,"290":0,"291":0,"292":0,"293":0,"294":0,"295":0,"296":0,"297":0,"298":0,"299":0,"300":1,"301":0,"302":0,"303":0,"304":0,"305":0,"306":0,"307":0,"308":0,"309":0,"310":0,"311":0,"312":0,"313":0,"314":0,"315":0,"316":0,"317":0,"318":0,"319":0,"320":0,"321":0,"322":0,"323":0,"324":0,"325":0,"326":0,"327":0,"328":0,"329":0,"330":0,"331":0,"332":0,"333":0,"334":0,"335":0,"336":1,"337":0,"338":0,"339":0,"340":0,"341":0,"342":0,"343":0,"344":0,"345":0,"346":0,"347":1,"348":0,"349":0,"350":1,"351":0,"352":0,"353":0,"354":0,"355":0,"356":0,"357":1,"358":0,"359":0,"360":0,"361":0,"362":1,"363":0,"364":0,"365":0,"366":0,"367":0,"368":0,"369":0,"370":0,"371":0,"372":0,"373":1,"374":0,"375":0,"376":0,"377":1,"378":0,"379":0,"380":0,"381":0,"382":1,"383":0,"384":0,"385":0,"386":0,"387":0,"388":0,"389":0,"390":0,"391":0,"392":0,"393":0,"394":0,"395":0,"396":0,"397":0,"398":0,"399":0,"400":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0],"56":[0,0],"57":[0,0],"58":[0,0],"59":[0,0],"60":[0,0],"61":[0,0],"62":[0,0],"63":[0,0],"64":[0,0],"65":[0,0],"66":[0,0],"67":[0,0],"68":[0,0],"69":[0,0],"70":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0},"fnMap":{"1":{"name":"ControlConnection","line":32,"loc":{"start":{"line":32,"column":0},"end":{"line":32,"column":52}}},"2":{"name":"(anonymous_2)","line":75,"loc":{"start":{"line":75,"column":35},"end":{"line":75,"column":55}}},"3":{"name":"addHost","line":81,"loc":{"start":{"line":81,"column":2},"end":{"line":81,"column":38}}},"4":{"name":"resolveNames","line":91,"loc":{"start":{"line":91,"column":4},"end":{"line":91,"column":32}}},"5":{"name":"eachResolve","line":92,"loc":{"start":{"line":92,"column":45},"end":{"line":92,"column":82}}},"6":{"name":"(anonymous_6)","line":106,"loc":{"start":{"line":106,"column":25},"end":{"line":106,"column":51}}},"7":{"name":"(anonymous_7)","line":111,"loc":{"start":{"line":111,"column":28},"end":{"line":111,"column":47}}},"8":{"name":"(anonymous_8)","line":116,"loc":{"start":{"line":116,"column":9},"end":{"line":116,"column":24}}},"9":{"name":"tryInitOnConnection","line":124,"loc":{"start":{"line":124,"column":4},"end":{"line":124,"column":39}}},"10":{"name":"seriesFinished","line":127,"loc":{"start":{"line":127,"column":5},"end":{"line":127,"column":34}}},"11":{"name":"forEachHost","line":132,"loc":{"start":{"line":132,"column":27},"end":{"line":132,"column":51}}},"12":{"name":"(anonymous_12)","line":147,"loc":{"start":{"line":147,"column":44},"end":{"line":147,"column":64}}},"13":{"name":"done","line":149,"loc":{"start":{"line":149,"column":2},"end":{"line":149,"column":30}}},"14":{"name":"(anonymous_14)","line":167,"loc":{"start":{"line":167,"column":35},"end":{"line":167,"column":59}}},"15":{"name":"(anonymous_15)","line":184,"loc":{"start":{"line":184,"column":49},"end":{"line":184,"column":69}}},"16":{"name":"condition","line":190,"loc":{"start":{"line":190,"column":15},"end":{"line":190,"column":37}}},"17":{"name":"iterator","line":192,"loc":{"start":{"line":192,"column":5},"end":{"line":192,"column":29}}},"18":{"name":"(anonymous_18)","line":194,"loc":{"start":{"line":194,"column":26},"end":{"line":194,"column":44}}},"19":{"name":"done","line":203,"loc":{"start":{"line":203,"column":5},"end":{"line":203,"column":24}}},"20":{"name":"(anonymous_20)","line":216,"loc":{"start":{"line":216,"column":53},"end":{"line":216,"column":73}}},"21":{"name":"(anonymous_21)","line":220,"loc":{"start":{"line":220,"column":73},"end":{"line":220,"column":98}}},"22":{"name":"condition","line":229,"loc":{"start":{"line":229,"column":6},"end":{"line":229,"column":27}}},"23":{"name":"whileIterator","line":238,"loc":{"start":{"line":238,"column":6},"end":{"line":238,"column":35}}},"24":{"name":"(anonymous_24)","line":246,"loc":{"start":{"line":246,"column":30},"end":{"line":246,"column":48}}},"25":{"name":"whilstEnded","line":252,"loc":{"start":{"line":252,"column":6},"end":{"line":252,"column":29}}},"26":{"name":"(anonymous_26)","line":267,"loc":{"start":{"line":267,"column":47},"end":{"line":267,"column":59}}},"27":{"name":"onUp","line":270,"loc":{"start":{"line":270,"column":2},"end":{"line":270,"column":18}}},"28":{"name":"(anonymous_28)","line":272,"loc":{"start":{"line":272,"column":22},"end":{"line":272,"column":38}}},"29":{"name":"(anonymous_29)","line":279,"loc":{"start":{"line":279,"column":20},"end":{"line":279,"column":36}}},"30":{"name":"(anonymous_30)","line":290,"loc":{"start":{"line":290,"column":50},"end":{"line":290,"column":81}}},"31":{"name":"getLocalAndPeersInfo","line":295,"loc":{"start":{"line":295,"column":4},"end":{"line":295,"column":40}}},"32":{"name":"downOrIgnoredHandler","line":297,"loc":{"start":{"line":297,"column":6},"end":{"line":297,"column":38}}},"33":{"name":"subscribeConnectionEvents","line":306,"loc":{"start":{"line":306,"column":4},"end":{"line":306,"column":45}}},"34":{"name":"initDone","line":313,"loc":{"start":{"line":313,"column":4},"end":{"line":313,"column":27}}},"35":{"name":"(anonymous_35)","line":330,"loc":{"start":{"line":330,"column":43},"end":{"line":330,"column":75}}},"36":{"name":"(anonymous_36)","line":332,"loc":{"start":{"line":332,"column":15},"end":{"line":332,"column":27}}},"37":{"name":"(anonymous_37)","line":343,"loc":{"start":{"line":343,"column":23},"end":{"line":343,"column":36}}},"38":{"name":"getLocalInfo","line":351,"loc":{"start":{"line":351,"column":4},"end":{"line":351,"column":32}}},"39":{"name":"(anonymous_39)","line":353,"loc":{"start":{"line":353,"column":34},"end":{"line":353,"column":57}}},"40":{"name":"getPeersInfo","line":358,"loc":{"start":{"line":358,"column":4},"end":{"line":358,"column":32}}},"41":{"name":"(anonymous_41)","line":360,"loc":{"start":{"line":360,"column":34},"end":{"line":360,"column":57}}},"42":{"name":"getKeyspaces","line":364,"loc":{"start":{"line":364,"column":4},"end":{"line":364,"column":32}}},"43":{"name":"(anonymous_43)","line":376,"loc":{"start":{"line":376,"column":46},"end":{"line":376,"column":58}}},"44":{"name":"(anonymous_44)","line":387,"loc":{"start":{"line":387,"column":38},"end":{"line":387,"column":58}}},"45":{"name":"(anonymous_45)","line":391,"loc":{"start":{"line":391,"column":4},"end":{"line":391,"column":20}}},"46":{"name":"doneRefreshing","line":396,"loc":{"start":{"line":396,"column":8},"end":{"line":396,"column":37}}},"47":{"name":"(anonymous_47)","line":417,"loc":{"start":{"line":417,"column":56},"end":{"line":417,"column":73}}},"48":{"name":"nodeTopologyDelayedHandler","line":424,"loc":{"start":{"line":424,"column":42},"end":{"line":424,"column":80}}},"49":{"name":"(anonymous_49)","line":432,"loc":{"start":{"line":432,"column":54},"end":{"line":432,"column":71}}},"50":{"name":"translateCallback","line":436,"loc":{"start":{"line":436,"column":61},"end":{"line":436,"column":98}}},"51":{"name":"delayCheckIsUp","line":449,"loc":{"start":{"line":449,"column":48},"end":{"line":449,"column":74}}},"52":{"name":"(anonymous_52)","line":465,"loc":{"start":{"line":465,"column":54},"end":{"line":465,"column":71}}},"53":{"name":"(anonymous_53)","line":478,"loc":{"start":{"line":478,"column":49},"end":{"line":478,"column":88}}},"54":{"name":"removeKeyspace","line":483,"loc":{"start":{"line":483,"column":16},"end":{"line":483,"column":42}}},"55":{"name":"clearTableState","line":499,"loc":{"start":{"line":499,"column":14},"end":{"line":499,"column":41}}},"56":{"name":"clearUdtState","line":506,"loc":{"start":{"line":506,"column":14},"end":{"line":506,"column":39}}},"57":{"name":"clearFunctionState","line":512,"loc":{"start":{"line":512,"column":14},"end":{"line":512,"column":44}}},"58":{"name":"clearKeyspaceState","line":518,"loc":{"start":{"line":518,"column":14},"end":{"line":518,"column":44}}},"59":{"name":"(anonymous_59)","line":535,"loc":{"start":{"line":535,"column":52},"end":{"line":535,"column":118}}},"60":{"name":"(anonymous_60)","line":547,"loc":{"start":{"line":547,"column":54},"end":{"line":547,"column":100}}},"61":{"name":"keyspaceRefreshHandler","line":549,"loc":{"start":{"line":549,"column":16},"end":{"line":549,"column":52}}},"62":{"name":"(anonymous_62)","line":558,"loc":{"start":{"line":558,"column":51},"end":{"line":558,"column":71}}},"63":{"name":"hostsRefreshHandler","line":560,"loc":{"start":{"line":560,"column":16},"end":{"line":560,"column":49}}},"64":{"name":"(anonymous_64)","line":566,"loc":{"start":{"line":566,"column":43},"end":{"line":566,"column":71}}},"65":{"name":"(anonymous_65)","line":590,"loc":{"start":{"line":590,"column":43},"end":{"line":590,"column":83}}},"66":{"name":"eachPeer","line":598,"loc":{"start":{"line":598,"column":32},"end":{"line":598,"column":61}}},"67":{"name":"getAddressForPeerCallback","line":599,"loc":{"start":{"line":599,"column":42},"end":{"line":599,"column":87}}},"68":{"name":"(anonymous_68)","line":619,"loc":{"start":{"line":619,"column":5},"end":{"line":619,"column":20}}},"69":{"name":"(anonymous_69)","line":628,"loc":{"start":{"line":628,"column":25},"end":{"line":628,"column":38}}},"70":{"name":"(anonymous_70)","line":649,"loc":{"start":{"line":649,"column":52},"end":{"line":649,"column":90}}},"71":{"name":"(anonymous_71)","line":668,"loc":{"start":{"line":668,"column":50},"end":{"line":668,"column":70}}},"72":{"name":"newConnectionListener","line":671,"loc":{"start":{"line":671,"column":2},"end":{"line":671,"column":38}}},"73":{"name":"waitTimeout","line":676,"loc":{"start":{"line":676,"column":23},"end":{"line":676,"column":46}}},"74":{"name":"(anonymous_74)","line":689,"loc":{"start":{"line":689,"column":36},"end":{"line":689,"column":81}}},"75":{"name":"queryOnConnection","line":695,"loc":{"start":{"line":695,"column":2},"end":{"line":695,"column":31}}},"76":{"name":"waitCallback","line":704,"loc":{"start":{"line":704,"column":36},"end":{"line":704,"column":63}}},"77":{"name":"(anonymous_77)","line":716,"loc":{"start":{"line":716,"column":41},"end":{"line":716,"column":53}}},"78":{"name":"(anonymous_78)","line":723,"loc":{"start":{"line":723,"column":39},"end":{"line":723,"column":51}}},"79":{"name":"resolveAll","line":738,"loc":{"start":{"line":738,"column":0},"end":{"line":738,"column":36}}},"80":{"name":"resolve4","line":741,"loc":{"start":{"line":741,"column":4},"end":{"line":741,"column":28}}},"81":{"name":"resolve4Callback","line":742,"loc":{"start":{"line":742,"column":25},"end":{"line":742,"column":61}}},"82":{"name":"resolve6","line":750,"loc":{"start":{"line":750,"column":4},"end":{"line":750,"column":28}}},"83":{"name":"resolve6Callback","line":751,"loc":{"start":{"line":751,"column":25},"end":{"line":751,"column":61}}},"84":{"name":"resolveAllCallback","line":759,"loc":{"start":{"line":759,"column":5},"end":{"line":759,"column":35}}},"85":{"name":"(anonymous_85)","line":763,"loc":{"start":{"line":763,"column":30},"end":{"line":763,"column":51}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":31}},"2":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"3":{"start":{"line":4,"column":0},"end":{"line":4,"column":25}},"4":{"start":{"line":5,"column":0},"end":{"line":5,"column":25}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":33}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":34}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":40}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":37}},"9":{"start":{"line":11,"column":0},"end":{"line":11,"column":59}},"10":{"start":{"line":12,"column":0},"end":{"line":12,"column":37}},"11":{"start":{"line":13,"column":0},"end":{"line":13,"column":31}},"12":{"start":{"line":14,"column":0},"end":{"line":14,"column":31}},"13":{"start":{"line":16,"column":0},"end":{"line":16,"column":102}},"14":{"start":{"line":17,"column":0},"end":{"line":17,"column":65}},"15":{"start":{"line":18,"column":0},"end":{"line":18,"column":24}},"16":{"start":{"line":19,"column":0},"end":{"line":19,"column":37}},"17":{"start":{"line":20,"column":0},"end":{"line":24,"column":2}},"18":{"start":{"line":32,"column":0},"end":{"line":66,"column":1}},"19":{"start":{"line":33,"column":2},"end":{"line":33,"column":30}},"20":{"start":{"line":34,"column":2},"end":{"line":34,"column":29}},"21":{"start":{"line":36,"column":2},"end":{"line":36,"column":26}},"22":{"start":{"line":37,"column":2},"end":{"line":37,"column":96}},"23":{"start":{"line":41,"column":2},"end":{"line":41,"column":51}},"24":{"start":{"line":42,"column":2},"end":{"line":42,"column":67}},"25":{"start":{"line":43,"column":2},"end":{"line":43,"column":65}},"26":{"start":{"line":44,"column":2},"end":{"line":44,"column":27}},"27":{"start":{"line":49,"column":2},"end":{"line":49,"column":19}},"28":{"start":{"line":54,"column":2},"end":{"line":54,"column":25}},"29":{"start":{"line":59,"column":2},"end":{"line":59,"column":22}},"30":{"start":{"line":60,"column":2},"end":{"line":60,"column":87}},"31":{"start":{"line":61,"column":2},"end":{"line":61,"column":39}},"32":{"start":{"line":63,"column":2},"end":{"line":63,"column":36}},"33":{"start":{"line":65,"column":2},"end":{"line":65,"column":38}},"34":{"start":{"line":68,"column":0},"end":{"line":68,"column":54}},"35":{"start":{"line":75,"column":0},"end":{"line":139,"column":2}},"36":{"start":{"line":76,"column":2},"end":{"line":79,"column":3}},"37":{"start":{"line":78,"column":4},"end":{"line":78,"column":22}},"38":{"start":{"line":80,"column":2},"end":{"line":80,"column":18}},"39":{"start":{"line":81,"column":2},"end":{"line":89,"column":3}},"40":{"start":{"line":82,"column":4},"end":{"line":82,"column":79}},"41":{"start":{"line":83,"column":4},"end":{"line":83,"column":67}},"42":{"start":{"line":84,"column":4},"end":{"line":84,"column":32}},"43":{"start":{"line":85,"column":4},"end":{"line":85,"column":48}},"44":{"start":{"line":86,"column":4},"end":{"line":88,"column":5}},"45":{"start":{"line":87,"column":6},"end":{"line":87,"column":11}},"46":{"start":{"line":90,"column":2},"end":{"line":138,"column":5}},"47":{"start":{"line":92,"column":6},"end":{"line":121,"column":9}},"48":{"start":{"line":93,"column":8},"end":{"line":97,"column":9}},"49":{"start":{"line":95,"column":10},"end":{"line":95,"column":58}},"50":{"start":{"line":96,"column":10},"end":{"line":96,"column":112}},"51":{"start":{"line":98,"column":8},"end":{"line":102,"column":9}},"52":{"start":{"line":100,"column":10},"end":{"line":100,"column":38}},"53":{"start":{"line":101,"column":10},"end":{"line":101,"column":55}},"54":{"start":{"line":103,"column":8},"end":{"line":105,"column":9}},"55":{"start":{"line":104,"column":10},"end":{"line":104,"column":47}},"56":{"start":{"line":106,"column":8},"end":{"line":115,"column":11}},"57":{"start":{"line":107,"column":10},"end":{"line":110,"column":11}},"58":{"start":{"line":108,"column":12},"end":{"line":108,"column":88}},"59":{"start":{"line":109,"column":12},"end":{"line":109,"column":30}},"60":{"start":{"line":111,"column":10},"end":{"line":113,"column":13}},"61":{"start":{"line":112,"column":12},"end":{"line":112,"column":35}},"62":{"start":{"line":114,"column":10},"end":{"line":114,"column":21}},"63":{"start":{"line":117,"column":8},"end":{"line":119,"column":9}},"64":{"start":{"line":118,"column":10},"end":{"line":118,"column":83}},"65":{"start":{"line":120,"column":8},"end":{"line":120,"column":18}},"66":{"start":{"line":125,"column":6},"end":{"line":125,"column":43}},"67":{"start":{"line":128,"column":4},"end":{"line":128,"column":28}},"68":{"start":{"line":129,"column":4},"end":{"line":136,"column":5}},"69":{"start":{"line":131,"column":6},"end":{"line":131,"column":36}},"70":{"start":{"line":132,"column":6},"end":{"line":134,"column":9}},"71":{"start":{"line":133,"column":8},"end":{"line":133,"column":21}},"72":{"start":{"line":135,"column":6},"end":{"line":135,"column":33}},"73":{"start":{"line":137,"column":4},"end":{"line":137,"column":18}},"74":{"start":{"line":147,"column":0},"end":{"line":177,"column":2}},"75":{"start":{"line":148,"column":2},"end":{"line":148,"column":18}},"76":{"start":{"line":149,"column":2},"end":{"line":163,"column":3}},"77":{"start":{"line":150,"column":4},"end":{"line":160,"column":5}},"78":{"start":{"line":151,"column":6},"end":{"line":159,"column":7}},"79":{"start":{"line":152,"column":8},"end":{"line":152,"column":28}},"80":{"start":{"line":153,"column":8},"end":{"line":153,"column":33}},"81":{"start":{"line":154,"column":8},"end":{"line":154,"column":25}},"82":{"start":{"line":158,"column":8},"end":{"line":158,"column":103}},"83":{"start":{"line":161,"column":4},"end":{"line":161,"column":18}},"84":{"start":{"line":162,"column":4},"end":{"line":162,"column":45}},"85":{"start":{"line":164,"column":2},"end":{"line":174,"column":3}},"86":{"start":{"line":166,"column":4},"end":{"line":166,"column":49}},"87":{"start":{"line":167,"column":4},"end":{"line":173,"column":7}},"88":{"start":{"line":168,"column":6},"end":{"line":171,"column":7}},"89":{"start":{"line":169,"column":8},"end":{"line":169,"column":49}},"90":{"start":{"line":170,"column":8},"end":{"line":170,"column":94}},"91":{"start":{"line":172,"column":6},"end":{"line":172,"column":25}},"92":{"start":{"line":175,"column":2},"end":{"line":175,"column":67}},"93":{"start":{"line":176,"column":2},"end":{"line":176,"column":36}},"94":{"start":{"line":184,"column":0},"end":{"line":209,"column":2}},"95":{"start":{"line":185,"column":2},"end":{"line":185,"column":24}},"96":{"start":{"line":186,"column":2},"end":{"line":186,"column":17}},"97":{"start":{"line":187,"column":2},"end":{"line":187,"column":25}},"98":{"start":{"line":188,"column":2},"end":{"line":188,"column":34}},"99":{"start":{"line":189,"column":2},"end":{"line":189,"column":18}},"100":{"start":{"line":190,"column":2},"end":{"line":208,"column":5}},"101":{"start":{"line":191,"column":4},"end":{"line":191,"column":51}},"102":{"start":{"line":193,"column":4},"end":{"line":193,"column":24}},"103":{"start":{"line":194,"column":4},"end":{"line":202,"column":7}},"104":{"start":{"line":195,"column":6},"end":{"line":200,"column":7}},"105":{"start":{"line":196,"column":8},"end":{"line":196,"column":42}},"106":{"start":{"line":199,"column":8},"end":{"line":199,"column":23}},"107":{"start":{"line":201,"column":6},"end":{"line":201,"column":13}},"108":{"start":{"line":204,"column":4},"end":{"line":206,"column":5}},"109":{"start":{"line":205,"column":6},"end":{"line":205,"column":59}},"110":{"start":{"line":207,"column":4},"end":{"line":207,"column":36}},"111":{"start":{"line":216,"column":0},"end":{"line":261,"column":2}},"112":{"start":{"line":217,"column":2},"end":{"line":217,"column":18}},"113":{"start":{"line":218,"column":2},"end":{"line":218,"column":11}},"114":{"start":{"line":219,"column":2},"end":{"line":219,"column":24}},"115":{"start":{"line":220,"column":2},"end":{"line":260,"column":5}},"116":{"start":{"line":221,"column":4},"end":{"line":226,"column":5}},"117":{"start":{"line":222,"column":6},"end":{"line":223,"column":34}},"118":{"start":{"line":224,"column":6},"end":{"line":224,"column":38}},"119":{"start":{"line":225,"column":6},"end":{"line":225,"column":58}},"120":{"start":{"line":228,"column":4},"end":{"line":259,"column":9}},"121":{"start":{"line":231,"column":8},"end":{"line":233,"column":9}},"122":{"start":{"line":232,"column":10},"end":{"line":232,"column":23}},"123":{"start":{"line":234,"column":8},"end":{"line":234,"column":35}},"124":{"start":{"line":235,"column":8},"end":{"line":235,"column":26}},"125":{"start":{"line":236,"column":8},"end":{"line":236,"column":28}},"126":{"start":{"line":239,"column":8},"end":{"line":239,"column":61}},"127":{"start":{"line":240,"column":8},"end":{"line":242,"column":9}},"128":{"start":{"line":241,"column":10},"end":{"line":241,"column":24}},"129":{"start":{"line":243,"column":8},"end":{"line":245,"column":9}},"130":{"start":{"line":244,"column":10},"end":{"line":244,"column":24}},"131":{"start":{"line":246,"column":8},"end":{"line":250,"column":11}},"132":{"start":{"line":248,"column":10},"end":{"line":248,"column":25}},"133":{"start":{"line":249,"column":10},"end":{"line":249,"column":17}},"134":{"start":{"line":253,"column":8},"end":{"line":257,"column":9}},"135":{"start":{"line":254,"column":10},"end":{"line":254,"column":34}},"136":{"start":{"line":256,"column":10},"end":{"line":256,"column":65}},"137":{"start":{"line":258,"column":8},"end":{"line":258,"column":41}},"138":{"start":{"line":267,"column":0},"end":{"line":282,"column":2}},"139":{"start":{"line":268,"column":2},"end":{"line":268,"column":18}},"140":{"start":{"line":269,"column":2},"end":{"line":269,"column":38}},"141":{"start":{"line":270,"column":2},"end":{"line":276,"column":3}},"142":{"start":{"line":272,"column":4},"end":{"line":274,"column":7}},"143":{"start":{"line":273,"column":6},"end":{"line":273,"column":38}},"144":{"start":{"line":275,"column":4},"end":{"line":275,"column":19}},"145":{"start":{"line":279,"column":2},"end":{"line":281,"column":5}},"146":{"start":{"line":280,"column":4},"end":{"line":280,"column":24}},"147":{"start":{"line":290,"column":0},"end":{"line":323,"column":2}},"148":{"start":{"line":291,"column":2},"end":{"line":291,"column":26}},"149":{"start":{"line":292,"column":2},"end":{"line":292,"column":18}},"150":{"start":{"line":293,"column":2},"end":{"line":293,"column":94}},"151":{"start":{"line":294,"column":2},"end":{"line":322,"column":7}},"152":{"start":{"line":296,"column":6},"end":{"line":296,"column":27}},"153":{"start":{"line":297,"column":6},"end":{"line":301,"column":7}},"154":{"start":{"line":298,"column":8},"end":{"line":298,"column":58}},"155":{"start":{"line":299,"column":8},"end":{"line":299,"column":60}},"156":{"start":{"line":300,"column":8},"end":{"line":300,"column":31}},"157":{"start":{"line":302,"column":6},"end":{"line":302,"column":46}},"158":{"start":{"line":303,"column":6},"end":{"line":303,"column":48}},"159":{"start":{"line":304,"column":6},"end":{"line":304,"column":41}},"160":{"start":{"line":307,"column":6},"end":{"line":307,"column":76}},"161":{"start":{"line":308,"column":6},"end":{"line":308,"column":72}},"162":{"start":{"line":309,"column":6},"end":{"line":309,"column":72}},"163":{"start":{"line":310,"column":6},"end":{"line":310,"column":104}},"164":{"start":{"line":311,"column":6},"end":{"line":311,"column":40}},"165":{"start":{"line":314,"column":6},"end":{"line":320,"column":7}},"166":{"start":{"line":316,"column":8},"end":{"line":316,"column":77}},"167":{"start":{"line":319,"column":8},"end":{"line":319,"column":103}},"168":{"start":{"line":321,"column":6},"end":{"line":321,"column":20}},"169":{"start":{"line":330,"column":0},"end":{"line":374,"column":2}},"170":{"start":{"line":331,"column":2},"end":{"line":333,"column":3}},"171":{"start":{"line":332,"column":4},"end":{"line":332,"column":30}},"172":{"start":{"line":336,"column":2},"end":{"line":340,"column":3}},"173":{"start":{"line":337,"column":4},"end":{"line":337,"column":15}},"174":{"start":{"line":339,"column":4},"end":{"line":339,"column":11}},"175":{"start":{"line":341,"column":2},"end":{"line":341,"column":18}},"176":{"start":{"line":342,"column":2},"end":{"line":346,"column":3}},"177":{"start":{"line":343,"column":4},"end":{"line":345,"column":7}},"178":{"start":{"line":344,"column":6},"end":{"line":344,"column":49}},"179":{"start":{"line":347,"column":2},"end":{"line":347,"column":54}},"180":{"start":{"line":348,"column":2},"end":{"line":348,"column":26}},"181":{"start":{"line":349,"column":2},"end":{"line":349,"column":23}},"182":{"start":{"line":350,"column":2},"end":{"line":373,"column":15}},"183":{"start":{"line":352,"column":6},"end":{"line":352,"column":71}},"184":{"start":{"line":353,"column":6},"end":{"line":356,"column":9}},"185":{"start":{"line":354,"column":8},"end":{"line":354,"column":46}},"186":{"start":{"line":355,"column":8},"end":{"line":355,"column":18}},"187":{"start":{"line":359,"column":6},"end":{"line":359,"column":71}},"188":{"start":{"line":360,"column":6},"end":{"line":362,"column":9}},"189":{"start":{"line":361,"column":8},"end":{"line":361,"column":52}},"190":{"start":{"line":366,"column":6},"end":{"line":366,"column":68}},"191":{"start":{"line":367,"column":6},"end":{"line":367,"column":44}},"192":{"start":{"line":368,"column":6},"end":{"line":370,"column":7}},"193":{"start":{"line":369,"column":8},"end":{"line":369,"column":22}},"194":{"start":{"line":371,"column":6},"end":{"line":371,"column":50}},"195":{"start":{"line":376,"column":0},"end":{"line":381,"column":2}},"196":{"start":{"line":377,"column":2},"end":{"line":377,"column":91}},"197":{"start":{"line":378,"column":2},"end":{"line":378,"column":19}},"198":{"start":{"line":379,"column":2},"end":{"line":379,"column":25}},"199":{"start":{"line":380,"column":2},"end":{"line":380,"column":17}},"200":{"start":{"line":387,"column":0},"end":{"line":405,"column":2}},"201":{"start":{"line":388,"column":2},"end":{"line":388,"column":18}},"202":{"start":{"line":389,"column":2},"end":{"line":404,"column":5}},"203":{"start":{"line":392,"column":6},"end":{"line":394,"column":7}},"204":{"start":{"line":393,"column":8},"end":{"line":393,"column":22}},"205":{"start":{"line":395,"column":6},"end":{"line":395,"column":44}},"206":{"start":{"line":398,"column":4},"end":{"line":400,"column":5}},"207":{"start":{"line":399,"column":6},"end":{"line":399,"column":71}},"208":{"start":{"line":401,"column":4},"end":{"line":403,"column":5}},"209":{"start":{"line":402,"column":6},"end":{"line":402,"column":20}},"210":{"start":{"line":412,"column":0},"end":{"line":412,"column":44}},"211":{"start":{"line":417,"column":0},"end":{"line":427,"column":2}},"212":{"start":{"line":418,"column":2},"end":{"line":418,"column":54}},"213":{"start":{"line":420,"column":2},"end":{"line":420,"column":18}},"214":{"start":{"line":421,"column":2},"end":{"line":421,"column":43}},"215":{"start":{"line":424,"column":2},"end":{"line":426,"column":19}},"216":{"start":{"line":425,"column":4},"end":{"line":425,"column":32}},"217":{"start":{"line":432,"column":0},"end":{"line":460,"column":2}},"218":{"start":{"line":433,"column":2},"end":{"line":433,"column":18}},"219":{"start":{"line":434,"column":2},"end":{"line":434,"column":57}},"220":{"start":{"line":435,"column":2},"end":{"line":435,"column":47}},"221":{"start":{"line":436,"column":2},"end":{"line":459,"column":5}},"222":{"start":{"line":437,"column":4},"end":{"line":437,"column":40}},"223":{"start":{"line":438,"column":4},"end":{"line":441,"column":5}},"224":{"start":{"line":439,"column":6},"end":{"line":439,"column":104}},"225":{"start":{"line":440,"column":6},"end":{"line":440,"column":13}},"226":{"start":{"line":442,"column":4},"end":{"line":442,"column":57}},"227":{"start":{"line":443,"column":4},"end":{"line":453,"column":5}},"228":{"start":{"line":444,"column":6},"end":{"line":446,"column":7}},"229":{"start":{"line":445,"column":8},"end":{"line":445,"column":32}},"230":{"start":{"line":447,"column":6},"end":{"line":447,"column":49}},"231":{"start":{"line":449,"column":6},"end":{"line":451,"column":23}},"232":{"start":{"line":450,"column":8},"end":{"line":450,"column":25}},"233":{"start":{"line":452,"column":6},"end":{"line":452,"column":13}},"234":{"start":{"line":455,"column":4},"end":{"line":457,"column":5}},"235":{"start":{"line":456,"column":6},"end":{"line":456,"column":28}},"236":{"start":{"line":458,"column":4},"end":{"line":458,"column":83}},"237":{"start":{"line":465,"column":0},"end":{"line":471,"column":2}},"238":{"start":{"line":466,"column":2},"end":{"line":466,"column":43}},"239":{"start":{"line":467,"column":2},"end":{"line":469,"column":3}},"240":{"start":{"line":468,"column":4},"end":{"line":468,"column":11}},"241":{"start":{"line":470,"column":2},"end":{"line":470,"column":40}},"242":{"start":{"line":478,"column":0},"end":{"line":526,"column":2}},"243":{"start":{"line":479,"column":2},"end":{"line":479,"column":18}},"244":{"start":{"line":480,"column":2},"end":{"line":480,"column":25}},"245":{"start":{"line":481,"column":2},"end":{"line":491,"column":3}},"246":{"start":{"line":482,"column":4},"end":{"line":489,"column":5}},"247":{"start":{"line":483,"column":6},"end":{"line":487,"column":8}},"248":{"start":{"line":486,"column":8},"end":{"line":486,"column":55}},"249":{"start":{"line":488,"column":6},"end":{"line":488,"column":93}},"250":{"start":{"line":490,"column":4},"end":{"line":490,"column":78}},"251":{"start":{"line":492,"column":2},"end":{"line":492,"column":55}},"252":{"start":{"line":493,"column":2},"end":{"line":496,"column":3}},"253":{"start":{"line":495,"column":4},"end":{"line":495,"column":11}},"254":{"start":{"line":497,"column":2},"end":{"line":521,"column":3}},"255":{"start":{"line":498,"column":4},"end":{"line":498,"column":28}},"256":{"start":{"line":499,"column":4},"end":{"line":502,"column":6}},"257":{"start":{"line":500,"column":6},"end":{"line":500,"column":40}},"258":{"start":{"line":501,"column":6},"end":{"line":501,"column":39}},"259":{"start":{"line":504,"column":7},"end":{"line":521,"column":3}},"260":{"start":{"line":505,"column":4},"end":{"line":505,"column":26}},"261":{"start":{"line":506,"column":4},"end":{"line":508,"column":6}},"262":{"start":{"line":507,"column":6},"end":{"line":507,"column":36}},"263":{"start":{"line":510,"column":7},"end":{"line":521,"column":3}},"264":{"start":{"line":511,"column":4},"end":{"line":511,"column":35}},"265":{"start":{"line":512,"column":4},"end":{"line":514,"column":6}},"266":{"start":{"line":513,"column":6},"end":{"line":513,"column":50}},"267":{"start":{"line":516,"column":7},"end":{"line":521,"column":3}},"268":{"start":{"line":517,"column":4},"end":{"line":517,"column":32}},"269":{"start":{"line":518,"column":4},"end":{"line":520,"column":6}},"270":{"start":{"line":519,"column":6},"end":{"line":519,"column":48}},"271":{"start":{"line":522,"column":2},"end":{"line":525,"column":3}},"272":{"start":{"line":524,"column":4},"end":{"line":524,"column":89}},"273":{"start":{"line":535,"column":0},"end":{"line":540,"column":2}},"274":{"start":{"line":536,"column":2},"end":{"line":539,"column":4}},"275":{"start":{"line":547,"column":0},"end":{"line":553,"column":2}},"276":{"start":{"line":548,"column":2},"end":{"line":548,"column":18}},"277":{"start":{"line":549,"column":2},"end":{"line":551,"column":4}},"278":{"start":{"line":550,"column":4},"end":{"line":550,"column":52}},"279":{"start":{"line":552,"column":2},"end":{"line":552,"column":108}},"280":{"start":{"line":558,"column":0},"end":{"line":564,"column":2}},"281":{"start":{"line":559,"column":2},"end":{"line":559,"column":18}},"282":{"start":{"line":560,"column":2},"end":{"line":562,"column":4}},"283":{"start":{"line":561,"column":4},"end":{"line":561,"column":33}},"284":{"start":{"line":563,"column":2},"end":{"line":563,"column":91}},"285":{"start":{"line":566,"column":0},"end":{"line":583,"column":2}},"286":{"start":{"line":567,"column":2},"end":{"line":570,"column":3}},"287":{"start":{"line":568,"column":4},"end":{"line":568,"column":50}},"288":{"start":{"line":569,"column":4},"end":{"line":569,"column":11}},"289":{"start":{"line":571,"column":2},"end":{"line":571,"column":27}},"290":{"start":{"line":572,"column":2},"end":{"line":572,"column":43}},"291":{"start":{"line":573,"column":2},"end":{"line":576,"column":3}},"292":{"start":{"line":574,"column":4},"end":{"line":574,"column":54}},"293":{"start":{"line":575,"column":4},"end":{"line":575,"column":11}},"294":{"start":{"line":577,"column":2},"end":{"line":577,"column":44}},"295":{"start":{"line":578,"column":2},"end":{"line":578,"column":31}},"296":{"start":{"line":579,"column":2},"end":{"line":579,"column":35}},"297":{"start":{"line":580,"column":2},"end":{"line":580,"column":54}},"298":{"start":{"line":581,"column":2},"end":{"line":581,"column":51}},"299":{"start":{"line":582,"column":2},"end":{"line":582,"column":43}},"300":{"start":{"line":590,"column":0},"end":{"line":641,"column":2}},"301":{"start":{"line":591,"column":2},"end":{"line":593,"column":3}},"302":{"start":{"line":592,"column":4},"end":{"line":592,"column":22}},"303":{"start":{"line":594,"column":2},"end":{"line":594,"column":18}},"304":{"start":{"line":596,"column":2},"end":{"line":596,"column":17}},"305":{"start":{"line":597,"column":2},"end":{"line":597,"column":47}},"306":{"start":{"line":598,"column":2},"end":{"line":640,"column":5}},"307":{"start":{"line":599,"column":4},"end":{"line":618,"column":7}},"308":{"start":{"line":600,"column":6},"end":{"line":602,"column":7}},"309":{"start":{"line":601,"column":8},"end":{"line":601,"column":22}},"310":{"start":{"line":603,"column":6},"end":{"line":603,"column":29}},"311":{"start":{"line":604,"column":6},"end":{"line":604,"column":42}},"312":{"start":{"line":605,"column":6},"end":{"line":612,"column":7}},"313":{"start":{"line":606,"column":8},"end":{"line":606,"column":70}},"314":{"start":{"line":607,"column":8},"end":{"line":609,"column":9}},"315":{"start":{"line":608,"column":10},"end":{"line":608,"column":25}},"316":{"start":{"line":610,"column":8},"end":{"line":610,"column":52}},"317":{"start":{"line":611,"column":8},"end":{"line":611,"column":39}},"318":{"start":{"line":613,"column":6},"end":{"line":613,"column":43}},"319":{"start":{"line":614,"column":6},"end":{"line":614,"column":30}},"320":{"start":{"line":615,"column":6},"end":{"line":615,"column":34}},"321":{"start":{"line":616,"column":6},"end":{"line":616,"column":53}},"322":{"start":{"line":617,"column":6},"end":{"line":617,"column":13}},"323":{"start":{"line":620,"column":4},"end":{"line":622,"column":5}},"324":{"start":{"line":621,"column":6},"end":{"line":621,"column":27}},"325":{"start":{"line":624,"column":4},"end":{"line":637,"column":5}},"326":{"start":{"line":626,"column":6},"end":{"line":626,"column":55}},"327":{"start":{"line":627,"column":6},"end":{"line":627,"column":24}},"328":{"start":{"line":628,"column":6},"end":{"line":635,"column":9}},"329":{"start":{"line":630,"column":8},"end":{"line":634,"column":9}},"330":{"start":{"line":631,"column":10},"end":{"line":631,"column":57}},"331":{"start":{"line":632,"column":10},"end":{"line":632,"column":35}},"332":{"start":{"line":633,"column":10},"end":{"line":633,"column":27}},"333":{"start":{"line":636,"column":6},"end":{"line":636,"column":42}},"334":{"start":{"line":638,"column":4},"end":{"line":638,"column":45}},"335":{"start":{"line":639,"column":4},"end":{"line":639,"column":15}},"336":{"start":{"line":649,"column":0},"end":{"line":662,"column":2}},"337":{"start":{"line":650,"column":2},"end":{"line":650,"column":35}},"338":{"start":{"line":651,"column":2},"end":{"line":651,"column":25}},"339":{"start":{"line":652,"column":2},"end":{"line":652,"column":33}},"340":{"start":{"line":653,"column":2},"end":{"line":656,"column":3}},"341":{"start":{"line":654,"column":4},"end":{"line":654,"column":151}},"342":{"start":{"line":655,"column":4},"end":{"line":655,"column":26}},"343":{"start":{"line":657,"column":2},"end":{"line":660,"column":3}},"344":{"start":{"line":658,"column":4},"end":{"line":658,"column":205}},"345":{"start":{"line":659,"column":4},"end":{"line":659,"column":19}},"346":{"start":{"line":661,"column":2},"end":{"line":661,"column":78}},"347":{"start":{"line":668,"column":0},"end":{"line":680,"column":2}},"348":{"start":{"line":669,"column":2},"end":{"line":669,"column":14}},"349":{"start":{"line":670,"column":2},"end":{"line":670,"column":18}},"350":{"start":{"line":671,"column":2},"end":{"line":674,"column":3}},"351":{"start":{"line":672,"column":4},"end":{"line":672,"column":26}},"352":{"start":{"line":673,"column":4},"end":{"line":673,"column":18}},"353":{"start":{"line":675,"column":2},"end":{"line":675,"column":52}},"354":{"start":{"line":676,"column":2},"end":{"line":679,"column":32}},"355":{"start":{"line":677,"column":4},"end":{"line":677,"column":64}},"356":{"start":{"line":678,"column":4},"end":{"line":678,"column":102}},"357":{"start":{"line":689,"column":0},"end":{"line":713,"column":2}},"358":{"start":{"line":690,"column":2},"end":{"line":690,"column":18}},"359":{"start":{"line":691,"column":2},"end":{"line":694,"column":3}},"360":{"start":{"line":692,"column":4},"end":{"line":692,"column":29}},"361":{"start":{"line":693,"column":4},"end":{"line":693,"column":25}},"362":{"start":{"line":695,"column":2},"end":{"line":698,"column":3}},"363":{"start":{"line":696,"column":4},"end":{"line":696,"column":66}},"364":{"start":{"line":697,"column":4},"end":{"line":697,"column":56}},"365":{"start":{"line":699,"column":2},"end":{"line":711,"column":3}},"366":{"start":{"line":700,"column":4},"end":{"line":702,"column":5}},"367":{"start":{"line":701,"column":6},"end":{"line":701,"column":61}},"368":{"start":{"line":704,"column":4},"end":{"line":710,"column":7}},"369":{"start":{"line":705,"column":6},"end":{"line":708,"column":7}},"370":{"start":{"line":707,"column":8},"end":{"line":707,"column":29}},"371":{"start":{"line":709,"column":6},"end":{"line":709,"column":26}},"372":{"start":{"line":712,"column":2},"end":{"line":712,"column":22}},"373":{"start":{"line":716,"column":0},"end":{"line":721,"column":2}},"374":{"start":{"line":717,"column":2},"end":{"line":719,"column":3}},"375":{"start":{"line":718,"column":4},"end":{"line":718,"column":67}},"376":{"start":{"line":720,"column":2},"end":{"line":720,"column":22}},"377":{"start":{"line":723,"column":0},"end":{"line":731,"column":2}},"378":{"start":{"line":725,"column":2},"end":{"line":725,"column":28}},"379":{"start":{"line":727,"column":2},"end":{"line":727,"column":92}},"380":{"start":{"line":729,"column":2},"end":{"line":729,"column":43}},"381":{"start":{"line":730,"column":2},"end":{"line":730,"column":45}},"382":{"start":{"line":738,"column":0},"end":{"line":773,"column":1}},"383":{"start":{"line":739,"column":2},"end":{"line":739,"column":21}},"384":{"start":{"line":740,"column":2},"end":{"line":772,"column":5}},"385":{"start":{"line":742,"column":6},"end":{"line":748,"column":9}},"386":{"start":{"line":743,"column":8},"end":{"line":745,"column":9}},"387":{"start":{"line":744,"column":10},"end":{"line":744,"column":47}},"388":{"start":{"line":747,"column":8},"end":{"line":747,"column":15}},"389":{"start":{"line":751,"column":6},"end":{"line":757,"column":9}},"390":{"start":{"line":752,"column":8},"end":{"line":754,"column":9}},"391":{"start":{"line":753,"column":10},"end":{"line":753,"column":47}},"392":{"start":{"line":756,"column":8},"end":{"line":756,"column":15}},"393":{"start":{"line":760,"column":4},"end":{"line":770,"column":5}},"394":{"start":{"line":763,"column":6},"end":{"line":769,"column":9}},"395":{"start":{"line":764,"column":8},"end":{"line":766,"column":9}},"396":{"start":{"line":765,"column":10},"end":{"line":765,"column":31}},"397":{"start":{"line":767,"column":8},"end":{"line":767,"column":29}},"398":{"start":{"line":768,"column":8},"end":{"line":768,"column":34}},"399":{"start":{"line":771,"column":4},"end":{"line":771,"column":30}},"400":{"start":{"line":775,"column":0},"end":{"line":775,"column":35}}},"branchMap":{"1":{"line":76,"type":"if","locations":[{"start":{"line":76,"column":2},"end":{"line":76,"column":2}},{"start":{"line":76,"column":2},"end":{"line":76,"column":2}}]},"2":{"line":82,"type":"binary-expr","locations":[{"start":{"line":82,"column":36},"end":{"line":82,"column":40}},{"start":{"line":82,"column":44},"end":{"line":82,"column":77}}]},"3":{"line":86,"type":"if","locations":[{"start":{"line":86,"column":4},"end":{"line":86,"column":4}},{"start":{"line":86,"column":4},"end":{"line":86,"column":4}}]},"4":{"line":93,"type":"if","locations":[{"start":{"line":93,"column":8},"end":{"line":93,"column":8}},{"start":{"line":93,"column":8},"end":{"line":93,"column":8}}]},"5":{"line":93,"type":"binary-expr","locations":[{"start":{"line":93,"column":12},"end":{"line":93,"column":35}},{"start":{"line":93,"column":39},"end":{"line":93,"column":61}}]},"6":{"line":98,"type":"if","locations":[{"start":{"line":98,"column":8},"end":{"line":98,"column":8}},{"start":{"line":98,"column":8},"end":{"line":98,"column":8}}]},"7":{"line":98,"type":"binary-expr","locations":[{"start":{"line":98,"column":12},"end":{"line":98,"column":33}},{"start":{"line":98,"column":37},"end":{"line":98,"column":58}}]},"8":{"line":103,"type":"if","locations":[{"start":{"line":103,"column":8},"end":{"line":103,"column":8}},{"start":{"line":103,"column":8},"end":{"line":103,"column":8}}]},"9":{"line":107,"type":"if","locations":[{"start":{"line":107,"column":10},"end":{"line":107,"column":10}},{"start":{"line":107,"column":10},"end":{"line":107,"column":10}}]},"10":{"line":117,"type":"if","locations":[{"start":{"line":117,"column":8},"end":{"line":117,"column":8}},{"start":{"line":117,"column":8},"end":{"line":117,"column":8}}]},"11":{"line":117,"type":"binary-expr","locations":[{"start":{"line":117,"column":12},"end":{"line":117,"column":16}},{"start":{"line":117,"column":20},"end":{"line":117,"column":43}}]},"12":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":4},"end":{"line":129,"column":4}},{"start":{"line":129,"column":4},"end":{"line":129,"column":4}}]},"13":{"line":150,"type":"if","locations":[{"start":{"line":150,"column":4},"end":{"line":150,"column":4}},{"start":{"line":150,"column":4},"end":{"line":150,"column":4}}]},"14":{"line":151,"type":"if","locations":[{"start":{"line":151,"column":6},"end":{"line":151,"column":6}},{"start":{"line":151,"column":6},"end":{"line":151,"column":6}}]},"15":{"line":164,"type":"if","locations":[{"start":{"line":164,"column":2},"end":{"line":164,"column":2}},{"start":{"line":164,"column":2},"end":{"line":164,"column":2}}]},"16":{"line":168,"type":"if","locations":[{"start":{"line":168,"column":6},"end":{"line":168,"column":6}},{"start":{"line":168,"column":6},"end":{"line":168,"column":6}}]},"17":{"line":168,"type":"binary-expr","locations":[{"start":{"line":168,"column":10},"end":{"line":168,"column":14}},{"start":{"line":168,"column":18},"end":{"line":168,"column":19}}]},"18":{"line":191,"type":"binary-expr","locations":[{"start":{"line":191,"column":11},"end":{"line":191,"column":22}},{"start":{"line":191,"column":27},"end":{"line":191,"column":49}}]},"19":{"line":195,"type":"if","locations":[{"start":{"line":195,"column":6},"end":{"line":195,"column":6}},{"start":{"line":195,"column":6},"end":{"line":195,"column":6}}]},"20":{"line":204,"type":"if","locations":[{"start":{"line":204,"column":4},"end":{"line":204,"column":4}},{"start":{"line":204,"column":4},"end":{"line":204,"column":4}}]},"21":{"line":221,"type":"if","locations":[{"start":{"line":221,"column":4},"end":{"line":221,"column":4}},{"start":{"line":221,"column":4},"end":{"line":221,"column":4}}]},"22":{"line":231,"type":"if","locations":[{"start":{"line":231,"column":8},"end":{"line":231,"column":8}},{"start":{"line":231,"column":8},"end":{"line":231,"column":8}}]},"23":{"line":240,"type":"if","locations":[{"start":{"line":240,"column":8},"end":{"line":240,"column":8}},{"start":{"line":240,"column":8},"end":{"line":240,"column":8}}]},"24":{"line":243,"type":"if","locations":[{"start":{"line":243,"column":8},"end":{"line":243,"column":8}},{"start":{"line":243,"column":8},"end":{"line":243,"column":8}}]},"25":{"line":253,"type":"if","locations":[{"start":{"line":253,"column":8},"end":{"line":253,"column":8}},{"start":{"line":253,"column":8},"end":{"line":253,"column":8}}]},"26":{"line":314,"type":"if","locations":[{"start":{"line":314,"column":6},"end":{"line":314,"column":6}},{"start":{"line":314,"column":6},"end":{"line":314,"column":6}}]},"27":{"line":331,"type":"if","locations":[{"start":{"line":331,"column":2},"end":{"line":331,"column":2}},{"start":{"line":331,"column":2},"end":{"line":331,"column":2}}]},"28":{"line":336,"type":"if","locations":[{"start":{"line":336,"column":2},"end":{"line":336,"column":2}},{"start":{"line":336,"column":2},"end":{"line":336,"column":2}}]},"29":{"line":342,"type":"if","locations":[{"start":{"line":342,"column":2},"end":{"line":342,"column":2}},{"start":{"line":342,"column":2},"end":{"line":342,"column":2}}]},"30":{"line":368,"type":"if","locations":[{"start":{"line":368,"column":6},"end":{"line":368,"column":6}},{"start":{"line":368,"column":6},"end":{"line":368,"column":6}}]},"31":{"line":392,"type":"if","locations":[{"start":{"line":392,"column":6},"end":{"line":392,"column":6}},{"start":{"line":392,"column":6},"end":{"line":392,"column":6}}]},"32":{"line":398,"type":"if","locations":[{"start":{"line":398,"column":4},"end":{"line":398,"column":4}},{"start":{"line":398,"column":4},"end":{"line":398,"column":4}}]},"33":{"line":398,"type":"binary-expr","locations":[{"start":{"line":398,"column":8},"end":{"line":398,"column":11}},{"start":{"line":398,"column":15},"end":{"line":398,"column":31}}]},"34":{"line":401,"type":"if","locations":[{"start":{"line":401,"column":4},"end":{"line":401,"column":4}},{"start":{"line":401,"column":4},"end":{"line":401,"column":4}}]},"35":{"line":438,"type":"if","locations":[{"start":{"line":438,"column":4},"end":{"line":438,"column":4}},{"start":{"line":438,"column":4},"end":{"line":438,"column":4}}]},"36":{"line":443,"type":"if","locations":[{"start":{"line":443,"column":4},"end":{"line":443,"column":4}},{"start":{"line":443,"column":4},"end":{"line":443,"column":4}}]},"37":{"line":444,"type":"if","locations":[{"start":{"line":444,"column":6},"end":{"line":444,"column":6}},{"start":{"line":444,"column":6},"end":{"line":444,"column":6}}]},"38":{"line":455,"type":"if","locations":[{"start":{"line":455,"column":4},"end":{"line":455,"column":4}},{"start":{"line":455,"column":4},"end":{"line":455,"column":4}}]},"39":{"line":467,"type":"if","locations":[{"start":{"line":467,"column":2},"end":{"line":467,"column":2}},{"start":{"line":467,"column":2},"end":{"line":467,"column":2}}]},"40":{"line":481,"type":"if","locations":[{"start":{"line":481,"column":2},"end":{"line":481,"column":2}},{"start":{"line":481,"column":2},"end":{"line":481,"column":2}}]},"41":{"line":482,"type":"if","locations":[{"start":{"line":482,"column":4},"end":{"line":482,"column":4}},{"start":{"line":482,"column":4},"end":{"line":482,"column":4}}]},"42":{"line":493,"type":"if","locations":[{"start":{"line":493,"column":2},"end":{"line":493,"column":2}},{"start":{"line":493,"column":2},"end":{"line":493,"column":2}}]},"43":{"line":497,"type":"if","locations":[{"start":{"line":497,"column":2},"end":{"line":497,"column":2}},{"start":{"line":497,"column":2},"end":{"line":497,"column":2}}]},"44":{"line":504,"type":"if","locations":[{"start":{"line":504,"column":7},"end":{"line":504,"column":7}},{"start":{"line":504,"column":7},"end":{"line":504,"column":7}}]},"45":{"line":510,"type":"if","locations":[{"start":{"line":510,"column":7},"end":{"line":510,"column":7}},{"start":{"line":510,"column":7},"end":{"line":510,"column":7}}]},"46":{"line":516,"type":"if","locations":[{"start":{"line":516,"column":7},"end":{"line":516,"column":7}},{"start":{"line":516,"column":7},"end":{"line":516,"column":7}}]},"47":{"line":522,"type":"if","locations":[{"start":{"line":522,"column":2},"end":{"line":522,"column":2}},{"start":{"line":522,"column":2},"end":{"line":522,"column":2}}]},"48":{"line":567,"type":"if","locations":[{"start":{"line":567,"column":2},"end":{"line":567,"column":2}},{"start":{"line":567,"column":2},"end":{"line":567,"column":2}}]},"49":{"line":567,"type":"binary-expr","locations":[{"start":{"line":567,"column":6},"end":{"line":567,"column":13}},{"start":{"line":567,"column":17},"end":{"line":567,"column":29}},{"start":{"line":567,"column":33},"end":{"line":567,"column":52}}]},"50":{"line":573,"type":"if","locations":[{"start":{"line":573,"column":2},"end":{"line":573,"column":2}},{"start":{"line":573,"column":2},"end":{"line":573,"column":2}}]},"51":{"line":591,"type":"if","locations":[{"start":{"line":591,"column":2},"end":{"line":591,"column":2}},{"start":{"line":591,"column":2},"end":{"line":591,"column":2}}]},"52":{"line":591,"type":"binary-expr","locations":[{"start":{"line":591,"column":6},"end":{"line":591,"column":13}},{"start":{"line":591,"column":17},"end":{"line":591,"column":29}}]},"53":{"line":600,"type":"if","locations":[{"start":{"line":600,"column":6},"end":{"line":600,"column":6}},{"start":{"line":600,"column":6},"end":{"line":600,"column":6}}]},"54":{"line":605,"type":"if","locations":[{"start":{"line":605,"column":6},"end":{"line":605,"column":6}},{"start":{"line":605,"column":6},"end":{"line":605,"column":6}}]},"55":{"line":607,"type":"if","locations":[{"start":{"line":607,"column":8},"end":{"line":607,"column":8}},{"start":{"line":607,"column":8},"end":{"line":607,"column":8}}]},"56":{"line":620,"type":"if","locations":[{"start":{"line":620,"column":4},"end":{"line":620,"column":4}},{"start":{"line":620,"column":4},"end":{"line":620,"column":4}}]},"57":{"line":624,"type":"if","locations":[{"start":{"line":624,"column":4},"end":{"line":624,"column":4}},{"start":{"line":624,"column":4},"end":{"line":624,"column":4}}]},"58":{"line":630,"type":"if","locations":[{"start":{"line":630,"column":8},"end":{"line":630,"column":8}},{"start":{"line":630,"column":8},"end":{"line":630,"column":8}}]},"59":{"line":630,"type":"binary-expr","locations":[{"start":{"line":630,"column":12},"end":{"line":630,"column":29}},{"start":{"line":630,"column":33},"end":{"line":630,"column":48}}]},"60":{"line":653,"type":"if","locations":[{"start":{"line":653,"column":2},"end":{"line":653,"column":2}},{"start":{"line":653,"column":2},"end":{"line":653,"column":2}}]},"61":{"line":657,"type":"if","locations":[{"start":{"line":657,"column":2},"end":{"line":657,"column":2}},{"start":{"line":657,"column":2},"end":{"line":657,"column":2}}]},"62":{"line":691,"type":"if","locations":[{"start":{"line":691,"column":2},"end":{"line":691,"column":2}},{"start":{"line":691,"column":2},"end":{"line":691,"column":2}}]},"63":{"line":699,"type":"if","locations":[{"start":{"line":699,"column":2},"end":{"line":699,"column":2}},{"start":{"line":699,"column":2},"end":{"line":699,"column":2}}]},"64":{"line":700,"type":"if","locations":[{"start":{"line":700,"column":4},"end":{"line":700,"column":4}},{"start":{"line":700,"column":4},"end":{"line":700,"column":4}}]},"65":{"line":705,"type":"if","locations":[{"start":{"line":705,"column":6},"end":{"line":705,"column":6}},{"start":{"line":705,"column":6},"end":{"line":705,"column":6}}]},"66":{"line":717,"type":"if","locations":[{"start":{"line":717,"column":2},"end":{"line":717,"column":2}},{"start":{"line":717,"column":2},"end":{"line":717,"column":2}}]},"67":{"line":743,"type":"if","locations":[{"start":{"line":743,"column":8},"end":{"line":743,"column":8}},{"start":{"line":743,"column":8},"end":{"line":743,"column":8}}]},"68":{"line":752,"type":"if","locations":[{"start":{"line":752,"column":8},"end":{"line":752,"column":8}},{"start":{"line":752,"column":8},"end":{"line":752,"column":8}}]},"69":{"line":760,"type":"if","locations":[{"start":{"line":760,"column":4},"end":{"line":760,"column":4}},{"start":{"line":760,"column":4},"end":{"line":760,"column":4}}]},"70":{"line":764,"type":"if","locations":[{"start":{"line":764,"column":8},"end":{"line":764,"column":8}},{"start":{"line":764,"column":8},"end":{"line":764,"column":8}}]}},"code":["\"use strict\";","var events = require('events');","var util = require('util');","var dns = require('dns');","var net = require('net');","","var errors = require('./errors');","var Host = require('./host').Host;","var HostMap = require('./host').HostMap;","var Metadata = require('./metadata');","var EventDebouncer = require('./metadata/event-debouncer');","var requests = require('./requests');","var utils = require('./utils');","var types = require('./types');","","var selectPeers = \"SELECT peer,data_center,rack,tokens,rpc_address,release_version FROM system.peers\";","var selectLocal = \"SELECT * FROM system.local WHERE key='local'\";","var newNodeDelay = 1000;","var metadataQueryAbortTimeout = 2000;","var schemaChangeTypes = {","  created: 'CREATED',","  updated: 'UPDATED',","  dropped: 'DROPPED'","};","/**"," * Represents a connection used by the driver to receive events and to check the status of the cluster"," * @param {Object} options"," * @param {ProfileManager} profileManager"," * @extends EventEmitter"," * @constructor"," */","function ControlConnection(options, profileManager) {","  this.protocolVersion = null;","  this.hosts = new HostMap();","  //noinspection JSUnresolvedFunction","  this.setMaxListeners(0);","  Object.defineProperty(this, \"options\", { value: options, enumerable: false, writable: false});","  /**","   * Cluster metadata that is going to be shared between the Client and ControlConnection","   */","  this.metadata = new Metadata(this.options, this);","  this.addressTranslator = this.options.policies.addressResolution;","  this.loadBalancingPolicy = this.options.policies.loadBalancing;","  this.initialized = false;","  /**","   * Host used by the control connection","   * @type {Host|null}","   */","  this.host = null;","  /**","   * Connection used to retrieve metadata and subscribed to events","   * @type {Connection|null}","   */","  this.connection = null;","  /**","   * Reference to the encoder of the last valid connection","   * @type {Encoder|null}","   */","  this.encoder = null;","  this.debouncer = new EventDebouncer(options.refreshSchemaDelay, this.log.bind(this));","  this.profileManager = profileManager;","  /** Timeout used for delayed handling of topology changes */","  this.topologyChangeTimeout = null;","  /** Timeout used for delayed handling of node status changes */","  this.nodeStatusChangeTimeout = null;","}","","util.inherits(ControlConnection, events.EventEmitter);","","/**"," * Tries to determine a suitable protocol version to be used."," * Tries to retrieve the hosts in the Cluster."," * @param {Function} callback"," */","ControlConnection.prototype.init = function (callback) {","  if (this.initialized) {","    //prevent multiple serial initializations","    return callback();","  }","  var self = this;","  function addHost(address, port, cb) {","    var endPoint = address + ':' + (port || self.options.protocolOptions.port);","    var h = new Host(endPoint, self.protocolVersion, self.options);","    self.hosts.set(endPoint, h);","    self.log('info', 'Adding host ' + endPoint);","    if (cb) {","      cb();","    }","  }","  utils.series([","    function resolveNames(next) {","      utils.each(self.options.contactPoints, function eachResolve(name, eachNext) {","        if (name.indexOf('[') === 0 && name.indexOf(']:') > 1) {","          // IPv6 host notation [ip]:port (RFC 3986 section 3.2.2)","          var portSeparatorIndex = name.lastIndexOf(']:');","          return addHost(name.substr(1, portSeparatorIndex - 1), name.substr(portSeparatorIndex + 2), eachNext);","        }","        if (name.indexOf('.') > 0 && name.indexOf(':') > 0) {","          // IPv4 with port notation","          var parts = name.split(':');","          return addHost(parts[0], parts[1], eachNext);","        }","        if (net.isIP(name)) {","          return addHost(name, null, eachNext);","        }","        resolveAll(name, function (err, addresses) {","          if (err) {","            self.log('error', 'Host with name ' + name + ' could not be resolved', err);","            return eachNext();","          }","          addresses.forEach(function (address) {","            addHost(address, null);","          });","          eachNext();","        });","      }, function (err) {","        if (!err && self.hosts.length === 0) {","          err = new errors.NoHostAvailableError(null, 'No host could be resolved');","        }","        next(err);","      });","    },","    this.getConnection.bind(this),","    function tryInitOnConnection(next) {","      self.refreshOnConnection(true, next);","    }","  ], function seriesFinished(err) {","    self.initialized = !err;","    if (err) {","      // Reset the internal state of the ControlConnection for future initialization attempts","      var currentHosts = self.hosts;","      currentHosts.forEach(function forEachHost(h) {","        h.shutdown();","      });","      self.hosts = new HostMap();","    }","    callback(err);","  });","};","","/**"," * Gets a connection to any Host in the pool."," * If its the first time, it will try to create a connection to a host present in the contactPoints in order."," * @param {Function} callback"," * @emits ControlConnection#newConnection When a new connection is acquired"," */","ControlConnection.prototype.getConnection = function (callback) {","  var self = this;","  function done(err, c, host) {","    if (!err) {","      if (c) {","        self.connection = c;","        self.encoder = c.encoder;","        self.host = host;","      }","      else {","        // Make sure that an error is being thrown","        err = new errors.DriverInternalError('No connection could be acquired but no error was found');","      }","    }","    callback(err);","    self.emit('newConnection', err, c, host);","  }","  if (!this.initialized) {","    //it is the first time","    this.log('info', 'Getting first connection');","    return this.getFirstConnection(function (err, c, host) {","      if (!err && c) {","        self.protocolVersion = c.protocolVersion;","        self.log('info', 'Control connection using protocol version ' + self.protocolVersion);","      }","      done(err, c, host);","    });","  }","  this.log('info', 'Trying to acquire a connection to a new host');","  this.getConnectionToNewHost(done);","};","","/**"," * Gets an open connection to using the provided hosts Array, without using the load balancing policy."," * Invoked before the Client can access topology of the cluster."," * @param {Function} callback"," */","ControlConnection.prototype.getFirstConnection = function (callback) {","  var connection = null;","  var index = -1;","  var openingErrors = {};","  var hosts = this.hosts.values();","  var host = null;","  utils.whilst(function condition () {","    return !connection && (++index < hosts.length);","  }, function iterator(next) {","    host = hosts[index];","    host.borrowConnection(function (err, c) {","      if (err) {","        openingErrors[host.address] = err;","      }","      else {","        connection = c;","      }","      next();","    });","  }, function done(err) {","    if (!connection) {","      err = new errors.NoHostAvailableError(openingErrors);","    }","    callback(err, connection, host);","  });","};","","/**"," * Acquires a connection to a host according to the load balancing policy."," * If its not possible to connect, it subscribes to the hosts UP event."," * @param {Function} callback"," */","ControlConnection.prototype.getConnectionToNewHost = function (callback) {","  var self = this;","  var host;","  var connection = null;","  this.profileManager.getDefaultLoadBalancing().newQueryPlan(null, null, function (err, iterator) {","    if (err) {","      var message = 'Control connection could not retrieve a query plan to determine which hosts to use, ' +","        'using current hosts map';","      self.log('error', message, err);","      iterator = utils.arrayIterator(self.hosts.values());","    }","    //use iterator","    utils.whilst(","      function condition() {","        //while there isn't a valid connection","        if (connection) {","          return false;","        }","        var item = iterator.next();","        host = item.value;","        return (!item.done);","      },","      function whileIterator(next) {","        var distance = self.profileManager.getDistance(host);","        if (!host.isUp()) {","          return next();","        }","        if (distance === types.distance.ignored) {","          return next();","        }","        host.borrowConnection(function (err, c) {","          //move next if there was an error","          connection = c;","          next();","        });","      },","      function whilstEnded() {","        if (!connection) {","          self.listenHostsForUp();","          // Callback in error as no connection could be acquired","          return callback(new errors.NoHostAvailableError(null));","        }","        callback(null, connection, host);","      });","  });","};","","/**"," * Subscribe to the UP event of all current hosts to reconnect when one"," * of them are back up."," */","ControlConnection.prototype.listenHostsForUp = function () {","  var self = this;","  var hostArray = this.hosts.values();","  function onUp() {","    //unsubscribe from all host","    hostArray.forEach(function (host) {","      host.removeListener('up', onUp);","    });","    self.refresh();","  }","  //All hosts are DOWN, we should subscribe to the UP event","  //of each host as the HostConnectionPool is attempting to reconnect","  hostArray.forEach(function (host) {","    host.on('up', onUp);","  });","};","","/**"," * Gets info and subscribe to events on an specific connection"," * @param {Boolean} firstTime Determines if the cc is being initialized and"," * it's the first time that trying to retrieve host information"," * @param {Function} callback"," */","ControlConnection.prototype.refreshOnConnection = function (firstTime, callback) {","  var c = this.connection;","  var self = this;","  self.log('info', 'Connection acquired to ' + self.host.address + ', refreshing nodes list');","  utils.series([","    function getLocalAndPeersInfo(next) {","      var host = self.host;","      function downOrIgnoredHandler() {","        host.removeListener('down', downOrIgnoredHandler);","        host.removeListener('ignore', downOrIgnoredHandler);","        self.hostDownHandler();","      }","      host.once('down', downOrIgnoredHandler);","      host.once('ignore', downOrIgnoredHandler);","      self.refreshHosts(firstTime, next);","    },","    function subscribeConnectionEvents(next) {","      c.on('nodeTopologyChange', self.nodeTopologyChangeHandler.bind(self));","      c.on('nodeStatusChange', self.nodeStatusChangeHandler.bind(self));","      c.on('nodeSchemaChange', self.nodeSchemaChangeHandler.bind(self));","      var request = new requests.RegisterRequest(['TOPOLOGY_CHANGE', 'STATUS_CHANGE', 'SCHEMA_CHANGE']);","      c.sendStream(request, null, next);","    }],","    function initDone(err) {","      if (err) {","        // An error occurred, the ControlConnection will still reconnect as it's listening to host 'down' event","        self.log('error', 'ControlConnection could not be initialized', err);","      }","      else {","        self.log('info', 'ControlConnection connected to ' + self.host.address + ' and is up to date');","      }","      callback(err);","    });","};","","/**"," * Gets the info from local and peer metadata, reloads the keyspaces metadata and rebuilds tokens."," * @param {Boolean} newNodesUp"," * @param {Function} [callback]"," */","ControlConnection.prototype.refreshHosts = function (newNodesUp, callback) {","  if (!callback) {","    callback = function () {};","  }","  // it's possible that this was called as a result of a topology change, but the connection was lost","  // between scheduling time and now.","  if (!this.connection) {","    callback();","    // this will be called again when there is a new connection.","    return;","  }","  var self = this;","  if (!this.host.protocolVersion) {","    this.hosts.forEach(function (h) {","      h.setProtocolVersion(self.protocolVersion);","    });","  }","  this.log('info', 'Refreshing local and peers info');","  var c = this.connection;","  var host = this.host;","  utils.series([","    function getLocalInfo(next) {","      var request = new requests.QueryRequest(selectLocal, null, null);","      c.sendStream(request, null, function (err, result) {","        self.setLocalInfo(c.endpoint, result);","        next(err);","      });","    },","    function getPeersInfo(next) {","      var request = new requests.QueryRequest(selectPeers, null, null);","      c.sendStream(request, null, function (err, result) {","        self.setPeersInfo(newNodesUp, result, next);","      });","    },","    function getKeyspaces(next) {","      // to acquire metadata we need to specify the cassandra version","      self.metadata.setCassandraVersion(host.getCassandraVersion());","      self.metadata.buildTokens(self.hosts);","      if (!self.options.isMetadataSyncEnabled) {","        return next();","      }","      self.metadata.refreshKeyspaces(false, next);","    }","  ], callback);","};","","ControlConnection.prototype.hostDownHandler = function () {","  this.log('warning', 'Host ' + this.host.address + ' used by the ControlConnection DOWN');","  this.host = null;","  this.connection = null;","  this.refresh();","};","","/**"," * Acquires a connection and refreshes topology metadata."," * @param {Function} [callback]"," */","ControlConnection.prototype.refresh = function (callback) {","  var self = this;","  utils.series([","    this.getConnection.bind(this),","    function (next) {","      if (!self.connection) {","        return next();","      }","      self.refreshOnConnection(false, next);","    }], function doneRefreshing(err) {","","    if (err || !self.connection) {","      self.log('error', 'ControlConnection was not able to reconnect');","    }","    if (callback) {","      callback(err);","    }","  });","};","","/**"," * @param {String} type"," * @param {String} info"," * @param [furtherInfo]"," */","ControlConnection.prototype.log = utils.log;","","/**"," * Handles a TOPOLOGY_CHANGE event"," */","ControlConnection.prototype.nodeTopologyChangeHandler = function (event) {","  this.log('info', 'Received topology change', event);","  // all hosts information needs to be refreshed as tokens might have changed","  var self = this;","  clearTimeout(this.topologyChangeTimeout);","  // Use an additional timer to make sure that the refresh hosts is executed only AFTER the delay","  // In this case, the event debouncer doesn't help because it could not honor the sliding delay (ie: processNow)","  this.topologyChangeTimeout = setTimeout(function nodeTopologyDelayedHandler() {","    self.scheduleRefreshHosts();","  }, newNodeDelay);","};","","/**"," * Handles a STATUS_CHANGE event"," */","ControlConnection.prototype.nodeStatusChangeHandler = function (event) {","  var self = this;","  var addressToTranslate = event.inet.address.toString();","  var port = this.options.protocolOptions.port;","  this.addressTranslator.translate(addressToTranslate, port, function translateCallback(endPoint) {","    var host = self.hosts.get(endPoint);","    if (!host) {","      self.log('warning', 'Received status change event but host was not found: ' + addressToTranslate);","      return;","    }","    var distance = self.profileManager.getDistance(host);","    if (event.up) {","      if (distance === types.distance.ignored) {","        return host.setUp(true);","      }","      clearTimeout(self.nodeStatusChangeTimeout);","      // Waits a couple of seconds before marking it as UP","      self.nodeStatusChangeTimeout = setTimeout(function delayCheckIsUp() {","        host.checkIsUp();","      }, newNodeDelay);","      return;","    }","    // marked as down","    if (distance === types.distance.ignored) {","      return host.setDown();","    }","    self.log('warning', 'Received status change to DOWN for host ' + host.address);","  });","};","","/**"," * Handles a SCHEMA_CHANGE event"," */","ControlConnection.prototype.nodeSchemaChangeHandler = function (event) {","  this.log('info', 'Schema change', event);","  if (!this.options.isMetadataSyncEnabled) {","    return;","  }","  this.handleSchemaChange(event, false);","};","","/**"," * @param {{keyspace: string, isKeyspace: boolean, schemaChangeType, table, udt, functionName, aggregate}} event"," * @param {Boolean} processNow"," * @param {Function} [callback]"," */","ControlConnection.prototype.handleSchemaChange = function (event, processNow, callback) {","  var self = this;","  var handler, cqlObject;","  if (event.isKeyspace) {","    if (event.schemaChangeType === schemaChangeTypes.dropped) {","      handler = function removeKeyspace() {","        // if on the same event queue there is a creation, this handler is not going to be executed","        // it is safe to remove the keyspace metadata","        delete self.metadata.keyspaces[event.keyspace];","      };","      return this.scheduleObjectRefresh(handler, event.keyspace, null, processNow, callback);","    }","    return this.scheduleKeyspaceRefresh(event.keyspace, processNow, callback);","  }","  var ksInfo = this.metadata.keyspaces[event.keyspace];","  if (!ksInfo) {","    // it hasn't been loaded and it is not part of the metadata, don't mind","    return;","  }","  if (event.table) {","    cqlObject = event.table;","    handler = function clearTableState() {","      delete ksInfo.tables[event.table];","      delete ksInfo.views[event.table];","    };","  }","  else if (event.udt) {","    cqlObject = event.udt;","    handler = function clearUdtState() {","      delete ksInfo.udts[event.udt];","    };","  }","  else if (event.functionName) {","    cqlObject = event.functionName;","    handler = function clearFunctionState() {","      delete ksInfo.functions[event.functionName];","    };","  }","  else if (event.aggregate) {","    cqlObject = event.aggregate;","    handler = function clearKeyspaceState() {","      delete ksInfo.aggregates[event.aggregate];","    };","  }","  if (handler) {","    // is a cql object change clean the internal cache","    this.scheduleObjectRefresh(handler, event.keyspace, cqlObject, processNow, callback);","  }","};","","/**"," * @param {Function} handler"," * @param {String} keyspaceName"," * @param {String} cqlObject"," * @param {Boolean} processNow"," * @param {Function} [callback]"," */","ControlConnection.prototype.scheduleObjectRefresh = function (handler, keyspaceName, cqlObject, processNow, callback) {","  this.debouncer.eventReceived(","    { handler: handler, keyspace: keyspaceName, cqlObject: cqlObject, callback: callback },","    processNow","  );","};","","/**"," * @param {String} keyspaceName"," * @param {Boolean} processNow"," * @param {Function} [callback]"," */","ControlConnection.prototype.scheduleKeyspaceRefresh = function (keyspaceName, processNow, callback) {","  var self = this;","  var handler = function keyspaceRefreshHandler(cb) {","    self.metadata.refreshKeyspace(keyspaceName, cb);","  };","  this.debouncer.eventReceived({ handler: handler, keyspace: keyspaceName, callback: callback}, processNow);","};","","/**"," * @param {Function} [callback]"," */","ControlConnection.prototype.scheduleRefreshHosts = function (callback) {","  var self = this;","  var handler = function hostsRefreshHandler(cb) {","    self.refreshHosts(false, cb);","  };","  this.debouncer.eventReceived({ handler: handler, all: true, callback: callback }, false);","};","","ControlConnection.prototype.setLocalInfo = function (endPoint, result) {","  if (!result || !result.rows || !result.rows.length) {","    this.log('warning', 'No local info provided');","    return;","  }","  var row = result.rows[0];","  var localHost = this.hosts.get(endPoint);","  if (!localHost) {","    this.log('error', 'Localhost could not be found');","    return;","  }","  localHost.datacenter = row['data_center'];","  localHost.rack = row['rack'];","  localHost.tokens = row['tokens'];","  localHost.cassandraVersion = row['release_version'];","  this.metadata.setPartitioner(row['partitioner']);","  this.log('info', 'Local info retrieved');","};","","/**"," * @param {Boolean} newNodesUp"," * @param {ResultSet} result"," * @param {Function} callback"," */","ControlConnection.prototype.setPeersInfo = function (newNodesUp, result, callback) {","  if (!result || !result.rows) {","    return callback();","  }","  var self = this;","  //A map of peers, could useful for in case there are discrepancies","  var peers = {};","  var port = this.options.protocolOptions.port;","  utils.eachSeries(result.rows, function eachPeer(row, next) {","    self.getAddressForPeerHost(row, port, function getAddressForPeerCallback(endPoint) {","      if (!endPoint) {","        return next();","      }","      peers[endPoint] = true;","      var host = self.hosts.get(endPoint);","      if (!host) {","        host = new Host(endPoint, self.protocolVersion, self.options);","        if (!newNodesUp) {","          host.setDown();","        }","        self.log('info', 'Adding host ' + endPoint);","        self.hosts.set(endPoint, host);","      }","      host.datacenter = row['data_center'];","      host.rack = row['rack'];","      host.tokens = row['tokens'];","      host.cassandraVersion = row['release_version'];","      next();","    });","  }, function (err) {","    if (err) {","      return callback(err);","    }","    //Is there a difference in number between peers + local != hosts","    if (self.hosts.length > result.rows.length + 1) {","      //There are hosts in the current state that don't belong (nodes removed or wrong contactPoints)","      self.log('info', 'Removing nodes from the pool');","      var toRemove = [];","      self.hosts.forEach(function (h) {","        //It is not a peer and it is not local host","        if (!peers[h.address] && h !== self.host) {","          self.log('info', 'Removing host ' + h.address);","          toRemove.push(h.address);","          h.shutdown(true);","        }","      });","      self.hosts.removeMultiple(toRemove);","    }","    self.log('info', 'Peers info retrieved');","    callback();","  });","};","","/**"," * @param {Object|Row} row"," * @param {Number} defaultPort"," * @param {Function} callback The callback to invoke with the string representation of the host endpoint,"," *  containing the ip address and port."," */","ControlConnection.prototype.getAddressForPeerHost = function (row, defaultPort, callback) {","  var address = row['rpc_address'];","  var peer = row['peer'];","  var bindAllAddress = '0.0.0.0';","  if (!address) {","    this.log('error', util.format('No rpc_address found for host %s in %s\\'s peers system table. %s will be ignored.', peer, this.host.address, peer));","    return callback(null);","  }","  if (address.toString() === bindAllAddress) {","    this.log('warning', util.format('Found host with 0.0.0.0 as rpc_address, using listen_address (%s) to contact it instead. If this is incorrect you should avoid the use of 0.0.0.0 server side.', peer));","    address = peer;","  }","  this.addressTranslator.translate(address.toString(), defaultPort, callback);","};","","/**"," * Waits for a connection to be available. If timeout expires before getting a connection it callbacks in error."," * @param {Function} callback"," */","ControlConnection.prototype.waitForReconnection = function (callback) {","  var timeout;","  var self = this;","  function newConnectionListener(err) {","    clearTimeout(timeout);","    callback(err);","  }","  this.once('newConnection', newConnectionListener);","  timeout = setTimeout(function waitTimeout() {","    self.removeListener('newConnection', newConnectionListener);","    callback(new errors.OperationTimedOutError('A connection could not be acquired before timeout.'));","  }, metadataQueryAbortTimeout);","};","","/**"," * Executes a query using the active connection"," * @param {String} cqlQuery"," * @param {Boolean} [waitReconnect] Determines if it should wait for reconnection in case the control connection is not"," * connected at the moment. Default: true."," * @param {Function} callback"," */","ControlConnection.prototype.query = function (cqlQuery, waitReconnect, callback) {","  var self = this;","  if (typeof waitReconnect === 'function') {","    callback = waitReconnect;","    waitReconnect = true;","  }","  function queryOnConnection() {","    var request = new requests.QueryRequest(cqlQuery, null, null);","    self.connection.sendStream(request, null, callback);","  }","  if (!this.connection) {","    if (!waitReconnect) {","      return callback(new errors.NoHostAvailableError(null));","    }","    // Wait until its reconnected (or timer elapses)","    return this.waitForReconnection(function waitCallback(err) {","      if (err) {","        //it was not able to reconnect in time","        return callback(err);","      }","      queryOnConnection();","    });","  }","  queryOnConnection();","};","","/** @returns {Encoder} The encoder used by the current connection */","ControlConnection.prototype.getEncoder = function () {","  if (!this.encoder) {","    throw new errors.DriverInternalError('Encoder is not defined');","  }","  return this.encoder;","};","","ControlConnection.prototype.shutdown = function () {","  // no need for callback as it all sync","  this.debouncer.shutdown();","  // Emit a \"newConnection\" event with Error, as it may clear timeouts that were waiting new connections","  this.emit('newConnection', new errors.DriverError('ControlConnection is being shutdown'));","  // Cancel other timers","  clearTimeout(this.topologyChangeTimeout);","  clearTimeout(this.nodeStatusChangeTimeout);","};","","/**"," * Uses the DNS protocol to resolve a IPv4 and IPv6 addresses (A and AAAA records) for the hostname"," * @param name"," * @param callback"," */","function resolveAll(name, callback) {","  var addresses = [];","  utils.parallel([","    function resolve4(next) {","      dns.resolve4(name, function resolve4Callback(err, arr) {","        if (arr) {","          addresses.push.apply(addresses, arr);","        }","        // Ignore error","        next();","      });","    },","    function resolve6(next) {","      dns.resolve6(name, function resolve6Callback(err, arr) {","        if (arr) {","          addresses.push.apply(addresses, arr);","        }","        // Ignore error","        next();","      });","    }","  ], function resolveAllCallback() {","    if (addresses.length === 0) {","      // In case dns.resolve*() methods don't yield a valid address for the host name","      // Use system call getaddrinfo() that might resolve according to host system definitions","      return dns.lookup(name, function (err, addr) {","        if (err) {","          return callback(err);","        }","        addresses.push(addr);","        callback(null, addresses);","      });","    }","    callback(null, addresses);","  });","}","","module.exports = ControlConnection;"],"l":{"2":1,"3":1,"4":1,"5":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"16":1,"17":1,"18":1,"19":1,"20":1,"32":1,"33":0,"34":0,"36":0,"37":0,"41":0,"42":0,"43":0,"44":0,"49":0,"54":0,"59":0,"60":0,"61":0,"63":0,"65":0,"68":1,"75":1,"76":0,"78":0,"80":0,"81":1,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"90":0,"92":0,"93":0,"95":0,"96":0,"98":0,"100":0,"101":0,"103":0,"104":0,"106":0,"107":0,"108":0,"109":0,"111":0,"112":0,"114":0,"117":0,"118":0,"120":0,"125":0,"128":0,"129":0,"131":0,"132":0,"133":0,"135":0,"137":0,"147":1,"148":0,"149":1,"150":0,"151":0,"152":0,"153":0,"154":0,"158":0,"161":0,"162":0,"164":0,"166":0,"167":0,"168":0,"169":0,"170":0,"172":0,"175":0,"176":0,"184":1,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"193":0,"194":0,"195":0,"196":0,"199":0,"201":0,"204":0,"205":0,"207":0,"216":1,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"224":0,"225":0,"228":0,"231":0,"232":0,"234":0,"235":0,"236":0,"239":0,"240":0,"241":0,"243":0,"244":0,"246":0,"248":0,"249":0,"253":0,"254":0,"256":0,"258":0,"267":1,"268":0,"269":0,"270":1,"272":0,"273":0,"275":0,"279":0,"280":0,"290":1,"291":0,"292":0,"293":0,"294":0,"296":0,"297":1,"298":0,"299":0,"300":0,"302":0,"303":0,"304":0,"307":0,"308":0,"309":0,"310":0,"311":0,"314":0,"316":0,"319":0,"321":0,"330":1,"331":0,"332":0,"336":0,"337":0,"339":0,"341":0,"342":0,"343":0,"344":0,"347":0,"348":0,"349":0,"350":0,"352":0,"353":0,"354":0,"355":0,"359":0,"360":0,"361":0,"366":0,"367":0,"368":0,"369":0,"371":0,"376":1,"377":0,"378":0,"379":0,"380":0,"387":1,"388":0,"389":0,"392":0,"393":0,"395":0,"398":0,"399":0,"401":0,"402":0,"412":1,"417":1,"418":0,"420":0,"421":0,"424":0,"425":0,"432":1,"433":0,"434":0,"435":0,"436":0,"437":0,"438":0,"439":0,"440":0,"442":0,"443":0,"444":0,"445":0,"447":0,"449":0,"450":0,"452":0,"455":0,"456":0,"458":0,"465":1,"466":0,"467":0,"468":0,"470":0,"478":1,"479":0,"480":0,"481":0,"482":0,"483":0,"486":0,"488":0,"490":0,"492":0,"493":0,"495":0,"497":0,"498":0,"499":0,"500":0,"501":0,"504":0,"505":0,"506":0,"507":0,"510":0,"511":0,"512":0,"513":0,"516":0,"517":0,"518":0,"519":0,"522":0,"524":0,"535":1,"536":0,"547":1,"548":0,"549":0,"550":0,"552":0,"558":1,"559":0,"560":0,"561":0,"563":0,"566":1,"567":0,"568":0,"569":0,"571":0,"572":0,"573":0,"574":0,"575":0,"577":0,"578":0,"579":0,"580":0,"581":0,"582":0,"590":1,"591":0,"592":0,"594":0,"596":0,"597":0,"598":0,"599":0,"600":0,"601":0,"603":0,"604":0,"605":0,"606":0,"607":0,"608":0,"610":0,"611":0,"613":0,"614":0,"615":0,"616":0,"617":0,"620":0,"621":0,"624":0,"626":0,"627":0,"628":0,"630":0,"631":0,"632":0,"633":0,"636":0,"638":0,"639":0,"649":1,"650":0,"651":0,"652":0,"653":0,"654":0,"655":0,"657":0,"658":0,"659":0,"661":0,"668":1,"669":0,"670":0,"671":1,"672":0,"673":0,"675":0,"676":0,"677":0,"678":0,"689":1,"690":0,"691":0,"692":0,"693":0,"695":1,"696":0,"697":0,"699":0,"700":0,"701":0,"704":0,"705":0,"707":0,"709":0,"712":0,"716":1,"717":0,"718":0,"720":0,"723":1,"725":0,"727":0,"729":0,"730":0,"738":1,"739":0,"740":0,"742":0,"743":0,"744":0,"747":0,"751":0,"752":0,"753":0,"756":0,"760":0,"763":0,"764":0,"765":0,"767":0,"768":0,"771":0,"775":1}},"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/host.js":{"path":"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/host.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":1,"23":1,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":1,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":1,"44":0,"45":0,"46":0,"47":0,"48":0,"49":1,"50":0,"51":0,"52":0,"53":0,"54":0,"55":1,"56":0,"57":1,"58":0,"59":1,"60":0,"61":0,"62":1,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":1,"77":0,"78":1,"79":0,"80":1,"81":0,"82":1,"83":0,"84":0,"85":0,"86":1,"87":0,"88":0,"89":0,"90":1,"91":0,"92":0,"93":1,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":1,"103":0,"104":0,"105":0,"106":0,"107":0,"108":1,"109":0,"110":0,"111":0,"112":0,"113":1,"114":1,"115":0,"116":0,"117":0,"118":0,"119":0,"120":1,"121":1,"122":0,"123":0,"124":0,"125":0,"126":0,"127":1,"128":0,"129":1,"130":0,"131":1,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":1,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":1,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":1,"167":0,"168":0,"169":0,"170":0,"171":1,"172":1,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":1,"182":0,"183":1,"184":0,"185":1,"186":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0},"fnMap":{"1":{"name":"Host","line":15,"loc":{"start":{"line":15,"column":0},"end":{"line":15,"column":49}}},"2":{"name":"onConnectionRemovedFromPool","line":30,"loc":{"start":{"line":30,"column":25},"end":{"line":30,"column":64}}},"3":{"name":"(anonymous_3)","line":65,"loc":{"start":{"line":65,"column":25},"end":{"line":65,"column":36}}},"4":{"name":"(anonymous_4)","line":93,"loc":{"start":{"line":93,"column":23},"end":{"line":93,"column":52}}},"5":{"name":"(anonymous_5)","line":113,"loc":{"start":{"line":113,"column":27},"end":{"line":113,"column":39}}},"6":{"name":"(anonymous_6)","line":129,"loc":{"start":{"line":129,"column":26},"end":{"line":129,"column":62}}},"7":{"name":"(anonymous_7)","line":144,"loc":{"start":{"line":144,"column":22},"end":{"line":144,"column":34}}},"8":{"name":"(anonymous_8)","line":152,"loc":{"start":{"line":152,"column":37},"end":{"line":152,"column":49}}},"9":{"name":"hasTimePassed","line":154,"loc":{"start":{"line":154,"column":2},"end":{"line":154,"column":27}}},"10":{"name":"(anonymous_10)","line":166,"loc":{"start":{"line":166,"column":29},"end":{"line":166,"column":49}}},"11":{"name":"(anonymous_11)","line":195,"loc":{"start":{"line":195,"column":36},"end":{"line":195,"column":53}}},"12":{"name":"(anonymous_12)","line":206,"loc":{"start":{"line":206,"column":34},"end":{"line":206,"column":54}}},"13":{"name":"(anonymous_13)","line":216,"loc":{"start":{"line":216,"column":28},"end":{"line":216,"column":48}}},"14":{"name":"(anonymous_14)","line":226,"loc":{"start":{"line":226,"column":37},"end":{"line":226,"column":49}}},"15":{"name":"(anonymous_15)","line":239,"loc":{"start":{"line":239,"column":29},"end":{"line":239,"column":51}}},"16":{"name":"(anonymous_16)","line":251,"loc":{"start":{"line":251,"column":32},"end":{"line":251,"column":54}}},"17":{"name":"(anonymous_17)","line":262,"loc":{"start":{"line":262,"column":33},"end":{"line":262,"column":45}}},"18":{"name":"(anonymous_18)","line":284,"loc":{"start":{"line":284,"column":38},"end":{"line":284,"column":53}}},"19":{"name":"(anonymous_19)","line":298,"loc":{"start":{"line":298,"column":37},"end":{"line":298,"column":49}}},"20":{"name":"eachMap","line":302,"loc":{"start":{"line":302,"column":60},"end":{"line":302,"column":80}}},"21":{"name":"HostMap","line":315,"loc":{"start":{"line":315,"column":0},"end":{"line":315,"column":19}}},"22":{"name":"(anonymous_22)","line":319,"loc":{"start":{"line":319,"column":47},"end":{"line":319,"column":59}}},"23":{"name":"(anonymous_23)","line":337,"loc":{"start":{"line":337,"column":28},"end":{"line":337,"column":48}}},"24":{"name":"(anonymous_24)","line":353,"loc":{"start":{"line":353,"column":24},"end":{"line":353,"column":39}}},"25":{"name":"(anonymous_25)","line":361,"loc":{"start":{"line":361,"column":25},"end":{"line":361,"column":37}}},"26":{"name":"(anonymous_26)","line":370,"loc":{"start":{"line":370,"column":27},"end":{"line":370,"column":42}}},"27":{"name":"(anonymous_27)","line":390,"loc":{"start":{"line":390,"column":35},"end":{"line":390,"column":51}}},"28":{"name":"(anonymous_28)","line":405,"loc":{"start":{"line":405,"column":23},"end":{"line":405,"column":36}}},"29":{"name":"(anonymous_29)","line":417,"loc":{"start":{"line":417,"column":24},"end":{"line":417,"column":46}}},"30":{"name":"(anonymous_30)","line":445,"loc":{"start":{"line":445,"column":26},"end":{"line":445,"column":48}}},"31":{"name":"(anonymous_31)","line":460,"loc":{"start":{"line":460,"column":27},"end":{"line":460,"column":39}}},"32":{"name":"(anonymous_32)","line":475,"loc":{"start":{"line":475,"column":28},"end":{"line":475,"column":39}}},"33":{"name":"(anonymous_33)","line":479,"loc":{"start":{"line":479,"column":27},"end":{"line":479,"column":38}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":27}},"2":{"start":{"line":3,"column":0},"end":{"line":3,"column":31}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":31}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":31}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":59}},"6":{"start":{"line":15,"column":0},"end":{"line":56,"column":1}},"7":{"start":{"line":16,"column":2},"end":{"line":16,"column":33}},"8":{"start":{"line":21,"column":2},"end":{"line":21,"column":25}},"9":{"start":{"line":22,"column":2},"end":{"line":22,"column":21}},"10":{"start":{"line":23,"column":2},"end":{"line":23,"column":96}},"11":{"start":{"line":27,"column":2},"end":{"line":27,"column":114}},"12":{"start":{"line":28,"column":2},"end":{"line":28,"column":18}},"13":{"start":{"line":29,"column":2},"end":{"line":29,"column":61}},"14":{"start":{"line":30,"column":2},"end":{"line":32,"column":5}},"15":{"start":{"line":31,"column":4},"end":{"line":31,"column":27}},"16":{"start":{"line":37,"column":2},"end":{"line":37,"column":31}},"17":{"start":{"line":42,"column":2},"end":{"line":42,"column":25}},"18":{"start":{"line":47,"column":2},"end":{"line":47,"column":19}},"19":{"start":{"line":52,"column":2},"end":{"line":52,"column":21}},"20":{"start":{"line":54,"column":2},"end":{"line":54,"column":42}},"21":{"start":{"line":55,"column":2},"end":{"line":55,"column":79}},"22":{"start":{"line":58,"column":0},"end":{"line":58,"column":41}},"23":{"start":{"line":65,"column":0},"end":{"line":85,"column":2}},"24":{"start":{"line":67,"column":2},"end":{"line":70,"column":3}},"25":{"start":{"line":69,"column":4},"end":{"line":69,"column":11}},"26":{"start":{"line":71,"column":2},"end":{"line":74,"column":3}},"27":{"start":{"line":73,"column":4},"end":{"line":73,"column":11}},"28":{"start":{"line":75,"column":2},"end":{"line":75,"column":30}},"29":{"start":{"line":76,"column":2},"end":{"line":82,"column":3}},"30":{"start":{"line":77,"column":4},"end":{"line":78,"column":113}},"31":{"start":{"line":81,"column":4},"end":{"line":81,"column":79}},"32":{"start":{"line":83,"column":2},"end":{"line":83,"column":20}},"33":{"start":{"line":84,"column":2},"end":{"line":84,"column":25}},"34":{"start":{"line":93,"column":0},"end":{"line":106,"column":2}},"35":{"start":{"line":94,"column":2},"end":{"line":97,"column":3}},"36":{"start":{"line":96,"column":4},"end":{"line":96,"column":11}},"37":{"start":{"line":98,"column":2},"end":{"line":98,"column":71}},"38":{"start":{"line":99,"column":2},"end":{"line":99,"column":21}},"39":{"start":{"line":101,"column":2},"end":{"line":101,"column":79}},"40":{"start":{"line":102,"column":2},"end":{"line":104,"column":3}},"41":{"start":{"line":103,"column":4},"end":{"line":103,"column":42}},"42":{"start":{"line":105,"column":2},"end":{"line":105,"column":18}},"43":{"start":{"line":113,"column":0},"end":{"line":120,"column":2}},"44":{"start":{"line":114,"column":2},"end":{"line":116,"column":3}},"45":{"start":{"line":115,"column":4},"end":{"line":115,"column":11}},"46":{"start":{"line":117,"column":2},"end":{"line":117,"column":79}},"47":{"start":{"line":118,"column":2},"end":{"line":118,"column":29}},"48":{"start":{"line":119,"column":2},"end":{"line":119,"column":44}},"49":{"start":{"line":129,"column":0},"end":{"line":138,"column":2}},"50":{"start":{"line":130,"column":2},"end":{"line":130,"column":36}},"51":{"start":{"line":131,"column":2},"end":{"line":136,"column":3}},"52":{"start":{"line":132,"column":4},"end":{"line":132,"column":33}},"53":{"start":{"line":135,"column":4},"end":{"line":135,"column":22}},"54":{"start":{"line":137,"column":2},"end":{"line":137,"column":31}},"55":{"start":{"line":144,"column":0},"end":{"line":146,"column":2}},"56":{"start":{"line":145,"column":2},"end":{"line":145,"column":25}},"57":{"start":{"line":152,"column":0},"end":{"line":158,"column":2}},"58":{"start":{"line":153,"column":2},"end":{"line":153,"column":18}},"59":{"start":{"line":154,"column":2},"end":{"line":156,"column":3}},"60":{"start":{"line":155,"column":4},"end":{"line":155,"column":75}},"61":{"start":{"line":157,"column":2},"end":{"line":157,"column":44}},"62":{"start":{"line":166,"column":0},"end":{"line":187,"column":2}},"63":{"start":{"line":167,"column":2},"end":{"line":167,"column":40}},"64":{"start":{"line":168,"column":2},"end":{"line":168,"column":52}},"65":{"start":{"line":169,"column":2},"end":{"line":174,"column":3}},"66":{"start":{"line":170,"column":4},"end":{"line":170,"column":103}},"67":{"start":{"line":173,"column":4},"end":{"line":173,"column":40}},"68":{"start":{"line":175,"column":2},"end":{"line":177,"column":3}},"69":{"start":{"line":176,"column":4},"end":{"line":176,"column":26}},"70":{"start":{"line":178,"column":2},"end":{"line":185,"column":3}},"71":{"start":{"line":180,"column":4},"end":{"line":180,"column":24}},"72":{"start":{"line":181,"column":4},"end":{"line":181,"column":33}},"73":{"start":{"line":183,"column":7},"end":{"line":185,"column":3}},"74":{"start":{"line":184,"column":4},"end":{"line":184,"column":21}},"75":{"start":{"line":186,"column":2},"end":{"line":186,"column":24}},"76":{"start":{"line":195,"column":0},"end":{"line":197,"column":2}},"77":{"start":{"line":196,"column":2},"end":{"line":196,"column":36}},"78":{"start":{"line":206,"column":0},"end":{"line":208,"column":2}},"79":{"start":{"line":207,"column":2},"end":{"line":207,"column":39}},"80":{"start":{"line":216,"column":0},"end":{"line":218,"column":2}},"81":{"start":{"line":217,"column":2},"end":{"line":217,"column":35}},"82":{"start":{"line":226,"column":0},"end":{"line":231,"column":2}},"83":{"start":{"line":227,"column":2},"end":{"line":229,"column":3}},"84":{"start":{"line":228,"column":4},"end":{"line":228,"column":16}},"85":{"start":{"line":230,"column":2},"end":{"line":230,"column":34}},"86":{"start":{"line":239,"column":0},"end":{"line":244,"column":2}},"87":{"start":{"line":240,"column":2},"end":{"line":242,"column":3}},"88":{"start":{"line":241,"column":4},"end":{"line":241,"column":11}},"89":{"start":{"line":243,"column":2},"end":{"line":243,"column":34}},"90":{"start":{"line":251,"column":0},"end":{"line":254,"column":2}},"91":{"start":{"line":252,"column":2},"end":{"line":252,"column":31}},"92":{"start":{"line":253,"column":2},"end":{"line":253,"column":25}},"93":{"start":{"line":262,"column":0},"end":{"line":278,"column":2}},"94":{"start":{"line":263,"column":2},"end":{"line":265,"column":3}},"95":{"start":{"line":264,"column":4},"end":{"line":264,"column":11}},"96":{"start":{"line":266,"column":2},"end":{"line":272,"column":3}},"97":{"start":{"line":268,"column":4},"end":{"line":271,"column":5}},"98":{"start":{"line":269,"column":6},"end":{"line":269,"column":70}},"99":{"start":{"line":270,"column":6},"end":{"line":270,"column":69}},"100":{"start":{"line":273,"column":2},"end":{"line":277,"column":3}},"101":{"start":{"line":276,"column":4},"end":{"line":276,"column":19}},"102":{"start":{"line":284,"column":0},"end":{"line":291,"column":2}},"103":{"start":{"line":285,"column":2},"end":{"line":288,"column":3}},"104":{"start":{"line":286,"column":4},"end":{"line":286,"column":27}},"105":{"start":{"line":287,"column":4},"end":{"line":287,"column":11}},"106":{"start":{"line":289,"column":2},"end":{"line":289,"column":15}},"107":{"start":{"line":290,"column":2},"end":{"line":290,"column":27}},"108":{"start":{"line":298,"column":0},"end":{"line":305,"column":2}},"109":{"start":{"line":299,"column":2},"end":{"line":301,"column":3}},"110":{"start":{"line":300,"column":4},"end":{"line":300,"column":28}},"111":{"start":{"line":302,"column":2},"end":{"line":304,"column":5}},"112":{"start":{"line":303,"column":4},"end":{"line":303,"column":27}},"113":{"start":{"line":307,"column":0},"end":{"line":307,"column":31}},"114":{"start":{"line":315,"column":0},"end":{"line":320,"column":1}},"115":{"start":{"line":316,"column":2},"end":{"line":316,"column":33}},"116":{"start":{"line":317,"column":2},"end":{"line":317,"column":19}},"117":{"start":{"line":318,"column":2},"end":{"line":318,"column":22}},"118":{"start":{"line":319,"column":2},"end":{"line":319,"column":113}},"119":{"start":{"line":319,"column":61},"end":{"line":319,"column":89}},"120":{"start":{"line":322,"column":0},"end":{"line":322,"column":44}},"121":{"start":{"line":337,"column":0},"end":{"line":346,"column":2}},"122":{"start":{"line":339,"column":2},"end":{"line":339,"column":26}},"123":{"start":{"line":340,"column":2},"end":{"line":345,"column":3}},"124":{"start":{"line":341,"column":4},"end":{"line":343,"column":5}},"125":{"start":{"line":342,"column":6},"end":{"line":342,"column":15}},"126":{"start":{"line":344,"column":4},"end":{"line":344,"column":30}},"127":{"start":{"line":353,"column":0},"end":{"line":355,"column":2}},"128":{"start":{"line":354,"column":2},"end":{"line":354,"column":26}},"129":{"start":{"line":361,"column":0},"end":{"line":363,"column":2}},"130":{"start":{"line":362,"column":2},"end":{"line":362,"column":34}},"131":{"start":{"line":370,"column":0},"end":{"line":383,"column":2}},"132":{"start":{"line":371,"column":2},"end":{"line":374,"column":3}},"133":{"start":{"line":373,"column":4},"end":{"line":373,"column":11}},"134":{"start":{"line":376,"column":2},"end":{"line":376,"column":22}},"135":{"start":{"line":378,"column":2},"end":{"line":378,"column":43}},"136":{"start":{"line":379,"column":2},"end":{"line":379,"column":20}},"137":{"start":{"line":380,"column":2},"end":{"line":380,"column":19}},"138":{"start":{"line":381,"column":2},"end":{"line":381,"column":21}},"139":{"start":{"line":382,"column":2},"end":{"line":382,"column":25}},"140":{"start":{"line":390,"column":0},"end":{"line":408,"column":2}},"141":{"start":{"line":392,"column":2},"end":{"line":392,"column":22}},"142":{"start":{"line":394,"column":2},"end":{"line":394,"column":43}},"143":{"start":{"line":395,"column":2},"end":{"line":395,"column":24}},"144":{"start":{"line":396,"column":2},"end":{"line":403,"column":3}},"145":{"start":{"line":397,"column":4},"end":{"line":397,"column":26}},"146":{"start":{"line":398,"column":4},"end":{"line":400,"column":5}},"147":{"start":{"line":399,"column":6},"end":{"line":399,"column":15}},"148":{"start":{"line":401,"column":4},"end":{"line":401,"column":25}},"149":{"start":{"line":402,"column":4},"end":{"line":402,"column":25}},"150":{"start":{"line":404,"column":2},"end":{"line":404,"column":21}},"151":{"start":{"line":405,"column":2},"end":{"line":407,"column":11}},"152":{"start":{"line":406,"column":4},"end":{"line":406,"column":27}},"153":{"start":{"line":417,"column":0},"end":{"line":435,"column":2}},"154":{"start":{"line":419,"column":2},"end":{"line":419,"column":22}},"155":{"start":{"line":420,"column":2},"end":{"line":420,"column":39}},"156":{"start":{"line":421,"column":2},"end":{"line":428,"column":3}},"157":{"start":{"line":423,"column":4},"end":{"line":423,"column":29}},"158":{"start":{"line":425,"column":4},"end":{"line":425,"column":39}},"159":{"start":{"line":426,"column":4},"end":{"line":426,"column":28}},"160":{"start":{"line":427,"column":4},"end":{"line":427,"column":11}},"161":{"start":{"line":430,"column":2},"end":{"line":430,"column":43}},"162":{"start":{"line":431,"column":2},"end":{"line":431,"column":20}},"163":{"start":{"line":432,"column":2},"end":{"line":432,"column":21}},"164":{"start":{"line":433,"column":2},"end":{"line":433,"column":26}},"165":{"start":{"line":434,"column":2},"end":{"line":434,"column":15}},"166":{"start":{"line":445,"column":0},"end":{"line":452,"column":2}},"167":{"start":{"line":446,"column":2},"end":{"line":449,"column":3}},"168":{"start":{"line":448,"column":4},"end":{"line":448,"column":25}},"169":{"start":{"line":450,"column":2},"end":{"line":450,"column":21}},"170":{"start":{"line":451,"column":2},"end":{"line":451,"column":41}},"171":{"start":{"line":454,"column":0},"end":{"line":454,"column":47}},"172":{"start":{"line":460,"column":0},"end":{"line":473,"column":2}},"173":{"start":{"line":461,"column":2},"end":{"line":471,"column":3}},"174":{"start":{"line":463,"column":4},"end":{"line":463,"column":20}},"175":{"start":{"line":464,"column":4},"end":{"line":469,"column":5}},"176":{"start":{"line":465,"column":6},"end":{"line":467,"column":7}},"177":{"start":{"line":466,"column":8},"end":{"line":466,"column":17}},"178":{"start":{"line":468,"column":6},"end":{"line":468,"column":36}},"179":{"start":{"line":470,"column":4},"end":{"line":470,"column":41}},"180":{"start":{"line":472,"column":2},"end":{"line":472,"column":22}},"181":{"start":{"line":475,"column":0},"end":{"line":477,"column":2}},"182":{"start":{"line":476,"column":2},"end":{"line":476,"column":21}},"183":{"start":{"line":479,"column":0},"end":{"line":481,"column":2}},"184":{"start":{"line":480,"column":2},"end":{"line":480,"column":21}},"185":{"start":{"line":483,"column":0},"end":{"line":483,"column":20}},"186":{"start":{"line":484,"column":0},"end":{"line":484,"column":26}}},"branchMap":{"1":{"line":67,"type":"if","locations":[{"start":{"line":67,"column":2},"end":{"line":67,"column":2}},{"start":{"line":67,"column":2},"end":{"line":67,"column":2}}]},"2":{"line":71,"type":"if","locations":[{"start":{"line":71,"column":2},"end":{"line":71,"column":2}},{"start":{"line":71,"column":2},"end":{"line":71,"column":2}}]},"3":{"line":76,"type":"if","locations":[{"start":{"line":76,"column":2},"end":{"line":76,"column":2}},{"start":{"line":76,"column":2},"end":{"line":76,"column":2}}]},"4":{"line":94,"type":"if","locations":[{"start":{"line":94,"column":2},"end":{"line":94,"column":2}},{"start":{"line":94,"column":2},"end":{"line":94,"column":2}}]},"5":{"line":102,"type":"if","locations":[{"start":{"line":102,"column":2},"end":{"line":102,"column":2}},{"start":{"line":102,"column":2},"end":{"line":102,"column":2}}]},"6":{"line":114,"type":"if","locations":[{"start":{"line":114,"column":2},"end":{"line":114,"column":2}},{"start":{"line":114,"column":2},"end":{"line":114,"column":2}}]},"7":{"line":130,"type":"binary-expr","locations":[{"start":{"line":130,"column":13},"end":{"line":130,"column":21}},{"start":{"line":130,"column":25},"end":{"line":130,"column":35}}]},"8":{"line":131,"type":"if","locations":[{"start":{"line":131,"column":2},"end":{"line":131,"column":2}},{"start":{"line":131,"column":2},"end":{"line":131,"column":2}}]},"9":{"line":157,"type":"binary-expr","locations":[{"start":{"line":157,"column":9},"end":{"line":157,"column":24}},{"start":{"line":157,"column":28},"end":{"line":157,"column":43}}]},"10":{"line":168,"type":"binary-expr","locations":[{"start":{"line":168,"column":19},"end":{"line":168,"column":27}},{"start":{"line":168,"column":31},"end":{"line":168,"column":51}}]},"11":{"line":169,"type":"if","locations":[{"start":{"line":169,"column":2},"end":{"line":169,"column":2}},{"start":{"line":169,"column":2},"end":{"line":169,"column":2}}]},"12":{"line":170,"type":"binary-expr","locations":[{"start":{"line":170,"column":38},"end":{"line":170,"column":97}},{"start":{"line":170,"column":101},"end":{"line":170,"column":102}}]},"13":{"line":175,"type":"if","locations":[{"start":{"line":175,"column":2},"end":{"line":175,"column":2}},{"start":{"line":175,"column":2},"end":{"line":175,"column":2}}]},"14":{"line":178,"type":"if","locations":[{"start":{"line":178,"column":2},"end":{"line":178,"column":2}},{"start":{"line":178,"column":2},"end":{"line":178,"column":2}}]},"15":{"line":183,"type":"if","locations":[{"start":{"line":183,"column":7},"end":{"line":183,"column":7}},{"start":{"line":183,"column":7},"end":{"line":183,"column":7}}]},"16":{"line":227,"type":"if","locations":[{"start":{"line":227,"column":2},"end":{"line":227,"column":2}},{"start":{"line":227,"column":2},"end":{"line":227,"column":2}}]},"17":{"line":227,"type":"binary-expr","locations":[{"start":{"line":227,"column":6},"end":{"line":227,"column":18}},{"start":{"line":227,"column":22},"end":{"line":227,"column":51}}]},"18":{"line":240,"type":"if","locations":[{"start":{"line":240,"column":2},"end":{"line":240,"column":2}},{"start":{"line":240,"column":2},"end":{"line":240,"column":2}}]},"19":{"line":263,"type":"if","locations":[{"start":{"line":263,"column":2},"end":{"line":263,"column":2}},{"start":{"line":263,"column":2},"end":{"line":263,"column":2}}]},"20":{"line":266,"type":"if","locations":[{"start":{"line":266,"column":2},"end":{"line":266,"column":2}},{"start":{"line":266,"column":2},"end":{"line":266,"column":2}}]},"21":{"line":268,"type":"if","locations":[{"start":{"line":268,"column":4},"end":{"line":268,"column":4}},{"start":{"line":268,"column":4},"end":{"line":268,"column":4}}]},"22":{"line":273,"type":"if","locations":[{"start":{"line":273,"column":2},"end":{"line":273,"column":2}},{"start":{"line":273,"column":2},"end":{"line":273,"column":2}}]},"23":{"line":273,"type":"binary-expr","locations":[{"start":{"line":273,"column":6},"end":{"line":273,"column":47}},{"start":{"line":274,"column":6},"end":{"line":274,"column":40}},{"start":{"line":275,"column":6},"end":{"line":275,"column":41}}]},"24":{"line":285,"type":"if","locations":[{"start":{"line":285,"column":2},"end":{"line":285,"column":2}},{"start":{"line":285,"column":2},"end":{"line":285,"column":2}}]},"25":{"line":299,"type":"if","locations":[{"start":{"line":299,"column":2},"end":{"line":299,"column":2}},{"start":{"line":299,"column":2},"end":{"line":299,"column":2}}]},"26":{"line":341,"type":"if","locations":[{"start":{"line":341,"column":4},"end":{"line":341,"column":4}},{"start":{"line":341,"column":4},"end":{"line":341,"column":4}}]},"27":{"line":371,"type":"if","locations":[{"start":{"line":371,"column":2},"end":{"line":371,"column":2}},{"start":{"line":371,"column":2},"end":{"line":371,"column":2}}]},"28":{"line":398,"type":"if","locations":[{"start":{"line":398,"column":4},"end":{"line":398,"column":4}},{"start":{"line":398,"column":4},"end":{"line":398,"column":4}}]},"29":{"line":421,"type":"if","locations":[{"start":{"line":421,"column":2},"end":{"line":421,"column":2}},{"start":{"line":421,"column":2},"end":{"line":421,"column":2}}]},"30":{"line":446,"type":"if","locations":[{"start":{"line":446,"column":2},"end":{"line":446,"column":2}},{"start":{"line":446,"column":2},"end":{"line":446,"column":2}}]},"31":{"line":446,"type":"binary-expr","locations":[{"start":{"line":446,"column":6},"end":{"line":446,"column":12}},{"start":{"line":446,"column":16},"end":{"line":446,"column":20}}]},"32":{"line":450,"type":"binary-expr","locations":[{"start":{"line":450,"column":10},"end":{"line":450,"column":15}},{"start":{"line":450,"column":19},"end":{"line":450,"column":20}}]},"33":{"line":461,"type":"if","locations":[{"start":{"line":461,"column":2},"end":{"line":461,"column":2}},{"start":{"line":461,"column":2},"end":{"line":461,"column":2}}]},"34":{"line":465,"type":"if","locations":[{"start":{"line":465,"column":6},"end":{"line":465,"column":6}},{"start":{"line":465,"column":6},"end":{"line":465,"column":6}}]}},"code":["\"use strict\";","var util = require('util');","var events = require('events');","","var utils = require('./utils');","var types = require('./types');","var HostConnectionPool = require('./host-connection-pool');","/**"," * Creates a new Host instance."," * @classdesc"," * Represents a Cassandra node."," * @extends EventEmitter"," * @constructor"," */","function Host(address, protocolVersion, options) {","  events.EventEmitter.call(this);","  /**","   * Gets ip address and port number of the node separated by `:`.","   * @type {String}","   */","  this.address = address;","  this.setDownAt = 0;","  Object.defineProperty(this, 'options', { value: options, enumerable: false, writable: false});","  /**","   * @type {HostConnectionPool}","   */","  Object.defineProperty(this, 'pool', { value: new HostConnectionPool(this, protocolVersion), enumerable: false});","  var self = this;","  this.pool.on('open', this._onNewConnectionOpen.bind(this));","  this.pool.on('remove', function onConnectionRemovedFromPool() {","    self._checkPoolState();","  });","  /**","   * Gets string containing the Cassandra version.","   * @type {String}","   */","  this.cassandraVersion = null;","  /**","   * Gets data center name of the node.","   * @type {String}","   */","  this.datacenter = null;","  /**","   * Gets rack name of the node.","   * @type {String}","   */","  this.rack = null;","  /**","   * Gets the tokens assigned to the node.","   * @type {Array}","   */","  this.tokens = null;","  // the distance as last set using the load balancing policy","  this._distance = types.distance.ignored;","  this.reconnectionSchedule = this.options.policies.reconnection.newSchedule();","}","","util.inherits(Host, events.EventEmitter);","","/**"," * Marks this host as not available for query coordination."," * @internal"," * @ignore"," */","Host.prototype.setDown = function() {","  // multiple events signaling that a host is failing could cause multiple calls to this method","  if (this.setDownAt !== 0) {","    // the host is already marked as Down","    return;","  }","  if (this.pool.isClosing()) {","    // the pool is being closed/shutdown, don't mind","    return;","  }","  this.setDownAt = Date.now();","  if (this._distance !== types.distance.ignored) {","    this.log('warning',","      util.format('Host %s considered as DOWN. Reconnection delay %dms.', this.address, this.reconnectionDelay));","  }","  else {","    this.log('info', util.format('Host %s considered as DOWN.', this.address));","  }","  this.emit('down');","  this._checkPoolState();","};","","/**"," * Marks this host as available for querying."," * @param {Boolean} [clearReconnection]"," * @internal"," * @ignore"," */","Host.prototype.setUp = function (clearReconnection) {","  if (!this.setDownAt) {","    //The host is already marked as UP","    return;","  }","  this.log('info', util.format('Setting host %s as UP', this.address));","  this.setDownAt = 0;","  //if it was unhealthy and now it is not, lets reset the reconnection schedule.","  this.reconnectionSchedule = this.options.policies.reconnection.newSchedule();","  if (clearReconnection) {","    this.pool.clearNewConnectionAttempt();","  }","  this.emit('up');","};","","/**"," * Resets the reconnectionSchedule and tries to issue a reconnection immediately."," * @internal"," * @ignore"," */","Host.prototype.checkIsUp = function () {","  if (this.isUp()) {","    return;","  }","  this.reconnectionSchedule = this.options.policies.reconnection.newSchedule();","  this.reconnectionDelay = 0;","  this.pool.attemptNewConnectionImmediate();","};","","/**"," * @param {Boolean} waitForPending When true, it waits for in-flight operations to be finish before closing the"," * connections."," * @param {Function} [callback]"," * @internal"," * @ignore"," */","Host.prototype.shutdown = function (waitForPending, callback) {","  callback = callback || utils.noop;","  if (waitForPending) {","    this.pool.drainAndShutdown();","    // Gracefully draining and shutting down the pool is being done in the background, it's not required","    // for the shutting down to be over to callback","    return callback();","  }","  this.pool.shutdown(callback);","};","","/**"," * Determines if the node is UP now (seen as UP by the driver)."," * @returns {boolean}"," */","Host.prototype.isUp = function () {","  return !this.setDownAt;","};","","/**"," * Determines if the host can be considered as UP"," * @returns {boolean}"," */","Host.prototype.canBeConsideredAsUp = function () {","  var self = this;","  function hasTimePassed() {","    return new Date().getTime() - self.setDownAt >= self.reconnectionDelay;","  }","  return !this.setDownAt || hasTimePassed();","};","","/**"," * Sets the distance of the host relative to the client using the load balancing policy."," * @param {Number} distance"," * @internal"," * @ignore"," */","Host.prototype.setDistance = function (distance) {","  var previousDistance = this._distance;","  this._distance = distance || types.distance.local;","  if (this.options.pooling.coreConnectionsPerHost) {","    this.pool.coreConnectionsLength = this.options.pooling.coreConnectionsPerHost[this._distance] || 0;","  }","  else {","    this.pool.coreConnectionsLength = 1;","  }","  if (this._distance === previousDistance) {","    return this._distance;","  }","  if (this._distance === types.distance.ignored) {","    // this host was local/remote and now must be ignored","    this.emit('ignore');","    this.pool.drainAndShutdown();","  }","  else if (!this.isUp()) {","    this.checkIsUp();","  }","  return this._distance;","};","","/**"," * Changes the protocol version of a given host"," * @param {Number} value"," * @internal"," * @ignore"," */","Host.prototype.setProtocolVersion = function (value) {","  this.pool.protocolVersion = value;","};","","/**"," * It gets an open connection to the host."," * If there isn't an available connections, it will open a new one according to the pooling options."," * @param {Function} callback"," * @internal"," * @ignore"," */","Host.prototype.borrowConnection = function (callback) {","  this.pool.borrowConnection(callback);","};","","/**"," * Creates all the connection in the pool."," * @param {Function} callback"," * @internal"," * @ignore"," */","Host.prototype.warmupPool = function (callback) {","  this.pool.create(true, callback);","};","","/**"," * Gets any connection that is already opened or null if not found."," * @returns {Connection}"," * @internal"," * @ignore"," */","Host.prototype.getActiveConnection = function () {","  if (!this.isUp() || !this.pool.connections.length) {","    return null;","  }","  return this.pool.connections[0];","};","","/**"," * Checks the health of a connection in the pool"," * @param {Connection} connection"," * @internal"," * @ignore"," */","Host.prototype.checkHealth = function (connection) {","  if (connection.timedOutHandlers <= this.options.socketOptions.defunctReadTimeoutThreshold) {","    return;","  }","  this.removeFromPool(connection);","};","","/**"," * @param {Connection} connection"," * @internal"," * @ignore"," */","Host.prototype.removeFromPool = function (connection) {","  this.pool.remove(connection);","  this._checkPoolState();","};","","/**"," * Validates that the internal state of the connection pool."," * If the pool size is smaller than expected, schedule a new connection attempt."," * If the amount of connections is 0 for not ignored hosts, the host must be down."," * @private"," */","Host.prototype._checkPoolState = function () {","  if (this.pool.isClosing()) {","    return;","  }","  if (this.pool.connections.length < this.pool.coreConnectionsLength) {","    // the pool still needs to grow","    if (!this.pool.hasScheduledNewConnection()) {","      this.reconnectionDelay = this.reconnectionSchedule.next().value;","      this.pool.scheduleNewConnectionAttempt(this.reconnectionDelay);","    }","  }","  if (this._distance !== types.distance.ignored &&","      this.pool.connections.length === 0 &&","      this.pool.coreConnectionsLength > 0) {","    this.setDown();","  }","};","","/**"," * Executed after an scheduled new connection attempt finished"," * @private"," */","Host.prototype._onNewConnectionOpen = function (err) {","  if (err) {","    this._checkPoolState();","    return;","  }","  this.setUp();","  this.pool.increaseSize();","};","","/**"," * Returns an array containing the Cassandra Version as an Array of Numbers having the major version in the first"," * position."," * @returns {Array.<Number>}"," */","Host.prototype.getCassandraVersion = function () {","  if (!this.cassandraVersion) {","    return utils.emptyArray;","  }","  return this.cassandraVersion.split('-')[0].split('.').map(function eachMap(x) {","    return parseInt(x, 10);","  });","};","","Host.prototype.log = utils.log;","","/**"," * Represents an associative-array of {@link Host hosts} that can be iterated."," * It creates an internal copy when adding or removing, making it safe to iterate using the values() method within async operations."," * @extends events.EventEmitter"," * @constructor"," */","function HostMap() {","  events.EventEmitter.call(this);","  this._items = {};","  this._values = null;","  Object.defineProperty(this, 'length', { get: function () { return this.values().length; }, enumerable: true });","}","","util.inherits(HostMap, events.EventEmitter);","","/**"," * Emitted when a host is added to the map"," * @event HostMap#add"," */","/**"," * Emitted when a host is removed from the map"," * @event HostMap#remove"," */","","/**"," * Executes a provided function once per map element."," * @param callback"," */","HostMap.prototype.forEach = function (callback) {","  //Use a new reference, allowing the map to be modified.","  var items = this._items;","  for (var key in items) {","    if (!items.hasOwnProperty(key)) {","      continue;","    }","    callback(items[key], key);","  }","};","","/**"," * Gets a {@link Host host} by key or undefined if not found."," * @param {String} key"," * @returns {Host}"," */","HostMap.prototype.get = function (key) {","  return this._items[key];","};","","/**"," * Returns an array of host addresses."," * @returns {Array.<String>}"," */","HostMap.prototype.keys = function () {","  return Object.keys(this._items);","};","","/**"," * Removes an item from the map."," * @param {String} key The key of the host"," * @fires HostMap#remove"," */","HostMap.prototype.remove = function (key) {","  if (!this._items.hasOwnProperty(key)) {","    //it's not part of it, do nothing","    return;","  }","  //clear cache","  this._values = null;","  //copy the values","  var copy = utils.extend({}, this._items);","  var h = copy[key];","  delete copy[key];","  this._items = copy;","  this.emit('remove', h);","};","","/**"," * Removes multiple hosts from the map."," * @param {Array.<String>} keys"," * @fires HostMap#remove"," */","HostMap.prototype.removeMultiple = function (keys) {","  //clear value cache","  this._values = null;","  //copy the values","  var copy = utils.extend({}, this._items);","  var removedHosts = [];","  for (var i = 0; i < keys.length; i++) {","    var h = copy[keys[i]];","    if (!h) {","      continue;","    }","    removedHosts.push(h);","    delete copy[keys[i]];","  }","  this._items = copy;","  removedHosts.forEach(function (h) {","    this.emit('remove', h);","  }, this);","};","","/**"," * Adds a new item to the map."," * @param {String} key The key of the host"," * @param {Host} value The host to be added"," * @fires HostMap#remove"," * @fires HostMap#add"," */","HostMap.prototype.set = function (key, value) {","  //clear values cache","  this._values = null;","  var originalValue = this._items[key];","  if (originalValue) {","    //The internal structure does not change","    this._items[key] = value;","    //emit a remove followed by a add","    this.emit('remove', originalValue);","    this.emit('add', value);","    return;","  }","  //copy the values","  var copy = utils.extend({}, this._items);","  copy[key] = value;","  this._items = copy;","  this.emit('add', value);","  return value;","};","","/**"," * Returns a shallow copy of a portion of the items into a new array object."," * Backward-compatibility."," * @param {Number} [begin]"," * @param {Number} [end]"," * @returns {Array}"," * @ignore"," */","HostMap.prototype.slice = function (begin, end) {","  if (!begin && !end) {","    //avoid making a copy of the copy","    return this.values();","  }","  begin = begin || 0;","  return this.values().slice(begin, end);","};","//Backward-compatibility","HostMap.prototype.push = HostMap.prototype.set;","","/**"," * Returns a shallow copy of the values of the map."," * @returns {Array.<Host>}"," */","HostMap.prototype.values = function () {","  if (!this._values) {","    //cache the values","    var values = [];","    for (var key in this._items) {","      if (!this._items.hasOwnProperty(key)) {","        continue;","      }","      values.push(this._items[key]);","    }","    this._values = Object.freeze(values);","  }","  return this._values;","};","","HostMap.prototype.inspect = function() {","  return this._items;","};","","HostMap.prototype.toJSON = function() {","  return this._items;","};","","exports.Host = Host;","exports.HostMap = HostMap;",""],"l":{"2":1,"3":1,"5":1,"6":1,"7":1,"15":1,"16":0,"21":0,"22":0,"23":0,"27":0,"28":0,"29":0,"30":0,"31":0,"37":0,"42":0,"47":0,"52":0,"54":0,"55":0,"58":1,"65":1,"67":0,"69":0,"71":0,"73":0,"75":0,"76":0,"77":0,"81":0,"83":0,"84":0,"93":1,"94":0,"96":0,"98":0,"99":0,"101":0,"102":0,"103":0,"105":0,"113":1,"114":0,"115":0,"117":0,"118":0,"119":0,"129":1,"130":0,"131":0,"132":0,"135":0,"137":0,"144":1,"145":0,"152":1,"153":0,"154":1,"155":0,"157":0,"166":1,"167":0,"168":0,"169":0,"170":0,"173":0,"175":0,"176":0,"178":0,"180":0,"181":0,"183":0,"184":0,"186":0,"195":1,"196":0,"206":1,"207":0,"216":1,"217":0,"226":1,"227":0,"228":0,"230":0,"239":1,"240":0,"241":0,"243":0,"251":1,"252":0,"253":0,"262":1,"263":0,"264":0,"266":0,"268":0,"269":0,"270":0,"273":0,"276":0,"284":1,"285":0,"286":0,"287":0,"289":0,"290":0,"298":1,"299":0,"300":0,"302":0,"303":0,"307":1,"315":1,"316":0,"317":0,"318":0,"319":0,"322":1,"337":1,"339":0,"340":0,"341":0,"342":0,"344":0,"353":1,"354":0,"361":1,"362":0,"370":1,"371":0,"373":0,"376":0,"378":0,"379":0,"380":0,"381":0,"382":0,"390":1,"392":0,"394":0,"395":0,"396":0,"397":0,"398":0,"399":0,"401":0,"402":0,"404":0,"405":0,"406":0,"417":1,"419":0,"420":0,"421":0,"423":0,"425":0,"426":0,"427":0,"430":0,"431":0,"432":0,"433":0,"434":0,"445":1,"446":0,"448":0,"450":0,"451":0,"454":1,"460":1,"461":0,"463":0,"464":0,"465":0,"466":0,"468":0,"470":0,"472":0,"475":1,"476":0,"479":1,"480":0,"483":1,"484":1}},"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/host-connection-pool.js":{"path":"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/host-connection-pool.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":1,"21":1,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":1,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":1,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":1,"73":0,"74":0,"75":1,"76":0,"77":0,"78":0,"79":0,"80":1,"81":0,"82":0,"83":0,"84":0,"85":1,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":1,"108":0,"109":1,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":1,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":1,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":1,"136":0,"137":1,"138":0,"139":0,"140":1,"141":0,"142":1,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":1,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":1,"181":0,"182":1,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":1,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":1,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":1,"219":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0},"fnMap":{"1":{"name":"HostConnectionPool","line":42,"loc":{"start":{"line":42,"column":0},"end":{"line":42,"column":51}}},"2":{"name":"(anonymous_2)","line":64,"loc":{"start":{"line":64,"column":48},"end":{"line":64,"column":68}}},"3":{"name":"afterCreating","line":66,"loc":{"start":{"line":66,"column":21},"end":{"line":66,"column":49}}},"4":{"name":"(anonymous_4)","line":85,"loc":{"start":{"line":85,"column":33},"end":{"line":85,"column":55}}},"5":{"name":"(anonymous_5)","line":107,"loc":{"start":{"line":107,"column":38},"end":{"line":107,"column":66}}},"6":{"name":"condition","line":134,"loc":{"start":{"line":134,"column":4},"end":{"line":134,"column":25}}},"7":{"name":"iterator","line":137,"loc":{"start":{"line":137,"column":4},"end":{"line":137,"column":28}}},"8":{"name":"whilstEnded","line":139,"loc":{"start":{"line":139,"column":7},"end":{"line":139,"column":33}}},"9":{"name":"(anonymous_9)","line":161,"loc":{"start":{"line":161,"column":49},"end":{"line":161,"column":61}}},"10":{"name":"connectionErrorCallback","line":164,"loc":{"start":{"line":164,"column":2},"end":{"line":164,"column":37}}},"11":{"name":"(anonymous_11)","line":176,"loc":{"start":{"line":176,"column":57},"end":{"line":176,"column":69}}},"12":{"name":"(anonymous_12)","line":187,"loc":{"start":{"line":187,"column":53},"end":{"line":187,"column":73}}},"13":{"name":"attemptOpenCallback","line":196,"loc":{"start":{"line":196,"column":9},"end":{"line":196,"column":43}}},"14":{"name":"(anonymous_14)","line":217,"loc":{"start":{"line":217,"column":61},"end":{"line":217,"column":73}}},"15":{"name":"openConnection","line":219,"loc":{"start":{"line":219,"column":2},"end":{"line":219,"column":28}}},"16":{"name":"(anonymous_16)","line":237,"loc":{"start":{"line":237,"column":38},"end":{"line":237,"column":60}}},"17":{"name":"removeClose","line":249,"loc":{"start":{"line":249,"column":15},"end":{"line":249,"column":38}}},"18":{"name":"(anonymous_18)","line":258,"loc":{"start":{"line":258,"column":60},"end":{"line":258,"column":77}}},"19":{"name":"newConnectionTimeoutExpired","line":263,"loc":{"start":{"line":263,"column":42},"end":{"line":263,"column":81}}},"20":{"name":"(anonymous_20)","line":274,"loc":{"start":{"line":274,"column":57},"end":{"line":274,"column":69}}},"21":{"name":"(anonymous_21)","line":281,"loc":{"start":{"line":281,"column":44},"end":{"line":281,"column":56}}},"22":{"name":"(anonymous_22)","line":291,"loc":{"start":{"line":291,"column":41},"end":{"line":291,"column":53}}},"23":{"name":"(anonymous_23)","line":298,"loc":{"start":{"line":298,"column":48},"end":{"line":298,"column":60}}},"24":{"name":"getDelayedClose","line":324,"loc":{"start":{"line":324,"column":2},"end":{"line":324,"column":39}}},"25":{"name":"delayedClose","line":325,"loc":{"start":{"line":325,"column":12},"end":{"line":325,"column":36}}},"26":{"name":"checkShutdown","line":342,"loc":{"start":{"line":342,"column":36},"end":{"line":342,"column":61}}},"27":{"name":"connectionEach","line":344,"loc":{"start":{"line":344,"column":24},"end":{"line":344,"column":51}}},"28":{"name":"(anonymous_28)","line":351,"loc":{"start":{"line":351,"column":45},"end":{"line":351,"column":57}}},"29":{"name":"resetState","line":353,"loc":{"start":{"line":353,"column":2},"end":{"line":353,"column":24}}},"30":{"name":"(anonymous_30)","line":376,"loc":{"start":{"line":376,"column":40},"end":{"line":376,"column":60}}},"31":{"name":"closeAllCallback","line":393,"loc":{"start":{"line":393,"column":28},"end":{"line":393,"column":56}}},"32":{"name":"(anonymous_32)","line":400,"loc":{"start":{"line":400,"column":52},"end":{"line":400,"column":72}}},"33":{"name":"closeEach","line":409,"loc":{"start":{"line":409,"column":26},"end":{"line":409,"column":54}}},"34":{"name":"closedCallback","line":410,"loc":{"start":{"line":410,"column":12},"end":{"line":410,"column":38}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":27}},"2":{"start":{"line":3,"column":0},"end":{"line":3,"column":31}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":41}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":31}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":66}},"6":{"start":{"line":10,"column":0},"end":{"line":10,"column":24}},"7":{"start":{"line":11,"column":0},"end":{"line":11,"column":46}},"8":{"start":{"line":24,"column":0},"end":{"line":33,"column":2}},"9":{"start":{"line":42,"column":0},"end":{"line":57,"column":1}},"10":{"start":{"line":43,"column":2},"end":{"line":43,"column":33}},"11":{"start":{"line":44,"column":2},"end":{"line":44,"column":31}},"12":{"start":{"line":45,"column":2},"end":{"line":45,"column":36}},"13":{"start":{"line":46,"column":2},"end":{"line":46,"column":25}},"14":{"start":{"line":47,"column":2},"end":{"line":47,"column":30}},"15":{"start":{"line":48,"column":2},"end":{"line":48,"column":30}},"16":{"start":{"line":49,"column":2},"end":{"line":49,"column":41}},"17":{"start":{"line":50,"column":2},"end":{"line":50,"column":33}},"18":{"start":{"line":55,"column":2},"end":{"line":55,"column":38}},"19":{"start":{"line":56,"column":2},"end":{"line":56,"column":26}},"20":{"start":{"line":59,"column":0},"end":{"line":59,"column":55}},"21":{"start":{"line":64,"column":0},"end":{"line":77,"column":2}},"22":{"start":{"line":65,"column":2},"end":{"line":65,"column":18}},"23":{"start":{"line":66,"column":2},"end":{"line":76,"column":5}},"24":{"start":{"line":67,"column":4},"end":{"line":69,"column":5}},"25":{"start":{"line":68,"column":6},"end":{"line":68,"column":27}},"26":{"start":{"line":70,"column":4},"end":{"line":73,"column":5}},"27":{"start":{"line":72,"column":6},"end":{"line":72,"column":60}},"28":{"start":{"line":74,"column":4},"end":{"line":74,"column":61}},"29":{"start":{"line":75,"column":4},"end":{"line":75,"column":22}},"30":{"start":{"line":85,"column":0},"end":{"line":100,"column":2}},"31":{"start":{"line":86,"column":2},"end":{"line":86,"column":34}},"32":{"start":{"line":87,"column":2},"end":{"line":89,"column":3}},"33":{"start":{"line":88,"column":4},"end":{"line":88,"column":26}},"34":{"start":{"line":90,"column":2},"end":{"line":90,"column":32}},"35":{"start":{"line":91,"column":2},"end":{"line":93,"column":3}},"36":{"start":{"line":92,"column":4},"end":{"line":92,"column":24}},"37":{"start":{"line":94,"column":2},"end":{"line":94,"column":44}},"38":{"start":{"line":95,"column":2},"end":{"line":95,"column":51}},"39":{"start":{"line":96,"column":2},"end":{"line":98,"column":3}},"40":{"start":{"line":97,"column":4},"end":{"line":97,"column":20}},"41":{"start":{"line":99,"column":2},"end":{"line":99,"column":17}},"42":{"start":{"line":107,"column":0},"end":{"line":158,"column":2}},"43":{"start":{"line":108,"column":2},"end":{"line":110,"column":3}},"44":{"start":{"line":109,"column":4},"end":{"line":109,"column":75}},"45":{"start":{"line":113,"column":2},"end":{"line":115,"column":3}},"46":{"start":{"line":114,"column":4},"end":{"line":114,"column":22}},"47":{"start":{"line":116,"column":2},"end":{"line":121,"column":3}},"48":{"start":{"line":119,"column":4},"end":{"line":119,"column":24}},"49":{"start":{"line":120,"column":4},"end":{"line":120,"column":22}},"50":{"start":{"line":122,"column":2},"end":{"line":122,"column":34}},"51":{"start":{"line":123,"column":2},"end":{"line":126,"column":3}},"52":{"start":{"line":125,"column":4},"end":{"line":125,"column":11}},"53":{"start":{"line":127,"column":2},"end":{"line":127,"column":24}},"54":{"start":{"line":128,"column":2},"end":{"line":128,"column":55}},"55":{"start":{"line":129,"column":2},"end":{"line":131,"column":3}},"56":{"start":{"line":130,"column":4},"end":{"line":130,"column":28}},"57":{"start":{"line":132,"column":2},"end":{"line":132,"column":18}},"58":{"start":{"line":133,"column":2},"end":{"line":157,"column":7}},"59":{"start":{"line":135,"column":6},"end":{"line":135,"column":59}},"60":{"start":{"line":138,"column":6},"end":{"line":138,"column":39}},"61":{"start":{"line":140,"column":6},"end":{"line":140,"column":29}},"62":{"start":{"line":141,"column":6},"end":{"line":152,"column":7}},"63":{"start":{"line":142,"column":8},"end":{"line":150,"column":9}},"64":{"start":{"line":143,"column":10},"end":{"line":143,"column":78}},"65":{"start":{"line":144,"column":10},"end":{"line":144,"column":38}},"66":{"start":{"line":145,"column":10},"end":{"line":145,"column":50}},"67":{"start":{"line":149,"column":10},"end":{"line":149,"column":114}},"68":{"start":{"line":151,"column":8},"end":{"line":151,"column":42}},"69":{"start":{"line":153,"column":6},"end":{"line":154,"column":49}},"70":{"start":{"line":155,"column":6},"end":{"line":155,"column":28}},"71":{"start":{"line":156,"column":6},"end":{"line":156,"column":26}},"72":{"start":{"line":161,"column":0},"end":{"line":171,"column":2}},"73":{"start":{"line":162,"column":2},"end":{"line":162,"column":76}},"74":{"start":{"line":163,"column":2},"end":{"line":163,"column":18}},"75":{"start":{"line":164,"column":2},"end":{"line":167,"column":3}},"76":{"start":{"line":166,"column":4},"end":{"line":166,"column":19}},"77":{"start":{"line":168,"column":2},"end":{"line":168,"column":52}},"78":{"start":{"line":169,"column":2},"end":{"line":169,"column":47}},"79":{"start":{"line":170,"column":2},"end":{"line":170,"column":11}},"80":{"start":{"line":176,"column":0},"end":{"line":182,"column":2}},"81":{"start":{"line":177,"column":2},"end":{"line":179,"column":3}},"82":{"start":{"line":178,"column":4},"end":{"line":178,"column":11}},"83":{"start":{"line":180,"column":2},"end":{"line":180,"column":43}},"84":{"start":{"line":181,"column":2},"end":{"line":181,"column":36}},"85":{"start":{"line":187,"column":0},"end":{"line":215,"column":2}},"86":{"start":{"line":188,"column":2},"end":{"line":188,"column":35}},"87":{"start":{"line":189,"column":2},"end":{"line":189,"column":18}},"88":{"start":{"line":190,"column":2},"end":{"line":190,"column":30}},"89":{"start":{"line":191,"column":2},"end":{"line":194,"column":3}},"90":{"start":{"line":193,"column":4},"end":{"line":193,"column":11}},"91":{"start":{"line":195,"column":2},"end":{"line":195,"column":23}},"92":{"start":{"line":196,"column":2},"end":{"line":214,"column":5}},"93":{"start":{"line":197,"column":4},"end":{"line":197,"column":26}},"94":{"start":{"line":198,"column":4},"end":{"line":202,"column":5}},"95":{"start":{"line":199,"column":6},"end":{"line":199,"column":109}},"96":{"start":{"line":200,"column":6},"end":{"line":200,"column":16}},"97":{"start":{"line":201,"column":6},"end":{"line":201,"column":36}},"98":{"start":{"line":203,"column":4},"end":{"line":207,"column":5}},"99":{"start":{"line":204,"column":6},"end":{"line":204,"column":117}},"100":{"start":{"line":205,"column":6},"end":{"line":205,"column":16}},"101":{"start":{"line":206,"column":6},"end":{"line":206,"column":63}},"102":{"start":{"line":209,"column":4},"end":{"line":209,"column":51}},"103":{"start":{"line":210,"column":4},"end":{"line":210,"column":27}},"104":{"start":{"line":211,"column":4},"end":{"line":211,"column":38}},"105":{"start":{"line":212,"column":4},"end":{"line":212,"column":89}},"106":{"start":{"line":213,"column":4},"end":{"line":213,"column":31}},"107":{"start":{"line":217,"column":0},"end":{"line":231,"column":2}},"108":{"start":{"line":218,"column":2},"end":{"line":218,"column":18}},"109":{"start":{"line":219,"column":2},"end":{"line":222,"column":3}},"110":{"start":{"line":220,"column":4},"end":{"line":220,"column":37}},"111":{"start":{"line":221,"column":4},"end":{"line":221,"column":41}},"112":{"start":{"line":223,"column":2},"end":{"line":225,"column":3}},"113":{"start":{"line":224,"column":4},"end":{"line":224,"column":28}},"114":{"start":{"line":226,"column":2},"end":{"line":228,"column":3}},"115":{"start":{"line":227,"column":4},"end":{"line":227,"column":46}},"116":{"start":{"line":237,"column":0},"end":{"line":253,"column":2}},"117":{"start":{"line":239,"column":2},"end":{"line":239,"column":51}},"118":{"start":{"line":240,"column":2},"end":{"line":243,"column":3}},"119":{"start":{"line":242,"column":4},"end":{"line":242,"column":11}},"120":{"start":{"line":245,"column":2},"end":{"line":245,"column":49}},"121":{"start":{"line":246,"column":2},"end":{"line":246,"column":34}},"122":{"start":{"line":247,"column":2},"end":{"line":247,"column":36}},"123":{"start":{"line":249,"column":2},"end":{"line":251,"column":5}},"124":{"start":{"line":250,"column":4},"end":{"line":250,"column":23}},"125":{"start":{"line":252,"column":2},"end":{"line":252,"column":22}},"126":{"start":{"line":258,"column":0},"end":{"line":272,"column":2}},"127":{"start":{"line":259,"column":2},"end":{"line":261,"column":3}},"128":{"start":{"line":260,"column":4},"end":{"line":260,"column":11}},"129":{"start":{"line":262,"column":2},"end":{"line":262,"column":18}},"130":{"start":{"line":263,"column":2},"end":{"line":271,"column":12}},"131":{"start":{"line":264,"column":4},"end":{"line":264,"column":38}},"132":{"start":{"line":265,"column":4},"end":{"line":269,"column":5}},"133":{"start":{"line":268,"column":6},"end":{"line":268,"column":13}},"134":{"start":{"line":270,"column":4},"end":{"line":270,"column":43}},"135":{"start":{"line":274,"column":0},"end":{"line":276,"column":2}},"136":{"start":{"line":275,"column":2},"end":{"line":275,"column":55}},"137":{"start":{"line":281,"column":0},"end":{"line":286,"column":2}},"138":{"start":{"line":282,"column":2},"end":{"line":285,"column":3}},"139":{"start":{"line":284,"column":4},"end":{"line":284,"column":41}},"140":{"start":{"line":291,"column":0},"end":{"line":293,"column":2}},"141":{"start":{"line":292,"column":2},"end":{"line":292,"column":39}},"142":{"start":{"line":298,"column":0},"end":{"line":349,"column":2}},"143":{"start":{"line":299,"column":2},"end":{"line":302,"column":3}},"144":{"start":{"line":301,"column":4},"end":{"line":301,"column":11}},"145":{"start":{"line":303,"column":2},"end":{"line":303,"column":30}},"146":{"start":{"line":304,"column":2},"end":{"line":304,"column":35}},"147":{"start":{"line":305,"column":2},"end":{"line":305,"column":18}},"148":{"start":{"line":306,"column":2},"end":{"line":308,"column":3}},"149":{"start":{"line":307,"column":4},"end":{"line":307,"column":32}},"150":{"start":{"line":309,"column":2},"end":{"line":309,"column":37}},"151":{"start":{"line":310,"column":2},"end":{"line":310,"column":38}},"152":{"start":{"line":311,"column":2},"end":{"line":311,"column":28}},"153":{"start":{"line":312,"column":2},"end":{"line":312,"column":112}},"154":{"start":{"line":313,"column":2},"end":{"line":321,"column":3}},"155":{"start":{"line":314,"column":4},"end":{"line":314,"column":27}},"156":{"start":{"line":315,"column":4},"end":{"line":318,"column":5}},"157":{"start":{"line":316,"column":6},"end":{"line":316,"column":27}},"158":{"start":{"line":317,"column":6},"end":{"line":317,"column":15}},"159":{"start":{"line":319,"column":4},"end":{"line":319,"column":23}},"160":{"start":{"line":320,"column":4},"end":{"line":320,"column":40}},"161":{"start":{"line":322,"column":2},"end":{"line":322,"column":24}},"162":{"start":{"line":323,"column":2},"end":{"line":323,"column":27}},"163":{"start":{"line":324,"column":2},"end":{"line":339,"column":3}},"164":{"start":{"line":325,"column":4},"end":{"line":338,"column":7}},"165":{"start":{"line":326,"column":6},"end":{"line":326,"column":25}},"166":{"start":{"line":327,"column":6},"end":{"line":329,"column":7}},"167":{"start":{"line":328,"column":8},"end":{"line":328,"column":15}},"168":{"start":{"line":330,"column":6},"end":{"line":332,"column":7}},"169":{"start":{"line":331,"column":8},"end":{"line":331,"column":15}},"170":{"start":{"line":333,"column":6},"end":{"line":333,"column":23}},"171":{"start":{"line":334,"column":6},"end":{"line":336,"column":7}},"172":{"start":{"line":335,"column":8},"end":{"line":335,"column":43}},"173":{"start":{"line":337,"column":6},"end":{"line":337,"column":27}},"174":{"start":{"line":341,"column":2},"end":{"line":341,"column":105}},"175":{"start":{"line":342,"column":2},"end":{"line":348,"column":12}},"176":{"start":{"line":343,"column":4},"end":{"line":343,"column":21}},"177":{"start":{"line":344,"column":4},"end":{"line":346,"column":7}},"178":{"start":{"line":345,"column":6},"end":{"line":345,"column":16}},"179":{"start":{"line":347,"column":4},"end":{"line":347,"column":25}},"180":{"start":{"line":351,"column":0},"end":{"line":371,"column":2}},"181":{"start":{"line":352,"column":2},"end":{"line":352,"column":18}},"182":{"start":{"line":353,"column":2},"end":{"line":361,"column":3}},"183":{"start":{"line":354,"column":4},"end":{"line":359,"column":5}},"184":{"start":{"line":355,"column":6},"end":{"line":355,"column":35}},"185":{"start":{"line":358,"column":6},"end":{"line":358,"column":34}},"186":{"start":{"line":360,"column":4},"end":{"line":360,"column":23}},"187":{"start":{"line":362,"column":2},"end":{"line":365,"column":3}},"188":{"start":{"line":364,"column":4},"end":{"line":364,"column":45}},"189":{"start":{"line":366,"column":2},"end":{"line":369,"column":3}},"190":{"start":{"line":368,"column":4},"end":{"line":368,"column":41}},"191":{"start":{"line":370,"column":2},"end":{"line":370,"column":15}},"192":{"start":{"line":376,"column":0},"end":{"line":397,"column":2}},"193":{"start":{"line":377,"column":2},"end":{"line":377,"column":35}},"194":{"start":{"line":378,"column":2},"end":{"line":381,"column":3}},"195":{"start":{"line":379,"column":4},"end":{"line":379,"column":33}},"196":{"start":{"line":380,"column":4},"end":{"line":380,"column":22}},"197":{"start":{"line":382,"column":2},"end":{"line":382,"column":34}},"198":{"start":{"line":383,"column":2},"end":{"line":383,"column":35}},"199":{"start":{"line":384,"column":2},"end":{"line":386,"column":3}},"200":{"start":{"line":385,"column":4},"end":{"line":385,"column":40}},"201":{"start":{"line":387,"column":2},"end":{"line":387,"column":34}},"202":{"start":{"line":388,"column":2},"end":{"line":391,"column":3}},"203":{"start":{"line":390,"column":4},"end":{"line":390,"column":11}},"204":{"start":{"line":392,"column":2},"end":{"line":392,"column":18}},"205":{"start":{"line":393,"column":2},"end":{"line":396,"column":5}},"206":{"start":{"line":394,"column":4},"end":{"line":394,"column":33}},"207":{"start":{"line":395,"column":4},"end":{"line":395,"column":26}},"208":{"start":{"line":400,"column":0},"end":{"line":415,"column":2}},"209":{"start":{"line":401,"column":2},"end":{"line":401,"column":36}},"210":{"start":{"line":402,"column":2},"end":{"line":402,"column":37}},"211":{"start":{"line":404,"column":2},"end":{"line":404,"column":38}},"212":{"start":{"line":405,"column":2},"end":{"line":407,"column":3}},"213":{"start":{"line":406,"column":4},"end":{"line":406,"column":22}},"214":{"start":{"line":408,"column":2},"end":{"line":408,"column":99}},"215":{"start":{"line":409,"column":2},"end":{"line":414,"column":15}},"216":{"start":{"line":410,"column":4},"end":{"line":413,"column":7}},"217":{"start":{"line":412,"column":6},"end":{"line":412,"column":13}},"218":{"start":{"line":417,"column":0},"end":{"line":417,"column":45}},"219":{"start":{"line":419,"column":0},"end":{"line":419,"column":36}}},"branchMap":{"1":{"line":67,"type":"if","locations":[{"start":{"line":67,"column":4},"end":{"line":67,"column":4}},{"start":{"line":67,"column":4},"end":{"line":67,"column":4}}]},"2":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":4},"end":{"line":70,"column":4}},{"start":{"line":70,"column":4},"end":{"line":70,"column":4}}]},"3":{"line":87,"type":"if","locations":[{"start":{"line":87,"column":2},"end":{"line":87,"column":2}},{"start":{"line":87,"column":2},"end":{"line":87,"column":2}}]},"4":{"line":91,"type":"if","locations":[{"start":{"line":91,"column":2},"end":{"line":91,"column":2}},{"start":{"line":91,"column":2},"end":{"line":91,"column":2}}]},"5":{"line":96,"type":"if","locations":[{"start":{"line":96,"column":2},"end":{"line":96,"column":2}},{"start":{"line":96,"column":2},"end":{"line":96,"column":2}}]},"6":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":2},"end":{"line":108,"column":2}},{"start":{"line":108,"column":2},"end":{"line":108,"column":2}}]},"7":{"line":113,"type":"if","locations":[{"start":{"line":113,"column":2},"end":{"line":113,"column":2}},{"start":{"line":113,"column":2},"end":{"line":113,"column":2}}]},"8":{"line":116,"type":"if","locations":[{"start":{"line":116,"column":2},"end":{"line":116,"column":2}},{"start":{"line":116,"column":2},"end":{"line":116,"column":2}}]},"9":{"line":116,"type":"binary-expr","locations":[{"start":{"line":116,"column":6},"end":{"line":116,"column":13}},{"start":{"line":116,"column":17},"end":{"line":116,"column":44}}]},"10":{"line":123,"type":"if","locations":[{"start":{"line":123,"column":2},"end":{"line":123,"column":2}},{"start":{"line":123,"column":2},"end":{"line":123,"column":2}}]},"11":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":2},"end":{"line":129,"column":2}},{"start":{"line":129,"column":2},"end":{"line":129,"column":2}}]},"12":{"line":141,"type":"if","locations":[{"start":{"line":141,"column":6},"end":{"line":141,"column":6}},{"start":{"line":141,"column":6},"end":{"line":141,"column":6}}]},"13":{"line":142,"type":"if","locations":[{"start":{"line":142,"column":8},"end":{"line":142,"column":8}},{"start":{"line":142,"column":8},"end":{"line":142,"column":8}}]},"14":{"line":177,"type":"if","locations":[{"start":{"line":177,"column":2},"end":{"line":177,"column":2}},{"start":{"line":177,"column":2},"end":{"line":177,"column":2}}]},"15":{"line":191,"type":"if","locations":[{"start":{"line":191,"column":2},"end":{"line":191,"column":2}},{"start":{"line":191,"column":2},"end":{"line":191,"column":2}}]},"16":{"line":198,"type":"if","locations":[{"start":{"line":198,"column":4},"end":{"line":198,"column":4}},{"start":{"line":198,"column":4},"end":{"line":198,"column":4}}]},"17":{"line":203,"type":"if","locations":[{"start":{"line":203,"column":4},"end":{"line":203,"column":4}},{"start":{"line":203,"column":4},"end":{"line":203,"column":4}}]},"18":{"line":223,"type":"if","locations":[{"start":{"line":223,"column":2},"end":{"line":223,"column":2}},{"start":{"line":223,"column":2},"end":{"line":223,"column":2}}]},"19":{"line":226,"type":"if","locations":[{"start":{"line":226,"column":2},"end":{"line":226,"column":2}},{"start":{"line":226,"column":2},"end":{"line":226,"column":2}}]},"20":{"line":240,"type":"if","locations":[{"start":{"line":240,"column":2},"end":{"line":240,"column":2}},{"start":{"line":240,"column":2},"end":{"line":240,"column":2}}]},"21":{"line":259,"type":"if","locations":[{"start":{"line":259,"column":2},"end":{"line":259,"column":2}},{"start":{"line":259,"column":2},"end":{"line":259,"column":2}}]},"22":{"line":265,"type":"if","locations":[{"start":{"line":265,"column":4},"end":{"line":265,"column":4}},{"start":{"line":265,"column":4},"end":{"line":265,"column":4}}]},"23":{"line":275,"type":"binary-expr","locations":[{"start":{"line":275,"column":9},"end":{"line":275,"column":37}},{"start":{"line":275,"column":41},"end":{"line":275,"column":54}}]},"24":{"line":282,"type":"if","locations":[{"start":{"line":282,"column":2},"end":{"line":282,"column":2}},{"start":{"line":282,"column":2},"end":{"line":282,"column":2}}]},"25":{"line":282,"type":"binary-expr","locations":[{"start":{"line":282,"column":6},"end":{"line":282,"column":58}},{"start":{"line":282,"column":62},"end":{"line":282,"column":95}}]},"26":{"line":299,"type":"if","locations":[{"start":{"line":299,"column":2},"end":{"line":299,"column":2}},{"start":{"line":299,"column":2},"end":{"line":299,"column":2}}]},"27":{"line":306,"type":"if","locations":[{"start":{"line":306,"column":2},"end":{"line":306,"column":2}},{"start":{"line":306,"column":2},"end":{"line":306,"column":2}}]},"28":{"line":315,"type":"if","locations":[{"start":{"line":315,"column":4},"end":{"line":315,"column":4}},{"start":{"line":315,"column":4},"end":{"line":315,"column":4}}]},"29":{"line":327,"type":"if","locations":[{"start":{"line":327,"column":6},"end":{"line":327,"column":6}},{"start":{"line":327,"column":6},"end":{"line":327,"column":6}}]},"30":{"line":330,"type":"if","locations":[{"start":{"line":330,"column":6},"end":{"line":330,"column":6}},{"start":{"line":330,"column":6},"end":{"line":330,"column":6}}]},"31":{"line":334,"type":"if","locations":[{"start":{"line":334,"column":6},"end":{"line":334,"column":6}},{"start":{"line":334,"column":6},"end":{"line":334,"column":6}}]},"32":{"line":341,"type":"binary-expr","locations":[{"start":{"line":341,"column":15},"end":{"line":341,"column":53}},{"start":{"line":341,"column":57},"end":{"line":341,"column":97}}]},"33":{"line":354,"type":"if","locations":[{"start":{"line":354,"column":4},"end":{"line":354,"column":4}},{"start":{"line":354,"column":4},"end":{"line":354,"column":4}}]},"34":{"line":362,"type":"if","locations":[{"start":{"line":362,"column":2},"end":{"line":362,"column":2}},{"start":{"line":362,"column":2},"end":{"line":362,"column":2}}]},"35":{"line":366,"type":"if","locations":[{"start":{"line":366,"column":2},"end":{"line":366,"column":2}},{"start":{"line":366,"column":2},"end":{"line":366,"column":2}}]},"36":{"line":378,"type":"if","locations":[{"start":{"line":378,"column":2},"end":{"line":378,"column":2}},{"start":{"line":378,"column":2},"end":{"line":378,"column":2}}]},"37":{"line":384,"type":"if","locations":[{"start":{"line":384,"column":2},"end":{"line":384,"column":2}},{"start":{"line":384,"column":2},"end":{"line":384,"column":2}}]},"38":{"line":388,"type":"if","locations":[{"start":{"line":388,"column":2},"end":{"line":388,"column":2}},{"start":{"line":388,"column":2},"end":{"line":388,"column":2}}]},"39":{"line":401,"type":"binary-expr","locations":[{"start":{"line":401,"column":13},"end":{"line":401,"column":21}},{"start":{"line":401,"column":25},"end":{"line":401,"column":35}}]},"40":{"line":405,"type":"if","locations":[{"start":{"line":405,"column":2},"end":{"line":405,"column":2}},{"start":{"line":405,"column":2},"end":{"line":405,"column":2}}]}},"code":["\"use strict\";","var util = require('util');","var events = require('events');","","var Connection = require('./connection');","var utils = require('./utils');","var defaultOptions = require('./client-options').defaultOptions();","","// Used to get the index of the connection with less in-flight requests","var connectionIndex = 0;","var connectionIndexOverflow = Math.pow(2, 15);","","/**"," * Represents the possible states of the pool."," * Possible state transitions:"," *  - From initial to closing: The pool must be closed because the host is ignored."," *  - From initial to shuttingDown: The pool is being shutdown as a result of a client shutdown."," *  - From closing to initial state: The pool finished closing connections (is now ignored) and it resets to"," *    initial state in case the host is marked as local/remote in the future."," *  - From closing to shuttingDown (rare): It was marked as ignored, now the client is being shutdown."," *  - From shuttingDown to shutdown: Finished shutting down, the pool should not be reused."," * @private"," */","var state = {","  // Initial state: open / opening / ready to be opened","  initial: 0,","  // When the pool is being closed as part of a distance change","  closing: 1,","  // When the pool is being shutdown for good","  shuttingDown: 2,","  // When the pool has being shutdown","  shutDown: 4","};","","/**"," * Represents a pool of connections to a host"," * @param {Host} host"," * @param {Number} protocolVersion Initial protocol version"," * @extends EventEmitter"," * @constructor"," */","function HostConnectionPool(host, protocolVersion) {","  events.EventEmitter.call(this);","  this._address = host.address;","  this._newConnectionTimeout = null;","  this._creating = false;","  this._state = state.initial;","  this.options = host.options;","  this.protocolVersion = protocolVersion;","  this.coreConnectionsLength = 1;","  /**","   * An immutable array of connections","   * @type {Array.<Connection>}","   */","  this.connections = utils.emptyArray;","  this.setMaxListeners(0);","}","","util.inherits(HostConnectionPool, events.EventEmitter);","","/**"," * @param {Function} callback"," */","HostConnectionPool.prototype.borrowConnection = function (callback) {","  var self = this;","  this.create(false, function afterCreating(err) {","    if (err) {","      return callback(err);","    }","    if (self.connections.length === 0) {","      // Normally an error should be thrown in this case, but better to handle this possibility","      return callback(new Error('No connection available'));","    }","    var c = HostConnectionPool.minInFlight(self.connections);","    callback(null, c);","  });","};","","/**"," * Gets the connection with the minimum number of in-flight requests."," * Only checks for index + 1 and index, to avoid a loop through all the connections."," * @param {Array.<Connection>} connections"," * @returns {Connection}"," */","HostConnectionPool.minInFlight = function(connections) {","  var length = connections.length;","  if (length === 1) {","    return connections[0];","  }","  var index = ++connectionIndex;","  if (connectionIndex >= connectionIndexOverflow) {","    connectionIndex = 0;","  }","  var current = connections[index % length];","  var previous = connections[(index - 1) % length];","  if (previous.getInFlight() < current.getInFlight()) {","    return previous;","  }","  return current;","};","","/**"," * Create the min amount of connections, if the pool is empty."," * @param {Boolean} warmup Determines if all connections must be created before invoking the callback"," * @param {Function} callback"," */","HostConnectionPool.prototype.create = function (warmup, callback) {","  if (this.isClosing()) {","    return callback(new Error('Pool is being closed when calling create'));","  }","  // The value of this.coreConnectionsLength can change over time","  // when an existing pool is being resized (by setting the distance).","  if (this.connections.length >= this.coreConnectionsLength) {","    return callback();","  }","  if (!warmup && this.connections.length > 0) {","    // we already have a valid connection","    // let the connection grow continue in the background","    this.increaseSize();","    return callback();","  }","  this.once('creation', callback);","  if (this._creating) {","    // wait for the pool to be creating","    return;","  }","  this._creating = true;","  var connectionsToCreate = this.coreConnectionsLength;","  if (!warmup) {","    connectionsToCreate = 1;","  }","  var self = this;","  utils.whilst(","    function condition() {","      return self.connections.length < connectionsToCreate;","    },","    function iterator(next) {","      self._attemptNewConnection(next);","    }, function whilstEnded(err) {","      self._creating = false;","      if (err) {","        if (self.isClosing()) {","          self.log('info', 'Connection pool created but it was being closed');","          self._closeAllConnections();","          err = new Error('Pool is being closed');","        }","        else {","          // there was an error and no connections could be successfully opened","          self.log('warning', util.format('Connection pool to host %s could not be created', self._address), err);","        }","        return self.emit('creation', err);","      }","      self.log('info', util.format('Connection pool to host %s created with %d connection(s)',","        self._address, self.connections.length));","      self.emit('creation');","      self.increaseSize();","    });","};","","/** @returns {Connection} */","HostConnectionPool.prototype._createConnection = function () {","  var c = new Connection(this._address, this.protocolVersion, this.options);","  var self = this;","  function connectionErrorCallback() {","    // The socket is not fully open / can not send heartbeat","    self.remove(c);","  }","  c.on('idleRequestError', connectionErrorCallback);","  c.on('socketClose', connectionErrorCallback);","  return c;","};","","/**"," * Prevents reconnection timeout from triggering"," */","HostConnectionPool.prototype.clearNewConnectionAttempt = function () {","  if (!this._newConnectionTimeout) {","    return;","  }","  clearTimeout(this._newConnectionTimeout);","  this._newConnectionTimeout = null;","};","","/**"," * @param {Function} callback"," */","HostConnectionPool.prototype._attemptNewConnection = function (callback) {","  var c = this._createConnection();","  var self = this;","  this.once('open', callback);","  if (this._opening) {","    // wait for the event to fire","    return;","  }","  this._opening = true;","  c.open(function attemptOpenCallback(err) {","    self._opening = false;","    if (err) {","      self.log('warning', util.format('Connection to %s could not be created: %s', self._address, err), err);","      c.close();","      return self.emit('open', err);","    }","    if (self.isClosing()) {","      self.log('info', util.format('Connection to %s opened successfully but pool was being closed', self._address));","      c.close();","      return self.emit('open', new Error('Connection closed'));","    }","    // use a copy of the connections array","    var newConnections = self.connections.slice(0);","    newConnections.push(c);","    self.connections = newConnections;","    self.log('info', util.format('Connection to %s opened successfully', self._address));","    self.emit('open', null, c);","  });","};","","HostConnectionPool.prototype.attemptNewConnectionImmediate = function () {","  var self = this;","  function openConnection() {","    self.clearNewConnectionAttempt();","    self.scheduleNewConnectionAttempt(0);","  }","  if (this._state === state.initial) {","    return openConnection();","  }","  if (this._state === state.closing) {","    return this.once('close', openConnection);","  }","  // In the case the pool its being / has been shutdown for good","  // Do not attempt to create a new connection.","};","","/**"," * Closes the connection and removes a connection from the pool."," * @param {Connection} connection"," */","HostConnectionPool.prototype.remove = function (connection) {","  // locating an object by position in the array is O(n), but normally there should be between 1 to 8 connections.","  var index = this.connections.indexOf(connection);","  if (index < 0) {","    // it was already removed from the connections and it's closing","    return;","  }","  // remove the connection from the pool, using an pool copy","  var newConnections = this.connections.slice(0);","  newConnections.splice(index, 1);","  this.connections = newConnections;","  // close the connection","  setImmediate(function removeClose() {","    connection.close();","  });","  this.emit('remove');","};","","/**"," * @param {Number} delay"," */","HostConnectionPool.prototype.scheduleNewConnectionAttempt = function (delay) {","  if (this.isClosing()) {","    return;","  }","  var self = this;","  this._newConnectionTimeout = setTimeout(function newConnectionTimeoutExpired() {","    self._newConnectionTimeout = null;","    if (self.connections.length >= self.coreConnectionsLength) {","      // new connection can be scheduled while a new connection is being opened","      // the pool has the appropriate size","      return;","    }","    self._attemptNewConnection(utils.noop);","  }, delay);","};","","HostConnectionPool.prototype.hasScheduledNewConnection = function () {","  return !!this._newConnectionTimeout || this._opening;","};","","/**"," * Increases the size of the connection pool in the background, if needed."," */","HostConnectionPool.prototype.increaseSize = function () {","  if (this.connections.length < this.coreConnectionsLength && !this.hasScheduledNewConnection()) {","    // schedule the next connection in the background","    this.scheduleNewConnectionAttempt(0);","  }","};","","/**"," * Gets a boolean indicating if the pool is being closed / shutting down or has been shutdown."," */","HostConnectionPool.prototype.isClosing = function () {","  return this._state !== state.initial;","};","","/**"," * Gracefully waits for all in-flight requests to finish and closes the pool."," */","HostConnectionPool.prototype.drainAndShutdown = function () {","  if (this.isClosing()) {","    // Its already closing / shutting down","    return;","  }","  this._state = state.closing;","  this.clearNewConnectionAttempt();","  var self = this;","  if (this.connections.length === 0) {","    return this._afterClosing();","  }","  var connections = this.connections;","  this.connections = utils.emptyArray;","  var closedConnections = 0;","  this.log('info', util.format('Draining and closing %d connections to %s', connections.length, this._address));","  for (var i = 0; i < connections.length; i++) {","    var c = connections[i];","    if (c.getInFlight() === 0) {","      getDelayedClose(c)();","      continue;","    }","    c.emitDrain = true;","    c.once('drain', getDelayedClose(c));","  }","  var wasClosed = false;","  var checkShutdownTimeout;","  function getDelayedClose(connection) {","    return (function delayedClose() {","      connection.close();","      if (++closedConnections < connections.length) {","        return;","      }","      if (wasClosed) {","        return;","      }","      wasClosed = true;","      if (checkShutdownTimeout) {","        clearTimeout(checkShutdownTimeout);","      }","      self._afterClosing();","    });","  }","  // Check that after sometime (readTimeout + 100ms) the connections have been drained","  var delay = (this.options.socketOptions.readTimeout || defaultOptions.socketOptions.readTimeout) + 100;","  checkShutdownTimeout = setTimeout(function checkShutdown() {","    wasClosed = true;","    connections.forEach(function connectionEach(c) {","      c.close();","    });","    self._afterClosing();","  }, delay);","};","","HostConnectionPool.prototype._afterClosing = function () {","  var self = this;","  function resetState() {","    if (self._state === state.shuttingDown) {","      self._state = state.shutDown;","    }","    else {","      self._state = state.initial;","    }","    self.emit('close');","  }","  if (this._creating) {","    // The pool is being created, reset the state back to init once the creation finished (without any new connection)","    return this.once('creation', resetState);","  }","  if (this._opening) {","    // The pool is growing, reset the state back to init once the open finished (without any new connection)","    return this.once('open', resetState);","  }","  resetState();","};","","/**"," * @param {Function} callback"," */","HostConnectionPool.prototype.shutdown = function (callback) {","  this.clearNewConnectionAttempt();","  if (!this.connections.length) {","    this._state = state.shutDown;","    return callback();","  }","  var previousState = this._state;","  this._state = state.shuttingDown;","  if (previousState === state.closing) {","    return this.once('close', callback);","  }","  this.once('shutdown', callback);","  if (previousState === state.shuttingDown) {","    // Its going to be emitted","    return;","  }","  var self = this;","  this._closeAllConnections(function closeAllCallback() {","    self._state = state.shutDown;","    self.emit('shutdown');","  });","};","","/** @param {Function} [callback] */","HostConnectionPool.prototype._closeAllConnections = function (callback) {","  callback = callback || utils.noop;","  var connections = this.connections;","  // point to an empty array","  this.connections = utils.emptyArray;","  if (connections.length === 0) {","    return callback();","  }","  this.log('info', util.format('Closing %d connections to %s', connections.length, this._address));","  utils.each(connections, function closeEach(c, next) {","    c.close(function closedCallback() {","      //ignore errors","      next();","    });","  }, callback);","};","","HostConnectionPool.prototype.log = utils.log;","","module.exports = HostConnectionPool;"],"l":{"2":1,"3":1,"5":1,"6":1,"7":1,"10":1,"11":1,"24":1,"42":1,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"55":0,"56":0,"59":1,"64":1,"65":0,"66":0,"67":0,"68":0,"70":0,"72":0,"74":0,"75":0,"85":1,"86":0,"87":0,"88":0,"90":0,"91":0,"92":0,"94":0,"95":0,"96":0,"97":0,"99":0,"107":1,"108":0,"109":0,"113":0,"114":0,"116":0,"119":0,"120":0,"122":0,"123":0,"125":0,"127":0,"128":0,"129":0,"130":0,"132":0,"133":0,"135":0,"138":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"149":0,"151":0,"153":0,"155":0,"156":0,"161":1,"162":0,"163":0,"164":1,"166":0,"168":0,"169":0,"170":0,"176":1,"177":0,"178":0,"180":0,"181":0,"187":1,"188":0,"189":0,"190":0,"191":0,"193":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"203":0,"204":0,"205":0,"206":0,"209":0,"210":0,"211":0,"212":0,"213":0,"217":1,"218":0,"219":1,"220":0,"221":0,"223":0,"224":0,"226":0,"227":0,"237":1,"239":0,"240":0,"242":0,"245":0,"246":0,"247":0,"249":0,"250":0,"252":0,"258":1,"259":0,"260":0,"262":0,"263":0,"264":0,"265":0,"268":0,"270":0,"274":1,"275":0,"281":1,"282":0,"284":0,"291":1,"292":0,"298":1,"299":0,"301":0,"303":0,"304":0,"305":0,"306":0,"307":0,"309":0,"310":0,"311":0,"312":0,"313":0,"314":0,"315":0,"316":0,"317":0,"319":0,"320":0,"322":0,"323":0,"324":1,"325":0,"326":0,"327":0,"328":0,"330":0,"331":0,"333":0,"334":0,"335":0,"337":0,"341":0,"342":0,"343":0,"344":0,"345":0,"347":0,"351":1,"352":0,"353":1,"354":0,"355":0,"358":0,"360":0,"362":0,"364":0,"366":0,"368":0,"370":0,"376":1,"377":0,"378":0,"379":0,"380":0,"382":0,"383":0,"384":0,"385":0,"387":0,"388":0,"390":0,"392":0,"393":0,"394":0,"395":0,"400":1,"401":0,"402":0,"404":0,"405":0,"406":0,"408":0,"409":0,"410":0,"412":0,"417":1,"419":1}},"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/connection.js":{"path":"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/connection.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":1,"43":1,"44":1,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":1,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":1,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":1,"108":0,"109":0,"110":0,"111":1,"112":0,"113":0,"114":0,"115":0,"116":1,"117":0,"118":0,"119":0,"120":0,"121":0,"122":1,"123":0,"124":0,"125":0,"126":1,"127":0,"128":1,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":1,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":1,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":1,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":1,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":1,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":1,"224":0,"225":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":1,"240":0,"241":0,"242":0,"243":0,"244":0,"245":0,"246":0,"247":0,"248":0,"249":0,"250":0,"251":0,"252":0,"253":1,"254":0,"255":1,"256":0,"257":0,"258":0,"259":0,"260":0,"261":0,"262":0,"263":0,"264":0,"265":1,"266":0,"267":0,"268":0,"269":0,"270":0,"271":0,"272":1,"273":0,"274":1,"275":0,"276":0,"277":0,"278":0,"279":0,"280":0,"281":0,"282":0,"283":1,"284":0,"285":0,"286":0,"287":0,"288":0,"289":0,"290":0,"291":1,"292":0,"293":0,"294":0,"295":0,"296":0,"297":0,"298":0,"299":0,"300":0,"301":0,"302":0,"303":0,"304":0,"305":0,"306":0,"307":0,"308":1,"309":0,"310":0,"311":0,"312":0,"313":0,"314":0,"315":0,"316":1,"317":0,"318":0,"319":0,"320":0,"321":0,"322":0,"323":1,"324":0,"325":0,"326":0,"327":0,"328":0,"329":0,"330":0,"331":0,"332":0,"333":0,"334":0,"335":0,"336":1,"337":0,"338":0,"339":0,"340":0,"341":0,"342":0,"343":0,"344":0,"345":0,"346":0,"347":0,"348":0,"349":0,"350":0,"351":0,"352":0,"353":0,"354":0,"355":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0,0],"12":[0,0,0],"13":[0,0],"14":[0,0],"15":[0,0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0,0],"56":[0,0],"57":[0,0],"58":[0,0],"59":[0,0,0],"60":[0,0],"61":[0,0],"62":[0,0],"63":[0,0],"64":[0,0],"65":[0,0],"66":[0,0],"67":[0,0],"68":[0,0],"69":[0,0],"70":[0,0],"71":[0,0],"72":[0,0],"73":[0,0],"74":[0,0],"75":[0,0],"76":[0,0],"77":[0,0],"78":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0},"fnMap":{"1":{"name":"Connection","line":28,"loc":{"start":{"line":28,"column":0},"end":{"line":28,"column":56}}},"2":{"name":"(anonymous_2)","line":80,"loc":{"start":{"line":80,"column":43},"end":{"line":80,"column":54}}},"3":{"name":"(anonymous_3)","line":87,"loc":{"start":{"line":87,"column":29},"end":{"line":87,"column":40}}},"4":{"name":"(anonymous_4)","line":118,"loc":{"start":{"line":118,"column":28},"end":{"line":118,"column":48}}},"5":{"name":"connectCallback","line":123,"loc":{"start":{"line":123,"column":52},"end":{"line":123,"column":79}}},"6":{"name":"tlsConnectCallback","line":132,"loc":{"start":{"line":132,"column":70},"end":{"line":132,"column":100}}},"7":{"name":"socketError","line":138,"loc":{"start":{"line":138,"column":31},"end":{"line":138,"column":57}}},"8":{"name":"connectTimedOut","line":141,"loc":{"start":{"line":141,"column":33},"end":{"line":141,"column":60}}},"9":{"name":"(anonymous_9)","line":157,"loc":{"start":{"line":157,"column":31},"end":{"line":157,"column":51}}},"10":{"name":"responseCallback","line":162,"loc":{"start":{"line":162,"column":55},"end":{"line":162,"column":96}}},"11":{"name":"decreasingVersionClosing","line":178,"loc":{"start":{"line":178,"column":21},"end":{"line":178,"column":57}}},"12":{"name":"decreasingVersionOpening","line":179,"loc":{"start":{"line":179,"column":21},"end":{"line":179,"column":57}}},"13":{"name":"startupCallback","line":193,"loc":{"start":{"line":193,"column":2},"end":{"line":193,"column":32}}},"14":{"name":"(anonymous_14)","line":202,"loc":{"start":{"line":202,"column":39},"end":{"line":202,"column":73}}},"15":{"name":"(anonymous_15)","line":214,"loc":{"start":{"line":214,"column":39},"end":{"line":214,"column":59}}},"16":{"name":"(anonymous_16)","line":223,"loc":{"start":{"line":223,"column":39},"end":{"line":223,"column":51}}},"17":{"name":"(anonymous_17)","line":233,"loc":{"start":{"line":233,"column":41},"end":{"line":233,"column":56}}},"18":{"name":"(anonymous_18)","line":240,"loc":{"start":{"line":240,"column":45},"end":{"line":240,"column":67}}},"19":{"name":"(anonymous_19)","line":264,"loc":{"start":{"line":264,"column":23},"end":{"line":264,"column":45}}},"20":{"name":"(anonymous_20)","line":271,"loc":{"start":{"line":271,"column":32},"end":{"line":271,"column":54}}},"21":{"name":"(anonymous_21)","line":285,"loc":{"start":{"line":285,"column":43},"end":{"line":285,"column":82}}},"22":{"name":"initialResponseCallback","line":291,"loc":{"start":{"line":291,"column":32},"end":{"line":291,"column":77}}},"23":{"name":"(anonymous_23)","line":306,"loc":{"start":{"line":306,"column":36},"end":{"line":306,"column":77}}},"24":{"name":"authResponseCallback","line":318,"loc":{"start":{"line":318,"column":33},"end":{"line":318,"column":76}}},"25":{"name":"evaluateCallback","line":332,"loc":{"start":{"line":332,"column":59},"end":{"line":332,"column":93}}},"26":{"name":"(anonymous_26)","line":349,"loc":{"start":{"line":349,"column":38},"end":{"line":349,"column":68}}},"27":{"name":"changeKeyspaceResponseCallback","line":364,"loc":{"start":{"line":364,"column":4},"end":{"line":364,"column":49}}},"28":{"name":"(anonymous_28)","line":378,"loc":{"start":{"line":378,"column":35},"end":{"line":378,"column":62}}},"29":{"name":"(anonymous_29)","line":390,"loc":{"start":{"line":390,"column":60},"end":{"line":390,"column":85}}},"30":{"name":"(anonymous_30)","line":402,"loc":{"start":{"line":402,"column":34},"end":{"line":402,"column":72}}},"31":{"name":"(anonymous_31)","line":425,"loc":{"start":{"line":425,"column":40},"end":{"line":425,"column":78}}},"32":{"name":"writeCallback","line":427,"loc":{"start":{"line":427,"column":10},"end":{"line":427,"column":39}}},"33":{"name":"(anonymous_33)","line":441,"loc":{"start":{"line":441,"column":36},"end":{"line":441,"column":48}}},"34":{"name":"(anonymous_34)","line":462,"loc":{"start":{"line":462,"column":42},"end":{"line":462,"column":54}}},"35":{"name":"(anonymous_35)","line":467,"loc":{"start":{"line":467,"column":34},"end":{"line":467,"column":46}}},"36":{"name":"(anonymous_36)","line":474,"loc":{"start":{"line":474,"column":75},"end":{"line":474,"column":90}}},"37":{"name":"(anonymous_37)","line":490,"loc":{"start":{"line":490,"column":35},"end":{"line":490,"column":46}}},"38":{"name":"(anonymous_38)","line":494,"loc":{"start":{"line":494,"column":36},"end":{"line":494,"column":53}}},"39":{"name":"(anonymous_39)","line":508,"loc":{"start":{"line":508,"column":33},"end":{"line":508,"column":45}}},"40":{"name":"writeNextPending","line":510,"loc":{"start":{"line":510,"column":15},"end":{"line":510,"column":43}}},"41":{"name":"(anonymous_41)","line":523,"loc":{"start":{"line":523,"column":35},"end":{"line":523,"column":47}}},"42":{"name":"(anonymous_42)","line":530,"loc":{"start":{"line":530,"column":36},"end":{"line":530,"column":67}}},"43":{"name":"(anonymous_43)","line":543,"loc":{"start":{"line":543,"column":39},"end":{"line":543,"column":64}}},"44":{"name":"(anonymous_44)","line":560,"loc":{"start":{"line":560,"column":33},"end":{"line":560,"column":80}}},"45":{"name":"(anonymous_45)","line":593,"loc":{"start":{"line":593,"column":38},"end":{"line":593,"column":72}}},"46":{"name":"(anonymous_46)","line":612,"loc":{"start":{"line":612,"column":41},"end":{"line":612,"column":69}}},"47":{"name":"(anonymous_47)","line":619,"loc":{"start":{"line":619,"column":20},"end":{"line":619,"column":32}}},"48":{"name":"(anonymous_48)","line":627,"loc":{"start":{"line":627,"column":33},"end":{"line":627,"column":61}}},"49":{"name":"replyAfterTimeout","line":637,"loc":{"start":{"line":637,"column":21},"end":{"line":637,"column":50}}},"50":{"name":"noop","line":642,"loc":{"start":{"line":642,"column":26},"end":{"line":642,"column":42}}},"51":{"name":"(anonymous_51)","line":653,"loc":{"start":{"line":653,"column":29},"end":{"line":653,"column":49}}},"52":{"name":"(anonymous_52)","line":669,"loc":{"start":{"line":669,"column":31},"end":{"line":669,"column":51}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":25}},"2":{"start":{"line":3,"column":0},"end":{"line":3,"column":31}},"3":{"start":{"line":4,"column":0},"end":{"line":4,"column":27}},"4":{"start":{"line":5,"column":0},"end":{"line":5,"column":25}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":38}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":35}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":37}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":35}},"9":{"start":{"line":11,"column":0},"end":{"line":11,"column":31}},"10":{"start":{"line":12,"column":0},"end":{"line":12,"column":31}},"11":{"start":{"line":13,"column":0},"end":{"line":13,"column":33}},"12":{"start":{"line":14,"column":0},"end":{"line":14,"column":49}},"13":{"start":{"line":17,"column":0},"end":{"line":17,"column":47}},"14":{"start":{"line":19,"column":0},"end":{"line":19,"column":27}},"15":{"start":{"line":28,"column":0},"end":{"line":71,"column":1}},"16":{"start":{"line":29,"column":2},"end":{"line":29,"column":33}},"17":{"start":{"line":30,"column":2},"end":{"line":30,"column":26}},"18":{"start":{"line":31,"column":2},"end":{"line":33,"column":3}},"19":{"start":{"line":32,"column":4},"end":{"line":32,"column":91}},"20":{"start":{"line":34,"column":2},"end":{"line":34,"column":27}},"21":{"start":{"line":35,"column":2},"end":{"line":35,"column":53}},"22":{"start":{"line":36,"column":2},"end":{"line":36,"column":56}},"23":{"start":{"line":37,"column":2},"end":{"line":37,"column":54}},"24":{"start":{"line":38,"column":2},"end":{"line":38,"column":96}},"25":{"start":{"line":39,"column":2},"end":{"line":48,"column":3}},"26":{"start":{"line":41,"column":4},"end":{"line":41,"column":41}},"27":{"start":{"line":42,"column":4},"end":{"line":45,"column":5}},"28":{"start":{"line":44,"column":6},"end":{"line":44,"column":59}},"29":{"start":{"line":47,"column":4},"end":{"line":47,"column":32}},"30":{"start":{"line":49,"column":2},"end":{"line":49,"column":41}},"31":{"start":{"line":50,"column":2},"end":{"line":50,"column":27}},"32":{"start":{"line":51,"column":2},"end":{"line":51,"column":26}},"33":{"start":{"line":52,"column":2},"end":{"line":52,"column":22}},"34":{"start":{"line":56,"column":2},"end":{"line":56,"column":26}},"35":{"start":{"line":57,"column":2},"end":{"line":57,"column":28}},"36":{"start":{"line":58,"column":2},"end":{"line":58,"column":59}},"37":{"start":{"line":59,"column":2},"end":{"line":59,"column":55}},"38":{"start":{"line":60,"column":2},"end":{"line":60,"column":23}},"39":{"start":{"line":61,"column":2},"end":{"line":61,"column":25}},"40":{"start":{"line":66,"column":2},"end":{"line":66,"column":25}},"41":{"start":{"line":70,"column":2},"end":{"line":70,"column":28}},"42":{"start":{"line":73,"column":0},"end":{"line":73,"column":47}},"43":{"start":{"line":75,"column":0},"end":{"line":75,"column":37}},"44":{"start":{"line":80,"column":0},"end":{"line":112,"column":2}},"45":{"start":{"line":82,"column":2},"end":{"line":82,"column":47}},"46":{"start":{"line":83,"column":2},"end":{"line":83,"column":47}},"47":{"start":{"line":85,"column":2},"end":{"line":85,"column":27}},"48":{"start":{"line":86,"column":2},"end":{"line":86,"column":18}},"49":{"start":{"line":87,"column":2},"end":{"line":96,"column":5}},"50":{"start":{"line":88,"column":4},"end":{"line":88,"column":67}},"51":{"start":{"line":89,"column":4},"end":{"line":89,"column":30}},"52":{"start":{"line":90,"column":4},"end":{"line":90,"column":38}},"53":{"start":{"line":91,"column":4},"end":{"line":91,"column":17}},"54":{"start":{"line":92,"column":4},"end":{"line":95,"column":5}},"55":{"start":{"line":94,"column":6},"end":{"line":94,"column":31}},"56":{"start":{"line":98,"column":2},"end":{"line":98,"column":61}},"57":{"start":{"line":99,"column":2},"end":{"line":99,"column":71}},"58":{"start":{"line":100,"column":2},"end":{"line":100,"column":68}},"59":{"start":{"line":101,"column":2},"end":{"line":101,"column":59}},"60":{"start":{"line":102,"column":2},"end":{"line":102,"column":53}},"61":{"start":{"line":103,"column":2},"end":{"line":103,"column":63}},"62":{"start":{"line":104,"column":2},"end":{"line":104,"column":65}},"63":{"start":{"line":106,"column":2},"end":{"line":109,"column":25}},"64":{"start":{"line":111,"column":2},"end":{"line":111,"column":87}},"65":{"start":{"line":118,"column":0},"end":{"line":151,"column":2}},"66":{"start":{"line":119,"column":2},"end":{"line":119,"column":18}},"67":{"start":{"line":120,"column":2},"end":{"line":120,"column":70}},"68":{"start":{"line":121,"column":2},"end":{"line":137,"column":3}},"69":{"start":{"line":122,"column":4},"end":{"line":122,"column":38}},"70":{"start":{"line":123,"column":4},"end":{"line":127,"column":7}},"71":{"start":{"line":124,"column":6},"end":{"line":124,"column":83}},"72":{"start":{"line":125,"column":6},"end":{"line":125,"column":33}},"73":{"start":{"line":126,"column":6},"end":{"line":126,"column":29}},"74":{"start":{"line":131,"column":4},"end":{"line":131,"column":88}},"75":{"start":{"line":132,"column":4},"end":{"line":136,"column":7}},"76":{"start":{"line":133,"column":6},"end":{"line":133,"column":90}},"77":{"start":{"line":134,"column":6},"end":{"line":134,"column":33}},"78":{"start":{"line":135,"column":6},"end":{"line":135,"column":29}},"79":{"start":{"line":138,"column":2},"end":{"line":140,"column":5}},"80":{"start":{"line":139,"column":4},"end":{"line":139,"column":47}},"81":{"start":{"line":141,"column":2},"end":{"line":144,"column":5}},"82":{"start":{"line":142,"column":4},"end":{"line":142,"column":58}},"83":{"start":{"line":143,"column":4},"end":{"line":143,"column":46}},"84":{"start":{"line":145,"column":2},"end":{"line":145,"column":71}},"85":{"start":{"line":147,"column":2},"end":{"line":149,"column":3}},"86":{"start":{"line":148,"column":4},"end":{"line":148,"column":81}},"87":{"start":{"line":150,"column":2},"end":{"line":150,"column":69}},"88":{"start":{"line":157,"column":0},"end":{"line":200,"column":2}},"89":{"start":{"line":158,"column":2},"end":{"line":160,"column":3}},"90":{"start":{"line":159,"column":4},"end":{"line":159,"column":79}},"91":{"start":{"line":161,"column":2},"end":{"line":161,"column":18}},"92":{"start":{"line":162,"column":2},"end":{"line":191,"column":5}},"93":{"start":{"line":163,"column":4},"end":{"line":186,"column":5}},"94":{"start":{"line":164,"column":6},"end":{"line":166,"column":77}},"95":{"start":{"line":167,"column":6},"end":{"line":173,"column":7}},"96":{"start":{"line":170,"column":8},"end":{"line":172,"column":97}},"97":{"start":{"line":174,"column":6},"end":{"line":185,"column":7}},"98":{"start":{"line":175,"column":8},"end":{"line":175,"column":114}},"99":{"start":{"line":176,"column":8},"end":{"line":176,"column":31}},"100":{"start":{"line":178,"column":8},"end":{"line":183,"column":11}},"101":{"start":{"line":179,"column":10},"end":{"line":182,"column":13}},"102":{"start":{"line":181,"column":12},"end":{"line":181,"column":32}},"103":{"start":{"line":184,"column":8},"end":{"line":184,"column":15}},"104":{"start":{"line":187,"column":4},"end":{"line":189,"column":5}},"105":{"start":{"line":188,"column":6},"end":{"line":188,"column":83}},"106":{"start":{"line":190,"column":4},"end":{"line":190,"column":25}},"107":{"start":{"line":193,"column":2},"end":{"line":199,"column":3}},"108":{"start":{"line":194,"column":4},"end":{"line":196,"column":5}},"109":{"start":{"line":195,"column":6},"end":{"line":195,"column":56}},"110":{"start":{"line":198,"column":4},"end":{"line":198,"column":42}},"111":{"start":{"line":202,"column":0},"end":{"line":209,"column":2}},"112":{"start":{"line":203,"column":2},"end":{"line":203,"column":100}},"113":{"start":{"line":204,"column":2},"end":{"line":207,"column":3}},"114":{"start":{"line":206,"column":4},"end":{"line":206,"column":29}},"115":{"start":{"line":208,"column":2},"end":{"line":208,"column":16}},"116":{"start":{"line":214,"column":0},"end":{"line":221,"column":2}},"117":{"start":{"line":215,"column":2},"end":{"line":215,"column":25}},"118":{"start":{"line":216,"column":2},"end":{"line":216,"column":24}},"119":{"start":{"line":218,"column":2},"end":{"line":218,"column":45}},"120":{"start":{"line":219,"column":2},"end":{"line":219,"column":64}},"121":{"start":{"line":220,"column":2},"end":{"line":220,"column":13}},"122":{"start":{"line":223,"column":0},"end":{"line":228,"column":2}},"123":{"start":{"line":225,"column":2},"end":{"line":225,"column":47}},"124":{"start":{"line":226,"column":2},"end":{"line":226,"column":56}},"125":{"start":{"line":227,"column":2},"end":{"line":227,"column":50}},"126":{"start":{"line":233,"column":0},"end":{"line":235,"column":2}},"127":{"start":{"line":234,"column":2},"end":{"line":234,"column":34}},"128":{"start":{"line":240,"column":0},"end":{"line":278,"column":2}},"129":{"start":{"line":241,"column":2},"end":{"line":245,"column":3}},"130":{"start":{"line":243,"column":4},"end":{"line":243,"column":35}},"131":{"start":{"line":244,"column":4},"end":{"line":244,"column":28}},"132":{"start":{"line":246,"column":2},"end":{"line":246,"column":25}},"133":{"start":{"line":247,"column":2},"end":{"line":249,"column":3}},"134":{"start":{"line":248,"column":4},"end":{"line":248,"column":23}},"135":{"start":{"line":250,"column":2},"end":{"line":250,"column":55}},"136":{"start":{"line":251,"column":2},"end":{"line":251,"column":27}},"137":{"start":{"line":252,"column":2},"end":{"line":254,"column":3}},"138":{"start":{"line":253,"column":4},"end":{"line":253,"column":32}},"139":{"start":{"line":256,"column":2},"end":{"line":256,"column":57}},"140":{"start":{"line":258,"column":2},"end":{"line":258,"column":27}},"141":{"start":{"line":259,"column":2},"end":{"line":261,"column":3}},"142":{"start":{"line":260,"column":4},"end":{"line":260,"column":75}},"143":{"start":{"line":262,"column":2},"end":{"line":262,"column":18}},"144":{"start":{"line":264,"column":2},"end":{"line":267,"column":5}},"145":{"start":{"line":265,"column":4},"end":{"line":265,"column":35}},"146":{"start":{"line":266,"column":4},"end":{"line":266,"column":11}},"147":{"start":{"line":269,"column":2},"end":{"line":269,"column":45}},"148":{"start":{"line":270,"column":2},"end":{"line":270,"column":26}},"149":{"start":{"line":271,"column":2},"end":{"line":277,"column":5}},"150":{"start":{"line":272,"column":4},"end":{"line":274,"column":5}},"151":{"start":{"line":273,"column":6},"end":{"line":273,"column":13}},"152":{"start":{"line":275,"column":4},"end":{"line":275,"column":23}},"153":{"start":{"line":276,"column":4},"end":{"line":276,"column":11}},"154":{"start":{"line":285,"column":0},"end":{"line":298,"column":2}},"155":{"start":{"line":286,"column":2},"end":{"line":288,"column":3}},"156":{"start":{"line":287,"column":4},"end":{"line":287,"column":87}},"157":{"start":{"line":289,"column":2},"end":{"line":289,"column":99}},"158":{"start":{"line":290,"column":2},"end":{"line":290,"column":18}},"159":{"start":{"line":291,"column":2},"end":{"line":297,"column":5}},"160":{"start":{"line":293,"column":4},"end":{"line":295,"column":5}},"161":{"start":{"line":294,"column":6},"end":{"line":294,"column":27}},"162":{"start":{"line":296,"column":4},"end":{"line":296,"column":54}},"163":{"start":{"line":306,"column":0},"end":{"line":342,"column":2}},"164":{"start":{"line":307,"column":2},"end":{"line":307,"column":18}},"165":{"start":{"line":308,"column":2},"end":{"line":308,"column":56}},"166":{"start":{"line":309,"column":2},"end":{"line":317,"column":3}},"167":{"start":{"line":312,"column":4},"end":{"line":314,"column":5}},"168":{"start":{"line":313,"column":6},"end":{"line":313,"column":123}},"169":{"start":{"line":316,"column":4},"end":{"line":316,"column":94}},"170":{"start":{"line":318,"column":2},"end":{"line":341,"column":5}},"171":{"start":{"line":319,"column":4},"end":{"line":326,"column":5}},"172":{"start":{"line":320,"column":6},"end":{"line":324,"column":7}},"173":{"start":{"line":321,"column":8},"end":{"line":321,"column":68}},"174":{"start":{"line":322,"column":8},"end":{"line":322,"column":39}},"175":{"start":{"line":323,"column":8},"end":{"line":323,"column":24}},"176":{"start":{"line":325,"column":6},"end":{"line":325,"column":27}},"177":{"start":{"line":327,"column":4},"end":{"line":330,"column":5}},"178":{"start":{"line":328,"column":6},"end":{"line":328,"column":46}},"179":{"start":{"line":329,"column":6},"end":{"line":329,"column":24}},"180":{"start":{"line":331,"column":4},"end":{"line":339,"column":5}},"181":{"start":{"line":332,"column":6},"end":{"line":338,"column":9}},"182":{"start":{"line":333,"column":8},"end":{"line":335,"column":9}},"183":{"start":{"line":334,"column":10},"end":{"line":334,"column":31}},"184":{"start":{"line":337,"column":8},"end":{"line":337,"column":54}},"185":{"start":{"line":340,"column":4},"end":{"line":340,"column":108}},"186":{"start":{"line":349,"column":0},"end":{"line":371,"column":2}},"187":{"start":{"line":350,"column":2},"end":{"line":352,"column":3}},"188":{"start":{"line":351,"column":4},"end":{"line":351,"column":22}},"189":{"start":{"line":353,"column":2},"end":{"line":353,"column":41}},"190":{"start":{"line":354,"column":2},"end":{"line":357,"column":3}},"191":{"start":{"line":356,"column":4},"end":{"line":356,"column":11}},"192":{"start":{"line":358,"column":2},"end":{"line":358,"column":31}},"193":{"start":{"line":359,"column":2},"end":{"line":359,"column":48}},"194":{"start":{"line":360,"column":2},"end":{"line":360,"column":18}},"195":{"start":{"line":361,"column":2},"end":{"line":370,"column":7}},"196":{"start":{"line":365,"column":6},"end":{"line":367,"column":7}},"197":{"start":{"line":366,"column":8},"end":{"line":366,"column":33}},"198":{"start":{"line":368,"column":6},"end":{"line":368,"column":31}},"199":{"start":{"line":369,"column":6},"end":{"line":369,"column":50}},"200":{"start":{"line":378,"column":0},"end":{"line":394,"column":2}},"201":{"start":{"line":379,"column":2},"end":{"line":379,"column":45}},"202":{"start":{"line":380,"column":2},"end":{"line":380,"column":34}},"203":{"start":{"line":381,"column":2},"end":{"line":384,"column":3}},"204":{"start":{"line":383,"column":4},"end":{"line":383,"column":43}},"205":{"start":{"line":385,"column":2},"end":{"line":385,"column":35}},"206":{"start":{"line":386,"column":2},"end":{"line":386,"column":26}},"207":{"start":{"line":387,"column":2},"end":{"line":387,"column":34}},"208":{"start":{"line":388,"column":2},"end":{"line":388,"column":30}},"209":{"start":{"line":389,"column":2},"end":{"line":389,"column":18}},"210":{"start":{"line":390,"column":2},"end":{"line":393,"column":5}},"211":{"start":{"line":391,"column":4},"end":{"line":391,"column":41}},"212":{"start":{"line":392,"column":4},"end":{"line":392,"column":32}},"213":{"start":{"line":402,"column":0},"end":{"line":416,"column":2}},"214":{"start":{"line":403,"column":2},"end":{"line":403,"column":18}},"215":{"start":{"line":404,"column":2},"end":{"line":404,"column":36}},"216":{"start":{"line":405,"column":2},"end":{"line":411,"column":3}},"217":{"start":{"line":406,"column":4},"end":{"line":409,"column":114}},"218":{"start":{"line":410,"column":4},"end":{"line":410,"column":93}},"219":{"start":{"line":412,"column":2},"end":{"line":412,"column":53}},"220":{"start":{"line":413,"column":2},"end":{"line":413,"column":30}},"221":{"start":{"line":414,"column":2},"end":{"line":414,"column":41}},"222":{"start":{"line":415,"column":2},"end":{"line":415,"column":83}},"223":{"start":{"line":425,"column":0},"end":{"line":457,"column":2}},"224":{"start":{"line":426,"column":2},"end":{"line":426,"column":18}},"225":{"start":{"line":427,"column":2},"end":{"line":456,"column":5}},"226":{"start":{"line":428,"column":4},"end":{"line":430,"column":5}},"227":{"start":{"line":429,"column":6},"end":{"line":429,"column":27}},"228":{"start":{"line":431,"column":4},"end":{"line":431,"column":85}},"229":{"start":{"line":432,"column":4},"end":{"line":436,"column":5}},"230":{"start":{"line":433,"column":6},"end":{"line":435,"column":7}},"231":{"start":{"line":434,"column":8},"end":{"line":434,"column":66}},"232":{"start":{"line":437,"column":4},"end":{"line":448,"column":5}},"233":{"start":{"line":440,"column":6},"end":{"line":440,"column":45}},"234":{"start":{"line":441,"column":6},"end":{"line":443,"column":49}},"235":{"start":{"line":442,"column":8},"end":{"line":442,"column":34}},"236":{"start":{"line":444,"column":6},"end":{"line":447,"column":7}},"237":{"start":{"line":446,"column":8},"end":{"line":446,"column":38}},"238":{"start":{"line":450,"column":4},"end":{"line":455,"column":6}},"239":{"start":{"line":462,"column":0},"end":{"line":484,"column":2}},"240":{"start":{"line":463,"column":2},"end":{"line":463,"column":18}},"241":{"start":{"line":464,"column":2},"end":{"line":471,"column":3}},"242":{"start":{"line":467,"column":4},"end":{"line":469,"column":47}},"243":{"start":{"line":468,"column":6},"end":{"line":468,"column":32}},"244":{"start":{"line":470,"column":4},"end":{"line":470,"column":11}},"245":{"start":{"line":472,"column":2},"end":{"line":472,"column":90}},"246":{"start":{"line":473,"column":2},"end":{"line":473,"column":31}},"247":{"start":{"line":474,"column":2},"end":{"line":483,"column":5}},"248":{"start":{"line":475,"column":4},"end":{"line":475,"column":34}},"249":{"start":{"line":476,"column":4},"end":{"line":480,"column":5}},"250":{"start":{"line":479,"column":6},"end":{"line":479,"column":13}},"251":{"start":{"line":481,"column":4},"end":{"line":481,"column":65}},"252":{"start":{"line":482,"column":4},"end":{"line":482,"column":45}},"253":{"start":{"line":490,"column":0},"end":{"line":492,"column":2}},"254":{"start":{"line":491,"column":2},"end":{"line":491,"column":30}},"255":{"start":{"line":494,"column":0},"end":{"line":506,"column":2}},"256":{"start":{"line":495,"column":2},"end":{"line":495,"column":33}},"257":{"start":{"line":496,"column":2},"end":{"line":498,"column":3}},"258":{"start":{"line":497,"column":4},"end":{"line":497,"column":11}},"259":{"start":{"line":499,"column":2},"end":{"line":499,"column":39}},"260":{"start":{"line":500,"column":2},"end":{"line":500,"column":32}},"261":{"start":{"line":501,"column":2},"end":{"line":503,"column":3}},"262":{"start":{"line":502,"column":4},"end":{"line":502,"column":23}},"263":{"start":{"line":504,"column":2},"end":{"line":504,"column":19}},"264":{"start":{"line":505,"column":2},"end":{"line":505,"column":59}},"265":{"start":{"line":508,"column":0},"end":{"line":517,"column":2}},"266":{"start":{"line":509,"column":2},"end":{"line":509,"column":18}},"267":{"start":{"line":510,"column":2},"end":{"line":516,"column":5}},"268":{"start":{"line":511,"column":4},"end":{"line":511,"column":45}},"269":{"start":{"line":512,"column":4},"end":{"line":514,"column":5}},"270":{"start":{"line":513,"column":6},"end":{"line":513,"column":13}},"271":{"start":{"line":515,"column":4},"end":{"line":515,"column":72}},"272":{"start":{"line":523,"column":0},"end":{"line":525,"column":2}},"273":{"start":{"line":524,"column":2},"end":{"line":524,"column":30}},"274":{"start":{"line":530,"column":0},"end":{"line":541,"column":2}},"275":{"start":{"line":531,"column":2},"end":{"line":531,"column":33}},"276":{"start":{"line":532,"column":2},"end":{"line":534,"column":3}},"277":{"start":{"line":533,"column":4},"end":{"line":533,"column":57}},"278":{"start":{"line":535,"column":2},"end":{"line":535,"column":46}},"279":{"start":{"line":536,"column":2},"end":{"line":538,"column":3}},"280":{"start":{"line":537,"column":4},"end":{"line":537,"column":86}},"281":{"start":{"line":539,"column":2},"end":{"line":539,"column":80}},"282":{"start":{"line":540,"column":2},"end":{"line":540,"column":44}},"283":{"start":{"line":543,"column":0},"end":{"line":555,"column":2}},"284":{"start":{"line":544,"column":2},"end":{"line":554,"column":3}},"285":{"start":{"line":546,"column":6},"end":{"line":546,"column":43}},"286":{"start":{"line":547,"column":6},"end":{"line":547,"column":12}},"287":{"start":{"line":549,"column":6},"end":{"line":549,"column":45}},"288":{"start":{"line":550,"column":6},"end":{"line":550,"column":12}},"289":{"start":{"line":552,"column":6},"end":{"line":552,"column":43}},"290":{"start":{"line":553,"column":6},"end":{"line":553,"column":12}},"291":{"start":{"line":560,"column":0},"end":{"line":585,"column":2}},"292":{"start":{"line":561,"column":2},"end":{"line":561,"column":33}},"293":{"start":{"line":562,"column":2},"end":{"line":564,"column":3}},"294":{"start":{"line":563,"column":4},"end":{"line":563,"column":57}},"295":{"start":{"line":565,"column":2},"end":{"line":565,"column":46}},"296":{"start":{"line":566,"column":2},"end":{"line":568,"column":3}},"297":{"start":{"line":567,"column":4},"end":{"line":567,"column":86}},"298":{"start":{"line":569,"column":2},"end":{"line":569,"column":63}},"299":{"start":{"line":570,"column":2},"end":{"line":574,"column":3}},"300":{"start":{"line":572,"column":4},"end":{"line":572,"column":34}},"301":{"start":{"line":573,"column":4},"end":{"line":573,"column":27}},"302":{"start":{"line":575,"column":2},"end":{"line":579,"column":3}},"303":{"start":{"line":576,"column":4},"end":{"line":578,"column":91}},"304":{"start":{"line":580,"column":2},"end":{"line":580,"column":43}},"305":{"start":{"line":581,"column":2},"end":{"line":581,"column":58}},"306":{"start":{"line":582,"column":2},"end":{"line":584,"column":3}},"307":{"start":{"line":583,"column":4},"end":{"line":583,"column":91}},"308":{"start":{"line":593,"column":0},"end":{"line":604,"column":2}},"309":{"start":{"line":594,"column":2},"end":{"line":594,"column":34}},"310":{"start":{"line":596,"column":2},"end":{"line":596,"column":26}},"311":{"start":{"line":597,"column":2},"end":{"line":600,"column":3}},"312":{"start":{"line":598,"column":4},"end":{"line":598,"column":34}},"313":{"start":{"line":599,"column":4},"end":{"line":599,"column":27}},"314":{"start":{"line":601,"column":2},"end":{"line":603,"column":3}},"315":{"start":{"line":602,"column":4},"end":{"line":602,"column":28}},"316":{"start":{"line":612,"column":0},"end":{"line":622,"column":2}},"317":{"start":{"line":613,"column":2},"end":{"line":613,"column":125}},"318":{"start":{"line":614,"column":2},"end":{"line":617,"column":3}},"319":{"start":{"line":616,"column":4},"end":{"line":616,"column":16}},"320":{"start":{"line":618,"column":2},"end":{"line":618,"column":18}},"321":{"start":{"line":619,"column":2},"end":{"line":621,"column":13}},"322":{"start":{"line":620,"column":4},"end":{"line":620,"column":45}},"323":{"start":{"line":627,"column":0},"end":{"line":646,"column":2}},"324":{"start":{"line":628,"column":2},"end":{"line":628,"column":46}},"325":{"start":{"line":629,"column":2},"end":{"line":632,"column":3}},"326":{"start":{"line":631,"column":4},"end":{"line":631,"column":11}},"327":{"start":{"line":633,"column":2},"end":{"line":633,"column":26}},"328":{"start":{"line":634,"column":2},"end":{"line":634,"column":42}},"329":{"start":{"line":635,"column":2},"end":{"line":635,"column":18}},"330":{"start":{"line":637,"column":2},"end":{"line":640,"column":4}},"331":{"start":{"line":639,"column":4},"end":{"line":639,"column":28}},"332":{"start":{"line":641,"column":2},"end":{"line":643,"column":3}},"333":{"start":{"line":642,"column":4},"end":{"line":642,"column":45}},"334":{"start":{"line":644,"column":2},"end":{"line":644,"column":101}},"335":{"start":{"line":645,"column":2},"end":{"line":645,"column":63}},"336":{"start":{"line":653,"column":0},"end":{"line":681,"column":2}},"337":{"start":{"line":654,"column":2},"end":{"line":654,"column":36}},"338":{"start":{"line":655,"column":2},"end":{"line":657,"column":3}},"339":{"start":{"line":656,"column":4},"end":{"line":656,"column":22}},"340":{"start":{"line":658,"column":2},"end":{"line":658,"column":25}},"341":{"start":{"line":660,"column":2},"end":{"line":660,"column":35}},"342":{"start":{"line":661,"column":2},"end":{"line":661,"column":31}},"343":{"start":{"line":662,"column":2},"end":{"line":664,"column":3}},"344":{"start":{"line":663,"column":4},"end":{"line":663,"column":22}},"345":{"start":{"line":666,"column":2},"end":{"line":666,"column":28}},"346":{"start":{"line":667,"column":2},"end":{"line":667,"column":64}},"347":{"start":{"line":668,"column":2},"end":{"line":668,"column":18}},"348":{"start":{"line":669,"column":2},"end":{"line":674,"column":5}},"349":{"start":{"line":670,"column":4},"end":{"line":672,"column":5}},"350":{"start":{"line":671,"column":6},"end":{"line":671,"column":70}},"351":{"start":{"line":673,"column":4},"end":{"line":673,"column":27}},"352":{"start":{"line":676,"column":2},"end":{"line":676,"column":45}},"353":{"start":{"line":678,"column":2},"end":{"line":678,"column":41}},"354":{"start":{"line":680,"column":2},"end":{"line":680,"column":23}},"355":{"start":{"line":683,"column":0},"end":{"line":683,"column":28}}},"branchMap":{"1":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":2},"end":{"line":31,"column":2}},{"start":{"line":31,"column":2},"end":{"line":31,"column":2}}]},"2":{"line":31,"type":"binary-expr","locations":[{"start":{"line":31,"column":6},"end":{"line":31,"column":15}},{"start":{"line":31,"column":19},"end":{"line":31,"column":44}}]},"3":{"line":39,"type":"if","locations":[{"start":{"line":39,"column":2},"end":{"line":39,"column":2}},{"start":{"line":39,"column":2},"end":{"line":39,"column":2}}]},"4":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":4},"end":{"line":42,"column":4}},{"start":{"line":42,"column":4},"end":{"line":42,"column":4}}]},"5":{"line":42,"type":"binary-expr","locations":[{"start":{"line":42,"column":8},"end":{"line":42,"column":46}},{"start":{"line":42,"column":50},"end":{"line":42,"column":105}}]},"6":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":4},"end":{"line":92,"column":4}},{"start":{"line":92,"column":4},"end":{"line":92,"column":4}}]},"7":{"line":121,"type":"if","locations":[{"start":{"line":121,"column":2},"end":{"line":121,"column":2}},{"start":{"line":121,"column":2},"end":{"line":121,"column":2}}]},"8":{"line":147,"type":"if","locations":[{"start":{"line":147,"column":2},"end":{"line":147,"column":2}},{"start":{"line":147,"column":2},"end":{"line":147,"column":2}}]},"9":{"line":158,"type":"if","locations":[{"start":{"line":158,"column":2},"end":{"line":158,"column":2}},{"start":{"line":158,"column":2},"end":{"line":158,"column":2}}]},"10":{"line":163,"type":"if","locations":[{"start":{"line":163,"column":4},"end":{"line":163,"column":4}},{"start":{"line":163,"column":4},"end":{"line":163,"column":4}}]},"11":{"line":163,"type":"binary-expr","locations":[{"start":{"line":163,"column":8},"end":{"line":163,"column":11}},{"start":{"line":163,"column":15},"end":{"line":163,"column":35}},{"start":{"line":163,"column":39},"end":{"line":163,"column":63}}]},"12":{"line":164,"type":"binary-expr","locations":[{"start":{"line":164,"column":29},"end":{"line":164,"column":64}},{"start":{"line":165,"column":8},"end":{"line":165,"column":59}},{"start":{"line":166,"column":8},"end":{"line":166,"column":75}}]},"13":{"line":167,"type":"if","locations":[{"start":{"line":167,"column":6},"end":{"line":167,"column":6}},{"start":{"line":167,"column":6},"end":{"line":167,"column":6}}]},"14":{"line":167,"type":"binary-expr","locations":[{"start":{"line":167,"column":10},"end":{"line":167,"column":26}},{"start":{"line":167,"column":30},"end":{"line":167,"column":54}}]},"15":{"line":170,"type":"binary-expr","locations":[{"start":{"line":170,"column":27},"end":{"line":170,"column":62}},{"start":{"line":171,"column":10},"end":{"line":171,"column":59}},{"start":{"line":172,"column":10},"end":{"line":172,"column":95}}]},"16":{"line":174,"type":"if","locations":[{"start":{"line":174,"column":6},"end":{"line":174,"column":6}},{"start":{"line":174,"column":6},"end":{"line":174,"column":6}}]},"17":{"line":187,"type":"if","locations":[{"start":{"line":187,"column":4},"end":{"line":187,"column":4}},{"start":{"line":187,"column":4},"end":{"line":187,"column":4}}]},"18":{"line":187,"type":"binary-expr","locations":[{"start":{"line":187,"column":8},"end":{"line":187,"column":16}},{"start":{"line":187,"column":20},"end":{"line":187,"column":45}}]},"19":{"line":194,"type":"if","locations":[{"start":{"line":194,"column":4},"end":{"line":194,"column":4}},{"start":{"line":194,"column":4},"end":{"line":194,"column":4}}]},"20":{"line":204,"type":"if","locations":[{"start":{"line":204,"column":2},"end":{"line":204,"column":2}},{"start":{"line":204,"column":2},"end":{"line":204,"column":2}}]},"21":{"line":241,"type":"if","locations":[{"start":{"line":241,"column":2},"end":{"line":241,"column":2}},{"start":{"line":241,"column":2},"end":{"line":241,"column":2}}]},"22":{"line":247,"type":"if","locations":[{"start":{"line":247,"column":2},"end":{"line":247,"column":2}},{"start":{"line":247,"column":2},"end":{"line":247,"column":2}}]},"23":{"line":252,"type":"if","locations":[{"start":{"line":252,"column":2},"end":{"line":252,"column":2}},{"start":{"line":252,"column":2},"end":{"line":252,"column":2}}]},"24":{"line":259,"type":"if","locations":[{"start":{"line":259,"column":2},"end":{"line":259,"column":2}},{"start":{"line":259,"column":2},"end":{"line":259,"column":2}}]},"25":{"line":272,"type":"if","locations":[{"start":{"line":272,"column":4},"end":{"line":272,"column":4}},{"start":{"line":272,"column":4},"end":{"line":272,"column":4}}]},"26":{"line":286,"type":"if","locations":[{"start":{"line":286,"column":2},"end":{"line":286,"column":2}},{"start":{"line":286,"column":2},"end":{"line":286,"column":2}}]},"27":{"line":293,"type":"if","locations":[{"start":{"line":293,"column":4},"end":{"line":293,"column":4}},{"start":{"line":293,"column":4},"end":{"line":293,"column":4}}]},"28":{"line":309,"type":"if","locations":[{"start":{"line":309,"column":2},"end":{"line":309,"column":2}},{"start":{"line":309,"column":2},"end":{"line":309,"column":2}}]},"29":{"line":312,"type":"if","locations":[{"start":{"line":312,"column":4},"end":{"line":312,"column":4}},{"start":{"line":312,"column":4},"end":{"line":312,"column":4}}]},"30":{"line":319,"type":"if","locations":[{"start":{"line":319,"column":4},"end":{"line":319,"column":4}},{"start":{"line":319,"column":4},"end":{"line":319,"column":4}}]},"31":{"line":320,"type":"if","locations":[{"start":{"line":320,"column":6},"end":{"line":320,"column":6}},{"start":{"line":320,"column":6},"end":{"line":320,"column":6}}]},"32":{"line":320,"type":"binary-expr","locations":[{"start":{"line":320,"column":10},"end":{"line":320,"column":45}},{"start":{"line":320,"column":49},"end":{"line":320,"column":101}}]},"33":{"line":327,"type":"if","locations":[{"start":{"line":327,"column":4},"end":{"line":327,"column":4}},{"start":{"line":327,"column":4},"end":{"line":327,"column":4}}]},"34":{"line":331,"type":"if","locations":[{"start":{"line":331,"column":4},"end":{"line":331,"column":4}},{"start":{"line":331,"column":4},"end":{"line":331,"column":4}}]},"35":{"line":333,"type":"if","locations":[{"start":{"line":333,"column":8},"end":{"line":333,"column":8}},{"start":{"line":333,"column":8},"end":{"line":333,"column":8}}]},"36":{"line":350,"type":"if","locations":[{"start":{"line":350,"column":2},"end":{"line":350,"column":2}},{"start":{"line":350,"column":2},"end":{"line":350,"column":2}}]},"37":{"line":350,"type":"binary-expr","locations":[{"start":{"line":350,"column":6},"end":{"line":350,"column":15}},{"start":{"line":350,"column":19},"end":{"line":350,"column":45}}]},"38":{"line":354,"type":"if","locations":[{"start":{"line":354,"column":2},"end":{"line":354,"column":2}},{"start":{"line":354,"column":2},"end":{"line":354,"column":2}}]},"39":{"line":365,"type":"if","locations":[{"start":{"line":365,"column":6},"end":{"line":365,"column":6}},{"start":{"line":365,"column":6},"end":{"line":365,"column":6}}]},"40":{"line":379,"type":"binary-expr","locations":[{"start":{"line":379,"column":15},"end":{"line":379,"column":28}},{"start":{"line":379,"column":32},"end":{"line":379,"column":34}}]},"41":{"line":381,"type":"if","locations":[{"start":{"line":381,"column":2},"end":{"line":381,"column":2}},{"start":{"line":381,"column":2},"end":{"line":381,"column":2}}]},"42":{"line":405,"type":"if","locations":[{"start":{"line":405,"column":2},"end":{"line":405,"column":2}},{"start":{"line":405,"column":2},"end":{"line":405,"column":2}}]},"43":{"line":428,"type":"if","locations":[{"start":{"line":428,"column":4},"end":{"line":428,"column":4}},{"start":{"line":428,"column":4},"end":{"line":428,"column":4}}]},"44":{"line":432,"type":"if","locations":[{"start":{"line":432,"column":4},"end":{"line":432,"column":4}},{"start":{"line":432,"column":4},"end":{"line":432,"column":4}}]},"45":{"line":432,"type":"binary-expr","locations":[{"start":{"line":432,"column":8},"end":{"line":432,"column":15}},{"start":{"line":432,"column":19},"end":{"line":432,"column":38}}]},"46":{"line":433,"type":"if","locations":[{"start":{"line":433,"column":6},"end":{"line":433,"column":6}},{"start":{"line":433,"column":6},"end":{"line":433,"column":6}}]},"47":{"line":433,"type":"binary-expr","locations":[{"start":{"line":433,"column":10},"end":{"line":433,"column":52}},{"start":{"line":433,"column":56},"end":{"line":433,"column":96}}]},"48":{"line":437,"type":"if","locations":[{"start":{"line":437,"column":4},"end":{"line":437,"column":4}},{"start":{"line":437,"column":4},"end":{"line":437,"column":4}}]},"49":{"line":444,"type":"if","locations":[{"start":{"line":444,"column":6},"end":{"line":444,"column":6}},{"start":{"line":444,"column":6},"end":{"line":444,"column":6}}]},"50":{"line":452,"type":"binary-expr","locations":[{"start":{"line":452,"column":19},"end":{"line":452,"column":26}},{"start":{"line":452,"column":30},"end":{"line":452,"column":49}}]},"51":{"line":464,"type":"if","locations":[{"start":{"line":464,"column":2},"end":{"line":464,"column":2}},{"start":{"line":464,"column":2},"end":{"line":464,"column":2}}]},"52":{"line":476,"type":"if","locations":[{"start":{"line":476,"column":4},"end":{"line":476,"column":4}},{"start":{"line":476,"column":4},"end":{"line":476,"column":4}}]},"53":{"line":496,"type":"if","locations":[{"start":{"line":496,"column":2},"end":{"line":496,"column":2}},{"start":{"line":496,"column":2},"end":{"line":496,"column":2}}]},"54":{"line":501,"type":"if","locations":[{"start":{"line":501,"column":2},"end":{"line":501,"column":2}},{"start":{"line":501,"column":2},"end":{"line":501,"column":2}}]},"55":{"line":501,"type":"binary-expr","locations":[{"start":{"line":501,"column":6},"end":{"line":501,"column":20}},{"start":{"line":501,"column":24},"end":{"line":501,"column":50}},{"start":{"line":501,"column":54},"end":{"line":501,"column":85}}]},"56":{"line":512,"type":"if","locations":[{"start":{"line":512,"column":4},"end":{"line":512,"column":4}},{"start":{"line":512,"column":4},"end":{"line":512,"column":4}}]},"57":{"line":532,"type":"if","locations":[{"start":{"line":532,"column":2},"end":{"line":532,"column":2}},{"start":{"line":532,"column":2},"end":{"line":532,"column":2}}]},"58":{"line":536,"type":"if","locations":[{"start":{"line":536,"column":2},"end":{"line":536,"column":2}},{"start":{"line":536,"column":2},"end":{"line":536,"column":2}}]},"59":{"line":544,"type":"switch","locations":[{"start":{"line":545,"column":4},"end":{"line":547,"column":12}},{"start":{"line":548,"column":4},"end":{"line":550,"column":12}},{"start":{"line":551,"column":4},"end":{"line":553,"column":12}}]},"60":{"line":562,"type":"if","locations":[{"start":{"line":562,"column":2},"end":{"line":562,"column":2}},{"start":{"line":562,"column":2},"end":{"line":562,"column":2}}]},"61":{"line":566,"type":"if","locations":[{"start":{"line":566,"column":2},"end":{"line":566,"column":2}},{"start":{"line":566,"column":2},"end":{"line":566,"column":2}}]},"62":{"line":570,"type":"if","locations":[{"start":{"line":570,"column":2},"end":{"line":570,"column":2}},{"start":{"line":570,"column":2},"end":{"line":570,"column":2}}]},"63":{"line":575,"type":"if","locations":[{"start":{"line":575,"column":2},"end":{"line":575,"column":2}},{"start":{"line":575,"column":2},"end":{"line":575,"column":2}}]},"64":{"line":580,"type":"binary-expr","locations":[{"start":{"line":580,"column":21},"end":{"line":580,"column":37}},{"start":{"line":580,"column":41},"end":{"line":580,"column":42}}]},"65":{"line":582,"type":"if","locations":[{"start":{"line":582,"column":2},"end":{"line":582,"column":2}},{"start":{"line":582,"column":2},"end":{"line":582,"column":2}}]},"66":{"line":597,"type":"if","locations":[{"start":{"line":597,"column":2},"end":{"line":597,"column":2}},{"start":{"line":597,"column":2},"end":{"line":597,"column":2}}]},"67":{"line":601,"type":"if","locations":[{"start":{"line":601,"column":2},"end":{"line":601,"column":2}},{"start":{"line":601,"column":2},"end":{"line":601,"column":2}}]},"68":{"line":613,"type":"cond-expr","locations":[{"start":{"line":613,"column":64},"end":{"line":613,"column":83}},{"start":{"line":613,"column":86},"end":{"line":613,"column":124}}]},"69":{"line":613,"type":"binary-expr","locations":[{"start":{"line":613,"column":16},"end":{"line":613,"column":23}},{"start":{"line":613,"column":27},"end":{"line":613,"column":60}}]},"70":{"line":614,"type":"if","locations":[{"start":{"line":614,"column":2},"end":{"line":614,"column":2}},{"start":{"line":614,"column":2},"end":{"line":614,"column":2}}]},"71":{"line":629,"type":"if","locations":[{"start":{"line":629,"column":2},"end":{"line":629,"column":2}},{"start":{"line":629,"column":2},"end":{"line":629,"column":2}}]},"72":{"line":629,"type":"binary-expr","locations":[{"start":{"line":629,"column":6},"end":{"line":629,"column":14}},{"start":{"line":629,"column":18},"end":{"line":629,"column":35}}]},"73":{"line":641,"type":"if","locations":[{"start":{"line":641,"column":2},"end":{"line":641,"column":2}},{"start":{"line":641,"column":2},"end":{"line":641,"column":2}}]},"74":{"line":654,"type":"binary-expr","locations":[{"start":{"line":654,"column":13},"end":{"line":654,"column":21}},{"start":{"line":654,"column":25},"end":{"line":654,"column":35}}]},"75":{"line":655,"type":"if","locations":[{"start":{"line":655,"column":2},"end":{"line":655,"column":2}},{"start":{"line":655,"column":2},"end":{"line":655,"column":2}}]},"76":{"line":655,"type":"binary-expr","locations":[{"start":{"line":655,"column":6},"end":{"line":655,"column":21}},{"start":{"line":655,"column":25},"end":{"line":655,"column":43}}]},"77":{"line":662,"type":"if","locations":[{"start":{"line":662,"column":2},"end":{"line":662,"column":2}},{"start":{"line":662,"column":2},"end":{"line":662,"column":2}}]},"78":{"line":670,"type":"if","locations":[{"start":{"line":670,"column":4},"end":{"line":670,"column":4}},{"start":{"line":670,"column":4},"end":{"line":670,"column":4}}]}},"code":["\"use strict\";","var net = require('net');","var events = require('events');","var util = require('util');","var tls = require('tls');","","var Encoder = require('./encoder.js');","var writers = require('./writers');","var requests = require('./requests');","var streams = require('./streams');","var utils = require('./utils');","var types = require('./types');","var errors = require('./errors');","var StreamIdStack = require('./stream-id-stack');","","/**  @const */","var idleQuery = 'SELECT key from system.local';","/**  @const */","var maxProtocolVersion = 4;","/**"," * Represents a connection to a Cassandra node"," * @param {String} endpoint An string containing ip address and port of the host"," * @param {Number} protocolVersion"," * @param {ClientOptions} options"," * @extends EventEmitter"," * @constructor"," */","function Connection(endpoint, protocolVersion, options) {","  events.EventEmitter.call(this);","  this.setMaxListeners(0);","  if (!endpoint || endpoint.indexOf(':') < 0) {","    throw new Error('EndPoint must contain the ip address and port separated by : symbol');","  }","  this.endpoint = endpoint;","  var portSeparatorIndex = endpoint.lastIndexOf(':');","  this.address = endpoint.substr(0, portSeparatorIndex);","  this.port = endpoint.substr(portSeparatorIndex + 1);","  Object.defineProperty(this, \"options\", { value: options, enumerable: false, writable: false});","  if (protocolVersion === null) {","    //Set initial protocol version","    protocolVersion = maxProtocolVersion;","    if (options.protocolOptions.maxVersion > 0 && options.protocolOptions.maxVersion < maxProtocolVersion) {","      //limit the protocol version","      protocolVersion = options.protocolOptions.maxVersion;","    }","    //Allow to check version using this connection instance","    this.checkingVersion = true;","  }","  this.protocolVersion = protocolVersion;","  this.streamHandlers = {};","  this.pendingWrites = [];","  this.preparing = {};","  /**","   * The timeout state for the idle request (heartbeat)","   */","  this.idleTimeout = null;","  this.timedOutHandlers = 0;","  this.streamIds = new StreamIdStack(this.protocolVersion);","  this.encoder = new Encoder(protocolVersion, options);","  this.keyspace = null;","  this.emitDrain = false;","  /**","   * Determines if the socket is open and startup succeeded, whether the connection can be used to send requests / ","   * receive events","   */","  this.connected = false;","  /**","   * Determines if the socket can be considered as open","   */","  this.isSocketOpen = false;","}","","util.inherits(Connection, events.EventEmitter);","","Connection.prototype.log = utils.log;","","/**"," * Binds the necessary event listeners for the socket"," */","Connection.prototype.bindSocketListeners = function() {","  //Remove listeners that were used for connecting","  this.netClient.removeAllListeners('connect');","  this.netClient.removeAllListeners('timeout');","  // The socket is expected to be open at this point","  this.isSocketOpen = true;","  var self = this;","  this.netClient.on('close', function() {","    self.log('info', 'Connection to ' + self.endpoint + ' closed');","    self.isSocketOpen = false;","    var wasConnected = self.connected;","    self.close();","    if (wasConnected) {","      // Emit only when it was closed unexpectedly","      self.emit('socketClose');","    }","  });","","  this.protocol = new streams.Protocol({ objectMode: true });","  this.parser = new streams.Parser({ objectMode: true }, this.encoder);","  var resultEmitter = new streams.ResultEmitter({objectMode: true});","  resultEmitter.on('result', this.handleResult.bind(this));","  resultEmitter.on('row', this.handleRow.bind(this));","  resultEmitter.on('frameEnded', this.freeStreamId.bind(this));","  resultEmitter.on('nodeEvent', this.handleNodeEvent.bind(this));","","  this.netClient","    .pipe(this.protocol)","    .pipe(this.parser)","    .pipe(resultEmitter);","","  this.writeQueue = new writers.WriteQueue(this.netClient, this.encoder, this.options);","};","","/**"," * Connects a socket and sends the startup protocol messages."," * Note that when open() callbacks in error, the caller should immediately call {@link Connection#close}."," */","Connection.prototype.open = function (callback) {","  var self = this;","  this.log('info', 'Connecting to ' + this.address + ':' + this.port);","  if (!this.options.sslOptions) {","    this.netClient = new net.Socket();","    this.netClient.connect(this.port, this.address, function connectCallback() {","      self.log('verbose', 'Socket connected to ' + self.address + ':' + self.port);","      self.bindSocketListeners();","      self.startup(callback);","    });","  }","  else {","    //use TLS","    var sslOptions = utils.extend({rejectUnauthorized: false}, this.options.sslOptions);","    this.netClient = tls.connect(this.port, this.address, sslOptions, function tlsConnectCallback() {","      self.log('verbose', 'Secure socket connected to ' + self.address + ':' + self.port);","      self.bindSocketListeners();","      self.startup(callback);","    });","  }","  this.netClient.once('error', function socketError(err) {","    self.errorConnecting(err, false, callback);","  });","  this.netClient.once('timeout', function connectTimedOut() {","    var err = new types.DriverError('Connection timeout');","    self.errorConnecting(err, true, callback);","  });","  this.netClient.setTimeout(this.options.socketOptions.connectTimeout);","  // Improve failure detection with TCP keep-alives","  if (this.options.socketOptions.keepAlive) {","    this.netClient.setKeepAlive(true, this.options.socketOptions.keepAliveDelay);","  }","  this.netClient.setNoDelay(!!this.options.socketOptions.tcpNoDelay);","};","","/**"," * Determines the protocol version to use and sends the STARTUP request"," * @param {Function} callback"," */","Connection.prototype.startup = function (callback) {","  if (this.checkingVersion) {","    this.log('info', 'Trying to use protocol version ' + this.protocolVersion);","  }","  var self = this;","  this.sendStream(new requests.StartupRequest(), null, function responseCallback(err, response) {","    if (err && self.checkingVersion && self.protocolVersion > 1) {","      var invalidProtocol = (err instanceof errors.ResponseError &&","        err.code === types.responseErrorCodes.protocolError &&","        err.message.indexOf('Invalid or unsupported protocol version') >= 0);","      if (!invalidProtocol && self.protocolVersion > 3) {","        //For some versions of Cassandra, the error is wrapped into a server error","        //See CASSANDRA-9451","        invalidProtocol = (err instanceof errors.ResponseError &&","          err.code === types.responseErrorCodes.serverError &&","          err.message.indexOf('ProtocolException: Invalid or unsupported protocol version') > 0);","      }","      if (invalidProtocol) {","        self.log('info', 'Protocol v' + self.protocolVersion + ' not supported, using v' + self.protocol.version);","        self.decreaseVersion();","        //The host closed the connection, close the socket","        setImmediate(function decreasingVersionClosing() {","          self.close(function decreasingVersionOpening() {","            // Attempt to open with the correct protocol version","            self.open(callback);","          });","        });","        return;","      }","    }","    if (response && response.mustAuthenticate) {","      return self.startAuthenticating(response.authenticatorName, startupCallback);","    }","    startupCallback(err);","  });","","  function startupCallback(err) {","    if (err) {","      return self.errorConnecting(err, false, callback);","    }","    //The socket is connected and the connection is authenticated","    return self.connectionReady(callback);","  }","};","","Connection.prototype.errorConnecting = function (err, destroy, callback) {","  this.log('warning', 'There was an error when trying to connect to the host ' + this.address, err);","  if (destroy) {","    //there is a TCP connection that should be killed.","    this.netClient.destroy();","  }","  callback(err);","};","","/**"," * Sets the connection to ready/connected status"," */","Connection.prototype.connectionReady = function (callback) {","  this.emit('connected');","  this.connected = true;","  // Remove existing error handlers as the connection is now ready.","  this.netClient.removeAllListeners('error');","  this.netClient.on('error', this.handleSocketError.bind(this));","  callback();","};","","Connection.prototype.decreaseVersion = function () {","  // The response already has the max protocol version supported by the Cassandra host.","  this.protocolVersion = this.protocol.version;","  this.encoder.setProtocolVersion(this.protocolVersion);","  this.streamIds.setVersion(this.protocolVersion);","};","","/**"," * Handle socket errors, if the socket is not readable invoke all pending callbacks"," */","Connection.prototype.handleSocketError = function (err) {","  this.clearAndInvokePending(err);","};","","/**"," * Cleans all internal state and invokes all pending callbacks of sent streams"," */","Connection.prototype.clearAndInvokePending = function (innerError) {","  if (this.idleTimeout) {","    //Remove the idle request","    clearTimeout(this.idleTimeout);","    this.idleTimeout = null;","  }","  this.streamIds.clear();","  if (this.emitDrain) {","    this.emit('drain');","  }","  var err = new types.DriverError('Socket was closed');","  err.isSocketError = true;","  if (innerError) {","    err.innerError = innerError;","  }","  //copy all handlers","  var handlers = utils.objectValues(this.streamHandlers);","  //remove it from the map","  this.streamHandlers = {};","  if (handlers.length > 0) {","    this.log('info', 'Invoking ' + handlers.length + ' pending callbacks');","  }","  var self = this;","  //invoke all handlers","  utils.each(handlers, function (item, next) {","    self.invokeCallback(item, err);","    next();","  });","","  var pendingWritesCopy = this.pendingWrites;","  this.pendingWrites = [];","  utils.each(pendingWritesCopy, function (item, next) {","    if (!item.callback) {","      return;","    }","    item.callback(err);","    next();","  });","};","","/**"," * Starts the SASL flow"," * @param {String} authenticatorName"," * @param {Function} callback"," */","Connection.prototype.startAuthenticating = function (authenticatorName, callback) {","  if (!this.options.authProvider) {","    return callback(new errors.AuthenticationError('Authentication provider not set'));","  }","  var authenticator = this.options.authProvider.newAuthenticator(this.endpoint, authenticatorName);","  var self = this;","  authenticator.initialResponse(function initialResponseCallback(err, token) {","    // Start the flow with the initial token","    if (err) {","      return callback(err);","    }","    self.authenticate(authenticator, token, callback);","  });","};","","/**"," * Handles authentication requests and responses."," * @param {Authenticator} authenticator"," * @param {Buffer} token"," * @param {Function} callback"," */","Connection.prototype.authenticate = function(authenticator, token, callback) {","  var self = this;","  var request = new requests.AuthResponseRequest(token);","  if (this.protocolVersion === 1) {","    //No Sasl support, use CREDENTIALS","    //noinspection JSUnresolvedVariable","    if (!authenticator.username) {","      return callback(new errors.AuthenticationError('Only plain text authenticator providers allowed under protocol v1'));","    }","    //noinspection JSUnresolvedVariable","    request = new requests.CredentialsRequest(authenticator.username, authenticator.password);","  }","  this.sendStream(request, null, function authResponseCallback(err, result) {","    if (err) {","      if (err instanceof errors.ResponseError && err.code === types.responseErrorCodes.badCredentials) {","        var authError = new errors.AuthenticationError(err.message);","        authError.additionalInfo = err;","        err = authError;","      }","      return callback(err);","    }","    if (result.ready) {","      authenticator.onAuthenticationSuccess();","      return callback();","    }","    if (result.authChallenge) {","      return authenticator.evaluateChallenge(result.token, function evaluateCallback(err, t) {","        if (err) {","          return callback(err);","        }","        //here we go again","        self.authenticate(authenticator, t, callback);","      });","    }","    callback(new errors.DriverInternalError('Unexpected response from Cassandra: ' + util.inspect(result)));","  });","};","","/**"," * Executes a 'USE ' query, if keyspace is provided and it is different from the current keyspace"," * @param {?String} keyspace"," * @param {Function} callback"," */","Connection.prototype.changeKeyspace = function (keyspace, callback) {","  if (!keyspace || this.keyspace === keyspace) {","    return callback();","  }","  this.once('keyspaceChanged', callback);","  if (this.toBeKeyspace === keyspace) {","    // It will be invoked once the keyspace is changed","    return;","  }","  this.toBeKeyspace = keyspace;","  var query = util.format('USE \"%s\"', keyspace);","  var self = this;","  this.sendStream(","    new requests.QueryRequest(query, null, null),","    null,","    function changeKeyspaceResponseCallback(err) {","      if (!err) {","        self.keyspace = keyspace;","      }","      self.toBeKeyspace = null;","      self.emit('keyspaceChanged', err, keyspace);","    });","};","","/**"," * Prepares a query on a given connection. If its already being prepared, it queues the callback."," * @param {String} query"," * @param {function} callback"," */","Connection.prototype.prepareOnce = function (query, callback) {","  var name = ( this.keyspace || '' ) + query;","  var info = this.preparing[name];","  if (this.preparing[name]) {","    //Its being already prepared","    return info.once('prepared', callback);","  }","  info = new events.EventEmitter();","  info.setMaxListeners(0);","  info.once('prepared', callback);","  this.preparing[name] = info;","  var self = this;","  this.sendStream(new requests.PrepareRequest(query), null, function (err, response) {","    info.emit('prepared', err, response);","    delete self.preparing[name];","  });","};","","/**"," * Uses the frame writer to write into the wire"," * @param request"," * @param {QueryOptions|null} options"," * @param {function} callback Function to be called once the response has been received"," */","Connection.prototype.sendStream = function (request, options, callback) {","  var self = this;","  var streamId = this.getStreamId();","  if (streamId === null) {","    self.log('info',","        'Enqueuing ' +","        this.pendingWrites.length +","        ', if this message is recurrent consider configuring more connections per host or lowering the pressure');","    return this.pendingWrites.push({request: request, options: options, callback: callback});","  }","  this.log('verbose', 'Sending stream #' + streamId);","  request.streamId = streamId;","  request.version = this.protocolVersion;","  this.writeQueue.push(request, this.getWriteCallback(request, options, callback));","};","","/**"," * Returns the write callback"," * @param request"," * @param options"," * @param {Function} callback"," * @returns {Function}"," */","Connection.prototype.getWriteCallback = function (request, options, callback) {","  var self = this;","  return (function writeCallback (err) {","    if (err) {","      return callback(err);","    }","    self.log('verbose', 'Sent stream #' + request.streamId + ' to ' + self.endpoint);","    if (options && options.rowCallback) {","      if (request instanceof requests.ExecuteRequest || request instanceof requests.QueryRequest) {","        self.parser.setOptions(request.streamId, { byRow: true });","      }","    }","    if (self.options.pooling.heartBeatInterval) {","      // scheduling the new timeout before de-scheduling the previous performs significantly better","      // than de-scheduling first, see nodejs implementation: https://github.com/nodejs/node/blob/master/lib/timers.js","      var previousTimeout = self.idleTimeout;","      self.idleTimeout = setTimeout(function () {","        self.idleTimeoutHandler();","      }, self.options.pooling.heartBeatInterval);","      if (previousTimeout) {","        //remove the previous timeout for the idle request","        clearTimeout(previousTimeout);","      }","    }","    //noinspection JSUnresolvedVariable","    self.streamHandlers[request.streamId] = {","      callback: callback,","      rowCallback: options && options.rowCallback,","      options: options,","      timeout: self.setRequestTimeout(request, options)","    };","  });","};","","/**"," * Function that gets executed once the idle timeout has passed to issue a request to keep the connection alive"," */","Connection.prototype.idleTimeoutHandler = function () {","  var self = this;","  if (this.sendingIdleQuery) {","    //don't issue another","    //schedule for next time","    this.idleTimeout = setTimeout(function () {","      self.idleTimeoutHandler();","    }, this.options.pooling.heartBeatInterval);","    return;","  }","  this.log('verbose', 'Connection idling, issuing a Request to prevent idle disconnects');","  this.sendingIdleQuery = true;","  this.sendStream(new requests.QueryRequest(idleQuery), utils.emptyObject, function (err) {","    self.sendingIdleQuery = false;","    if (!err) {","      //The sending succeeded","      //There is a valid response but we don't care about the response","      return;","    }","    self.log('warning', 'Received heartbeat request error', err);","    self.emit('idleRequestError', err, self);","  });","};","","/**"," * Returns an available streamId or null if there isn't any available"," * @returns {Number}"," */","Connection.prototype.getStreamId = function() {","  return this.streamIds.pop();","};","","Connection.prototype.freeStreamId = function(header) {","  var streamId = header.streamId;","  if (streamId < 0) {","    return;","  }","  delete this.streamHandlers[streamId];","  this.streamIds.push(streamId);","  if (this.emitDrain && this.streamIds.inUse === 0 && this.pendingWrites.length === 0) {","    this.emit('drain');","  }","  this.writeNext();","  this.log('verbose', 'Done receiving frame #' + streamId);","};","","Connection.prototype.writeNext = function () {","  var self = this;","  setImmediate(function writeNextPending() {","    var pending = self.pendingWrites.shift();","    if (!pending) {","      return;","    }","    self.sendStream(pending.request, pending.options, pending.callback);","  });","};","","/**"," * Returns the number of requests waiting for response"," * @returns {Number}"," */","Connection.prototype.getInFlight = function () {","  return this.streamIds.inUse;","};","","/**"," * Handles a result and error response"," */","Connection.prototype.handleResult = function (header, err, result) {","  var streamId = header.streamId;","  if(streamId < 0) {","    return this.log('verbose', 'event received', header);","  }","  var handler = this.streamHandlers[streamId];","  if (!handler) {","    return this.log('error', 'The server replied with a wrong streamId #' + streamId);","  }","  this.log('verbose', 'Received frame #' + streamId + ' from ' + this.endpoint);","  this.invokeCallback(handler, err, result);","};","","Connection.prototype.handleNodeEvent = function (header, event) {","  switch (event.eventType) {","    case types.protocolEvents.schemaChange:","      this.emit('nodeSchemaChange', event);","      break;","    case types.protocolEvents.topologyChange:","      this.emit('nodeTopologyChange', event);","      break;","    case types.protocolEvents.statusChange:","      this.emit('nodeStatusChange', event);","      break;","  }","};","","/**"," * Handles a row response"," */","Connection.prototype.handleRow = function (header, row, meta, rowLength, flags) {","  var streamId = header.streamId;","  if(streamId < 0) {","    return this.log('verbose', 'Event received', header);","  }","  var handler = this.streamHandlers[streamId];","  if (!handler) {","    return this.log('error', 'The server replied with a wrong streamId #' + streamId);","  }","  this.log('verbose', 'Received streaming frame #' + streamId);","  if (handler.timeout) {","    //It started receiving, clear the read timeout","    clearTimeout(handler.timeout);","    handler.timeout = null;","  }","  if (!handler.rowCallback) {","    return this.invokeCallback(","      handler,","      new errors.DriverInternalError('RowCallback not found for streaming frame handler'));","  }","  handler.rowIndex = handler.rowIndex || 0;","  handler.rowCallback(handler.rowIndex++, row, rowLength);","  if (handler.rowIndex === rowLength) {","    this.invokeCallback(handler, null, { rowLength: rowLength, meta: meta, flags: flags });","  }","};","","/**"," * Invokes the handler callback and clears the callback and timers"," * @param {{callback, timeout}} handler"," * @param {Error} err"," * @param [response]"," */","Connection.prototype.invokeCallback = function (handler, err, response) {","  var callback = handler.callback;","  //Prevent chained invocations","  handler.callback = null;","  if (handler.timeout) {","    clearTimeout(handler.timeout);","    handler.timeout = null;","  }","  if (callback) {","    callback(err, response);","  }","};","","/**"," * Creates a timeout for the given request and returns the timeout object."," * @param request"," * @param {QueryOptions} options"," * @returns {Object} The timeout object"," */","Connection.prototype.setRequestTimeout = function (request, options) {","  var millis = (options && options.readTimeout !== undefined) ? options.readTimeout : this.options.socketOptions.readTimeout;","  if (!(millis > 0)) {","    //read timeout disabled","    return null;","  }","  var self = this;","  return setTimeout(function () {","    self.onTimeout(request.streamId, millis);","  }, millis);","};","","/**"," * Executed on request timeout, it callbacks with OperationTimedOutError and clears the closures"," */","Connection.prototype.onTimeout = function (streamId, millis) {","  var handler = this.streamHandlers[streamId];","  if (!handler || !handler.callback) {","    //it's being cleared, don't mind","    return;","  }","  this.timedOutHandlers++;","  var originalCallback = handler.callback;","  var self = this;","  //clear callback closures","  handler.callback = function replyAfterTimeout() {","    //if replies, remove from timedOutQueries","    self.timedOutHandlers--;","  };","  if (handler.rowCallback) {","    handler.rowCallback = function noop() {};","  }","  var message = util.format('The host %s did not reply before timeout %d ms', this.endpoint, millis);","  originalCallback(new errors.OperationTimedOutError(message));","};","","/**"," * Closes the socket (if not already closed) and cancels all in-flight requests."," * Multiple calls to this method have no additional side-effects."," * @param {Function} [callback]"," */","Connection.prototype.close = function (callback) {","  callback = callback || utils.noop;","  if (!this.connected && !this.isSocketOpen) {","    return callback();","  }","  this.connected = false;","  // Drain is never going to be emitted, once it is set to closed","  this.removeAllListeners('drain');","  this.clearAndInvokePending();","  if (!this.isSocketOpen) {","    return callback();","  }","  // Set the socket as closed now (before socket.end() is called) to avoid being invoked more than once","  this.isSocketOpen = false;","  this.log('verbose', 'Closing connection to ' + this.endpoint);","  var self = this;","  this.netClient.once('close', function (hadError) {","    if (hadError) {","      self.log('info', 'The socket closed with a transmission error');","    }","    setImmediate(callback);","  });","  // Prevent 'error' listener to be executed before 'close' listener","  this.netClient.removeAllListeners('error');","  // Add a noop handler for 'error' event to prevent Socket to throw the error","  this.netClient.on('error', utils.noop);","  // Half-close the socket, it will result in 'close' event being fired","  this.netClient.end();","};","","module.exports = Connection;",""],"l":{"2":1,"3":1,"4":1,"5":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"17":1,"19":1,"28":1,"29":0,"30":0,"31":0,"32":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"41":0,"42":0,"44":0,"47":0,"49":0,"50":0,"51":0,"52":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"66":0,"70":0,"73":1,"75":1,"80":1,"82":0,"83":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"94":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"106":0,"111":0,"118":1,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"131":0,"132":0,"133":0,"134":0,"135":0,"138":0,"139":0,"141":0,"142":0,"143":0,"145":0,"147":0,"148":0,"150":0,"157":1,"158":0,"159":0,"161":0,"162":0,"163":0,"164":0,"167":0,"170":0,"174":0,"175":0,"176":0,"178":0,"179":0,"181":0,"184":0,"187":0,"188":0,"190":0,"193":1,"194":0,"195":0,"198":0,"202":1,"203":0,"204":0,"206":0,"208":0,"214":1,"215":0,"216":0,"218":0,"219":0,"220":0,"223":1,"225":0,"226":0,"227":0,"233":1,"234":0,"240":1,"241":0,"243":0,"244":0,"246":0,"247":0,"248":0,"250":0,"251":0,"252":0,"253":0,"256":0,"258":0,"259":0,"260":0,"262":0,"264":0,"265":0,"266":0,"269":0,"270":0,"271":0,"272":0,"273":0,"275":0,"276":0,"285":1,"286":0,"287":0,"289":0,"290":0,"291":0,"293":0,"294":0,"296":0,"306":1,"307":0,"308":0,"309":0,"312":0,"313":0,"316":0,"318":0,"319":0,"320":0,"321":0,"322":0,"323":0,"325":0,"327":0,"328":0,"329":0,"331":0,"332":0,"333":0,"334":0,"337":0,"340":0,"349":1,"350":0,"351":0,"353":0,"354":0,"356":0,"358":0,"359":0,"360":0,"361":0,"365":0,"366":0,"368":0,"369":0,"378":1,"379":0,"380":0,"381":0,"383":0,"385":0,"386":0,"387":0,"388":0,"389":0,"390":0,"391":0,"392":0,"402":1,"403":0,"404":0,"405":0,"406":0,"410":0,"412":0,"413":0,"414":0,"415":0,"425":1,"426":0,"427":0,"428":0,"429":0,"431":0,"432":0,"433":0,"434":0,"437":0,"440":0,"441":0,"442":0,"444":0,"446":0,"450":0,"462":1,"463":0,"464":0,"467":0,"468":0,"470":0,"472":0,"473":0,"474":0,"475":0,"476":0,"479":0,"481":0,"482":0,"490":1,"491":0,"494":1,"495":0,"496":0,"497":0,"499":0,"500":0,"501":0,"502":0,"504":0,"505":0,"508":1,"509":0,"510":0,"511":0,"512":0,"513":0,"515":0,"523":1,"524":0,"530":1,"531":0,"532":0,"533":0,"535":0,"536":0,"537":0,"539":0,"540":0,"543":1,"544":0,"546":0,"547":0,"549":0,"550":0,"552":0,"553":0,"560":1,"561":0,"562":0,"563":0,"565":0,"566":0,"567":0,"569":0,"570":0,"572":0,"573":0,"575":0,"576":0,"580":0,"581":0,"582":0,"583":0,"593":1,"594":0,"596":0,"597":0,"598":0,"599":0,"601":0,"602":0,"612":1,"613":0,"614":0,"616":0,"618":0,"619":0,"620":0,"627":1,"628":0,"629":0,"631":0,"633":0,"634":0,"635":0,"637":0,"639":0,"641":0,"642":0,"644":0,"645":0,"653":1,"654":0,"655":0,"656":0,"658":0,"660":0,"661":0,"662":0,"663":0,"666":0,"667":0,"668":0,"669":0,"670":0,"671":0,"673":0,"676":0,"678":0,"680":0,"683":1}},"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/encoder.js":{"path":"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/encoder.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":20,"16":1,"17":1,"18":1,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":1,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":1,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":0,"243":0,"244":0,"245":0,"246":0,"247":0,"248":0,"249":0,"250":0,"251":0,"252":0,"253":0,"254":0,"255":0,"256":0,"257":0,"258":0,"259":0,"260":0,"261":0,"262":0,"263":0,"264":0,"265":0,"266":0,"267":0,"268":0,"269":0,"270":0,"271":0,"272":0,"273":0,"274":0,"275":0,"276":0,"277":0,"278":0,"279":0,"280":0,"281":0,"282":0,"283":0,"284":0,"285":0,"286":0,"287":0,"288":0,"289":0,"290":0,"291":0,"292":0,"293":0,"294":0,"295":0,"296":0,"297":0,"298":0,"299":0,"300":0,"301":1,"302":0,"303":0,"304":0,"305":0,"306":0,"307":0,"308":0,"309":0,"310":0,"311":0,"312":0,"313":0,"314":0,"315":0,"316":0,"317":0,"318":0,"319":0,"320":0,"321":0,"322":0,"323":0,"324":0,"325":0,"326":0,"327":0,"328":0,"329":0,"330":0,"331":0,"332":0,"333":0,"334":0,"335":0,"336":0,"337":0,"338":0,"339":0,"340":0,"341":0,"342":0,"343":0,"344":0,"345":0,"346":0,"347":0,"348":0,"349":0,"350":0,"351":0,"352":0,"353":0,"354":0,"355":0,"356":0,"357":0,"358":0,"359":0,"360":0,"361":0,"362":0,"363":0,"364":0,"365":0,"366":0,"367":0,"368":0,"369":0,"370":0,"371":0,"372":0,"373":0,"374":0,"375":0,"376":0,"377":0,"378":0,"379":0,"380":0,"381":0,"382":0,"383":0,"384":0,"385":0,"386":0,"387":0,"388":0,"389":0,"390":0,"391":0,"392":0,"393":0,"394":0,"395":0,"396":0,"397":0,"398":0,"399":0,"400":0,"401":0,"402":0,"403":0,"404":0,"405":0,"406":0,"407":0,"408":0,"409":0,"410":0,"411":0,"412":0,"413":0,"414":0,"415":0,"416":0,"417":0,"418":0,"419":0,"420":0,"421":0,"422":0,"423":0,"424":0,"425":0,"426":0,"427":0,"428":0,"429":0,"430":0,"431":0,"432":0,"433":0,"434":0,"435":0,"436":0,"437":0,"438":0,"439":0,"440":0,"441":0,"442":0,"443":0,"444":0,"445":0,"446":0,"447":0,"448":0,"449":0,"450":0,"451":0,"452":0,"453":0,"454":0,"455":0,"456":0,"457":0,"458":0,"459":0,"460":0,"461":0,"462":0,"463":0,"464":0,"465":0,"466":0,"467":0,"468":0,"469":0,"470":0,"471":0,"472":0,"473":0,"474":0,"475":0,"476":0,"477":0,"478":0,"479":0,"480":0,"481":0,"482":0,"483":0,"484":0,"485":0,"486":0,"487":0,"488":0,"489":0,"490":0,"491":0,"492":0,"493":0,"494":0,"495":0,"496":0,"497":0,"498":0,"499":0,"500":0,"501":0,"502":0,"503":0,"504":0,"505":0,"506":0,"507":0,"508":0,"509":0,"510":0,"511":0,"512":0,"513":0,"514":0,"515":0,"516":0,"517":0,"518":0,"519":0,"520":0,"521":0,"522":0,"523":0,"524":0,"525":0,"526":0,"527":0,"528":0,"529":0,"530":0,"531":0,"532":0,"533":0,"534":0,"535":0,"536":0,"537":0,"538":0,"539":0,"540":0,"541":0,"542":0,"543":0,"544":0,"545":0,"546":0,"547":0,"548":0,"549":0,"550":0,"551":0,"552":0,"553":0,"554":0,"555":0,"556":0,"557":0,"558":0,"559":0,"560":0,"561":0,"562":0,"563":0,"564":0,"565":0,"566":0,"567":0,"568":0,"569":0,"570":0,"571":0,"572":0,"573":0,"574":0,"575":0,"576":0,"577":0,"578":0,"579":0,"580":0,"581":0,"582":0,"583":0,"584":0,"585":0,"586":0,"587":0,"588":0,"589":0,"590":0,"591":0,"592":0,"593":0,"594":0,"595":0,"596":0,"597":0,"598":0,"599":0,"600":0,"601":0,"602":0,"603":0,"604":0,"605":0,"606":0,"607":0,"608":0,"609":0,"610":0,"611":0,"612":0,"613":0,"614":1,"615":0,"616":0,"617":0,"618":0,"619":0,"620":0,"621":0,"622":0,"623":0,"624":0,"625":0,"626":0,"627":0,"628":0,"629":0,"630":0,"631":0,"632":0,"633":0,"634":0,"635":0,"636":0,"637":0,"638":0,"639":0,"640":0,"641":0,"642":0,"643":0,"644":0,"645":0,"646":0,"647":0,"648":0,"649":0,"650":0,"651":0,"652":0,"653":0,"654":0,"655":0,"656":0,"657":0,"658":0,"659":0,"660":0,"661":0,"662":0,"663":0,"664":0,"665":0,"666":0,"667":0,"668":0,"669":0,"670":0,"671":1,"672":0,"673":0,"674":0,"675":0,"676":0,"677":0,"678":1,"679":0,"680":0,"681":0,"682":0,"683":0,"684":0,"685":0,"686":0,"687":0,"688":0,"689":0,"690":0,"691":0,"692":0,"693":0,"694":0,"695":0,"696":0,"697":0,"698":0,"699":0,"700":0,"701":0,"702":0,"703":0,"704":0,"705":0,"706":0,"707":1,"708":0,"709":0,"710":0,"711":0,"712":0,"713":0,"714":0,"715":0,"716":0,"717":0,"718":0,"719":0,"720":0,"721":0,"722":0,"723":0,"724":0,"725":0,"726":0,"727":0,"728":0,"729":0,"730":0,"731":0,"732":0,"733":0,"734":0,"735":0,"736":0,"737":0,"738":0,"739":0,"740":0,"741":0,"742":1,"743":0,"744":0,"745":0,"746":0,"747":0,"748":0,"749":0,"750":1,"751":0,"752":0,"753":0,"754":0,"755":0,"756":0,"757":0,"758":1,"759":0,"760":0,"761":0,"762":1,"763":0,"764":1,"765":0,"766":1,"767":0,"768":1,"769":0,"770":0,"771":0,"772":0,"773":0,"774":0,"775":0,"776":0,"777":0,"778":0,"779":0,"780":0,"781":0,"782":0,"783":0,"784":0,"785":1,"786":0,"787":0,"788":0,"789":0,"790":0,"791":0,"792":0,"793":0,"794":0,"795":0,"796":1},"b":{"1":[5,15],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0],"56":[0,0,0],"57":[0,0],"58":[0,0,0],"59":[0,0],"60":[0,0],"61":[0,0],"62":[0,0],"63":[0,0],"64":[0,0],"65":[0,0],"66":[0,0],"67":[0,0],"68":[0,0],"69":[0,0],"70":[0,0],"71":[0,0,0],"72":[0,0],"73":[0,0],"74":[0,0],"75":[0,0],"76":[0,0],"77":[0,0],"78":[0,0],"79":[0,0],"80":[0,0],"81":[0,0],"82":[0,0],"83":[0,0],"84":[0,0],"85":[0,0],"86":[0,0],"87":[0,0],"88":[0,0],"89":[0,0],"90":[0,0],"91":[0,0],"92":[0,0],"93":[0,0],"94":[0,0],"95":[0,0],"96":[0,0],"97":[0,0],"98":[0,0],"99":[0,0],"100":[0,0],"101":[0,0],"102":[0,0],"103":[0,0],"104":[0,0],"105":[0,0],"106":[0,0],"107":[0,0],"108":[0,0],"109":[0,0],"110":[0,0],"111":[0,0],"112":[0,0],"113":[0,0],"114":[0,0],"115":[0,0],"116":[0,0],"117":[0,0],"118":[0,0],"119":[0,0],"120":[0,0],"121":[0,0],"122":[0,0],"123":[0,0],"124":[0,0,0],"125":[0,0],"126":[0,0],"127":[0,0],"128":[0,0],"129":[0,0],"130":[0,0],"131":[0,0],"132":[0,0],"133":[0,0],"134":[0,0],"135":[0,0],"136":[0,0],"137":[0,0],"138":[0,0],"139":[0,0],"140":[0,0],"141":[0,0],"142":[0,0],"143":[0,0],"144":[0,0],"145":[0,0],"146":[0,0],"147":[0,0],"148":[0,0],"149":[0,0],"150":[0,0],"151":[0,0],"152":[0,0],"153":[0,0],"154":[0,0],"155":[0,0],"156":[0,0],"157":[0,0],"158":[0,0],"159":[0,0],"160":[0,0],"161":[0,0],"162":[0,0],"163":[0,0],"164":[0,0],"165":[0,0],"166":[0,0],"167":[0,0],"168":[0,0],"169":[0,0],"170":[0,0],"171":[0,0],"172":[0,0],"173":[0,0],"174":[0,0],"175":[0,0],"176":[0,0]},"f":{"1":20,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0},"fnMap":{"1":{"name":"(anonymous_1)","line":56,"loc":{"start":{"line":56,"column":66},"end":{"line":56,"column":95}}},"2":{"name":"Encoder","line":68,"loc":{"start":{"line":68,"column":0},"end":{"line":68,"column":43}}},"3":{"name":"defineInstanceMembers","line":85,"loc":{"start":{"line":85,"column":0},"end":{"line":85,"column":33}}},"4":{"name":"(anonymous_4)","line":92,"loc":{"start":{"line":92,"column":28},"end":{"line":92,"column":45}}},"5":{"name":"(anonymous_5)","line":105,"loc":{"start":{"line":105,"column":20},"end":{"line":105,"column":37}}},"6":{"name":"(anonymous_6)","line":108,"loc":{"start":{"line":108,"column":26},"end":{"line":108,"column":43}}},"7":{"name":"(anonymous_7)","line":111,"loc":{"start":{"line":111,"column":27},"end":{"line":111,"column":44}}},"8":{"name":"(anonymous_8)","line":114,"loc":{"start":{"line":114,"column":23},"end":{"line":114,"column":40}}},"9":{"name":"(anonymous_9)","line":117,"loc":{"start":{"line":117,"column":22},"end":{"line":117,"column":39}}},"10":{"name":"(anonymous_10)","line":120,"loc":{"start":{"line":120,"column":21},"end":{"line":120,"column":38}}},"11":{"name":"(anonymous_11)","line":123,"loc":{"start":{"line":123,"column":19},"end":{"line":123,"column":36}}},"12":{"name":"(anonymous_12)","line":126,"loc":{"start":{"line":126,"column":24},"end":{"line":126,"column":41}}},"13":{"name":"(anonymous_13)","line":129,"loc":{"start":{"line":129,"column":23},"end":{"line":129,"column":40}}},"14":{"name":"(anonymous_14)","line":132,"loc":{"start":{"line":132,"column":20},"end":{"line":132,"column":37}}},"15":{"name":"(anonymous_15)","line":135,"loc":{"start":{"line":135,"column":22},"end":{"line":135,"column":39}}},"16":{"name":"(anonymous_16)","line":138,"loc":{"start":{"line":138,"column":23},"end":{"line":138,"column":39}}},"17":{"name":"(anonymous_17)","line":141,"loc":{"start":{"line":141,"column":25},"end":{"line":141,"column":41}}},"18":{"name":"(anonymous_18)","line":144,"loc":{"start":{"line":144,"column":20},"end":{"line":144,"column":37}}},"19":{"name":"(anonymous_19)","line":147,"loc":{"start":{"line":147,"column":20},"end":{"line":147,"column":37}}},"20":{"name":"(anonymous_20)","line":153,"loc":{"start":{"line":153,"column":20},"end":{"line":153,"column":46}}},"21":{"name":"(anonymous_21)","line":170,"loc":{"start":{"line":170,"column":19},"end":{"line":170,"column":45}}},"22":{"name":"(anonymous_22)","line":181,"loc":{"start":{"line":181,"column":19},"end":{"line":181,"column":46}}},"23":{"name":"readValues","line":186,"loc":{"start":{"line":186,"column":4},"end":{"line":186,"column":43}}},"24":{"name":"(anonymous_24)","line":210,"loc":{"start":{"line":210,"column":17},"end":{"line":210,"column":39}}},"25":{"name":"(anonymous_25)","line":216,"loc":{"start":{"line":216,"column":20},"end":{"line":216,"column":37}}},"26":{"name":"(anonymous_26)","line":219,"loc":{"start":{"line":219,"column":24},"end":{"line":219,"column":41}}},"27":{"name":"(anonymous_27)","line":222,"loc":{"start":{"line":222,"column":20},"end":{"line":222,"column":37}}},"28":{"name":"(anonymous_28)","line":231,"loc":{"start":{"line":231,"column":19},"end":{"line":231,"column":45}}},"29":{"name":"(anonymous_29)","line":249,"loc":{"start":{"line":249,"column":21},"end":{"line":249,"column":49}}},"30":{"name":"(anonymous_30)","line":265,"loc":{"start":{"line":265,"column":21},"end":{"line":265,"column":38}}},"31":{"name":"(anonymous_31)","line":273,"loc":{"start":{"line":273,"column":22},"end":{"line":273,"column":39}}},"32":{"name":"(anonymous_32)","line":285,"loc":{"start":{"line":285,"column":25},"end":{"line":285,"column":42}}},"33":{"name":"(anonymous_33)","line":306,"loc":{"start":{"line":306,"column":20},"end":{"line":306,"column":37}}},"34":{"name":"(anonymous_34)","line":331,"loc":{"start":{"line":331,"column":20},"end":{"line":331,"column":37}}},"35":{"name":"(anonymous_35)","line":351,"loc":{"start":{"line":351,"column":20},"end":{"line":351,"column":37}}},"36":{"name":"(anonymous_36)","line":373,"loc":{"start":{"line":373,"column":20},"end":{"line":373,"column":37}}},"37":{"name":"(anonymous_37)","line":389,"loc":{"start":{"line":389,"column":20},"end":{"line":389,"column":37}}},"38":{"name":"(anonymous_38)","line":414,"loc":{"start":{"line":414,"column":22},"end":{"line":414,"column":39}}},"39":{"name":"(anonymous_39)","line":438,"loc":{"start":{"line":438,"column":23},"end":{"line":438,"column":40}}},"40":{"name":"(anonymous_40)","line":457,"loc":{"start":{"line":457,"column":22},"end":{"line":457,"column":49}}},"41":{"name":"(anonymous_41)","line":463,"loc":{"start":{"line":463,"column":26},"end":{"line":463,"column":43}}},"42":{"name":"(anonymous_42)","line":466,"loc":{"start":{"line":466,"column":27},"end":{"line":466,"column":44}}},"43":{"name":"(anonymous_43)","line":469,"loc":{"start":{"line":469,"column":20},"end":{"line":469,"column":37}}},"44":{"name":"(anonymous_44)","line":480,"loc":{"start":{"line":480,"column":23},"end":{"line":480,"column":40}}},"45":{"name":"(anonymous_45)","line":487,"loc":{"start":{"line":487,"column":19},"end":{"line":487,"column":36}}},"46":{"name":"(anonymous_46)","line":499,"loc":{"start":{"line":499,"column":24},"end":{"line":499,"column":41}}},"47":{"name":"(anonymous_47)","line":511,"loc":{"start":{"line":511,"column":23},"end":{"line":511,"column":40}}},"48":{"name":"(anonymous_48)","line":519,"loc":{"start":{"line":519,"column":20},"end":{"line":519,"column":46}}},"49":{"name":"(anonymous_49)","line":541,"loc":{"start":{"line":541,"column":19},"end":{"line":541,"column":45}}},"50":{"name":"(anonymous_50)","line":544,"loc":{"start":{"line":544,"column":20},"end":{"line":544,"column":33}}},"51":{"name":"(anonymous_51)","line":558,"loc":{"start":{"line":558,"column":19},"end":{"line":558,"column":46}}},"52":{"name":"addItem","line":568,"loc":{"start":{"line":568,"column":4},"end":{"line":568,"column":31}}},"53":{"name":"(anonymous_53)","line":608,"loc":{"start":{"line":608,"column":19},"end":{"line":608,"column":45}}},"54":{"name":"(anonymous_54)","line":632,"loc":{"start":{"line":632,"column":21},"end":{"line":632,"column":49}}},"55":{"name":"(anonymous_55)","line":666,"loc":{"start":{"line":666,"column":23},"end":{"line":666,"column":56}}},"56":{"name":"(anonymous_56)","line":725,"loc":{"start":{"line":725,"column":32},"end":{"line":725,"column":86}}},"57":{"name":"(anonymous_57)","line":759,"loc":{"start":{"line":759,"column":23},"end":{"line":759,"column":96}}},"58":{"name":"(anonymous_58)","line":795,"loc":{"start":{"line":795,"column":79},"end":{"line":795,"column":105}}},"59":{"name":"(anonymous_59)","line":812,"loc":{"start":{"line":812,"column":79},"end":{"line":812,"column":105}}},"60":{"name":"(anonymous_60)","line":867,"loc":{"start":{"line":867,"column":36},"end":{"line":867,"column":60}}},"61":{"name":"(anonymous_61)","line":887,"loc":{"start":{"line":887,"column":26},"end":{"line":887,"column":90}}},"62":{"name":"(anonymous_62)","line":889,"loc":{"start":{"line":889,"column":31},"end":{"line":889,"column":53}}},"63":{"name":"(anonymous_63)","line":891,"loc":{"start":{"line":891,"column":7},"end":{"line":891,"column":34}}},"64":{"name":"(anonymous_64)","line":910,"loc":{"start":{"line":910,"column":25},"end":{"line":910,"column":65}}},"65":{"name":"(anonymous_65)","line":1012,"loc":{"start":{"line":1012,"column":37},"end":{"line":1012,"column":50}}},"66":{"name":"(anonymous_66)","line":1029,"loc":{"start":{"line":1029,"column":23},"end":{"line":1029,"column":46}}},"67":{"name":"(anonymous_67)","line":1081,"loc":{"start":{"line":1081,"column":23},"end":{"line":1081,"column":39}}},"68":{"name":"(anonymous_68)","line":1088,"loc":{"start":{"line":1088,"column":23},"end":{"line":1088,"column":63}}},"69":{"name":"setEncoders","line":1121,"loc":{"start":{"line":1121,"column":0},"end":{"line":1121,"column":23}}},"70":{"name":"(anonymous_70)","line":1194,"loc":{"start":{"line":1194,"column":27},"end":{"line":1194,"column":51}}},"71":{"name":"(anonymous_71)","line":1223,"loc":{"start":{"line":1223,"column":27},"end":{"line":1223,"column":54}}},"72":{"name":"(anonymous_72)","line":1282,"loc":{"start":{"line":1282,"column":24},"end":{"line":1282,"column":41}}},"73":{"name":"getLengthBufferV2","line":1342,"loc":{"start":{"line":1342,"column":0},"end":{"line":1342,"column":34}}},"74":{"name":"getLengthBufferV3","line":1362,"loc":{"start":{"line":1362,"column":0},"end":{"line":1362,"column":34}}},"75":{"name":"handleBufferCopy","line":1380,"loc":{"start":{"line":1380,"column":0},"end":{"line":1380,"column":34}}},"76":{"name":"handleBufferRef","line":1391,"loc":{"start":{"line":1391,"column":0},"end":{"line":1391,"column":33}}},"77":{"name":"decodeCollectionLengthV3","line":1401,"loc":{"start":{"line":1401,"column":0},"end":{"line":1401,"column":49}}},"78":{"name":"decodeCollectionLengthV2","line":1411,"loc":{"start":{"line":1411,"column":0},"end":{"line":1411,"column":49}}},"79":{"name":"parseParams","line":1424,"loc":{"start":{"line":1424,"column":0},"end":{"line":1424,"column":61}}},"80":{"name":"concatRoutingKey","line":1454,"loc":{"start":{"line":1454,"column":0},"end":{"line":1454,"column":46}}},"81":{"name":"(anonymous_81)","line":1457,"loc":{"start":{"line":1457,"column":16},"end":{"line":1457,"column":32}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":27}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":31}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":32}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":22}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":28}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":34}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":31}},"8":{"start":{"line":11,"column":0},"end":{"line":11,"column":82}},"9":{"start":{"line":12,"column":0},"end":{"line":12,"column":35}},"10":{"start":{"line":13,"column":0},"end":{"line":13,"column":41}},"11":{"start":{"line":14,"column":0},"end":{"line":25,"column":3}},"12":{"start":{"line":26,"column":0},"end":{"line":33,"column":3}},"13":{"start":{"line":34,"column":0},"end":{"line":55,"column":3}},"14":{"start":{"line":56,"column":0},"end":{"line":58,"column":6}},"15":{"start":{"line":57,"column":2},"end":{"line":57,"column":63}},"16":{"start":{"line":59,"column":0},"end":{"line":59,"column":55}},"17":{"start":{"line":60,"column":0},"end":{"line":60,"column":56}},"18":{"start":{"line":68,"column":0},"end":{"line":79,"column":1}},"19":{"start":{"line":69,"column":2},"end":{"line":69,"column":63}},"20":{"start":{"line":70,"column":2},"end":{"line":70,"column":35}},"21":{"start":{"line":71,"column":2},"end":{"line":71,"column":43}},"22":{"start":{"line":72,"column":2},"end":{"line":72,"column":25}},"23":{"start":{"line":73,"column":2},"end":{"line":78,"column":3}},"24":{"start":{"line":74,"column":4},"end":{"line":74,"column":41}},"25":{"start":{"line":77,"column":4},"end":{"line":77,"column":40}},"26":{"start":{"line":85,"column":0},"end":{"line":1115,"column":1}},"27":{"start":{"line":92,"column":2},"end":{"line":103,"column":4}},"28":{"start":{"line":93,"column":4},"end":{"line":93,"column":33}},"29":{"start":{"line":95,"column":4},"end":{"line":95,"column":59}},"30":{"start":{"line":96,"column":4},"end":{"line":96,"column":45}},"31":{"start":{"line":97,"column":4},"end":{"line":97,"column":34}},"32":{"start":{"line":98,"column":4},"end":{"line":102,"column":5}},"33":{"start":{"line":99,"column":6},"end":{"line":99,"column":61}},"34":{"start":{"line":100,"column":6},"end":{"line":100,"column":47}},"35":{"start":{"line":101,"column":6},"end":{"line":101,"column":36}},"36":{"start":{"line":105,"column":2},"end":{"line":107,"column":4}},"37":{"start":{"line":106,"column":4},"end":{"line":106,"column":36}},"38":{"start":{"line":108,"column":2},"end":{"line":110,"column":4}},"39":{"start":{"line":109,"column":4},"end":{"line":109,"column":34}},"40":{"start":{"line":111,"column":2},"end":{"line":113,"column":4}},"41":{"start":{"line":112,"column":4},"end":{"line":112,"column":35}},"42":{"start":{"line":114,"column":2},"end":{"line":116,"column":4}},"43":{"start":{"line":115,"column":4},"end":{"line":115,"column":32}},"44":{"start":{"line":117,"column":2},"end":{"line":119,"column":4}},"45":{"start":{"line":118,"column":4},"end":{"line":118,"column":33}},"46":{"start":{"line":120,"column":2},"end":{"line":122,"column":4}},"47":{"start":{"line":121,"column":4},"end":{"line":121,"column":32}},"48":{"start":{"line":123,"column":2},"end":{"line":125,"column":4}},"49":{"start":{"line":124,"column":4},"end":{"line":124,"column":32}},"50":{"start":{"line":126,"column":2},"end":{"line":128,"column":4}},"51":{"start":{"line":127,"column":4},"end":{"line":127,"column":32}},"52":{"start":{"line":129,"column":2},"end":{"line":131,"column":4}},"53":{"start":{"line":130,"column":4},"end":{"line":130,"column":29}},"54":{"start":{"line":132,"column":2},"end":{"line":134,"column":4}},"55":{"start":{"line":133,"column":4},"end":{"line":133,"column":34}},"56":{"start":{"line":135,"column":2},"end":{"line":137,"column":4}},"57":{"start":{"line":136,"column":4},"end":{"line":136,"column":37}},"58":{"start":{"line":138,"column":2},"end":{"line":140,"column":4}},"59":{"start":{"line":139,"column":4},"end":{"line":139,"column":40}},"60":{"start":{"line":141,"column":2},"end":{"line":143,"column":4}},"61":{"start":{"line":142,"column":4},"end":{"line":142,"column":55}},"62":{"start":{"line":144,"column":2},"end":{"line":146,"column":4}},"63":{"start":{"line":145,"column":4},"end":{"line":145,"column":45}},"64":{"start":{"line":147,"column":2},"end":{"line":149,"column":4}},"65":{"start":{"line":148,"column":4},"end":{"line":148,"column":45}},"66":{"start":{"line":153,"column":2},"end":{"line":166,"column":4}},"67":{"start":{"line":154,"column":4},"end":{"line":154,"column":59}},"68":{"start":{"line":155,"column":4},"end":{"line":155,"column":43}},"69":{"start":{"line":156,"column":4},"end":{"line":156,"column":37}},"70":{"start":{"line":157,"column":4},"end":{"line":164,"column":5}},"71":{"start":{"line":159,"column":6},"end":{"line":159,"column":62}},"72":{"start":{"line":160,"column":6},"end":{"line":160,"column":42}},"73":{"start":{"line":162,"column":6},"end":{"line":162,"column":73}},"74":{"start":{"line":163,"column":6},"end":{"line":163,"column":23}},"75":{"start":{"line":165,"column":4},"end":{"line":165,"column":16}},"76":{"start":{"line":170,"column":2},"end":{"line":177,"column":4}},"77":{"start":{"line":171,"column":4},"end":{"line":171,"column":46}},"78":{"start":{"line":172,"column":4},"end":{"line":175,"column":5}},"79":{"start":{"line":173,"column":6},"end":{"line":173,"column":52}},"80":{"start":{"line":174,"column":6},"end":{"line":174,"column":37}},"81":{"start":{"line":176,"column":4},"end":{"line":176,"column":15}},"82":{"start":{"line":181,"column":2},"end":{"line":215,"column":4}},"83":{"start":{"line":182,"column":4},"end":{"line":182,"column":12}},"84":{"start":{"line":183,"column":4},"end":{"line":183,"column":59}},"85":{"start":{"line":184,"column":4},"end":{"line":184,"column":43}},"86":{"start":{"line":185,"column":4},"end":{"line":185,"column":20}},"87":{"start":{"line":186,"column":4},"end":{"line":202,"column":5}},"88":{"start":{"line":187,"column":6},"end":{"line":201,"column":7}},"89":{"start":{"line":188,"column":8},"end":{"line":188,"column":67}},"90":{"start":{"line":189,"column":8},"end":{"line":189,"column":44}},"91":{"start":{"line":190,"column":8},"end":{"line":190,"column":84}},"92":{"start":{"line":191,"column":8},"end":{"line":191,"column":28}},"93":{"start":{"line":192,"column":8},"end":{"line":192,"column":69}},"94":{"start":{"line":193,"column":8},"end":{"line":193,"column":44}},"95":{"start":{"line":194,"column":8},"end":{"line":197,"column":9}},"96":{"start":{"line":195,"column":10},"end":{"line":195,"column":44}},"97":{"start":{"line":196,"column":10},"end":{"line":196,"column":19}},"98":{"start":{"line":198,"column":8},"end":{"line":198,"column":88}},"99":{"start":{"line":199,"column":8},"end":{"line":199,"column":30}},"100":{"start":{"line":200,"column":8},"end":{"line":200,"column":43}},"101":{"start":{"line":203,"column":4},"end":{"line":213,"column":5}},"102":{"start":{"line":204,"column":6},"end":{"line":204,"column":52}},"103":{"start":{"line":205,"column":6},"end":{"line":205,"column":33}},"104":{"start":{"line":206,"column":6},"end":{"line":206,"column":31}},"105":{"start":{"line":209,"column":6},"end":{"line":209,"column":15}},"106":{"start":{"line":210,"column":6},"end":{"line":212,"column":9}},"107":{"start":{"line":211,"column":8},"end":{"line":211,"column":25}},"108":{"start":{"line":214,"column":4},"end":{"line":214,"column":15}},"109":{"start":{"line":216,"column":2},"end":{"line":218,"column":4}},"110":{"start":{"line":217,"column":4},"end":{"line":217,"column":52}},"111":{"start":{"line":219,"column":2},"end":{"line":221,"column":4}},"112":{"start":{"line":220,"column":4},"end":{"line":220,"column":56}},"113":{"start":{"line":222,"column":2},"end":{"line":224,"column":4}},"114":{"start":{"line":223,"column":4},"end":{"line":223,"column":59}},"115":{"start":{"line":231,"column":2},"end":{"line":248,"column":4}},"116":{"start":{"line":232,"column":4},"end":{"line":232,"column":20}},"117":{"start":{"line":233,"column":4},"end":{"line":233,"column":19}},"118":{"start":{"line":234,"column":4},"end":{"line":246,"column":5}},"119":{"start":{"line":236,"column":6},"end":{"line":236,"column":45}},"120":{"start":{"line":237,"column":6},"end":{"line":237,"column":18}},"121":{"start":{"line":239,"column":6},"end":{"line":239,"column":36}},"122":{"start":{"line":240,"column":6},"end":{"line":243,"column":7}},"123":{"start":{"line":241,"column":8},"end":{"line":241,"column":34}},"124":{"start":{"line":242,"column":8},"end":{"line":242,"column":17}},"125":{"start":{"line":244,"column":6},"end":{"line":244,"column":87}},"126":{"start":{"line":245,"column":6},"end":{"line":245,"column":23}},"127":{"start":{"line":247,"column":4},"end":{"line":247,"column":18}},"128":{"start":{"line":249,"column":2},"end":{"line":263,"column":4}},"129":{"start":{"line":250,"column":4},"end":{"line":250,"column":47}},"130":{"start":{"line":251,"column":4},"end":{"line":251,"column":19}},"131":{"start":{"line":252,"column":4},"end":{"line":261,"column":5}},"132":{"start":{"line":253,"column":6},"end":{"line":253,"column":45}},"133":{"start":{"line":254,"column":6},"end":{"line":254,"column":18}},"134":{"start":{"line":255,"column":6},"end":{"line":258,"column":7}},"135":{"start":{"line":256,"column":8},"end":{"line":256,"column":27}},"136":{"start":{"line":257,"column":8},"end":{"line":257,"column":17}},"137":{"start":{"line":259,"column":6},"end":{"line":259,"column":82}},"138":{"start":{"line":260,"column":6},"end":{"line":260,"column":23}},"139":{"start":{"line":262,"column":4},"end":{"line":262,"column":37}},"140":{"start":{"line":265,"column":2},"end":{"line":272,"column":4}},"141":{"start":{"line":266,"column":4},"end":{"line":268,"column":5}},"142":{"start":{"line":267,"column":6},"end":{"line":267,"column":78}},"143":{"start":{"line":269,"column":4},"end":{"line":269,"column":28}},"144":{"start":{"line":270,"column":4},"end":{"line":270,"column":31}},"145":{"start":{"line":271,"column":4},"end":{"line":271,"column":15}},"146":{"start":{"line":273,"column":2},"end":{"line":280,"column":4}},"147":{"start":{"line":274,"column":4},"end":{"line":276,"column":5}},"148":{"start":{"line":275,"column":6},"end":{"line":275,"column":78}},"149":{"start":{"line":277,"column":4},"end":{"line":277,"column":28}},"150":{"start":{"line":278,"column":4},"end":{"line":278,"column":32}},"151":{"start":{"line":279,"column":4},"end":{"line":279,"column":15}},"152":{"start":{"line":285,"column":2},"end":{"line":299,"column":4}},"153":{"start":{"line":286,"column":4},"end":{"line":286,"column":30}},"154":{"start":{"line":287,"column":4},"end":{"line":289,"column":5}},"155":{"start":{"line":288,"column":6},"end":{"line":288,"column":30}},"156":{"start":{"line":290,"column":4},"end":{"line":296,"column":5}},"157":{"start":{"line":292,"column":6},"end":{"line":292,"column":30}},"158":{"start":{"line":293,"column":6},"end":{"line":295,"column":7}},"159":{"start":{"line":294,"column":8},"end":{"line":294,"column":62}},"160":{"start":{"line":298,"column":4},"end":{"line":298,"column":34}},"161":{"start":{"line":306,"column":2},"end":{"line":324,"column":4}},"162":{"start":{"line":307,"column":4},"end":{"line":307,"column":30}},"163":{"start":{"line":308,"column":4},"end":{"line":319,"column":5}},"164":{"start":{"line":309,"column":6},"end":{"line":311,"column":7}},"165":{"start":{"line":310,"column":8},"end":{"line":310,"column":50}},"166":{"start":{"line":312,"column":6},"end":{"line":314,"column":7}},"167":{"start":{"line":313,"column":8},"end":{"line":313,"column":48}},"168":{"start":{"line":318,"column":6},"end":{"line":318,"column":66}},"169":{"start":{"line":320,"column":4},"end":{"line":322,"column":5}},"170":{"start":{"line":321,"column":6},"end":{"line":321,"column":101}},"171":{"start":{"line":323,"column":4},"end":{"line":323,"column":28}},"172":{"start":{"line":331,"column":2},"end":{"line":346,"column":4}},"173":{"start":{"line":332,"column":4},"end":{"line":332,"column":30}},"174":{"start":{"line":333,"column":4},"end":{"line":341,"column":5}},"175":{"start":{"line":334,"column":6},"end":{"line":336,"column":7}},"176":{"start":{"line":335,"column":8},"end":{"line":335,"column":50}},"177":{"start":{"line":340,"column":6},"end":{"line":340,"column":66}},"178":{"start":{"line":342,"column":4},"end":{"line":344,"column":5}},"179":{"start":{"line":343,"column":6},"end":{"line":343,"column":96}},"180":{"start":{"line":345,"column":4},"end":{"line":345,"column":28}},"181":{"start":{"line":351,"column":2},"end":{"line":367,"column":4}},"182":{"start":{"line":352,"column":4},"end":{"line":359,"column":5}},"183":{"start":{"line":353,"column":6},"end":{"line":358,"column":7}},"184":{"start":{"line":354,"column":8},"end":{"line":354,"column":45}},"185":{"start":{"line":357,"column":8},"end":{"line":357,"column":41}},"186":{"start":{"line":360,"column":4},"end":{"line":362,"column":5}},"187":{"start":{"line":361,"column":6},"end":{"line":361,"column":32}},"188":{"start":{"line":363,"column":4},"end":{"line":365,"column":5}},"189":{"start":{"line":364,"column":6},"end":{"line":364,"column":108}},"190":{"start":{"line":366,"column":4},"end":{"line":366,"column":17}},"191":{"start":{"line":373,"column":2},"end":{"line":384,"column":4}},"192":{"start":{"line":374,"column":4},"end":{"line":376,"column":5}},"193":{"start":{"line":375,"column":6},"end":{"line":375,"column":50}},"194":{"start":{"line":377,"column":4},"end":{"line":379,"column":5}},"195":{"start":{"line":378,"column":6},"end":{"line":378,"column":32}},"196":{"start":{"line":380,"column":4},"end":{"line":382,"column":5}},"197":{"start":{"line":381,"column":6},"end":{"line":381,"column":108}},"198":{"start":{"line":383,"column":4},"end":{"line":383,"column":17}},"199":{"start":{"line":389,"column":2},"end":{"line":408,"column":4}},"200":{"start":{"line":390,"column":4},"end":{"line":392,"column":5}},"201":{"start":{"line":391,"column":6},"end":{"line":391,"column":37}},"202":{"start":{"line":393,"column":4},"end":{"line":395,"column":5}},"203":{"start":{"line":394,"column":6},"end":{"line":394,"column":37}},"204":{"start":{"line":396,"column":4},"end":{"line":396,"column":19}},"205":{"start":{"line":397,"column":4},"end":{"line":399,"column":5}},"206":{"start":{"line":398,"column":6},"end":{"line":398,"column":18}},"207":{"start":{"line":400,"column":4},"end":{"line":403,"column":5}},"208":{"start":{"line":402,"column":6},"end":{"line":402,"column":33}},"209":{"start":{"line":404,"column":4},"end":{"line":406,"column":5}},"210":{"start":{"line":405,"column":6},"end":{"line":405,"column":117}},"211":{"start":{"line":407,"column":4},"end":{"line":407,"column":15}},"212":{"start":{"line":414,"column":2},"end":{"line":432,"column":4}},"213":{"start":{"line":415,"column":4},"end":{"line":417,"column":5}},"214":{"start":{"line":416,"column":6},"end":{"line":416,"column":40}},"215":{"start":{"line":418,"column":4},"end":{"line":420,"column":5}},"216":{"start":{"line":419,"column":6},"end":{"line":419,"column":40}},"217":{"start":{"line":421,"column":4},"end":{"line":421,"column":19}},"218":{"start":{"line":422,"column":4},"end":{"line":424,"column":5}},"219":{"start":{"line":423,"column":6},"end":{"line":423,"column":18}},"220":{"start":{"line":425,"column":4},"end":{"line":427,"column":5}},"221":{"start":{"line":426,"column":6},"end":{"line":426,"column":36}},"222":{"start":{"line":428,"column":4},"end":{"line":430,"column":5}},"223":{"start":{"line":429,"column":6},"end":{"line":429,"column":120}},"224":{"start":{"line":431,"column":4},"end":{"line":431,"column":15}},"225":{"start":{"line":438,"column":2},"end":{"line":456,"column":4}},"226":{"start":{"line":439,"column":4},"end":{"line":441,"column":5}},"227":{"start":{"line":440,"column":6},"end":{"line":440,"column":43}},"228":{"start":{"line":442,"column":4},"end":{"line":444,"column":5}},"229":{"start":{"line":443,"column":6},"end":{"line":443,"column":43}},"230":{"start":{"line":445,"column":4},"end":{"line":445,"column":19}},"231":{"start":{"line":446,"column":4},"end":{"line":448,"column":5}},"232":{"start":{"line":447,"column":6},"end":{"line":447,"column":18}},"233":{"start":{"line":449,"column":4},"end":{"line":451,"column":5}},"234":{"start":{"line":450,"column":6},"end":{"line":450,"column":39}},"235":{"start":{"line":452,"column":4},"end":{"line":454,"column":5}},"236":{"start":{"line":453,"column":6},"end":{"line":453,"column":123}},"237":{"start":{"line":455,"column":4},"end":{"line":455,"column":15}},"238":{"start":{"line":457,"column":2},"end":{"line":462,"column":4}},"239":{"start":{"line":458,"column":4},"end":{"line":460,"column":5}},"240":{"start":{"line":459,"column":6},"end":{"line":459,"column":101}},"241":{"start":{"line":461,"column":4},"end":{"line":461,"column":39}},"242":{"start":{"line":463,"column":2},"end":{"line":465,"column":4}},"243":{"start":{"line":464,"column":4},"end":{"line":464,"column":44}},"244":{"start":{"line":466,"column":2},"end":{"line":468,"column":4}},"245":{"start":{"line":467,"column":4},"end":{"line":467,"column":45}},"246":{"start":{"line":469,"column":2},"end":{"line":474,"column":4}},"247":{"start":{"line":470,"column":4},"end":{"line":472,"column":5}},"248":{"start":{"line":471,"column":6},"end":{"line":471,"column":95}},"249":{"start":{"line":473,"column":4},"end":{"line":473,"column":17}},"250":{"start":{"line":480,"column":2},"end":{"line":482,"column":4}},"251":{"start":{"line":481,"column":4},"end":{"line":481,"column":41}},"252":{"start":{"line":487,"column":2},"end":{"line":494,"column":4}},"253":{"start":{"line":488,"column":4},"end":{"line":490,"column":5}},"254":{"start":{"line":489,"column":6},"end":{"line":489,"column":78}},"255":{"start":{"line":491,"column":4},"end":{"line":491,"column":28}},"256":{"start":{"line":492,"column":4},"end":{"line":492,"column":31}},"257":{"start":{"line":493,"column":4},"end":{"line":493,"column":15}},"258":{"start":{"line":499,"column":2},"end":{"line":506,"column":4}},"259":{"start":{"line":500,"column":4},"end":{"line":502,"column":5}},"260":{"start":{"line":501,"column":6},"end":{"line":501,"column":78}},"261":{"start":{"line":503,"column":4},"end":{"line":503,"column":28}},"262":{"start":{"line":504,"column":4},"end":{"line":504,"column":31}},"263":{"start":{"line":505,"column":4},"end":{"line":505,"column":15}},"264":{"start":{"line":511,"column":2},"end":{"line":518,"column":4}},"265":{"start":{"line":512,"column":4},"end":{"line":514,"column":5}},"266":{"start":{"line":513,"column":6},"end":{"line":513,"column":78}},"267":{"start":{"line":515,"column":4},"end":{"line":515,"column":28}},"268":{"start":{"line":516,"column":4},"end":{"line":516,"column":28}},"269":{"start":{"line":517,"column":4},"end":{"line":517,"column":15}},"270":{"start":{"line":519,"column":2},"end":{"line":540,"column":4}},"271":{"start":{"line":520,"column":4},"end":{"line":522,"column":5}},"272":{"start":{"line":521,"column":6},"end":{"line":521,"column":100}},"273":{"start":{"line":523,"column":4},"end":{"line":525,"column":5}},"274":{"start":{"line":524,"column":6},"end":{"line":524,"column":18}},"275":{"start":{"line":526,"column":4},"end":{"line":526,"column":19}},"276":{"start":{"line":527,"column":4},"end":{"line":527,"column":44}},"277":{"start":{"line":528,"column":4},"end":{"line":538,"column":5}},"278":{"start":{"line":529,"column":6},"end":{"line":529,"column":25}},"279":{"start":{"line":530,"column":6},"end":{"line":532,"column":7}},"280":{"start":{"line":531,"column":8},"end":{"line":531,"column":80}},"281":{"start":{"line":533,"column":6},"end":{"line":533,"column":44}},"282":{"start":{"line":535,"column":6},"end":{"line":535,"column":46}},"283":{"start":{"line":537,"column":6},"end":{"line":537,"column":24}},"284":{"start":{"line":539,"column":4},"end":{"line":539,"column":32}},"285":{"start":{"line":541,"column":2},"end":{"line":550,"column":4}},"286":{"start":{"line":542,"column":4},"end":{"line":548,"column":5}},"287":{"start":{"line":543,"column":6},"end":{"line":543,"column":19}},"288":{"start":{"line":544,"column":6},"end":{"line":546,"column":9}},"289":{"start":{"line":545,"column":8},"end":{"line":545,"column":20}},"290":{"start":{"line":547,"column":6},"end":{"line":547,"column":43}},"291":{"start":{"line":549,"column":4},"end":{"line":549,"column":43}},"292":{"start":{"line":558,"column":2},"end":{"line":607,"column":4}},"293":{"start":{"line":559,"column":4},"end":{"line":559,"column":19}},"294":{"start":{"line":560,"column":4},"end":{"line":560,"column":24}},"295":{"start":{"line":561,"column":4},"end":{"line":561,"column":26}},"296":{"start":{"line":562,"column":4},"end":{"line":562,"column":28}},"297":{"start":{"line":563,"column":4},"end":{"line":563,"column":20}},"298":{"start":{"line":564,"column":4},"end":{"line":567,"column":5}},"299":{"start":{"line":565,"column":6},"end":{"line":565,"column":31}},"300":{"start":{"line":566,"column":6},"end":{"line":566,"column":33}},"301":{"start":{"line":568,"column":4},"end":{"line":589,"column":5}},"302":{"start":{"line":569,"column":6},"end":{"line":571,"column":7}},"303":{"start":{"line":570,"column":8},"end":{"line":570,"column":71}},"304":{"start":{"line":572,"column":6},"end":{"line":574,"column":7}},"305":{"start":{"line":573,"column":8},"end":{"line":573,"column":73}},"306":{"start":{"line":575,"column":6},"end":{"line":575,"column":51}},"307":{"start":{"line":577,"column":6},"end":{"line":577,"column":50}},"308":{"start":{"line":579,"column":6},"end":{"line":579,"column":28}},"309":{"start":{"line":581,"column":6},"end":{"line":581,"column":55}},"310":{"start":{"line":583,"column":6},"end":{"line":583,"column":52}},"311":{"start":{"line":585,"column":6},"end":{"line":587,"column":7}},"312":{"start":{"line":586,"column":8},"end":{"line":586,"column":32}},"313":{"start":{"line":588,"column":6},"end":{"line":588,"column":20}},"314":{"start":{"line":590,"column":4},"end":{"line":603,"column":5}},"315":{"start":{"line":592,"column":6},"end":{"line":592,"column":29}},"316":{"start":{"line":596,"column":6},"end":{"line":602,"column":7}},"317":{"start":{"line":597,"column":8},"end":{"line":599,"column":9}},"318":{"start":{"line":598,"column":10},"end":{"line":598,"column":19}},"319":{"start":{"line":600,"column":8},"end":{"line":600,"column":29}},"320":{"start":{"line":601,"column":8},"end":{"line":601,"column":26}},"321":{"start":{"line":605,"column":4},"end":{"line":605,"column":53}},"322":{"start":{"line":606,"column":4},"end":{"line":606,"column":32}},"323":{"start":{"line":608,"column":2},"end":{"line":631,"column":4}},"324":{"start":{"line":609,"column":4},"end":{"line":609,"column":19}},"325":{"start":{"line":610,"column":4},"end":{"line":610,"column":24}},"326":{"start":{"line":611,"column":4},"end":{"line":629,"column":5}},"327":{"start":{"line":612,"column":6},"end":{"line":612,"column":36}},"328":{"start":{"line":613,"column":6},"end":{"line":613,"column":60}},"329":{"start":{"line":614,"column":6},"end":{"line":618,"column":7}},"330":{"start":{"line":615,"column":8},"end":{"line":615,"column":36}},"331":{"start":{"line":616,"column":8},"end":{"line":616,"column":25}},"332":{"start":{"line":617,"column":8},"end":{"line":617,"column":17}},"333":{"start":{"line":619,"column":6},"end":{"line":623,"column":7}},"334":{"start":{"line":620,"column":8},"end":{"line":620,"column":37}},"335":{"start":{"line":621,"column":8},"end":{"line":621,"column":25}},"336":{"start":{"line":622,"column":8},"end":{"line":622,"column":17}},"337":{"start":{"line":624,"column":6},"end":{"line":624,"column":39}},"338":{"start":{"line":625,"column":6},"end":{"line":625,"column":48}},"339":{"start":{"line":626,"column":6},"end":{"line":626,"column":31}},"340":{"start":{"line":627,"column":6},"end":{"line":627,"column":23}},"341":{"start":{"line":628,"column":6},"end":{"line":628,"column":37}},"342":{"start":{"line":630,"column":4},"end":{"line":630,"column":45}},"343":{"start":{"line":632,"column":2},"end":{"line":655,"column":4}},"344":{"start":{"line":633,"column":4},"end":{"line":633,"column":19}},"345":{"start":{"line":634,"column":4},"end":{"line":634,"column":24}},"346":{"start":{"line":635,"column":4},"end":{"line":653,"column":5}},"347":{"start":{"line":636,"column":6},"end":{"line":636,"column":30}},"348":{"start":{"line":637,"column":6},"end":{"line":637,"column":49}},"349":{"start":{"line":638,"column":6},"end":{"line":642,"column":7}},"350":{"start":{"line":639,"column":8},"end":{"line":639,"column":36}},"351":{"start":{"line":640,"column":8},"end":{"line":640,"column":25}},"352":{"start":{"line":641,"column":8},"end":{"line":641,"column":17}},"353":{"start":{"line":643,"column":6},"end":{"line":647,"column":7}},"354":{"start":{"line":644,"column":8},"end":{"line":644,"column":37}},"355":{"start":{"line":645,"column":8},"end":{"line":645,"column":25}},"356":{"start":{"line":646,"column":8},"end":{"line":646,"column":17}},"357":{"start":{"line":648,"column":6},"end":{"line":648,"column":39}},"358":{"start":{"line":649,"column":6},"end":{"line":649,"column":48}},"359":{"start":{"line":650,"column":6},"end":{"line":650,"column":31}},"360":{"start":{"line":651,"column":6},"end":{"line":651,"column":23}},"361":{"start":{"line":652,"column":6},"end":{"line":652,"column":37}},"362":{"start":{"line":654,"column":4},"end":{"line":654,"column":45}},"363":{"start":{"line":666,"column":2},"end":{"line":714,"column":4}},"364":{"start":{"line":667,"column":4},"end":{"line":667,"column":20}},"365":{"start":{"line":668,"column":4},"end":{"line":689,"column":5}},"366":{"start":{"line":669,"column":6},"end":{"line":672,"column":7}},"367":{"start":{"line":670,"column":8},"end":{"line":670,"column":51}},"368":{"start":{"line":671,"column":8},"end":{"line":671,"column":15}},"369":{"start":{"line":674,"column":6},"end":{"line":674,"column":22}},"370":{"start":{"line":675,"column":6},"end":{"line":685,"column":7}},"371":{"start":{"line":676,"column":8},"end":{"line":676,"column":41}},"372":{"start":{"line":677,"column":8},"end":{"line":683,"column":9}},"373":{"start":{"line":681,"column":10},"end":{"line":681,"column":36}},"374":{"start":{"line":682,"column":10},"end":{"line":682,"column":17}},"375":{"start":{"line":684,"column":8},"end":{"line":684,"column":39}},"376":{"start":{"line":687,"column":6},"end":{"line":687,"column":77}},"377":{"start":{"line":688,"column":6},"end":{"line":688,"column":13}},"378":{"start":{"line":690,"column":4},"end":{"line":695,"column":5}},"379":{"start":{"line":694,"column":6},"end":{"line":694,"column":13}},"380":{"start":{"line":696,"column":4},"end":{"line":696,"column":19}},"381":{"start":{"line":697,"column":4},"end":{"line":697,"column":20}},"382":{"start":{"line":698,"column":4},"end":{"line":700,"column":5}},"383":{"start":{"line":699,"column":6},"end":{"line":699,"column":102}},"384":{"start":{"line":701,"column":4},"end":{"line":703,"column":5}},"385":{"start":{"line":702,"column":6},"end":{"line":702,"column":106}},"386":{"start":{"line":704,"column":4},"end":{"line":707,"column":5}},"387":{"start":{"line":705,"column":6},"end":{"line":705,"column":32}},"388":{"start":{"line":706,"column":6},"end":{"line":706,"column":13}},"389":{"start":{"line":708,"column":4},"end":{"line":711,"column":5}},"390":{"start":{"line":709,"column":6},"end":{"line":709,"column":36}},"391":{"start":{"line":710,"column":6},"end":{"line":710,"column":13}},"392":{"start":{"line":713,"column":4},"end":{"line":713,"column":62}},"393":{"start":{"line":725,"column":2},"end":{"line":747,"column":4}},"394":{"start":{"line":726,"column":4},"end":{"line":726,"column":38}},"395":{"start":{"line":727,"column":4},"end":{"line":727,"column":24}},"396":{"start":{"line":728,"column":4},"end":{"line":745,"column":5}},"397":{"start":{"line":729,"column":6},"end":{"line":729,"column":41}},"398":{"start":{"line":730,"column":6},"end":{"line":733,"column":7}},"399":{"start":{"line":732,"column":8},"end":{"line":732,"column":17}},"400":{"start":{"line":734,"column":6},"end":{"line":737,"column":7}},"401":{"start":{"line":736,"column":8},"end":{"line":736,"column":38}},"402":{"start":{"line":738,"column":6},"end":{"line":738,"column":68}},"403":{"start":{"line":739,"column":6},"end":{"line":742,"column":7}},"404":{"start":{"line":741,"column":8},"end":{"line":741,"column":17}},"405":{"start":{"line":743,"column":6},"end":{"line":743,"column":37}},"406":{"start":{"line":744,"column":6},"end":{"line":744,"column":23}},"407":{"start":{"line":746,"column":4},"end":{"line":746,"column":23}},"408":{"start":{"line":759,"column":2},"end":{"line":878,"column":4}},"409":{"start":{"line":760,"column":4},"end":{"line":760,"column":33}},"410":{"start":{"line":761,"column":4},"end":{"line":763,"column":5}},"411":{"start":{"line":762,"column":6},"end":{"line":762,"column":31}},"412":{"start":{"line":764,"column":4},"end":{"line":770,"column":6}},"413":{"start":{"line":771,"column":4},"end":{"line":771,"column":19}},"414":{"start":{"line":772,"column":4},"end":{"line":776,"column":5}},"415":{"start":{"line":774,"column":6},"end":{"line":774,"column":62}},"416":{"start":{"line":775,"column":6},"end":{"line":775,"column":38}},"417":{"start":{"line":777,"column":4},"end":{"line":779,"column":5}},"418":{"start":{"line":778,"column":6},"end":{"line":778,"column":31}},"419":{"start":{"line":780,"column":4},"end":{"line":785,"column":5}},"420":{"start":{"line":782,"column":6},"end":{"line":782,"column":47}},"421":{"start":{"line":783,"column":6},"end":{"line":783,"column":43}},"422":{"start":{"line":784,"column":6},"end":{"line":784,"column":37}},"423":{"start":{"line":786,"column":4},"end":{"line":802,"column":5}},"424":{"start":{"line":788,"column":6},"end":{"line":788,"column":45}},"425":{"start":{"line":789,"column":6},"end":{"line":789,"column":41}},"426":{"start":{"line":790,"column":6},"end":{"line":790,"column":71}},"427":{"start":{"line":791,"column":6},"end":{"line":793,"column":7}},"428":{"start":{"line":792,"column":8},"end":{"line":792,"column":71}},"429":{"start":{"line":794,"column":6},"end":{"line":794,"column":37}},"430":{"start":{"line":795,"column":6},"end":{"line":801,"column":9}},"431":{"start":{"line":796,"column":8},"end":{"line":798,"column":9}},"432":{"start":{"line":797,"column":10},"end":{"line":797,"column":31}},"433":{"start":{"line":799,"column":8},"end":{"line":799,"column":34}},"434":{"start":{"line":800,"column":8},"end":{"line":800,"column":33}},"435":{"start":{"line":803,"column":4},"end":{"line":819,"column":5}},"436":{"start":{"line":805,"column":6},"end":{"line":805,"column":44}},"437":{"start":{"line":806,"column":6},"end":{"line":806,"column":40}},"438":{"start":{"line":807,"column":6},"end":{"line":807,"column":71}},"439":{"start":{"line":808,"column":6},"end":{"line":810,"column":7}},"440":{"start":{"line":809,"column":8},"end":{"line":809,"column":71}},"441":{"start":{"line":811,"column":6},"end":{"line":811,"column":36}},"442":{"start":{"line":812,"column":6},"end":{"line":818,"column":9}},"443":{"start":{"line":813,"column":8},"end":{"line":815,"column":9}},"444":{"start":{"line":814,"column":10},"end":{"line":814,"column":31}},"445":{"start":{"line":816,"column":8},"end":{"line":816,"column":34}},"446":{"start":{"line":817,"column":8},"end":{"line":817,"column":33}},"447":{"start":{"line":820,"column":4},"end":{"line":831,"column":5}},"448":{"start":{"line":822,"column":6},"end":{"line":822,"column":44}},"449":{"start":{"line":823,"column":6},"end":{"line":823,"column":40}},"450":{"start":{"line":824,"column":6},"end":{"line":824,"column":71}},"451":{"start":{"line":826,"column":6},"end":{"line":828,"column":7}},"452":{"start":{"line":827,"column":8},"end":{"line":827,"column":71}},"453":{"start":{"line":829,"column":6},"end":{"line":829,"column":36}},"454":{"start":{"line":830,"column":6},"end":{"line":830,"column":90}},"455":{"start":{"line":832,"column":4},"end":{"line":842,"column":5}},"456":{"start":{"line":834,"column":6},"end":{"line":834,"column":46}},"457":{"start":{"line":835,"column":6},"end":{"line":835,"column":42}},"458":{"start":{"line":836,"column":6},"end":{"line":836,"column":71}},"459":{"start":{"line":837,"column":6},"end":{"line":839,"column":7}},"460":{"start":{"line":838,"column":8},"end":{"line":838,"column":60}},"461":{"start":{"line":840,"column":6},"end":{"line":840,"column":38}},"462":{"start":{"line":841,"column":6},"end":{"line":841,"column":90}},"463":{"start":{"line":843,"column":4},"end":{"line":843,"column":66}},"464":{"start":{"line":844,"column":4},"end":{"line":848,"column":5}},"465":{"start":{"line":846,"column":6},"end":{"line":846,"column":19}},"466":{"start":{"line":847,"column":6},"end":{"line":847,"column":18}},"467":{"start":{"line":850,"column":4},"end":{"line":852,"column":5}},"468":{"start":{"line":851,"column":6},"end":{"line":851,"column":53}},"469":{"start":{"line":854,"column":4},"end":{"line":856,"column":5}},"470":{"start":{"line":855,"column":6},"end":{"line":855,"column":45}},"471":{"start":{"line":857,"column":4},"end":{"line":857,"column":39}},"472":{"start":{"line":858,"column":4},"end":{"line":861,"column":5}},"473":{"start":{"line":859,"column":6},"end":{"line":859,"column":31}},"474":{"start":{"line":860,"column":6},"end":{"line":860,"column":38}},"475":{"start":{"line":862,"column":4},"end":{"line":866,"column":5}},"476":{"start":{"line":864,"column":6},"end":{"line":864,"column":30}},"477":{"start":{"line":865,"column":6},"end":{"line":865,"column":38}},"478":{"start":{"line":867,"column":4},"end":{"line":877,"column":7}},"479":{"start":{"line":868,"column":6},"end":{"line":870,"column":7}},"480":{"start":{"line":869,"column":8},"end":{"line":869,"column":29}},"481":{"start":{"line":871,"column":6},"end":{"line":875,"column":7}},"482":{"start":{"line":872,"column":8},"end":{"line":872,"column":38}},"483":{"start":{"line":873,"column":8},"end":{"line":873,"column":32}},"484":{"start":{"line":874,"column":8},"end":{"line":874,"column":40}},"485":{"start":{"line":876,"column":6},"end":{"line":876,"column":69}},"486":{"start":{"line":887,"column":2},"end":{"line":898,"column":4}},"487":{"start":{"line":888,"column":4},"end":{"line":888,"column":20}},"488":{"start":{"line":889,"column":4},"end":{"line":897,"column":7}},"489":{"start":{"line":890,"column":6},"end":{"line":890,"column":76}},"490":{"start":{"line":892,"column":6},"end":{"line":894,"column":7}},"491":{"start":{"line":893,"column":8},"end":{"line":893,"column":29}},"492":{"start":{"line":895,"column":6},"end":{"line":895,"column":33}},"493":{"start":{"line":896,"column":6},"end":{"line":896,"column":31}},"494":{"start":{"line":910,"column":2},"end":{"line":1021,"column":4}},"495":{"start":{"line":911,"column":4},"end":{"line":918,"column":6}},"496":{"start":{"line":919,"column":4},"end":{"line":919,"column":33}},"497":{"start":{"line":920,"column":4},"end":{"line":920,"column":19}},"498":{"start":{"line":921,"column":4},"end":{"line":923,"column":5}},"499":{"start":{"line":922,"column":6},"end":{"line":922,"column":31}},"500":{"start":{"line":924,"column":4},"end":{"line":929,"column":5}},"501":{"start":{"line":926,"column":6},"end":{"line":926,"column":57}},"502":{"start":{"line":927,"column":6},"end":{"line":927,"column":53}},"503":{"start":{"line":928,"column":6},"end":{"line":928,"column":39}},"504":{"start":{"line":930,"column":4},"end":{"line":936,"column":5}},"505":{"start":{"line":933,"column":6},"end":{"line":933,"column":55}},"506":{"start":{"line":934,"column":6},"end":{"line":934,"column":51}},"507":{"start":{"line":935,"column":6},"end":{"line":935,"column":37}},"508":{"start":{"line":937,"column":4},"end":{"line":941,"column":5}},"509":{"start":{"line":939,"column":6},"end":{"line":939,"column":30}},"510":{"start":{"line":940,"column":6},"end":{"line":940,"column":22}},"511":{"start":{"line":943,"column":4},"end":{"line":953,"column":5}},"512":{"start":{"line":944,"column":6},"end":{"line":946,"column":7}},"513":{"start":{"line":945,"column":8},"end":{"line":945,"column":55}},"514":{"start":{"line":947,"column":6},"end":{"line":947,"column":47}},"515":{"start":{"line":948,"column":6},"end":{"line":951,"column":7}},"516":{"start":{"line":949,"column":8},"end":{"line":949,"column":33}},"517":{"start":{"line":950,"column":8},"end":{"line":950,"column":24}},"518":{"start":{"line":952,"column":6},"end":{"line":952,"column":65}},"519":{"start":{"line":954,"column":4},"end":{"line":967,"column":5}},"520":{"start":{"line":958,"column":6},"end":{"line":958,"column":53}},"521":{"start":{"line":959,"column":6},"end":{"line":959,"column":49}},"522":{"start":{"line":960,"column":6},"end":{"line":960,"column":61}},"523":{"start":{"line":961,"column":6},"end":{"line":963,"column":7}},"524":{"start":{"line":962,"column":8},"end":{"line":962,"column":60}},"525":{"start":{"line":964,"column":6},"end":{"line":964,"column":37}},"526":{"start":{"line":965,"column":6},"end":{"line":965,"column":58}},"527":{"start":{"line":966,"column":6},"end":{"line":966,"column":22}},"528":{"start":{"line":968,"column":4},"end":{"line":982,"column":5}},"529":{"start":{"line":972,"column":6},"end":{"line":972,"column":52}},"530":{"start":{"line":973,"column":6},"end":{"line":973,"column":48}},"531":{"start":{"line":974,"column":6},"end":{"line":974,"column":61}},"532":{"start":{"line":975,"column":6},"end":{"line":978,"column":7}},"533":{"start":{"line":977,"column":8},"end":{"line":977,"column":60}},"534":{"start":{"line":979,"column":6},"end":{"line":979,"column":36}},"535":{"start":{"line":980,"column":6},"end":{"line":980,"column":58}},"536":{"start":{"line":981,"column":6},"end":{"line":981,"column":22}},"537":{"start":{"line":983,"column":4},"end":{"line":996,"column":5}},"538":{"start":{"line":986,"column":6},"end":{"line":986,"column":52}},"539":{"start":{"line":987,"column":6},"end":{"line":987,"column":48}},"540":{"start":{"line":988,"column":6},"end":{"line":988,"column":61}},"541":{"start":{"line":990,"column":6},"end":{"line":992,"column":7}},"542":{"start":{"line":991,"column":8},"end":{"line":991,"column":60}},"543":{"start":{"line":993,"column":6},"end":{"line":993,"column":36}},"544":{"start":{"line":994,"column":6},"end":{"line":994,"column":97}},"545":{"start":{"line":995,"column":6},"end":{"line":995,"column":22}},"546":{"start":{"line":997,"column":4},"end":{"line":1002,"column":5}},"547":{"start":{"line":999,"column":6},"end":{"line":999,"column":52}},"548":{"start":{"line":1000,"column":6},"end":{"line":1000,"column":48}},"549":{"start":{"line":1001,"column":6},"end":{"line":1001,"column":62}},"550":{"start":{"line":1003,"column":4},"end":{"line":1016,"column":5}},"551":{"start":{"line":1005,"column":6},"end":{"line":1005,"column":54}},"552":{"start":{"line":1006,"column":6},"end":{"line":1006,"column":50}},"553":{"start":{"line":1007,"column":6},"end":{"line":1007,"column":61}},"554":{"start":{"line":1008,"column":6},"end":{"line":1010,"column":7}},"555":{"start":{"line":1009,"column":8},"end":{"line":1009,"column":60}},"556":{"start":{"line":1011,"column":6},"end":{"line":1011,"column":38}},"557":{"start":{"line":1012,"column":6},"end":{"line":1014,"column":15}},"558":{"start":{"line":1013,"column":8},"end":{"line":1013,"column":39}},"559":{"start":{"line":1015,"column":6},"end":{"line":1015,"column":22}},"560":{"start":{"line":1019,"column":4},"end":{"line":1019,"column":56}},"561":{"start":{"line":1020,"column":4},"end":{"line":1020,"column":20}},"562":{"start":{"line":1029,"column":2},"end":{"line":1087,"column":4}},"563":{"start":{"line":1030,"column":4},"end":{"line":1030,"column":14}},"564":{"start":{"line":1031,"column":4},"end":{"line":1031,"column":36}},"565":{"start":{"line":1032,"column":4},"end":{"line":1032,"column":76}},"566":{"start":{"line":1033,"column":4},"end":{"line":1036,"column":5}},"567":{"start":{"line":1034,"column":6},"end":{"line":1034,"column":48}},"568":{"start":{"line":1035,"column":6},"end":{"line":1035,"column":15}},"569":{"start":{"line":1037,"column":4},"end":{"line":1037,"column":19}},"570":{"start":{"line":1038,"column":4},"end":{"line":1038,"column":23}},"571":{"start":{"line":1039,"column":4},"end":{"line":1039,"column":19}},"572":{"start":{"line":1040,"column":4},"end":{"line":1040,"column":33}},"573":{"start":{"line":1041,"column":4},"end":{"line":1041,"column":31}},"574":{"start":{"line":1043,"column":4},"end":{"line":1076,"column":5}},"575":{"start":{"line":1044,"column":6},"end":{"line":1075,"column":7}},"576":{"start":{"line":1046,"column":10},"end":{"line":1048,"column":11}},"577":{"start":{"line":1047,"column":12},"end":{"line":1047,"column":18}},"578":{"start":{"line":1049,"column":10},"end":{"line":1052,"column":11}},"579":{"start":{"line":1051,"column":12},"end":{"line":1051,"column":66}},"580":{"start":{"line":1053,"column":10},"end":{"line":1053,"column":59}},"581":{"start":{"line":1054,"column":10},"end":{"line":1054,"column":29}},"582":{"start":{"line":1055,"column":10},"end":{"line":1055,"column":16}},"583":{"start":{"line":1057,"column":10},"end":{"line":1064,"column":11}},"584":{"start":{"line":1058,"column":12},"end":{"line":1058,"column":36}},"585":{"start":{"line":1059,"column":12},"end":{"line":1059,"column":34}},"586":{"start":{"line":1061,"column":12},"end":{"line":1061,"column":16}},"587":{"start":{"line":1062,"column":12},"end":{"line":1062,"column":27}},"588":{"start":{"line":1063,"column":12},"end":{"line":1063,"column":18}},"589":{"start":{"line":1065,"column":10},"end":{"line":1065,"column":19}},"590":{"start":{"line":1066,"column":10},"end":{"line":1066,"column":16}},"591":{"start":{"line":1068,"column":10},"end":{"line":1072,"column":11}},"592":{"start":{"line":1069,"column":12},"end":{"line":1069,"column":91}},"593":{"start":{"line":1070,"column":12},"end":{"line":1070,"column":31}},"594":{"start":{"line":1071,"column":12},"end":{"line":1071,"column":18}},"595":{"start":{"line":1073,"column":10},"end":{"line":1073,"column":19}},"596":{"start":{"line":1074,"column":10},"end":{"line":1074,"column":16}},"597":{"start":{"line":1077,"column":4},"end":{"line":1079,"column":5}},"598":{"start":{"line":1078,"column":6},"end":{"line":1078,"column":60}},"599":{"start":{"line":1080,"column":4},"end":{"line":1086,"column":6}},"600":{"start":{"line":1082,"column":8},"end":{"line":1082,"column":42}},"601":{"start":{"line":1088,"column":2},"end":{"line":1114,"column":4}},"602":{"start":{"line":1089,"column":4},"end":{"line":1089,"column":62}},"603":{"start":{"line":1090,"column":4},"end":{"line":1093,"column":5}},"604":{"start":{"line":1092,"column":6},"end":{"line":1092,"column":58}},"605":{"start":{"line":1094,"column":4},"end":{"line":1097,"column":6}},"606":{"start":{"line":1098,"column":4},"end":{"line":1102,"column":6}},"607":{"start":{"line":1103,"column":4},"end":{"line":1111,"column":5}},"608":{"start":{"line":1104,"column":6},"end":{"line":1104,"column":27}},"609":{"start":{"line":1105,"column":6},"end":{"line":1105,"column":42}},"610":{"start":{"line":1106,"column":6},"end":{"line":1106,"column":99}},"611":{"start":{"line":1107,"column":6},"end":{"line":1110,"column":9}},"612":{"start":{"line":1112,"column":4},"end":{"line":1112,"column":28}},"613":{"start":{"line":1113,"column":4},"end":{"line":1113,"column":20}},"614":{"start":{"line":1121,"column":0},"end":{"line":1182,"column":1}},"615":{"start":{"line":1123,"column":2},"end":{"line":1123,"column":13}},"616":{"start":{"line":1124,"column":2},"end":{"line":1124,"column":40}},"617":{"start":{"line":1125,"column":2},"end":{"line":1125,"column":46}},"618":{"start":{"line":1126,"column":2},"end":{"line":1126,"column":40}},"619":{"start":{"line":1127,"column":2},"end":{"line":1127,"column":38}},"620":{"start":{"line":1128,"column":2},"end":{"line":1128,"column":44}},"621":{"start":{"line":1129,"column":2},"end":{"line":1129,"column":41}},"622":{"start":{"line":1130,"column":2},"end":{"line":1130,"column":44}},"623":{"start":{"line":1131,"column":2},"end":{"line":1131,"column":42}},"624":{"start":{"line":1132,"column":2},"end":{"line":1132,"column":40}},"625":{"start":{"line":1133,"column":2},"end":{"line":1133,"column":36}},"626":{"start":{"line":1134,"column":2},"end":{"line":1134,"column":44}},"627":{"start":{"line":1135,"column":2},"end":{"line":1135,"column":48}},"628":{"start":{"line":1136,"column":2},"end":{"line":1136,"column":38}},"629":{"start":{"line":1137,"column":2},"end":{"line":1137,"column":47}},"630":{"start":{"line":1138,"column":2},"end":{"line":1138,"column":42}},"631":{"start":{"line":1139,"column":2},"end":{"line":1139,"column":46}},"632":{"start":{"line":1140,"column":2},"end":{"line":1140,"column":38}},"633":{"start":{"line":1141,"column":2},"end":{"line":1141,"column":38}},"634":{"start":{"line":1142,"column":2},"end":{"line":1142,"column":38}},"635":{"start":{"line":1143,"column":2},"end":{"line":1143,"column":46}},"636":{"start":{"line":1144,"column":2},"end":{"line":1144,"column":44}},"637":{"start":{"line":1145,"column":2},"end":{"line":1145,"column":38}},"638":{"start":{"line":1146,"column":2},"end":{"line":1146,"column":36}},"639":{"start":{"line":1147,"column":2},"end":{"line":1147,"column":36}},"640":{"start":{"line":1148,"column":2},"end":{"line":1148,"column":36}},"641":{"start":{"line":1149,"column":2},"end":{"line":1149,"column":40}},"642":{"start":{"line":1152,"column":2},"end":{"line":1152,"column":13}},"643":{"start":{"line":1153,"column":2},"end":{"line":1153,"column":40}},"644":{"start":{"line":1154,"column":2},"end":{"line":1154,"column":46}},"645":{"start":{"line":1155,"column":2},"end":{"line":1155,"column":40}},"646":{"start":{"line":1156,"column":2},"end":{"line":1156,"column":38}},"647":{"start":{"line":1157,"column":2},"end":{"line":1157,"column":44}},"648":{"start":{"line":1158,"column":2},"end":{"line":1158,"column":41}},"649":{"start":{"line":1159,"column":2},"end":{"line":1159,"column":44}},"650":{"start":{"line":1160,"column":2},"end":{"line":1160,"column":42}},"651":{"start":{"line":1161,"column":2},"end":{"line":1161,"column":40}},"652":{"start":{"line":1162,"column":2},"end":{"line":1162,"column":36}},"653":{"start":{"line":1163,"column":2},"end":{"line":1163,"column":44}},"654":{"start":{"line":1164,"column":2},"end":{"line":1164,"column":48}},"655":{"start":{"line":1165,"column":2},"end":{"line":1165,"column":38}},"656":{"start":{"line":1166,"column":2},"end":{"line":1166,"column":47}},"657":{"start":{"line":1167,"column":2},"end":{"line":1167,"column":42}},"658":{"start":{"line":1168,"column":2},"end":{"line":1168,"column":42}},"659":{"start":{"line":1169,"column":2},"end":{"line":1169,"column":38}},"660":{"start":{"line":1170,"column":2},"end":{"line":1170,"column":38}},"661":{"start":{"line":1171,"column":2},"end":{"line":1171,"column":38}},"662":{"start":{"line":1172,"column":2},"end":{"line":1172,"column":46}},"663":{"start":{"line":1173,"column":2},"end":{"line":1173,"column":44}},"664":{"start":{"line":1174,"column":2},"end":{"line":1174,"column":38}},"665":{"start":{"line":1175,"column":2},"end":{"line":1175,"column":36}},"666":{"start":{"line":1176,"column":2},"end":{"line":1176,"column":36}},"667":{"start":{"line":1177,"column":2},"end":{"line":1177,"column":36}},"668":{"start":{"line":1178,"column":2},"end":{"line":1178,"column":40}},"669":{"start":{"line":1180,"column":2},"end":{"line":1180,"column":20}},"670":{"start":{"line":1181,"column":2},"end":{"line":1181,"column":20}},"671":{"start":{"line":1194,"column":0},"end":{"line":1203,"column":2}},"672":{"start":{"line":1195,"column":2},"end":{"line":1197,"column":3}},"673":{"start":{"line":1196,"column":4},"end":{"line":1196,"column":16}},"674":{"start":{"line":1198,"column":2},"end":{"line":1198,"column":41}},"675":{"start":{"line":1199,"column":2},"end":{"line":1201,"column":3}},"676":{"start":{"line":1200,"column":4},"end":{"line":1200,"column":55}},"677":{"start":{"line":1202,"column":2},"end":{"line":1202,"column":47}},"678":{"start":{"line":1223,"column":0},"end":{"line":1273,"column":2}},"679":{"start":{"line":1224,"column":2},"end":{"line":1231,"column":3}},"680":{"start":{"line":1226,"column":4},"end":{"line":1226,"column":17}},"681":{"start":{"line":1227,"column":4},"end":{"line":1230,"column":5}},"682":{"start":{"line":1229,"column":6},"end":{"line":1229,"column":26}},"683":{"start":{"line":1232,"column":2},"end":{"line":1234,"column":3}},"684":{"start":{"line":1233,"column":4},"end":{"line":1233,"column":17}},"685":{"start":{"line":1235,"column":2},"end":{"line":1240,"column":3}},"686":{"start":{"line":1236,"column":4},"end":{"line":1238,"column":5}},"687":{"start":{"line":1237,"column":6},"end":{"line":1237,"column":130}},"688":{"start":{"line":1239,"column":4},"end":{"line":1239,"column":17}},"689":{"start":{"line":1242,"column":2},"end":{"line":1245,"column":4}},"690":{"start":{"line":1246,"column":2},"end":{"line":1267,"column":3}},"691":{"start":{"line":1247,"column":4},"end":{"line":1252,"column":5}},"692":{"start":{"line":1248,"column":6},"end":{"line":1248,"column":27}},"693":{"start":{"line":1250,"column":9},"end":{"line":1252,"column":5}},"694":{"start":{"line":1251,"column":6},"end":{"line":1251,"column":43}},"695":{"start":{"line":1253,"column":4},"end":{"line":1256,"column":5}},"696":{"start":{"line":1254,"column":6},"end":{"line":1254,"column":32}},"697":{"start":{"line":1255,"column":6},"end":{"line":1255,"column":32}},"698":{"start":{"line":1257,"column":4},"end":{"line":1259,"column":5}},"699":{"start":{"line":1258,"column":6},"end":{"line":1258,"column":103}},"700":{"start":{"line":1263,"column":4},"end":{"line":1263,"column":40}},"701":{"start":{"line":1264,"column":4},"end":{"line":1266,"column":5}},"702":{"start":{"line":1265,"column":6},"end":{"line":1265,"column":160}},"703":{"start":{"line":1268,"column":2},"end":{"line":1268,"column":41}},"704":{"start":{"line":1269,"column":2},"end":{"line":1271,"column":3}},"705":{"start":{"line":1270,"column":4},"end":{"line":1270,"column":55}},"706":{"start":{"line":1272,"column":2},"end":{"line":1272,"column":46}},"707":{"start":{"line":1282,"column":0},"end":{"line":1334,"column":2}},"708":{"start":{"line":1283,"column":2},"end":{"line":1283,"column":18}},"709":{"start":{"line":1284,"column":2},"end":{"line":1328,"column":3}},"710":{"start":{"line":1285,"column":4},"end":{"line":1285,"column":28}},"711":{"start":{"line":1287,"column":7},"end":{"line":1328,"column":3}},"712":{"start":{"line":1288,"column":4},"end":{"line":1288,"column":26}},"713":{"start":{"line":1289,"column":4},"end":{"line":1291,"column":5}},"714":{"start":{"line":1290,"column":6},"end":{"line":1290,"column":28}},"715":{"start":{"line":1293,"column":7},"end":{"line":1328,"column":3}},"716":{"start":{"line":1294,"column":4},"end":{"line":1294,"column":26}},"717":{"start":{"line":1296,"column":7},"end":{"line":1328,"column":3}},"718":{"start":{"line":1297,"column":4},"end":{"line":1297,"column":31}},"719":{"start":{"line":1299,"column":7},"end":{"line":1328,"column":3}},"720":{"start":{"line":1300,"column":4},"end":{"line":1300,"column":28}},"721":{"start":{"line":1302,"column":7},"end":{"line":1328,"column":3}},"722":{"start":{"line":1303,"column":4},"end":{"line":1303,"column":28}},"723":{"start":{"line":1305,"column":7},"end":{"line":1328,"column":3}},"724":{"start":{"line":1306,"column":4},"end":{"line":1306,"column":29}},"725":{"start":{"line":1308,"column":7},"end":{"line":1328,"column":3}},"726":{"start":{"line":1309,"column":4},"end":{"line":1309,"column":26}},"727":{"start":{"line":1311,"column":7},"end":{"line":1328,"column":3}},"728":{"start":{"line":1312,"column":4},"end":{"line":1312,"column":26}},"729":{"start":{"line":1314,"column":7},"end":{"line":1328,"column":3}},"730":{"start":{"line":1315,"column":4},"end":{"line":1315,"column":27}},"731":{"start":{"line":1317,"column":7},"end":{"line":1328,"column":3}},"732":{"start":{"line":1318,"column":4},"end":{"line":1318,"column":26}},"733":{"start":{"line":1320,"column":7},"end":{"line":1328,"column":3}},"734":{"start":{"line":1321,"column":4},"end":{"line":1321,"column":26}},"735":{"start":{"line":1323,"column":7},"end":{"line":1328,"column":3}},"736":{"start":{"line":1324,"column":4},"end":{"line":1324,"column":26}},"737":{"start":{"line":1326,"column":7},"end":{"line":1328,"column":3}},"738":{"start":{"line":1327,"column":4},"end":{"line":1327,"column":29}},"739":{"start":{"line":1330,"column":2},"end":{"line":1332,"column":3}},"740":{"start":{"line":1331,"column":4},"end":{"line":1331,"column":16}},"741":{"start":{"line":1333,"column":2},"end":{"line":1333,"column":34}},"742":{"start":{"line":1342,"column":0},"end":{"line":1354,"column":1}},"743":{"start":{"line":1343,"column":2},"end":{"line":1345,"column":3}},"744":{"start":{"line":1344,"column":4},"end":{"line":1344,"column":21}},"745":{"start":{"line":1346,"column":2},"end":{"line":1346,"column":35}},"746":{"start":{"line":1347,"column":2},"end":{"line":1352,"column":3}},"747":{"start":{"line":1348,"column":4},"end":{"line":1348,"column":41}},"748":{"start":{"line":1351,"column":4},"end":{"line":1351,"column":48}},"749":{"start":{"line":1353,"column":2},"end":{"line":1353,"column":22}},"750":{"start":{"line":1362,"column":0},"end":{"line":1374,"column":1}},"751":{"start":{"line":1363,"column":2},"end":{"line":1365,"column":3}},"752":{"start":{"line":1364,"column":4},"end":{"line":1364,"column":21}},"753":{"start":{"line":1366,"column":2},"end":{"line":1366,"column":35}},"754":{"start":{"line":1367,"column":2},"end":{"line":1372,"column":3}},"755":{"start":{"line":1368,"column":4},"end":{"line":1368,"column":41}},"756":{"start":{"line":1371,"column":4},"end":{"line":1371,"column":48}},"757":{"start":{"line":1373,"column":2},"end":{"line":1373,"column":22}},"758":{"start":{"line":1380,"column":0},"end":{"line":1385,"column":1}},"759":{"start":{"line":1381,"column":2},"end":{"line":1383,"column":3}},"760":{"start":{"line":1382,"column":4},"end":{"line":1382,"column":16}},"761":{"start":{"line":1384,"column":2},"end":{"line":1384,"column":34}},"762":{"start":{"line":1391,"column":0},"end":{"line":1393,"column":1}},"763":{"start":{"line":1392,"column":2},"end":{"line":1392,"column":16}},"764":{"start":{"line":1401,"column":0},"end":{"line":1403,"column":1}},"765":{"start":{"line":1402,"column":2},"end":{"line":1402,"column":36}},"766":{"start":{"line":1411,"column":0},"end":{"line":1413,"column":1}},"767":{"start":{"line":1412,"column":2},"end":{"line":1412,"column":36}},"768":{"start":{"line":1424,"column":0},"end":{"line":1446,"column":1}},"769":{"start":{"line":1425,"column":2},"end":{"line":1425,"column":21}},"770":{"start":{"line":1426,"column":2},"end":{"line":1426,"column":23}},"771":{"start":{"line":1427,"column":2},"end":{"line":1427,"column":17}},"772":{"start":{"line":1428,"column":2},"end":{"line":1428,"column":30}},"773":{"start":{"line":1429,"column":2},"end":{"line":1429,"column":16}},"774":{"start":{"line":1430,"column":2},"end":{"line":1442,"column":3}},"775":{"start":{"line":1431,"column":4},"end":{"line":1431,"column":21}},"776":{"start":{"line":1432,"column":4},"end":{"line":1434,"column":5}},"777":{"start":{"line":1433,"column":6},"end":{"line":1433,"column":14}},"778":{"start":{"line":1435,"column":4},"end":{"line":1437,"column":5}},"779":{"start":{"line":1436,"column":6},"end":{"line":1436,"column":14}},"780":{"start":{"line":1438,"column":4},"end":{"line":1441,"column":5}},"781":{"start":{"line":1439,"column":6},"end":{"line":1439,"column":59}},"782":{"start":{"line":1440,"column":6},"end":{"line":1440,"column":25}},"783":{"start":{"line":1444,"column":2},"end":{"line":1444,"column":75}},"784":{"start":{"line":1445,"column":2},"end":{"line":1445,"column":15}},"785":{"start":{"line":1454,"column":0},"end":{"line":1466,"column":1}},"786":{"start":{"line":1455,"column":2},"end":{"line":1455,"column":43}},"787":{"start":{"line":1456,"column":2},"end":{"line":1456,"column":17}},"788":{"start":{"line":1457,"column":2},"end":{"line":1464,"column":5}},"789":{"start":{"line":1458,"column":4},"end":{"line":1458,"column":49}},"790":{"start":{"line":1459,"column":4},"end":{"line":1459,"column":16}},"791":{"start":{"line":1460,"column":4},"end":{"line":1460,"column":34}},"792":{"start":{"line":1461,"column":4},"end":{"line":1461,"column":26}},"793":{"start":{"line":1462,"column":4},"end":{"line":1462,"column":27}},"794":{"start":{"line":1463,"column":4},"end":{"line":1463,"column":13}},"795":{"start":{"line":1465,"column":2},"end":{"line":1465,"column":20}},"796":{"start":{"line":1468,"column":0},"end":{"line":1468,"column":25}}},"branchMap":{"1":{"line":57,"type":"cond-expr","locations":[{"start":{"line":57,"column":37},"end":{"line":57,"column":51}},{"start":{"line":57,"column":54},"end":{"line":57,"column":62}}]},"2":{"line":69,"type":"binary-expr","locations":[{"start":{"line":69,"column":25},"end":{"line":69,"column":41}},{"start":{"line":69,"column":45},"end":{"line":69,"column":62}}]},"3":{"line":73,"type":"if","locations":[{"start":{"line":73,"column":2},"end":{"line":73,"column":2}},{"start":{"line":73,"column":2},"end":{"line":73,"column":2}}]},"4":{"line":98,"type":"if","locations":[{"start":{"line":98,"column":4},"end":{"line":98,"column":4}},{"start":{"line":98,"column":4},"end":{"line":98,"column":4}}]},"5":{"line":172,"type":"if","locations":[{"start":{"line":172,"column":4},"end":{"line":172,"column":4}},{"start":{"line":172,"column":4},"end":{"line":172,"column":4}}]},"6":{"line":194,"type":"if","locations":[{"start":{"line":194,"column":8},"end":{"line":194,"column":8}},{"start":{"line":194,"column":8},"end":{"line":194,"column":8}}]},"7":{"line":203,"type":"if","locations":[{"start":{"line":203,"column":4},"end":{"line":203,"column":4}},{"start":{"line":203,"column":4},"end":{"line":203,"column":4}}]},"8":{"line":234,"type":"binary-expr","locations":[{"start":{"line":234,"column":20},"end":{"line":234,"column":45}},{"start":{"line":234,"column":49},"end":{"line":234,"column":70}}]},"9":{"line":240,"type":"if","locations":[{"start":{"line":240,"column":6},"end":{"line":240,"column":6}},{"start":{"line":240,"column":6},"end":{"line":240,"column":6}}]},"10":{"line":255,"type":"if","locations":[{"start":{"line":255,"column":6},"end":{"line":255,"column":6}},{"start":{"line":255,"column":6},"end":{"line":255,"column":6}}]},"11":{"line":266,"type":"if","locations":[{"start":{"line":266,"column":4},"end":{"line":266,"column":4}},{"start":{"line":266,"column":4},"end":{"line":266,"column":4}}]},"12":{"line":274,"type":"if","locations":[{"start":{"line":274,"column":4},"end":{"line":274,"column":4}},{"start":{"line":274,"column":4},"end":{"line":274,"column":4}}]},"13":{"line":287,"type":"if","locations":[{"start":{"line":287,"column":4},"end":{"line":287,"column":4}},{"start":{"line":287,"column":4},"end":{"line":287,"column":4}}]},"14":{"line":290,"type":"if","locations":[{"start":{"line":290,"column":4},"end":{"line":290,"column":4}},{"start":{"line":290,"column":4},"end":{"line":290,"column":4}}]},"15":{"line":293,"type":"if","locations":[{"start":{"line":293,"column":6},"end":{"line":293,"column":6}},{"start":{"line":293,"column":6},"end":{"line":293,"column":6}}]},"16":{"line":309,"type":"if","locations":[{"start":{"line":309,"column":6},"end":{"line":309,"column":6}},{"start":{"line":309,"column":6},"end":{"line":309,"column":6}}]},"17":{"line":312,"type":"if","locations":[{"start":{"line":312,"column":6},"end":{"line":312,"column":6}},{"start":{"line":312,"column":6},"end":{"line":312,"column":6}}]},"18":{"line":320,"type":"if","locations":[{"start":{"line":320,"column":4},"end":{"line":320,"column":4}},{"start":{"line":320,"column":4},"end":{"line":320,"column":4}}]},"19":{"line":334,"type":"if","locations":[{"start":{"line":334,"column":6},"end":{"line":334,"column":6}},{"start":{"line":334,"column":6},"end":{"line":334,"column":6}}]},"20":{"line":342,"type":"if","locations":[{"start":{"line":342,"column":4},"end":{"line":342,"column":4}},{"start":{"line":342,"column":4},"end":{"line":342,"column":4}}]},"21":{"line":352,"type":"if","locations":[{"start":{"line":352,"column":4},"end":{"line":352,"column":4}},{"start":{"line":352,"column":4},"end":{"line":352,"column":4}}]},"22":{"line":360,"type":"if","locations":[{"start":{"line":360,"column":4},"end":{"line":360,"column":4}},{"start":{"line":360,"column":4},"end":{"line":360,"column":4}}]},"23":{"line":363,"type":"if","locations":[{"start":{"line":363,"column":4},"end":{"line":363,"column":4}},{"start":{"line":363,"column":4},"end":{"line":363,"column":4}}]},"24":{"line":374,"type":"if","locations":[{"start":{"line":374,"column":4},"end":{"line":374,"column":4}},{"start":{"line":374,"column":4},"end":{"line":374,"column":4}}]},"25":{"line":377,"type":"if","locations":[{"start":{"line":377,"column":4},"end":{"line":377,"column":4}},{"start":{"line":377,"column":4},"end":{"line":377,"column":4}}]},"26":{"line":380,"type":"if","locations":[{"start":{"line":380,"column":4},"end":{"line":380,"column":4}},{"start":{"line":380,"column":4},"end":{"line":380,"column":4}}]},"27":{"line":390,"type":"if","locations":[{"start":{"line":390,"column":4},"end":{"line":390,"column":4}},{"start":{"line":390,"column":4},"end":{"line":390,"column":4}}]},"28":{"line":393,"type":"if","locations":[{"start":{"line":393,"column":4},"end":{"line":393,"column":4}},{"start":{"line":393,"column":4},"end":{"line":393,"column":4}}]},"29":{"line":397,"type":"if","locations":[{"start":{"line":397,"column":4},"end":{"line":397,"column":4}},{"start":{"line":397,"column":4},"end":{"line":397,"column":4}}]},"30":{"line":400,"type":"if","locations":[{"start":{"line":400,"column":4},"end":{"line":400,"column":4}},{"start":{"line":400,"column":4},"end":{"line":400,"column":4}}]},"31":{"line":404,"type":"if","locations":[{"start":{"line":404,"column":4},"end":{"line":404,"column":4}},{"start":{"line":404,"column":4},"end":{"line":404,"column":4}}]},"32":{"line":415,"type":"if","locations":[{"start":{"line":415,"column":4},"end":{"line":415,"column":4}},{"start":{"line":415,"column":4},"end":{"line":415,"column":4}}]},"33":{"line":418,"type":"if","locations":[{"start":{"line":418,"column":4},"end":{"line":418,"column":4}},{"start":{"line":418,"column":4},"end":{"line":418,"column":4}}]},"34":{"line":422,"type":"if","locations":[{"start":{"line":422,"column":4},"end":{"line":422,"column":4}},{"start":{"line":422,"column":4},"end":{"line":422,"column":4}}]},"35":{"line":425,"type":"if","locations":[{"start":{"line":425,"column":4},"end":{"line":425,"column":4}},{"start":{"line":425,"column":4},"end":{"line":425,"column":4}}]},"36":{"line":428,"type":"if","locations":[{"start":{"line":428,"column":4},"end":{"line":428,"column":4}},{"start":{"line":428,"column":4},"end":{"line":428,"column":4}}]},"37":{"line":439,"type":"if","locations":[{"start":{"line":439,"column":4},"end":{"line":439,"column":4}},{"start":{"line":439,"column":4},"end":{"line":439,"column":4}}]},"38":{"line":442,"type":"if","locations":[{"start":{"line":442,"column":4},"end":{"line":442,"column":4}},{"start":{"line":442,"column":4},"end":{"line":442,"column":4}}]},"39":{"line":446,"type":"if","locations":[{"start":{"line":446,"column":4},"end":{"line":446,"column":4}},{"start":{"line":446,"column":4},"end":{"line":446,"column":4}}]},"40":{"line":449,"type":"if","locations":[{"start":{"line":449,"column":4},"end":{"line":449,"column":4}},{"start":{"line":449,"column":4},"end":{"line":449,"column":4}}]},"41":{"line":452,"type":"if","locations":[{"start":{"line":452,"column":4},"end":{"line":452,"column":4}},{"start":{"line":452,"column":4},"end":{"line":452,"column":4}}]},"42":{"line":458,"type":"if","locations":[{"start":{"line":458,"column":4},"end":{"line":458,"column":4}},{"start":{"line":458,"column":4},"end":{"line":458,"column":4}}]},"43":{"line":470,"type":"if","locations":[{"start":{"line":470,"column":4},"end":{"line":470,"column":4}},{"start":{"line":470,"column":4},"end":{"line":470,"column":4}}]},"44":{"line":481,"type":"cond-expr","locations":[{"start":{"line":481,"column":32},"end":{"line":481,"column":33}},{"start":{"line":481,"column":36},"end":{"line":481,"column":37}}]},"45":{"line":488,"type":"if","locations":[{"start":{"line":488,"column":4},"end":{"line":488,"column":4}},{"start":{"line":488,"column":4},"end":{"line":488,"column":4}}]},"46":{"line":500,"type":"if","locations":[{"start":{"line":500,"column":4},"end":{"line":500,"column":4}},{"start":{"line":500,"column":4},"end":{"line":500,"column":4}}]},"47":{"line":512,"type":"if","locations":[{"start":{"line":512,"column":4},"end":{"line":512,"column":4}},{"start":{"line":512,"column":4},"end":{"line":512,"column":4}}]},"48":{"line":520,"type":"if","locations":[{"start":{"line":520,"column":4},"end":{"line":520,"column":4}},{"start":{"line":520,"column":4},"end":{"line":520,"column":4}}]},"49":{"line":523,"type":"if","locations":[{"start":{"line":523,"column":4},"end":{"line":523,"column":4}},{"start":{"line":523,"column":4},"end":{"line":523,"column":4}}]},"50":{"line":530,"type":"if","locations":[{"start":{"line":530,"column":6},"end":{"line":530,"column":6}},{"start":{"line":530,"column":6},"end":{"line":530,"column":6}}]},"51":{"line":530,"type":"binary-expr","locations":[{"start":{"line":530,"column":10},"end":{"line":530,"column":22}},{"start":{"line":530,"column":26},"end":{"line":530,"column":52}},{"start":{"line":530,"column":56},"end":{"line":530,"column":75}}]},"52":{"line":542,"type":"if","locations":[{"start":{"line":542,"column":4},"end":{"line":542,"column":4}},{"start":{"line":542,"column":4},"end":{"line":542,"column":4}}]},"53":{"line":542,"type":"binary-expr","locations":[{"start":{"line":542,"column":8},"end":{"line":542,"column":32}},{"start":{"line":542,"column":36},"end":{"line":542,"column":77}}]},"54":{"line":564,"type":"if","locations":[{"start":{"line":564,"column":4},"end":{"line":564,"column":4}},{"start":{"line":564,"column":4},"end":{"line":564,"column":4}}]},"55":{"line":569,"type":"if","locations":[{"start":{"line":569,"column":6},"end":{"line":569,"column":6}},{"start":{"line":569,"column":6},"end":{"line":569,"column":6}}]},"56":{"line":569,"type":"binary-expr","locations":[{"start":{"line":569,"column":10},"end":{"line":569,"column":22}},{"start":{"line":569,"column":26},"end":{"line":569,"column":52}},{"start":{"line":569,"column":56},"end":{"line":569,"column":75}}]},"57":{"line":572,"type":"if","locations":[{"start":{"line":572,"column":6},"end":{"line":572,"column":6}},{"start":{"line":572,"column":6},"end":{"line":572,"column":6}}]},"58":{"line":572,"type":"binary-expr","locations":[{"start":{"line":572,"column":10},"end":{"line":572,"column":22}},{"start":{"line":572,"column":26},"end":{"line":572,"column":52}},{"start":{"line":572,"column":56},"end":{"line":572,"column":75}}]},"59":{"line":585,"type":"if","locations":[{"start":{"line":585,"column":6},"end":{"line":585,"column":6}},{"start":{"line":585,"column":6},"end":{"line":585,"column":6}}]},"60":{"line":590,"type":"if","locations":[{"start":{"line":590,"column":4},"end":{"line":590,"column":4}},{"start":{"line":590,"column":4},"end":{"line":590,"column":4}}]},"61":{"line":590,"type":"binary-expr","locations":[{"start":{"line":590,"column":8},"end":{"line":590,"column":32}},{"start":{"line":590,"column":36},"end":{"line":590,"column":77}}]},"62":{"line":597,"type":"if","locations":[{"start":{"line":597,"column":8},"end":{"line":597,"column":8}},{"start":{"line":597,"column":8},"end":{"line":597,"column":8}}]},"63":{"line":614,"type":"if","locations":[{"start":{"line":614,"column":6},"end":{"line":614,"column":6}},{"start":{"line":614,"column":6},"end":{"line":614,"column":6}}]},"64":{"line":619,"type":"if","locations":[{"start":{"line":619,"column":6},"end":{"line":619,"column":6}},{"start":{"line":619,"column":6},"end":{"line":619,"column":6}}]},"65":{"line":638,"type":"if","locations":[{"start":{"line":638,"column":6},"end":{"line":638,"column":6}},{"start":{"line":638,"column":6},"end":{"line":638,"column":6}}]},"66":{"line":643,"type":"if","locations":[{"start":{"line":643,"column":6},"end":{"line":643,"column":6}},{"start":{"line":643,"column":6},"end":{"line":643,"column":6}}]},"67":{"line":668,"type":"if","locations":[{"start":{"line":668,"column":4},"end":{"line":668,"column":4}},{"start":{"line":668,"column":4},"end":{"line":668,"column":4}}]},"68":{"line":669,"type":"if","locations":[{"start":{"line":669,"column":6},"end":{"line":669,"column":6}},{"start":{"line":669,"column":6},"end":{"line":669,"column":6}}]},"69":{"line":677,"type":"if","locations":[{"start":{"line":677,"column":8},"end":{"line":677,"column":8}},{"start":{"line":677,"column":8},"end":{"line":677,"column":8}}]},"70":{"line":690,"type":"if","locations":[{"start":{"line":690,"column":4},"end":{"line":690,"column":4}},{"start":{"line":690,"column":4},"end":{"line":690,"column":4}}]},"71":{"line":690,"type":"binary-expr","locations":[{"start":{"line":690,"column":8},"end":{"line":690,"column":44}},{"start":{"line":690,"column":48},"end":{"line":690,"column":55}},{"start":{"line":690,"column":59},"end":{"line":690,"column":78}}]},"72":{"line":698,"type":"if","locations":[{"start":{"line":698,"column":4},"end":{"line":698,"column":4}},{"start":{"line":698,"column":4},"end":{"line":698,"column":4}}]},"73":{"line":701,"type":"if","locations":[{"start":{"line":701,"column":4},"end":{"line":701,"column":4}},{"start":{"line":701,"column":4},"end":{"line":701,"column":4}}]},"74":{"line":701,"type":"binary-expr","locations":[{"start":{"line":701,"column":8},"end":{"line":701,"column":28}},{"start":{"line":701,"column":32},"end":{"line":701,"column":36}}]},"75":{"line":704,"type":"if","locations":[{"start":{"line":704,"column":4},"end":{"line":704,"column":4}},{"start":{"line":704,"column":4},"end":{"line":704,"column":4}}]},"76":{"line":708,"type":"if","locations":[{"start":{"line":708,"column":4},"end":{"line":708,"column":4}},{"start":{"line":708,"column":4},"end":{"line":708,"column":4}}]},"77":{"line":726,"type":"binary-expr","locations":[{"start":{"line":726,"column":12},"end":{"line":726,"column":17}},{"start":{"line":726,"column":21},"end":{"line":726,"column":37}}]},"78":{"line":730,"type":"if","locations":[{"start":{"line":730,"column":6},"end":{"line":730,"column":6}},{"start":{"line":730,"column":6},"end":{"line":730,"column":6}}]},"79":{"line":734,"type":"if","locations":[{"start":{"line":734,"column":6},"end":{"line":734,"column":6}},{"start":{"line":734,"column":6},"end":{"line":734,"column":6}}]},"80":{"line":739,"type":"if","locations":[{"start":{"line":739,"column":6},"end":{"line":739,"column":6}},{"start":{"line":739,"column":6},"end":{"line":739,"column":6}}]},"81":{"line":760,"type":"binary-expr","locations":[{"start":{"line":760,"column":17},"end":{"line":760,"column":27}},{"start":{"line":760,"column":31},"end":{"line":760,"column":32}}]},"82":{"line":761,"type":"if","locations":[{"start":{"line":761,"column":4},"end":{"line":761,"column":4}},{"start":{"line":761,"column":4},"end":{"line":761,"column":4}}]},"83":{"line":772,"type":"if","locations":[{"start":{"line":772,"column":4},"end":{"line":772,"column":4}},{"start":{"line":772,"column":4},"end":{"line":772,"column":4}}]},"84":{"line":777,"type":"if","locations":[{"start":{"line":777,"column":4},"end":{"line":777,"column":4}},{"start":{"line":777,"column":4},"end":{"line":777,"column":4}}]},"85":{"line":780,"type":"if","locations":[{"start":{"line":780,"column":4},"end":{"line":780,"column":4}},{"start":{"line":780,"column":4},"end":{"line":780,"column":4}}]},"86":{"line":786,"type":"if","locations":[{"start":{"line":786,"column":4},"end":{"line":786,"column":4}},{"start":{"line":786,"column":4},"end":{"line":786,"column":4}}]},"87":{"line":791,"type":"if","locations":[{"start":{"line":791,"column":6},"end":{"line":791,"column":6}},{"start":{"line":791,"column":6},"end":{"line":791,"column":6}}]},"88":{"line":796,"type":"if","locations":[{"start":{"line":796,"column":8},"end":{"line":796,"column":8}},{"start":{"line":796,"column":8},"end":{"line":796,"column":8}}]},"89":{"line":803,"type":"if","locations":[{"start":{"line":803,"column":4},"end":{"line":803,"column":4}},{"start":{"line":803,"column":4},"end":{"line":803,"column":4}}]},"90":{"line":808,"type":"if","locations":[{"start":{"line":808,"column":6},"end":{"line":808,"column":6}},{"start":{"line":808,"column":6},"end":{"line":808,"column":6}}]},"91":{"line":813,"type":"if","locations":[{"start":{"line":813,"column":8},"end":{"line":813,"column":8}},{"start":{"line":813,"column":8},"end":{"line":813,"column":8}}]},"92":{"line":820,"type":"if","locations":[{"start":{"line":820,"column":4},"end":{"line":820,"column":4}},{"start":{"line":820,"column":4},"end":{"line":820,"column":4}}]},"93":{"line":826,"type":"if","locations":[{"start":{"line":826,"column":6},"end":{"line":826,"column":6}},{"start":{"line":826,"column":6},"end":{"line":826,"column":6}}]},"94":{"line":832,"type":"if","locations":[{"start":{"line":832,"column":4},"end":{"line":832,"column":4}},{"start":{"line":832,"column":4},"end":{"line":832,"column":4}}]},"95":{"line":837,"type":"if","locations":[{"start":{"line":837,"column":6},"end":{"line":837,"column":6}},{"start":{"line":837,"column":6},"end":{"line":837,"column":6}}]},"96":{"line":844,"type":"if","locations":[{"start":{"line":844,"column":4},"end":{"line":844,"column":4}},{"start":{"line":844,"column":4},"end":{"line":844,"column":4}}]},"97":{"line":850,"type":"if","locations":[{"start":{"line":850,"column":4},"end":{"line":850,"column":4}},{"start":{"line":850,"column":4},"end":{"line":850,"column":4}}]},"98":{"line":854,"type":"if","locations":[{"start":{"line":854,"column":4},"end":{"line":854,"column":4}},{"start":{"line":854,"column":4},"end":{"line":854,"column":4}}]},"99":{"line":858,"type":"if","locations":[{"start":{"line":858,"column":4},"end":{"line":858,"column":4}},{"start":{"line":858,"column":4},"end":{"line":858,"column":4}}]},"100":{"line":862,"type":"if","locations":[{"start":{"line":862,"column":4},"end":{"line":862,"column":4}},{"start":{"line":862,"column":4},"end":{"line":862,"column":4}}]},"101":{"line":868,"type":"if","locations":[{"start":{"line":868,"column":6},"end":{"line":868,"column":6}},{"start":{"line":868,"column":6},"end":{"line":868,"column":6}}]},"102":{"line":871,"type":"if","locations":[{"start":{"line":871,"column":6},"end":{"line":871,"column":6}},{"start":{"line":871,"column":6},"end":{"line":871,"column":6}}]},"103":{"line":892,"type":"if","locations":[{"start":{"line":892,"column":6},"end":{"line":892,"column":6}},{"start":{"line":892,"column":6},"end":{"line":892,"column":6}}]},"104":{"line":919,"type":"binary-expr","locations":[{"start":{"line":919,"column":17},"end":{"line":919,"column":27}},{"start":{"line":919,"column":31},"end":{"line":919,"column":32}}]},"105":{"line":921,"type":"if","locations":[{"start":{"line":921,"column":4},"end":{"line":921,"column":4}},{"start":{"line":921,"column":4},"end":{"line":921,"column":4}}]},"106":{"line":924,"type":"if","locations":[{"start":{"line":924,"column":4},"end":{"line":924,"column":4}},{"start":{"line":924,"column":4},"end":{"line":924,"column":4}}]},"107":{"line":924,"type":"binary-expr","locations":[{"start":{"line":924,"column":8},"end":{"line":924,"column":49}},{"start":{"line":924,"column":53},"end":{"line":924,"column":111}}]},"108":{"line":930,"type":"if","locations":[{"start":{"line":930,"column":4},"end":{"line":930,"column":4}},{"start":{"line":930,"column":4},"end":{"line":930,"column":4}}]},"109":{"line":930,"type":"binary-expr","locations":[{"start":{"line":930,"column":8},"end":{"line":930,"column":47}},{"start":{"line":931,"column":8},"end":{"line":931,"column":76}}]},"110":{"line":937,"type":"if","locations":[{"start":{"line":937,"column":4},"end":{"line":937,"column":4}},{"start":{"line":937,"column":4},"end":{"line":937,"column":4}}]},"111":{"line":943,"type":"if","locations":[{"start":{"line":943,"column":4},"end":{"line":943,"column":4}},{"start":{"line":943,"column":4},"end":{"line":943,"column":4}}]},"112":{"line":944,"type":"if","locations":[{"start":{"line":944,"column":6},"end":{"line":944,"column":6}},{"start":{"line":944,"column":6},"end":{"line":944,"column":6}}]},"113":{"line":948,"type":"if","locations":[{"start":{"line":948,"column":6},"end":{"line":948,"column":6}},{"start":{"line":948,"column":6},"end":{"line":948,"column":6}}]},"114":{"line":954,"type":"if","locations":[{"start":{"line":954,"column":4},"end":{"line":954,"column":4}},{"start":{"line":954,"column":4},"end":{"line":954,"column":4}}]},"115":{"line":961,"type":"if","locations":[{"start":{"line":961,"column":6},"end":{"line":961,"column":6}},{"start":{"line":961,"column":6},"end":{"line":961,"column":6}}]},"116":{"line":968,"type":"if","locations":[{"start":{"line":968,"column":4},"end":{"line":968,"column":4}},{"start":{"line":968,"column":4},"end":{"line":968,"column":4}}]},"117":{"line":975,"type":"if","locations":[{"start":{"line":975,"column":6},"end":{"line":975,"column":6}},{"start":{"line":975,"column":6},"end":{"line":975,"column":6}}]},"118":{"line":983,"type":"if","locations":[{"start":{"line":983,"column":4},"end":{"line":983,"column":4}},{"start":{"line":983,"column":4},"end":{"line":983,"column":4}}]},"119":{"line":990,"type":"if","locations":[{"start":{"line":990,"column":6},"end":{"line":990,"column":6}},{"start":{"line":990,"column":6},"end":{"line":990,"column":6}}]},"120":{"line":997,"type":"if","locations":[{"start":{"line":997,"column":4},"end":{"line":997,"column":4}},{"start":{"line":997,"column":4},"end":{"line":997,"column":4}}]},"121":{"line":1003,"type":"if","locations":[{"start":{"line":1003,"column":4},"end":{"line":1003,"column":4}},{"start":{"line":1003,"column":4},"end":{"line":1003,"column":4}}]},"122":{"line":1008,"type":"if","locations":[{"start":{"line":1008,"column":6},"end":{"line":1008,"column":6}},{"start":{"line":1008,"column":6},"end":{"line":1008,"column":6}}]},"123":{"line":1033,"type":"if","locations":[{"start":{"line":1033,"column":4},"end":{"line":1033,"column":4}},{"start":{"line":1033,"column":4},"end":{"line":1033,"column":4}}]},"124":{"line":1044,"type":"switch","locations":[{"start":{"line":1045,"column":8},"end":{"line":1055,"column":16}},{"start":{"line":1056,"column":8},"end":{"line":1066,"column":16}},{"start":{"line":1067,"column":8},"end":{"line":1074,"column":16}}]},"125":{"line":1046,"type":"if","locations":[{"start":{"line":1046,"column":10},"end":{"line":1046,"column":10}},{"start":{"line":1046,"column":10},"end":{"line":1046,"column":10}}]},"126":{"line":1049,"type":"if","locations":[{"start":{"line":1049,"column":10},"end":{"line":1049,"column":10}},{"start":{"line":1049,"column":10},"end":{"line":1049,"column":10}}]},"127":{"line":1057,"type":"if","locations":[{"start":{"line":1057,"column":10},"end":{"line":1057,"column":10}},{"start":{"line":1057,"column":10},"end":{"line":1057,"column":10}}]},"128":{"line":1057,"type":"binary-expr","locations":[{"start":{"line":1057,"column":14},"end":{"line":1057,"column":26}},{"start":{"line":1057,"column":30},"end":{"line":1057,"column":105}}]},"129":{"line":1068,"type":"if","locations":[{"start":{"line":1068,"column":10},"end":{"line":1068,"column":10}},{"start":{"line":1068,"column":10},"end":{"line":1068,"column":10}}]},"130":{"line":1068,"type":"binary-expr","locations":[{"start":{"line":1068,"column":14},"end":{"line":1068,"column":30}},{"start":{"line":1068,"column":34},"end":{"line":1068,"column":46}}]},"131":{"line":1077,"type":"if","locations":[{"start":{"line":1077,"column":4},"end":{"line":1077,"column":4}},{"start":{"line":1077,"column":4},"end":{"line":1077,"column":4}}]},"132":{"line":1090,"type":"if","locations":[{"start":{"line":1090,"column":4},"end":{"line":1090,"column":4}},{"start":{"line":1090,"column":4},"end":{"line":1090,"column":4}}]},"133":{"line":1195,"type":"if","locations":[{"start":{"line":1195,"column":2},"end":{"line":1195,"column":2}},{"start":{"line":1195,"column":2},"end":{"line":1195,"column":2}}]},"134":{"line":1199,"type":"if","locations":[{"start":{"line":1199,"column":2},"end":{"line":1199,"column":2}},{"start":{"line":1199,"column":2},"end":{"line":1199,"column":2}}]},"135":{"line":1224,"type":"if","locations":[{"start":{"line":1224,"column":2},"end":{"line":1224,"column":2}},{"start":{"line":1224,"column":2},"end":{"line":1224,"column":2}}]},"136":{"line":1227,"type":"if","locations":[{"start":{"line":1227,"column":4},"end":{"line":1227,"column":4}},{"start":{"line":1227,"column":4},"end":{"line":1227,"column":4}}]},"137":{"line":1227,"type":"binary-expr","locations":[{"start":{"line":1227,"column":8},"end":{"line":1227,"column":48}},{"start":{"line":1227,"column":52},"end":{"line":1227,"column":77}}]},"138":{"line":1232,"type":"if","locations":[{"start":{"line":1232,"column":2},"end":{"line":1232,"column":2}},{"start":{"line":1232,"column":2},"end":{"line":1232,"column":2}}]},"139":{"line":1235,"type":"if","locations":[{"start":{"line":1235,"column":2},"end":{"line":1235,"column":2}},{"start":{"line":1235,"column":2},"end":{"line":1235,"column":2}}]},"140":{"line":1236,"type":"if","locations":[{"start":{"line":1236,"column":4},"end":{"line":1236,"column":4}},{"start":{"line":1236,"column":4},"end":{"line":1236,"column":4}}]},"141":{"line":1246,"type":"if","locations":[{"start":{"line":1246,"column":2},"end":{"line":1246,"column":2}},{"start":{"line":1246,"column":2},"end":{"line":1246,"column":2}}]},"142":{"line":1247,"type":"if","locations":[{"start":{"line":1247,"column":4},"end":{"line":1247,"column":4}},{"start":{"line":1247,"column":4},"end":{"line":1247,"column":4}}]},"143":{"line":1250,"type":"if","locations":[{"start":{"line":1250,"column":9},"end":{"line":1250,"column":9}},{"start":{"line":1250,"column":9},"end":{"line":1250,"column":9}}]},"144":{"line":1253,"type":"if","locations":[{"start":{"line":1253,"column":4},"end":{"line":1253,"column":4}},{"start":{"line":1253,"column":4},"end":{"line":1253,"column":4}}]},"145":{"line":1257,"type":"if","locations":[{"start":{"line":1257,"column":4},"end":{"line":1257,"column":4}},{"start":{"line":1257,"column":4},"end":{"line":1257,"column":4}}]},"146":{"line":1264,"type":"if","locations":[{"start":{"line":1264,"column":4},"end":{"line":1264,"column":4}},{"start":{"line":1264,"column":4},"end":{"line":1264,"column":4}}]},"147":{"line":1269,"type":"if","locations":[{"start":{"line":1269,"column":2},"end":{"line":1269,"column":2}},{"start":{"line":1269,"column":2},"end":{"line":1269,"column":2}}]},"148":{"line":1284,"type":"if","locations":[{"start":{"line":1284,"column":2},"end":{"line":1284,"column":2}},{"start":{"line":1284,"column":2},"end":{"line":1284,"column":2}}]},"149":{"line":1287,"type":"if","locations":[{"start":{"line":1287,"column":7},"end":{"line":1287,"column":7}},{"start":{"line":1287,"column":7},"end":{"line":1287,"column":7}}]},"150":{"line":1289,"type":"if","locations":[{"start":{"line":1289,"column":4},"end":{"line":1289,"column":4}},{"start":{"line":1289,"column":4},"end":{"line":1289,"column":4}}]},"151":{"line":1289,"type":"binary-expr","locations":[{"start":{"line":1289,"column":8},"end":{"line":1289,"column":27}},{"start":{"line":1289,"column":31},"end":{"line":1289,"column":52}}]},"152":{"line":1293,"type":"if","locations":[{"start":{"line":1293,"column":7},"end":{"line":1293,"column":7}},{"start":{"line":1293,"column":7},"end":{"line":1293,"column":7}}]},"153":{"line":1296,"type":"if","locations":[{"start":{"line":1296,"column":7},"end":{"line":1296,"column":7}},{"start":{"line":1296,"column":7},"end":{"line":1296,"column":7}}]},"154":{"line":1299,"type":"if","locations":[{"start":{"line":1299,"column":7},"end":{"line":1299,"column":7}},{"start":{"line":1299,"column":7},"end":{"line":1299,"column":7}}]},"155":{"line":1302,"type":"if","locations":[{"start":{"line":1302,"column":7},"end":{"line":1302,"column":7}},{"start":{"line":1302,"column":7},"end":{"line":1302,"column":7}}]},"156":{"line":1305,"type":"if","locations":[{"start":{"line":1305,"column":7},"end":{"line":1305,"column":7}},{"start":{"line":1305,"column":7},"end":{"line":1305,"column":7}}]},"157":{"line":1308,"type":"if","locations":[{"start":{"line":1308,"column":7},"end":{"line":1308,"column":7}},{"start":{"line":1308,"column":7},"end":{"line":1308,"column":7}}]},"158":{"line":1311,"type":"if","locations":[{"start":{"line":1311,"column":7},"end":{"line":1311,"column":7}},{"start":{"line":1311,"column":7},"end":{"line":1311,"column":7}}]},"159":{"line":1314,"type":"if","locations":[{"start":{"line":1314,"column":7},"end":{"line":1314,"column":7}},{"start":{"line":1314,"column":7},"end":{"line":1314,"column":7}}]},"160":{"line":1317,"type":"if","locations":[{"start":{"line":1317,"column":7},"end":{"line":1317,"column":7}},{"start":{"line":1317,"column":7},"end":{"line":1317,"column":7}}]},"161":{"line":1320,"type":"if","locations":[{"start":{"line":1320,"column":7},"end":{"line":1320,"column":7}},{"start":{"line":1320,"column":7},"end":{"line":1320,"column":7}}]},"162":{"line":1323,"type":"if","locations":[{"start":{"line":1323,"column":7},"end":{"line":1323,"column":7}},{"start":{"line":1323,"column":7},"end":{"line":1323,"column":7}}]},"163":{"line":1326,"type":"if","locations":[{"start":{"line":1326,"column":7},"end":{"line":1326,"column":7}},{"start":{"line":1326,"column":7},"end":{"line":1326,"column":7}}]},"164":{"line":1326,"type":"binary-expr","locations":[{"start":{"line":1326,"column":11},"end":{"line":1326,"column":25}},{"start":{"line":1326,"column":29},"end":{"line":1326,"column":44}}]},"165":{"line":1330,"type":"if","locations":[{"start":{"line":1330,"column":2},"end":{"line":1330,"column":2}},{"start":{"line":1330,"column":2},"end":{"line":1330,"column":2}}]},"166":{"line":1343,"type":"if","locations":[{"start":{"line":1343,"column":2},"end":{"line":1343,"column":2}},{"start":{"line":1343,"column":2},"end":{"line":1343,"column":2}}]},"167":{"line":1347,"type":"if","locations":[{"start":{"line":1347,"column":2},"end":{"line":1347,"column":2}},{"start":{"line":1347,"column":2},"end":{"line":1347,"column":2}}]},"168":{"line":1363,"type":"if","locations":[{"start":{"line":1363,"column":2},"end":{"line":1363,"column":2}},{"start":{"line":1363,"column":2},"end":{"line":1363,"column":2}}]},"169":{"line":1367,"type":"if","locations":[{"start":{"line":1367,"column":2},"end":{"line":1367,"column":2}},{"start":{"line":1367,"column":2},"end":{"line":1367,"column":2}}]},"170":{"line":1381,"type":"if","locations":[{"start":{"line":1381,"column":2},"end":{"line":1381,"column":2}},{"start":{"line":1381,"column":2},"end":{"line":1381,"column":2}}]},"171":{"line":1425,"type":"binary-expr","locations":[{"start":{"line":1425,"column":9},"end":{"line":1425,"column":13}},{"start":{"line":1425,"column":17},"end":{"line":1425,"column":20}}]},"172":{"line":1426,"type":"binary-expr","locations":[{"start":{"line":1426,"column":10},"end":{"line":1426,"column":15}},{"start":{"line":1426,"column":19},"end":{"line":1426,"column":22}}]},"173":{"line":1432,"type":"if","locations":[{"start":{"line":1432,"column":4},"end":{"line":1432,"column":4}},{"start":{"line":1432,"column":4},"end":{"line":1432,"column":4}}]},"174":{"line":1435,"type":"if","locations":[{"start":{"line":1435,"column":4},"end":{"line":1435,"column":4}},{"start":{"line":1435,"column":4},"end":{"line":1435,"column":4}}]},"175":{"line":1438,"type":"if","locations":[{"start":{"line":1438,"column":4},"end":{"line":1438,"column":4}},{"start":{"line":1438,"column":4},"end":{"line":1438,"column":4}}]},"176":{"line":1438,"type":"binary-expr","locations":[{"start":{"line":1438,"column":8},"end":{"line":1438,"column":19}},{"start":{"line":1438,"column":23},"end":{"line":1438,"column":32}}]}},"code":["\"use strict\";","var util = require('util');","","var types = require('./types');","var dataTypes = types.dataTypes;","var Long = types.Long;","var Integer = types.Integer;","var BigDecimal = types.BigDecimal;","var utils = require('./utils');","","var uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;","var int16Zero = new Buffer([0, 0]);","var int32Zero = new Buffer([0, 0, 0, 0]);","var complexTypeNames = Object.freeze({","  list      : 'org.apache.cassandra.db.marshal.ListType',","  set       : 'org.apache.cassandra.db.marshal.SetType',","  map       : 'org.apache.cassandra.db.marshal.MapType',","  udt       : 'org.apache.cassandra.db.marshal.UserType',","  tuple     : 'org.apache.cassandra.db.marshal.TupleType',","  frozen    : 'org.apache.cassandra.db.marshal.FrozenType',","  reversed  : 'org.apache.cassandra.db.marshal.ReversedType',","  composite : 'org.apache.cassandra.db.marshal.CompositeType',","  empty     : 'org.apache.cassandra.db.marshal.EmptyType',","  collection: 'org.apache.cassandra.db.marshal.ColumnToCollectionType'","});","var cqlNames = Object.freeze({","  frozen: 'frozen',","  list: 'list',","  'set': 'set',","  map: 'map',","  tuple: 'tuple',","  empty: 'empty'","});","var singleTypeNames = Object.freeze({","  'org.apache.cassandra.db.marshal.UTF8Type':           dataTypes.varchar,","  'org.apache.cassandra.db.marshal.AsciiType':          dataTypes.ascii,","  'org.apache.cassandra.db.marshal.UUIDType':           dataTypes.uuid,","  'org.apache.cassandra.db.marshal.TimeUUIDType':       dataTypes.timeuuid,","  'org.apache.cassandra.db.marshal.Int32Type':          dataTypes.int,","  'org.apache.cassandra.db.marshal.BytesType':          dataTypes.blob,","  'org.apache.cassandra.db.marshal.FloatType':          dataTypes.float,","  'org.apache.cassandra.db.marshal.DoubleType':         dataTypes.double,","  'org.apache.cassandra.db.marshal.BooleanType':        dataTypes.boolean,","  'org.apache.cassandra.db.marshal.InetAddressType':    dataTypes.inet,","  'org.apache.cassandra.db.marshal.SimpleDateType':     dataTypes.date,","  'org.apache.cassandra.db.marshal.TimeType':           dataTypes.time,","  'org.apache.cassandra.db.marshal.ShortType':          dataTypes.smallint,","  'org.apache.cassandra.db.marshal.ByteType':           dataTypes.tinyint,","  'org.apache.cassandra.db.marshal.DateType':           dataTypes.timestamp,","  'org.apache.cassandra.db.marshal.TimestampType':      dataTypes.timestamp,","  'org.apache.cassandra.db.marshal.LongType':           dataTypes.bigint,","  'org.apache.cassandra.db.marshal.DecimalType':        dataTypes.decimal,","  'org.apache.cassandra.db.marshal.IntegerType':        dataTypes.varint,","  'org.apache.cassandra.db.marshal.CounterColumnType':  dataTypes.counter","});","var singleFqTypeNamesLength = Object.keys(singleTypeNames).reduce(function (previous, current) {","  return current.length > previous ? current.length : previous;","}, 0);","var nullValueBuffer = new Buffer([255, 255, 255, 255]);","var unsetValueBuffer = new Buffer([255, 255, 255, 254]);","","/**"," * Serializes and deserializes to and from a CQL type and a Javascript Type."," * @param {Number} protocolVersion"," * @param {ClientOptions} options"," * @constructor"," */","function Encoder(protocolVersion, options) {","  this.encodingOptions = options.encoding || utils.emptyObject;","  defineInstanceMembers.call(this);","  this.setProtocolVersion(protocolVersion);","  setEncoders.call(this);","  if (this.encodingOptions.copyBuffer) {","    this.handleBuffer = handleBufferCopy;","  }","  else {","    this.handleBuffer = handleBufferRef;","  }","}","","/**"," * Declares the privileged instance members."," * @private"," */","function defineInstanceMembers() {","  /**","   * Sets the protocol version and the encoding/decoding methods depending on the protocol version","   * @param {Number} value","   * @ignore","   * @internal","   */","  this.setProtocolVersion = function (value) {","    this.protocolVersion = value;","    //Set the collection serialization based on the protocol version","    this.decodeCollectionLength = decodeCollectionLengthV3;","    this.getLengthBuffer = getLengthBufferV3;","    this.collectionLengthSize = 4;","    if (this.protocolVersion < 3) {","      this.decodeCollectionLength = decodeCollectionLengthV2;","      this.getLengthBuffer = getLengthBufferV2;","      this.collectionLengthSize = 2;","    }","  };","  //Decoding methods","  this.decodeBlob = function (bytes) {","    return this.handleBuffer(bytes);","  };","  this.decodeUtf8String = function (bytes) {","    return bytes.toString('utf8');","  };","  this.decodeAsciiString = function (bytes) {","    return bytes.toString('ascii');","  };","  this.decodeBoolean = function (bytes) {","    return !!bytes.readUInt8(0);","  };","  this.decodeDouble = function (bytes) {","    return bytes.readDoubleBE(0);","  };","  this.decodeFloat = function (bytes) {","    return bytes.readFloatBE(0);","  };","  this.decodeInt = function (bytes) {","    return bytes.readInt32BE(0);","  };","  this.decodeSmallint = function (bytes) {","    return bytes.readInt16BE(0);","  };","  this.decodeTinyint = function (bytes) {","    return bytes.readInt8(0);","  };","  this.decodeLong = function (bytes) {","    return Long.fromBuffer(bytes);","  };","  this.decodeVarint = function (bytes) {","    return Integer.fromBuffer(bytes);","  };","  this.decodeDecimal = function(bytes) {","    return BigDecimal.fromBuffer(bytes);","  };","  this.decodeTimestamp = function(bytes) {","    return new Date(this.decodeLong(bytes).toNumber());","  };","  this.decodeDate = function (bytes) {","    return types.LocalDate.fromBuffer(bytes);","  };","  this.decodeTime = function (bytes) {","    return types.LocalTime.fromBuffer(bytes);","  };","  /*","   * Reads a list from bytes","   */","  this.decodeList = function (bytes, subtype) {","    var totalItems = this.decodeCollectionLength(bytes, 0);","    var offset = this.collectionLengthSize;","    var list = new Array(totalItems);","    for(var i = 0; i < totalItems; i++) {","      //bytes length of the item","      var length = this.decodeCollectionLength(bytes, offset);","      offset += this.collectionLengthSize;","      //slice it","      list[i] = this.decode(bytes.slice(offset, offset+length), subtype);","      offset += length;","    }","    return list;","  };","  /*","   * Reads a Set from bytes","   */","  this.decodeSet = function (bytes, subtype) {","    var arr = this.decodeList(bytes, subtype);","    if (this.encodingOptions.set) {","      var setConstructor = this.encodingOptions.set;","      return new setConstructor(arr);","    }","    return arr;","  };","  /*","   * Reads a map (key / value) from bytes","   */","  this.decodeMap = function (bytes, subtypes) {","    var map;","    var totalItems = this.decodeCollectionLength(bytes, 0);","    var offset = this.collectionLengthSize;","    var self = this;","    function readValues(callback, thisArg) {","      for (var i = 0; i < totalItems; i++) {","        var keyLength = self.decodeCollectionLength(bytes, offset);","        offset += self.collectionLengthSize;","        var key = self.decode(bytes.slice(offset, offset + keyLength), subtypes[0]);","        offset += keyLength;","        var valueLength = self.decodeCollectionLength(bytes, offset);","        offset += self.collectionLengthSize;","        if (valueLength <= 0) {","          callback.call(thisArg, key, null);","          continue;","        }","        var value = self.decode(bytes.slice(offset, offset + valueLength), subtypes[1]);","        offset += valueLength;","        callback.call(thisArg, key, value);","      }","    }","    if (this.encodingOptions.map) {","      var mapConstructor = this.encodingOptions.map;","      map = new mapConstructor();","      readValues(map.set, map);","    }","    else {","      map = {};","      readValues(function (key, value) {","        map[key] = value;","      });","    }","    return map;","  };","  this.decodeUuid = function (bytes) {","    return new types.Uuid(this.handleBuffer(bytes));","  };","  this.decodeTimeUuid = function (bytes) {","    return new types.TimeUuid(this.handleBuffer(bytes));","  };","  this.decodeInet = function (bytes) {","    return new types.InetAddress(this.handleBuffer(bytes));","  };","  /**","   * Decodes a user defined type into an object","   * @param {Buffer} bytes","   * @param {{fields: Array}} udtInfo","   * @private","   */","  this.decodeUdt = function (bytes, udtInfo) {","    var result = {};","    var offset = 0;","    for (var i = 0; i < udtInfo.fields.length && offset < bytes.length; i++) {","      //bytes length of the field value","      var length = bytes.readInt32BE(offset);","      offset += 4;","      //slice it","      var field = udtInfo.fields[i];","      if (length < 0) {","        result[field.name] = null;","        continue;","      }","      result[field.name] = this.decode(bytes.slice(offset, offset+length), field.type);","      offset += length;","    }","    return result;","  };","  this.decodeTuple = function (bytes, tupleInfo) {","    var elements = new Array(tupleInfo.length);","    var offset = 0;","    for (var i = 0; i < tupleInfo.length; i++) {","      var length = bytes.readInt32BE(offset);","      offset += 4;","      if (length < 0) {","        elements[i] = null;","        continue;","      }","      elements[i] = this.decode(bytes.slice(offset, offset+length), tupleInfo[i]);","      offset += length;","    }","    return new types.Tuple(elements);","  };","  //Encoding methods","  this.encodeFloat = function (value) {","    if (typeof value !== 'number') {","      throw new TypeError('Expected Number, obtained ' + util.inspect(value));","    }","    var buf = new Buffer(4);","    buf.writeFloatBE(value, 0);","    return buf;","  };","  this.encodeDouble = function (value) {","    if (typeof value !== 'number') {","      throw new TypeError('Expected Number, obtained ' + util.inspect(value));","    }","    var buf = new Buffer(8);","    buf.writeDoubleBE(value, 0);","    return buf;","  };","  /**","   * @param {Date|String|Long|Number} value","   * @private","   */","  this.encodeTimestamp = function (value) {","    var originalValue = value;","    if (typeof value === 'string') {","      value = new Date(value);","    }","    if (value instanceof Date) {","      //milliseconds since epoch","      value = value.getTime();","      if (isNaN(value)) {","        throw new TypeError('Invalid date: ' + originalValue);","      }","    }","    //noinspection JSCheckFunctionSignatures","    return this.encodeLong(value);","  };","  /**","   * @param {Date|String|LocalDate} value","   * @returns {Buffer}","   * @throws {TypeError}","   * @private","   */","  this.encodeDate = function (value) {","    var originalValue = value;","    try {","      if (typeof value === 'string') {","        value = types.LocalDate.fromString(value);","      }","      if (value instanceof Date) {","        value = types.LocalDate.fromDate(value);","      }","    }","    catch (err) {","      //Wrap into a TypeError","      throw new TypeError('LocalDate could not be parsed ' + err);","    }","    if (!(value instanceof types.LocalDate)) {","      throw new TypeError('Expected Date/String/LocalDate, obtained ' + util.inspect(originalValue));","    }","    return value.toBuffer();","  };","  /**","   * @param {String|LocalDate} value","   * @returns {Buffer}","   * @throws {TypeError}","   * @private","   */","  this.encodeTime = function (value) {","    var originalValue = value;","    try {","      if (typeof value === 'string') {","        value = types.LocalTime.fromString(value);","      }","    }","    catch (err) {","      //Wrap into a TypeError","      throw new TypeError('LocalTime could not be parsed ' + err);","    }","    if (!(value instanceof types.LocalTime)) {","      throw new TypeError('Expected String/LocalTime, obtained ' + util.inspect(originalValue));","    }","    return value.toBuffer();","  };","  /**","   * @param {Uuid|String|Buffer} value","   * @private","   */","  this.encodeUuid = function (value) {","    if (typeof value === 'string') {","      try {","        value = types.Uuid.fromString(value);","      }","      catch (err) {","        throw new TypeError(err.message);","      }","    }","    if (value instanceof types.Uuid) {","      value = value.getBuffer();","    }","    if (!(value instanceof Buffer)) {","      throw new TypeError('Not a valid Uuid, expected Uuid/String/Buffer, obtained ' + util.inspect(value));","    }","    return value;","  };","  /**","   * @param {String|InetAddress|Buffer} value","   * @returns {Buffer}","   * @private","   */","  this.encodeInet = function (value) {","    if (typeof value === 'string') {","      value = types.InetAddress.fromString(value);","    }","    if (value instanceof types.InetAddress) {","      value = value.getBuffer();","    }","    if (!(value instanceof Buffer)) {","      throw new TypeError('Not a valid Inet, expected InetAddress/Buffer, obtained ' + util.inspect(value));","    }","    return value;","  };","  /**","   * @param {Long|Buffer|String|Number} value","   * @private","   */","  this.encodeLong = function (value) {","    if (typeof value === 'number') {","      value = Long.fromNumber(value);","    }","    if (typeof value === 'string') {","      value = Long.fromString(value);","    }","    var buf = null;","    if (value instanceof Buffer) {","      buf = value;","    }","    if (value instanceof Long) {","      //noinspection JSCheckFunctionSignatures","      buf = Long.toBuffer(value);","    }","    if (buf === null) {","      throw new TypeError('Not a valid bigint, expected Long/Number/String/Buffer, obtained ' + util.inspect(value));","    }","    return buf;","  };","  /**","   * @param {Integer|Buffer|String|Number} value","   * @returns {Buffer}","   * @private","   */","  this.encodeVarint = function (value) {","    if (typeof value === 'number') {","      value = Integer.fromNumber(value);","    }","    if (typeof value === 'string') {","      value = Integer.fromString(value);","    }","    var buf = null;","    if (value instanceof Buffer) {","      buf = value;","    }","    if (value instanceof Integer) {","      buf = Integer.toBuffer(value);","    }","    if (buf === null) {","      throw new TypeError('Not a valid varint, expected Integer/Number/String/Buffer, obtained ' + util.inspect(value));","    }","    return buf;","  };","  /**","   * @param {BigDecimal|Buffer|String|Number} value","   * @returns {Buffer}","   * @private","   */","  this.encodeDecimal = function (value) {","    if (typeof value === 'number') {","      value = BigDecimal.fromNumber(value);","    }","    if (typeof value === 'string') {","      value = BigDecimal.fromString(value);","    }","    var buf = null;","    if (value instanceof Buffer) {","      buf = value;","    }","    if (value instanceof BigDecimal) {","      buf = BigDecimal.toBuffer(value);","    }","    if (buf === null) {","      throw new TypeError('Not a valid varint, expected BigDecimal/Number/String/Buffer, obtained ' + util.inspect(value));","    }","    return buf;","  };","  this.encodeString = function (value, encoding) {","    if (typeof value !== 'string') {","      throw new TypeError('Not a valid text value, expected String obtained ' + util.inspect(value));","    }","    return new Buffer(value, encoding);","  };","  this.encodeUtf8String = function (value) {","    return this.encodeString(value, 'utf8');","  };","  this.encodeAsciiString = function (value) {","    return this.encodeString(value, 'ascii');","  };","  this.encodeBlob = function (value) {","    if (!(value instanceof Buffer)) {","      throw new TypeError('Not a valid blob, expected Buffer obtained ' + util.inspect(value));","    }","    return value;","  };","  /**","   * @param {Boolean} value","   * @returns {Buffer}","   * @private","   */","  this.encodeBoolean = function (value) {","    return new Buffer([(value ? 1 : 0)]);","  };","  /**","   * @param {Number|String} value","   * @private","   */","  this.encodeInt = function (value) {","    if (isNaN(value)) {","      throw new TypeError('Expected Number, obtained ' + util.inspect(value));","    }","    var buf = new Buffer(4);","    buf.writeInt32BE(value, 0);","    return buf;","  };","  /**","   * @param {Number|String} value","   * @private","   */","  this.encodeSmallint = function (value) {","    if (isNaN(value)) {","      throw new TypeError('Expected Number, obtained ' + util.inspect(value));","    }","    var buf = new Buffer(2);","    buf.writeInt16BE(value, 0);","    return buf;","  };","  /**","   * @param {Number|String} value","   * @private","   */","  this.encodeTinyint = function (value) {","    if (isNaN(value)) {","      throw new TypeError('Expected Number, obtained ' + util.inspect(value));","    }","    var buf = new Buffer(1);","    buf.writeInt8(value, 0);","    return buf;","  };","  this.encodeList = function (value, subtype) {","    if (!util.isArray(value)) {","      throw new TypeError('Not a valid list value, expected Array obtained ' + util.inspect(value));","    }","    if (value.length === 0) {","      return null;","    }","    var parts = [];","    parts.push(this.getLengthBuffer(value));","    for (var i=0;i < value.length;i++) {","      var val = value[i];","      if (val === null || typeof val === 'undefined' || val === types.unset) {","        throw new TypeError('A collection can\\'t contain null or unset values');","      }","      var bytes = this.encode(val, subtype);","      //include item byte length","      parts.push(this.getLengthBuffer(bytes));","      //include item","      parts.push(bytes);","    }","    return Buffer.concat(parts);","  };","  this.encodeSet = function (value, subtype) {","    if (this.encodingOptions.set && value instanceof this.encodingOptions.set) {","      var arr = [];","      value.forEach(function (x) {","        arr.push(x);","      });","      return this.encodeList(arr, subtype);","    }","    return this.encodeList(value, subtype);","  };","  /**","   * Serializes a map into a Buffer","   * @param value","   * @param {Array} [subtypes]","   * @returns {Buffer}","   * @private","   */","  this.encodeMap = function (value, subtypes) {","    var parts = [];","    var propCounter = 0;","    var keySubtype = null;","    var valueSubtype = null;","    var self = this;","    if (subtypes) {","      keySubtype = subtypes[0];","      valueSubtype = subtypes[1];","    }","    function addItem(val, key) {","      if (key === null || typeof key === 'undefined' || key === types.unset) {","        throw new TypeError('A map can\\'t contain null or unset keys');","      }","      if (val === null || typeof val === 'undefined' || val === types.unset) {","        throw new TypeError('A map can\\'t contain null or unset values');","      }","      var keyBuffer = self.encode(key, keySubtype);","      //include item byte length","      parts.push(self.getLengthBuffer(keyBuffer));","      //include item","      parts.push(keyBuffer);","      //value","      var valueBuffer = self.encode(val, valueSubtype);","      //include item byte length","      parts.push(self.getLengthBuffer(valueBuffer));","      //include item","      if (valueBuffer !== null) {","        parts.push(valueBuffer);","      }","      propCounter++;","    }","    if (this.encodingOptions.map && value instanceof this.encodingOptions.map) {","      //Use Map#forEach() method to iterate","      value.forEach(addItem);","    }","    else {","      //Use object","      for (var key in value) {","        if (!value.hasOwnProperty(key)) {","          continue;","        }","        var val = value[key];","        addItem(val, key);","      }","    }","","    parts.unshift(this.getLengthBuffer(propCounter));","    return Buffer.concat(parts);","  };","  this.encodeUdt = function (value, udtInfo) {","    var parts = [];","    var totalLength = 0;","    for (var i = 0; i < udtInfo.fields.length; i++) {","      var field = udtInfo.fields[i];","      var item = this.encode(value[field.name], field.type);","      if (!item) {","        parts.push(nullValueBuffer);","        totalLength += 4;","        continue;","      }","      if (item === types.unset) {","        parts.push(unsetValueBuffer);","        totalLength += 4;","        continue;","      }","      var lengthBuffer = new Buffer(4);","      lengthBuffer.writeInt32BE(item.length, 0);","      parts.push(lengthBuffer);","      parts.push(item);","      totalLength += item.length + 4;","    }","    return Buffer.concat(parts, totalLength);","  };","  this.encodeTuple = function (value, tupleInfo) {","    var parts = [];","    var totalLength = 0;","    for (var i = 0; i < tupleInfo.length; i++) {","      var type = tupleInfo[i];","      var item = this.encode(value.get(i), type);","      if (!item) {","        parts.push(nullValueBuffer);","        totalLength += 4;","        continue;","      }","      if (item === types.unset) {","        parts.push(unsetValueBuffer);","        totalLength += 4;","        continue;","      }","      var lengthBuffer = new Buffer(4);","      lengthBuffer.writeInt32BE(item.length, 0);","      parts.push(lengthBuffer);","      parts.push(item);","      totalLength += item.length + 4;","    }","    return Buffer.concat(parts, totalLength);","  };","","  /**","   * If not provided, it uses the array of buffers or the parameters and hints to build the routingKey","   * @param {Array} params","   * @param {QueryOptions} options","   * @param [keys] parameter keys and positions","   * @throws TypeError","   * @internal","   * @ignore","   */","  this.setRoutingKey = function (params, options, keys) {","    var totalLength;","    if (util.isArray(options.routingKey)) {","      if (options.routingKey.length === 1) {","        options.routingKey = options.routingKey[0];","        return;","      }","      //Is a Composite key","      totalLength = 0;","      for (var i = 0; i < options.routingKey.length; i++) {","        var item = options.routingKey[i];","        if (!item) {","          //An routing key part may be null/undefined if provided by user","          //Or when there is a hardcoded parameter in the query","          //Clear the routing key","          options.routingKey = null;","          return;","        }","        totalLength += item.length + 3;","      }","      //Set the buffer containing the contents of the previous Array of buffers as routing key","      options.routingKey = concatRoutingKey(options.routingKey, totalLength);","      return;","    }","    if (options.routingKey instanceof Buffer || !params || params.length === 0) {","      //There is already a routing key","      // or no parameter indexes for routing were provided","      // or there are no parameters to build the routing key","      return;","    }","    var parts = [];","    totalLength = 0;","    if (options.routingIndexes) {","      totalLength = this._encodeRoutingKeyParts(parts, options.routingIndexes, params, options.hints);","    }","    if (options.routingNames && keys) {","      totalLength = this._encodeRoutingKeyParts(parts, options.routingNames, params, options.hints, keys);","    }","    if (totalLength === 0) {","      options.routingKey = null;","      return;","    }","    if (parts.length === 1) {","      options.routingKey = parts[0];","      return;","    }","    //its a composite partition key","    options.routingKey = concatRoutingKey(parts, totalLength);","  };","","  /**","   * @param {Array} parts","   * @param {Array} routingIndexes","   * @param {Array} params","   * @param {Array} hints","   * @param {Object} [keys]","   * @returns {Number} The total length","   * @private","   */","  this._encodeRoutingKeyParts = function (parts, routingIndexes, params, hints, keys) {","    hints = hints || utils.emptyArray;","    var totalLength = 0;","    for (var i = 0; i < routingIndexes.length; i++) {","      var paramIndex = routingIndexes[i];","      if (typeof paramIndex === 'undefined') {","        //probably undefined (parameter not found) or bad input from the user","        return 0;","      }","      if (keys) {","        //is composed of parameter names","        paramIndex = keys[paramIndex];","      }","      var item = this.encode(params[paramIndex], hints[paramIndex]);","      if (!item) {","        //bad input from the user","        return 0;","      }","      totalLength += item.length + 3;","      parts.push(item);","    }","    return totalLength;","  };","  /**","   * Parses a CQL name string into data type information","   * @param {String} keyspace","   * @param {String} typeName","   * @param {Number} startIndex","   * @param {Number|null} length","   * @param {Function} udtResolver","   * @param {Function} callback Callback invoked with err and  {{code: number, info: Object|Array|null, options: {frozen: Boolean}}}","   * @internal","   * @ignore","   */","  this.parseTypeName = function (keyspace, typeName, startIndex, length, udtResolver, callback) {","    startIndex = startIndex || 0;","    if (!length) {","      length = typeName.length;","    }","    var dataType = {","      code: 0,","      info: null,","      options: {","        frozen: false","      }","    };","    var innerTypes;","    if (typeName.indexOf(\"'\", startIndex) === startIndex) {","      //If quoted, this is a custom type.","      dataType.info = typeName.substr(startIndex+1, length-2);","      return callback(null, dataType);","    }","    if (!length) {","      length = typeName.length;","    }","    if (typeName.indexOf(cqlNames.frozen, startIndex) === startIndex) {","      //Remove the frozen token","      startIndex += cqlNames.frozen.length + 1;","      length -= cqlNames.frozen.length + 2;","      dataType.options.frozen = true;","    }","    if (typeName.indexOf(cqlNames.list, startIndex) === startIndex) {","      //move cursor across the name and bypass the angle brackets","      startIndex += cqlNames.list.length + 1;","      length -= cqlNames.list.length + 2;","      innerTypes = parseParams(typeName, startIndex, length, '<', '>');","      if (innerTypes.length !== 1) {","        return callback(new TypeError('Not a valid type ' + typeName));","      }","      dataType.code = dataTypes.list;","      return this.parseTypeName(keyspace, innerTypes[0], 0, null, udtResolver, function (err, childType) {","        if (err) {","          return callback(err);","        }","        dataType.info = childType;","        callback(null, dataType);","      });","    }","    if (typeName.indexOf(cqlNames.set, startIndex) === startIndex) {","      //move cursor across the name and bypass the angle brackets","      startIndex += cqlNames.set.length + 1;","      length -= cqlNames.set.length + 2;","      innerTypes = parseParams(typeName, startIndex, length, '<', '>');","      if (innerTypes.length !== 1) {","        return callback(new TypeError('Not a valid type ' + typeName));","      }","      dataType.code = dataTypes.set;","      return this.parseTypeName(keyspace, innerTypes[0], 0, null, udtResolver, function (err, childType) {","        if (err) {","          return callback(err);","        }","        dataType.info = childType;","        callback(null, dataType);","      });","    }","    if (typeName.indexOf(cqlNames.map, startIndex) === startIndex) {","      //move cursor across the name and bypass the angle brackets","      startIndex += cqlNames.map.length + 1;","      length -= cqlNames.map.length + 2;","      innerTypes = parseParams(typeName, startIndex, length, '<', '>');","      //It should contain the key and value types","      if (innerTypes.length !== 2) {","        return callback(new TypeError('Not a valid type ' + typeName));","      }","      dataType.code = dataTypes.map;","      return this._parseChildTypes(keyspace, dataType, innerTypes, udtResolver, callback);","    }","    if (typeName.indexOf(cqlNames.tuple, startIndex) === startIndex) {","      //move cursor across the name and bypass the angle brackets","      startIndex += cqlNames.tuple.length + 1;","      length -= cqlNames.tuple.length + 2;","      innerTypes = parseParams(typeName, startIndex, length, '<', '>');","      if (innerTypes.length < 1) {","        throw new TypeError('Not a valid type ' + typeName);","      }","      dataType.code = dataTypes.tuple;","      return this._parseChildTypes(keyspace, dataType, innerTypes, udtResolver, callback);","    }","    var quoted = typeName.indexOf('\"', startIndex) === startIndex;","    if (quoted) {","      //Remove quotes","      startIndex++;","      length -= 2;","    }","    //Quick check if its a single type","    if (startIndex > 0) {","      typeName = typeName.substr(startIndex, length);","    }","    // Un-escape double quotes if quoted.","    if (quoted) {","      typeName = typeName.replace('\"\"', '\"');","    }","    var typeCode = dataTypes[typeName];","    if (typeof typeCode === 'number') {","      dataType.code = typeCode;","      return callback(null, dataType);","    }","    if (typeName === cqlNames.empty) {","      //set as custom","      dataType.info = 'empty';","      return callback(null, dataType);","    }","    udtResolver(keyspace, typeName, function (err, udtInfo) {","      if (err) {","        return callback(err);","      }","      if (udtInfo) {","        dataType.code = dataTypes.udt;","        dataType.info = udtInfo;","        return callback(null, dataType);","      }","      callback(new TypeError('Not a valid type \"' + typeName + '\"'));","    });","  };","  /**","   * @param {String} keyspace","   * @param dataType","   * @param {Array} typeNames","   * @param {Function} udtResolver","   * @param {Function} callback","   * @private","   */","  this._parseChildTypes = function (keyspace, dataType, typeNames, udtResolver, callback) {","    var self = this;","    utils.mapSeries(typeNames, function (name, next) {","      self.parseTypeName(keyspace, name.trim(), 0, null, udtResolver, next);","    }, function (err, childTypes) {","      if (err) {","        return callback(err);","      }","      dataType.info = childTypes;","      callback(null, dataType);","    });","  };","","  /**","   * Parses a Cassandra fully-qualified class name string into data type information","   * @param {String} typeName","   * @param {Number} [startIndex]","   * @param {Number} [length]","   * @throws TypeError","   * @returns {{code: number, info: Object|Array|null, options: {frozen: Boolean, reversed: Boolean}}}","   * @internal","   * @ignore","   */","  this.parseFqTypeName = function (typeName, startIndex, length) {","    var dataType = {","      code: 0,","      info: null,","      options: {","        reversed: false,","        frozen: false","      }","    };","    startIndex = startIndex || 0;","    var innerTypes;","    if (!length) {","      length = typeName.length;","    }","    if (length > complexTypeNames.reversed.length && typeName.indexOf(complexTypeNames.reversed) === startIndex) {","      //Remove the reversed token","      startIndex += complexTypeNames.reversed.length + 1;","      length -= complexTypeNames.reversed.length + 2;","      dataType.options.reversed = true;","    }","    if (length > complexTypeNames.frozen.length &&","        typeName.indexOf(complexTypeNames.frozen, startIndex) === startIndex) {","      //Remove the frozen token","      startIndex += complexTypeNames.frozen.length + 1;","      length -= complexTypeNames.frozen.length + 2;","      dataType.options.frozen = true;","    }","    if (typeName === complexTypeNames.empty) {","      //set as custom","      dataType.info = 'empty';","      return dataType;","    }","    //Quick check if its a single type","    if (length <= singleFqTypeNamesLength) {","      if (startIndex > 0) {","        typeName = typeName.substr(startIndex, length);","      }","      var typeCode = singleTypeNames[typeName];","      if (typeof typeCode === 'number') {","        dataType.code = typeCode;","        return dataType;","      }","      throw new TypeError('Not a valid type \"' + typeName + '\"');","    }","    if (typeName.indexOf(complexTypeNames.list, startIndex) === startIndex) {","      //Its a list","      //org.apache.cassandra.db.marshal.ListType(innerType)","      //move cursor across the name and bypass the parenthesis","      startIndex += complexTypeNames.list.length + 1;","      length -= complexTypeNames.list.length + 2;","      innerTypes = parseParams(typeName, startIndex, length);","      if (innerTypes.length !== 1) {","        throw new TypeError('Not a valid type ' + typeName);","      }","      dataType.code = dataTypes.list;","      dataType.info = this.parseFqTypeName(innerTypes[0]);","      return dataType;","    }","    if (typeName.indexOf(complexTypeNames.set, startIndex) === startIndex) {","      //Its a set","      //org.apache.cassandra.db.marshal.SetType(innerType)","      //move cursor across the name and bypass the parenthesis","      startIndex += complexTypeNames.set.length + 1;","      length -= complexTypeNames.set.length + 2;","      innerTypes = parseParams(typeName, startIndex, length);","      if (innerTypes.length !== 1)","      {","        throw new TypeError('Not a valid type ' + typeName);","      }","      dataType.code = dataTypes.set;","      dataType.info = this.parseFqTypeName(innerTypes[0]);","      return dataType;","    }","    if (typeName.indexOf(complexTypeNames.map, startIndex) === startIndex) {","      //org.apache.cassandra.db.marshal.MapType(keyType,valueType)","      //move cursor across the name and bypass the parenthesis","      startIndex += complexTypeNames.map.length + 1;","      length -= complexTypeNames.map.length + 2;","      innerTypes = parseParams(typeName, startIndex, length);","      //It should contain the key and value types","      if (innerTypes.length !== 2) {","        throw new TypeError('Not a valid type ' + typeName);","      }","      dataType.code = dataTypes.map;","      dataType.info = [this.parseFqTypeName(innerTypes[0]), this.parseFqTypeName(innerTypes[1])];","      return dataType;","    }","    if (typeName.indexOf(complexTypeNames.udt, startIndex) === startIndex) {","      //move cursor across the name and bypass the parenthesis","      startIndex += complexTypeNames.udt.length + 1;","      length -= complexTypeNames.udt.length + 2;","      return this._parseUdtName(typeName, startIndex, length);","    }","    if (typeName.indexOf(complexTypeNames.tuple, startIndex) === startIndex) {","      //move cursor across the name and bypass the parenthesis","      startIndex += complexTypeNames.tuple.length + 1;","      length -= complexTypeNames.tuple.length + 2;","      innerTypes = parseParams(typeName, startIndex, length);","      if (innerTypes.length < 1) {","        throw new TypeError('Not a valid type ' + typeName);","      }","      dataType.code = dataTypes.tuple;","      dataType.info = innerTypes.map(function (x) {","        return this.parseFqTypeName(x);","      }, this);","      return dataType;","    }","","    // Assume custom type if cannot be parsed up to this point.","    dataType.info = typeName.substr(startIndex, length);","    return dataType;","  };","  /**","   * Parses type names with composites","   * @param {String} typesString","   * @returns {{types: Array, isComposite: Boolean, hasCollections: Boolean}}","   * @internal","   * @ignore","   */","  this.parseKeyTypes = function (typesString) {","    var i = 0;","    var length = typesString.length;","    var isComposite = typesString.indexOf(complexTypeNames.composite) === 0;","    if (isComposite) {","      i = complexTypeNames.composite.length + 1;","      length--;","    }","    var types = [];","    var startIndex = i;","    var nested = 0;","    var inCollectionType = false;","    var hasCollections = false;","    //as collection types are not allowed, it is safe to split by ,","    while (++i < length) {","      switch (typesString[i]) {","        case ',':","          if (nested > 0) {","            break;","          }","          if (inCollectionType) {","            //remove type id","            startIndex = typesString.indexOf(':', startIndex) + 1;","          }","          types.push(typesString.substring(startIndex, i));","          startIndex = i + 1;","          break;","        case '(':","          if (nested === 0 && typesString.indexOf(complexTypeNames.collection, startIndex) === startIndex) {","            inCollectionType = true;","            hasCollections = true;","            //skip collection type","            i++;","            startIndex = i;","            break;","          }","          nested++;","          break;","        case ')':","          if (inCollectionType && nested === 0){","            types.push(typesString.substring(typesString.indexOf(':', startIndex) + 1, i));","            startIndex = i + 1;","            break;","          }","          nested--;","          break;","      }","    }","    if (startIndex < length) {","      types.push(typesString.substring(startIndex, length));","    }","    return {","      types: types.map(function (name) {","        return this.parseFqTypeName(name);","      }, this),","      hasCollections: hasCollections,","      isComposite: isComposite","    };","  };","  this._parseUdtName = function (typeName, startIndex, length) {","    var udtParams = parseParams(typeName, startIndex, length);","    if (udtParams.length < 2) {","      //It should contain at least the keyspace, name of the udt and a type","      throw new TypeError('Not a valid type ' + typeName);","    }","    var dataType = {","      code: dataTypes.udt,","      info: null","    };","    var udtInfo = {","      keyspace: udtParams[0],","      name: new Buffer(udtParams[1], 'hex').toString(),","      fields: []","    };","    for (var i = 2; i < udtParams.length; i++) {","      var p = udtParams[i];","      var separatorIndex = p.indexOf(':');","      var fieldType = this.parseFqTypeName(p, separatorIndex + 1, p.length - (separatorIndex + 1));","      udtInfo.fields.push({","        name: new Buffer(p.substr(0, separatorIndex), 'hex').toString(),","        type: fieldType","      });","    }","    dataType.info = udtInfo;","    return dataType;","  };","}","","/**"," * Sets the encoder and decoder methods for this instance"," * @private"," */","function setEncoders() {","  //decoders","  var d = {};","  d[dataTypes.custom] = this.decodeBlob;","  d[dataTypes.ascii] = this.decodeAsciiString;","  d[dataTypes.bigint] = this.decodeLong;","  d[dataTypes.blob] = this.decodeBlob;","  d[dataTypes.boolean] = this.decodeBoolean;","  d[dataTypes.counter] = this.decodeLong;","  d[dataTypes.decimal] = this.decodeDecimal;","  d[dataTypes.double] = this.decodeDouble;","  d[dataTypes.float] = this.decodeFloat;","  d[dataTypes.int] = this.decodeInt;","  d[dataTypes.text] = this.decodeUtf8String;","  d[dataTypes.timestamp] = this.decodeTimestamp;","  d[dataTypes.uuid] = this.decodeUuid;","  d[dataTypes.varchar] = this.decodeUtf8String;","  d[dataTypes.varint] = this.decodeVarint;","  d[dataTypes.timeuuid] = this.decodeTimeUuid;","  d[dataTypes.inet] = this.decodeInet;","  d[dataTypes.date] = this.decodeDate;","  d[dataTypes.time] = this.decodeTime;","  d[dataTypes.smallint] = this.decodeSmallint;","  d[dataTypes.tinyint] = this.decodeTinyint;","  d[dataTypes.list] = this.decodeList;","  d[dataTypes.map] = this.decodeMap;","  d[dataTypes.set] = this.decodeSet;","  d[dataTypes.udt] = this.decodeUdt;","  d[dataTypes.tuple] = this.decodeTuple;","","  //encoders","  var e = {};","  e[dataTypes.custom] = this.encodeBlob;","  e[dataTypes.ascii] = this.encodeAsciiString;","  e[dataTypes.bigint] = this.encodeLong;","  e[dataTypes.blob] = this.encodeBlob;","  e[dataTypes.boolean] = this.encodeBoolean;","  e[dataTypes.counter] = this.encodeLong;","  e[dataTypes.decimal] = this.encodeDecimal;","  e[dataTypes.double] = this.encodeDouble;","  e[dataTypes.float] = this.encodeFloat;","  e[dataTypes.int] = this.encodeInt;","  e[dataTypes.text] = this.encodeUtf8String;","  e[dataTypes.timestamp] = this.encodeTimestamp;","  e[dataTypes.uuid] = this.encodeUuid;","  e[dataTypes.varchar] = this.encodeUtf8String;","  e[dataTypes.varint] = this.encodeVarint;","  e[dataTypes.timeuuid] = this.encodeUuid;","  e[dataTypes.inet] = this.encodeInet;","  e[dataTypes.date] = this.encodeDate;","  e[dataTypes.time] = this.encodeTime;","  e[dataTypes.smallint] = this.encodeSmallint;","  e[dataTypes.tinyint] = this.encodeTinyint;","  e[dataTypes.list] = this.encodeList;","  e[dataTypes.map] = this.encodeMap;","  e[dataTypes.set] = this.encodeSet;","  e[dataTypes.udt] = this.encodeUdt;","  e[dataTypes.tuple] = this.encodeTuple;","","  this.decoders = d;","  this.encoders = e;","}","","/**"," * Decodes Cassandra bytes into Javascript values."," * <p>"," * This is part of an <b>experimental</b> API, this can be changed future releases."," * </p>"," * @param {Buffer} buffer Raw buffer to be decoded."," * @param {Object} type An object containing the data type <code>code</code> and <code>info</code>."," * @param {Number} type.code Type code."," * @param {Object} [type.info] Additional information on the type for complex / nested types."," */","Encoder.prototype.decode = function (buffer, type) {","  if (buffer === null) {","    return null;","  }","  var decoder = this.decoders[type.code];","  if (!decoder) {","    throw new Error('Unknown data type: ' + type.code);","  }","  return decoder.call(this, buffer, type.info);","};","","/**"," * Encodes Javascript types into Buffer according to the Cassandra protocol."," * <p>"," * This is part of an <b>experimental</b> API, this can be changed future releases."," * </p>"," * @param {*} value The value to be converted."," * @param {{code: number, info: *|Object}|String|Number} [typeInfo] The type information."," * <p>It can be either a:</p>"," * <ul>"," *   <li>A <code>String</code> representing the data type.</li>"," *   <li>A <code>Number</code> with one of the values of {@link module:types~dataTypes dataTypes}.</li>"," *   <li>An <code>Object</code> containing the <code>type.code</code> as one of the values of"," *   {@link module:types~dataTypes dataTypes} and <code>type.info</code>."," *   </li>"," * </ul>"," * @returns {Buffer}"," * @throws {TypeError} When there is an encoding error"," */","Encoder.prototype.encode = function (value, typeInfo) {","  if (value === undefined) {","    //defaults to null","    value = null;","    if (this.encodingOptions.useUndefinedAsUnset && this.protocolVersion >= 4) {","      //use undefined as unset","      value = types.unset;","    }","  }","  if (value === null) {","    return value;","  }","  if (value === types.unset) {","    if (this.protocolVersion < 4) {","      throw new TypeError('Unset value can not be used for this version of Cassandra, protocol version: ' + this.protocolVersion);","    }","    return value;","  }","  /** @type {{code: Number, info: object}} */","  var type = {","    code: null,","    info: null","  };","  if (typeInfo) {","    if (typeof typeInfo === 'number') {","      type.code = typeInfo;","    }","    else if (typeof typeInfo === 'string') {","      type = dataTypes.getByName(typeInfo);","    }","    if (typeof typeInfo.code === 'number') {","      type.code = typeInfo.code;","      type.info = typeInfo.info;","    }","    if (typeof type.code !== 'number') {","      throw new TypeError('Type information not valid, only String and Number values are valid hints');","    }","  }","  else {","    //Lets guess","    type = Encoder.guessDataType(value);","    if (!type) {","      throw new TypeError('Target data type could not be guessed, you should use prepared statements for accurate type mapping. Value: ' + util.inspect(value));","    }","  }","  var encoder = this.encoders[type.code];","  if (!encoder) {","    throw new Error('Type not supported ' + type.code);","  }","  return encoder.call(this, value, type.info);","};","","/**"," * Try to guess the Cassandra type to be stored, based on the javascript value type"," * @param value"," * @returns {{code: number, info: object}}"," * @ignore"," * @internal"," */","Encoder.guessDataType = function (value) {","  var code = null;","  if (typeof value === 'number') {","    code = dataTypes.double;","  }","  else if (typeof value === 'string') {","    code = dataTypes.text;","    if (value.length === 36 && uuidRegex.test(value)){","      code = dataTypes.uuid;","    }","  }","  else if (value instanceof Buffer) {","    code = dataTypes.blob;","  }","  else if (value instanceof Date) {","    code = dataTypes.timestamp;","  }","  else if (value instanceof Long) {","    code = dataTypes.bigint;","  }","  else if (value instanceof Integer) {","    code = dataTypes.varint;","  }","  else if (value instanceof BigDecimal) {","    code = dataTypes.decimal;","  }","  else if (value instanceof types.Uuid) {","    code = dataTypes.uuid;","  }","  else if (value instanceof types.InetAddress) {","    code = dataTypes.inet;","  }","  else if (value instanceof types.Tuple) {","    code = dataTypes.tuple;","  }","  else if (value instanceof types.LocalDate) {","    code = dataTypes.date;","  }","  else if (value instanceof types.LocalTime) {","    code = dataTypes.time;","  }","  else if (util.isArray(value)) {","    code = dataTypes.list;","  }","  else if (value === true || value === false) {","    code = dataTypes.boolean;","  }","","  if (code === null) {","    return null;","  }","  return {code: code, info: null};","};","","/**"," * Gets a buffer containing with the bytes (BE) representing the collection length for protocol v2 and below"," * @param {Buffer|Number} value"," * @returns {Buffer}"," * @private"," */","function getLengthBufferV2(value) {","  if (!value) {","    return int16Zero;","  }","  var lengthBuffer = new Buffer(2);","  if (typeof value === 'number') {","    lengthBuffer.writeUInt16BE(value, 0);","  }","  else {","    lengthBuffer.writeUInt16BE(value.length, 0);","  }","  return lengthBuffer;","}","","/**"," * Gets a buffer containing with the bytes (BE) representing the collection length for protocol v3 and above"," * @param {Buffer|Number} value"," * @returns {Buffer}"," * @private"," */","function getLengthBufferV3(value) {","  if (!value) {","    return int32Zero;","  }","  var lengthBuffer = new Buffer(4);","  if (typeof value === 'number') {","    lengthBuffer.writeUInt32BE(value, 0);","  }","  else {","    lengthBuffer.writeUInt32BE(value.length, 0);","  }","  return lengthBuffer;","}","","/**"," * @param {Buffer} buffer"," * @private"," */","function handleBufferCopy(buffer) {","  if (buffer === null) {","    return null;","  }","  return utils.copyBuffer(buffer);","}","","/**"," * @param {Buffer} buffer"," * @private"," */","function handleBufferRef(buffer) {","  return buffer;","}","/**"," * Decodes collection length for protocol v3 and above"," * @param bytes"," * @param offset"," * @returns {Number}"," * @private"," */","function decodeCollectionLengthV3(bytes, offset) {","  return bytes.readUInt32BE(offset);","}","/**"," * Decodes collection length for protocol v2 and below"," * @param bytes"," * @param offset"," * @returns {Number}"," * @private"," */","function decodeCollectionLengthV2(bytes, offset) {","  return bytes.readUInt16BE(offset);","}","","/**"," * @param {String} value"," * @param {Number} startIndex"," * @param {Number} length"," * @param {String} [open]"," * @param {String} [close]"," * @returns {Array}"," * @private"," */","function parseParams(value, startIndex, length, open, close) {","  open = open || '(';","  close = close || ')';","  var types = [];","  var paramStart = startIndex;","  var level = 0;","  for (var i = startIndex; i < startIndex + length; i++) {","    var c = value[i];","    if (c === open) {","      level++;","    }","    if (c === close) {","      level--;","    }","    if (level === 0 && c === ',') {","      types.push(value.substr(paramStart, i - paramStart));","      paramStart = i + 1;","    }","  }","  //Add the last one","  types.push(value.substr(paramStart, length - (paramStart - startIndex)));","  return types;","}","","/**"," * @param {Array.<Buffer>} parts"," * @param {Number} totalLength"," * @returns {Buffer}"," * @private"," */","function concatRoutingKey(parts, totalLength) {","  var routingKey = new Buffer(totalLength);","  var offset = 0;","  parts.forEach(function (item) {","    routingKey.writeInt16BE(item.length, offset);","    offset += 2;","    item.copy(routingKey, offset);","    offset += item.length;","    routingKey[offset] = 0;","    offset++;","  });","  return routingKey;","}","","module.exports = Encoder;",""],"l":{"2":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"11":1,"12":1,"13":1,"14":1,"26":1,"34":1,"56":1,"57":20,"59":1,"60":1,"68":1,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"77":0,"85":1,"92":0,"93":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"105":0,"106":0,"108":0,"109":0,"111":0,"112":0,"114":0,"115":0,"117":0,"118":0,"120":0,"121":0,"123":0,"124":0,"126":0,"127":0,"129":0,"130":0,"132":0,"133":0,"135":0,"136":0,"138":0,"139":0,"141":0,"142":0,"144":0,"145":0,"147":0,"148":0,"153":0,"154":0,"155":0,"156":0,"157":0,"159":0,"160":0,"162":0,"163":0,"165":0,"170":0,"171":0,"172":0,"173":0,"174":0,"176":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":1,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"198":0,"199":0,"200":0,"203":0,"204":0,"205":0,"206":0,"209":0,"210":0,"211":0,"214":0,"216":0,"217":0,"219":0,"220":0,"222":0,"223":0,"231":0,"232":0,"233":0,"234":0,"236":0,"237":0,"239":0,"240":0,"241":0,"242":0,"244":0,"245":0,"247":0,"249":0,"250":0,"251":0,"252":0,"253":0,"254":0,"255":0,"256":0,"257":0,"259":0,"260":0,"262":0,"265":0,"266":0,"267":0,"269":0,"270":0,"271":0,"273":0,"274":0,"275":0,"277":0,"278":0,"279":0,"285":0,"286":0,"287":0,"288":0,"290":0,"292":0,"293":0,"294":0,"298":0,"306":0,"307":0,"308":0,"309":0,"310":0,"312":0,"313":0,"318":0,"320":0,"321":0,"323":0,"331":0,"332":0,"333":0,"334":0,"335":0,"340":0,"342":0,"343":0,"345":0,"351":0,"352":0,"353":0,"354":0,"357":0,"360":0,"361":0,"363":0,"364":0,"366":0,"373":0,"374":0,"375":0,"377":0,"378":0,"380":0,"381":0,"383":0,"389":0,"390":0,"391":0,"393":0,"394":0,"396":0,"397":0,"398":0,"400":0,"402":0,"404":0,"405":0,"407":0,"414":0,"415":0,"416":0,"418":0,"419":0,"421":0,"422":0,"423":0,"425":0,"426":0,"428":0,"429":0,"431":0,"438":0,"439":0,"440":0,"442":0,"443":0,"445":0,"446":0,"447":0,"449":0,"450":0,"452":0,"453":0,"455":0,"457":0,"458":0,"459":0,"461":0,"463":0,"464":0,"466":0,"467":0,"469":0,"470":0,"471":0,"473":0,"480":0,"481":0,"487":0,"488":0,"489":0,"491":0,"492":0,"493":0,"499":0,"500":0,"501":0,"503":0,"504":0,"505":0,"511":0,"512":0,"513":0,"515":0,"516":0,"517":0,"519":0,"520":0,"521":0,"523":0,"524":0,"526":0,"527":0,"528":0,"529":0,"530":0,"531":0,"533":0,"535":0,"537":0,"539":0,"541":0,"542":0,"543":0,"544":0,"545":0,"547":0,"549":0,"558":0,"559":0,"560":0,"561":0,"562":0,"563":0,"564":0,"565":0,"566":0,"568":1,"569":0,"570":0,"572":0,"573":0,"575":0,"577":0,"579":0,"581":0,"583":0,"585":0,"586":0,"588":0,"590":0,"592":0,"596":0,"597":0,"598":0,"600":0,"601":0,"605":0,"606":0,"608":0,"609":0,"610":0,"611":0,"612":0,"613":0,"614":0,"615":0,"616":0,"617":0,"619":0,"620":0,"621":0,"622":0,"624":0,"625":0,"626":0,"627":0,"628":0,"630":0,"632":0,"633":0,"634":0,"635":0,"636":0,"637":0,"638":0,"639":0,"640":0,"641":0,"643":0,"644":0,"645":0,"646":0,"648":0,"649":0,"650":0,"651":0,"652":0,"654":0,"666":0,"667":0,"668":0,"669":0,"670":0,"671":0,"674":0,"675":0,"676":0,"677":0,"681":0,"682":0,"684":0,"687":0,"688":0,"690":0,"694":0,"696":0,"697":0,"698":0,"699":0,"701":0,"702":0,"704":0,"705":0,"706":0,"708":0,"709":0,"710":0,"713":0,"725":0,"726":0,"727":0,"728":0,"729":0,"730":0,"732":0,"734":0,"736":0,"738":0,"739":0,"741":0,"743":0,"744":0,"746":0,"759":0,"760":0,"761":0,"762":0,"764":0,"771":0,"772":0,"774":0,"775":0,"777":0,"778":0,"780":0,"782":0,"783":0,"784":0,"786":0,"788":0,"789":0,"790":0,"791":0,"792":0,"794":0,"795":0,"796":0,"797":0,"799":0,"800":0,"803":0,"805":0,"806":0,"807":0,"808":0,"809":0,"811":0,"812":0,"813":0,"814":0,"816":0,"817":0,"820":0,"822":0,"823":0,"824":0,"826":0,"827":0,"829":0,"830":0,"832":0,"834":0,"835":0,"836":0,"837":0,"838":0,"840":0,"841":0,"843":0,"844":0,"846":0,"847":0,"850":0,"851":0,"854":0,"855":0,"857":0,"858":0,"859":0,"860":0,"862":0,"864":0,"865":0,"867":0,"868":0,"869":0,"871":0,"872":0,"873":0,"874":0,"876":0,"887":0,"888":0,"889":0,"890":0,"892":0,"893":0,"895":0,"896":0,"910":0,"911":0,"919":0,"920":0,"921":0,"922":0,"924":0,"926":0,"927":0,"928":0,"930":0,"933":0,"934":0,"935":0,"937":0,"939":0,"940":0,"943":0,"944":0,"945":0,"947":0,"948":0,"949":0,"950":0,"952":0,"954":0,"958":0,"959":0,"960":0,"961":0,"962":0,"964":0,"965":0,"966":0,"968":0,"972":0,"973":0,"974":0,"975":0,"977":0,"979":0,"980":0,"981":0,"983":0,"986":0,"987":0,"988":0,"990":0,"991":0,"993":0,"994":0,"995":0,"997":0,"999":0,"1000":0,"1001":0,"1003":0,"1005":0,"1006":0,"1007":0,"1008":0,"1009":0,"1011":0,"1012":0,"1013":0,"1015":0,"1019":0,"1020":0,"1029":0,"1030":0,"1031":0,"1032":0,"1033":0,"1034":0,"1035":0,"1037":0,"1038":0,"1039":0,"1040":0,"1041":0,"1043":0,"1044":0,"1046":0,"1047":0,"1049":0,"1051":0,"1053":0,"1054":0,"1055":0,"1057":0,"1058":0,"1059":0,"1061":0,"1062":0,"1063":0,"1065":0,"1066":0,"1068":0,"1069":0,"1070":0,"1071":0,"1073":0,"1074":0,"1077":0,"1078":0,"1080":0,"1082":0,"1088":0,"1089":0,"1090":0,"1092":0,"1094":0,"1098":0,"1103":0,"1104":0,"1105":0,"1106":0,"1107":0,"1112":0,"1113":0,"1121":1,"1123":0,"1124":0,"1125":0,"1126":0,"1127":0,"1128":0,"1129":0,"1130":0,"1131":0,"1132":0,"1133":0,"1134":0,"1135":0,"1136":0,"1137":0,"1138":0,"1139":0,"1140":0,"1141":0,"1142":0,"1143":0,"1144":0,"1145":0,"1146":0,"1147":0,"1148":0,"1149":0,"1152":0,"1153":0,"1154":0,"1155":0,"1156":0,"1157":0,"1158":0,"1159":0,"1160":0,"1161":0,"1162":0,"1163":0,"1164":0,"1165":0,"1166":0,"1167":0,"1168":0,"1169":0,"1170":0,"1171":0,"1172":0,"1173":0,"1174":0,"1175":0,"1176":0,"1177":0,"1178":0,"1180":0,"1181":0,"1194":1,"1195":0,"1196":0,"1198":0,"1199":0,"1200":0,"1202":0,"1223":1,"1224":0,"1226":0,"1227":0,"1229":0,"1232":0,"1233":0,"1235":0,"1236":0,"1237":0,"1239":0,"1242":0,"1246":0,"1247":0,"1248":0,"1250":0,"1251":0,"1253":0,"1254":0,"1255":0,"1257":0,"1258":0,"1263":0,"1264":0,"1265":0,"1268":0,"1269":0,"1270":0,"1272":0,"1282":1,"1283":0,"1284":0,"1285":0,"1287":0,"1288":0,"1289":0,"1290":0,"1293":0,"1294":0,"1296":0,"1297":0,"1299":0,"1300":0,"1302":0,"1303":0,"1305":0,"1306":0,"1308":0,"1309":0,"1311":0,"1312":0,"1314":0,"1315":0,"1317":0,"1318":0,"1320":0,"1321":0,"1323":0,"1324":0,"1326":0,"1327":0,"1330":0,"1331":0,"1333":0,"1342":1,"1343":0,"1344":0,"1346":0,"1347":0,"1348":0,"1351":0,"1353":0,"1362":1,"1363":0,"1364":0,"1366":0,"1367":0,"1368":0,"1371":0,"1373":0,"1380":1,"1381":0,"1382":0,"1384":0,"1391":1,"1392":0,"1401":1,"1402":0,"1411":1,"1412":0,"1424":1,"1425":0,"1426":0,"1427":0,"1428":0,"1429":0,"1430":0,"1431":0,"1432":0,"1433":0,"1435":0,"1436":0,"1438":0,"1439":0,"1440":0,"1444":0,"1445":0,"1454":1,"1455":0,"1456":0,"1457":0,"1458":0,"1459":0,"1460":0,"1461":0,"1462":0,"1463":0,"1465":0,"1468":1}},"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/writers.js":{"path":"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/writers.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1,"13":0,"14":0,"15":1,"16":0,"17":0,"18":0,"19":1,"20":0,"21":0,"22":0,"23":1,"24":0,"25":1,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":1,"35":0,"36":0,"37":0,"38":0,"39":0,"40":1,"41":0,"42":1,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":1,"51":0,"52":0,"53":0,"54":0,"55":0,"56":1,"57":0,"58":0,"59":1,"60":0,"61":0,"62":0,"63":0,"64":0,"65":1,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":1,"76":0,"77":0,"78":0,"79":0,"80":1,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":1,"89":1,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":1,"97":0,"98":0,"99":1,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":1,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":1,"137":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0},"fnMap":{"1":{"name":"FrameWriter","line":14,"loc":{"start":{"line":14,"column":0},"end":{"line":14,"column":29}}},"2":{"name":"(anonymous_2)","line":23,"loc":{"start":{"line":23,"column":28},"end":{"line":23,"column":42}}},"3":{"name":"(anonymous_3)","line":28,"loc":{"start":{"line":28,"column":35},"end":{"line":28,"column":49}}},"4":{"name":"(anonymous_4)","line":34,"loc":{"start":{"line":34,"column":33},"end":{"line":34,"column":47}}},"5":{"name":"(anonymous_5)","line":41,"loc":{"start":{"line":41,"column":34},"end":{"line":41,"column":48}}},"6":{"name":"(anonymous_6)","line":49,"loc":{"start":{"line":49,"column":35},"end":{"line":49,"column":51}}},"7":{"name":"(anonymous_7)","line":69,"loc":{"start":{"line":69,"column":40},"end":{"line":69,"column":56}}},"8":{"name":"(anonymous_8)","line":85,"loc":{"start":{"line":85,"column":34},"end":{"line":85,"column":49}}},"9":{"name":"(anonymous_9)","line":89,"loc":{"start":{"line":89,"column":36},"end":{"line":89,"column":50}}},"10":{"name":"(anonymous_10)","line":100,"loc":{"start":{"line":100,"column":37},"end":{"line":100,"column":51}}},"11":{"name":"(anonymous_11)","line":108,"loc":{"start":{"line":108,"column":40},"end":{"line":108,"column":58}}},"12":{"name":"(anonymous_12)","line":113,"loc":{"start":{"line":113,"column":43},"end":{"line":113,"column":62}}},"13":{"name":"(anonymous_13)","line":116,"loc":{"start":{"line":116,"column":15},"end":{"line":116,"column":28}}},"14":{"name":"(anonymous_14)","line":122,"loc":{"start":{"line":122,"column":39},"end":{"line":122,"column":54}}},"15":{"name":"(anonymous_15)","line":146,"loc":{"start":{"line":146,"column":30},"end":{"line":146,"column":66}}},"16":{"name":"WriteQueue","line":160,"loc":{"start":{"line":160,"column":0},"end":{"line":160,"column":50}}},"17":{"name":"(anonymous_17)","line":177,"loc":{"start":{"line":177,"column":28},"end":{"line":177,"column":57}}},"18":{"name":"writePushError","line":181,"loc":{"start":{"line":181,"column":28},"end":{"line":181,"column":54}}},"19":{"name":"(anonymous_19)","line":189,"loc":{"start":{"line":189,"column":27},"end":{"line":189,"column":39}}},"20":{"name":"(anonymous_20)","line":195,"loc":{"start":{"line":195,"column":31},"end":{"line":195,"column":43}}},"21":{"name":"condition","line":198,"loc":{"start":{"line":198,"column":4},"end":{"line":198,"column":25}}},"22":{"name":"whileProcess","line":201,"loc":{"start":{"line":201,"column":4},"end":{"line":201,"column":32}}},"23":{"name":"socketWriteCallback","line":228,"loc":{"start":{"line":228,"column":64},"end":{"line":228,"column":98}}},"24":{"name":"loopFinished","line":236,"loc":{"start":{"line":236,"column":4},"end":{"line":236,"column":28}}},"25":{"name":"(anonymous_25)","line":247,"loc":{"start":{"line":247,"column":37},"end":{"line":247,"column":52}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":31}},"2":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":31}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":34}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":36}},"6":{"start":{"line":14,"column":0},"end":{"line":21,"column":1}},"7":{"start":{"line":15,"column":2},"end":{"line":17,"column":3}},"8":{"start":{"line":16,"column":4},"end":{"line":16,"column":43}},"9":{"start":{"line":18,"column":2},"end":{"line":18,"column":20}},"10":{"start":{"line":19,"column":2},"end":{"line":19,"column":23}},"11":{"start":{"line":20,"column":2},"end":{"line":20,"column":22}},"12":{"start":{"line":23,"column":0},"end":{"line":26,"column":2}},"13":{"start":{"line":24,"column":2},"end":{"line":24,"column":25}},"14":{"start":{"line":25,"column":2},"end":{"line":25,"column":32}},"15":{"start":{"line":28,"column":0},"end":{"line":32,"column":2}},"16":{"start":{"line":29,"column":2},"end":{"line":29,"column":26}},"17":{"start":{"line":30,"column":2},"end":{"line":30,"column":28}},"18":{"start":{"line":31,"column":2},"end":{"line":31,"column":16}},"19":{"start":{"line":34,"column":0},"end":{"line":38,"column":2}},"20":{"start":{"line":35,"column":2},"end":{"line":35,"column":26}},"21":{"start":{"line":36,"column":2},"end":{"line":36,"column":27}},"22":{"start":{"line":37,"column":2},"end":{"line":37,"column":16}},"23":{"start":{"line":41,"column":0},"end":{"line":43,"column":2}},"24":{"start":{"line":42,"column":2},"end":{"line":42,"column":37}},"25":{"start":{"line":49,"column":0},"end":{"line":63,"column":2}},"26":{"start":{"line":50,"column":2},"end":{"line":54,"column":3}},"27":{"start":{"line":52,"column":4},"end":{"line":52,"column":22}},"28":{"start":{"line":53,"column":4},"end":{"line":53,"column":11}},"29":{"start":{"line":55,"column":2},"end":{"line":58,"column":3}},"30":{"start":{"line":56,"column":4},"end":{"line":56,"column":22}},"31":{"start":{"line":57,"column":4},"end":{"line":57,"column":11}},"32":{"start":{"line":60,"column":2},"end":{"line":60,"column":30}},"33":{"start":{"line":62,"column":2},"end":{"line":62,"column":18}},"34":{"start":{"line":69,"column":0},"end":{"line":79,"column":2}},"35":{"start":{"line":70,"column":2},"end":{"line":74,"column":3}},"36":{"start":{"line":72,"column":4},"end":{"line":72,"column":24}},"37":{"start":{"line":73,"column":4},"end":{"line":73,"column":11}},"38":{"start":{"line":76,"column":2},"end":{"line":76,"column":32}},"39":{"start":{"line":78,"column":2},"end":{"line":78,"column":18}},"40":{"start":{"line":85,"column":0},"end":{"line":87,"column":2}},"41":{"start":{"line":86,"column":2},"end":{"line":86,"column":30}},"42":{"start":{"line":89,"column":0},"end":{"line":98,"column":2}},"43":{"start":{"line":90,"column":2},"end":{"line":92,"column":3}},"44":{"start":{"line":91,"column":4},"end":{"line":91,"column":47}},"45":{"start":{"line":93,"column":2},"end":{"line":93,"column":43}},"46":{"start":{"line":94,"column":2},"end":{"line":94,"column":32}},"47":{"start":{"line":95,"column":2},"end":{"line":95,"column":28}},"48":{"start":{"line":96,"column":2},"end":{"line":96,"column":42}},"49":{"start":{"line":97,"column":2},"end":{"line":97,"column":16}},"50":{"start":{"line":100,"column":0},"end":{"line":106,"column":2}},"51":{"start":{"line":101,"column":2},"end":{"line":101,"column":43}},"52":{"start":{"line":102,"column":2},"end":{"line":102,"column":32}},"53":{"start":{"line":103,"column":2},"end":{"line":103,"column":27}},"54":{"start":{"line":104,"column":2},"end":{"line":104,"column":42}},"55":{"start":{"line":105,"column":2},"end":{"line":105,"column":16}},"56":{"start":{"line":108,"column":0},"end":{"line":111,"column":2}},"57":{"start":{"line":109,"column":2},"end":{"line":109,"column":33}},"58":{"start":{"line":110,"column":2},"end":{"line":110,"column":41}},"59":{"start":{"line":113,"column":0},"end":{"line":120,"column":2}},"60":{"start":{"line":114,"column":2},"end":{"line":114,"column":34}},"61":{"start":{"line":115,"column":2},"end":{"line":115,"column":31}},"62":{"start":{"line":116,"column":2},"end":{"line":119,"column":11}},"63":{"start":{"line":117,"column":4},"end":{"line":117,"column":24}},"64":{"start":{"line":118,"column":4},"end":{"line":118,"column":32}},"65":{"start":{"line":122,"column":0},"end":{"line":137,"column":2}},"66":{"start":{"line":123,"column":2},"end":{"line":123,"column":16}},"67":{"start":{"line":124,"column":2},"end":{"line":128,"column":3}},"68":{"start":{"line":125,"column":4},"end":{"line":127,"column":5}},"69":{"start":{"line":126,"column":6},"end":{"line":126,"column":19}},"70":{"start":{"line":130,"column":2},"end":{"line":130,"column":31}},"71":{"start":{"line":132,"column":2},"end":{"line":136,"column":3}},"72":{"start":{"line":133,"column":4},"end":{"line":133,"column":22}},"73":{"start":{"line":134,"column":4},"end":{"line":134,"column":26}},"74":{"start":{"line":135,"column":4},"end":{"line":135,"column":31}},"75":{"start":{"line":146,"column":0},"end":{"line":151,"column":2}},"76":{"start":{"line":147,"column":2},"end":{"line":147,"column":92}},"77":{"start":{"line":148,"column":2},"end":{"line":148,"column":39}},"78":{"start":{"line":149,"column":2},"end":{"line":149,"column":37}},"79":{"start":{"line":150,"column":2},"end":{"line":150,"column":76}},"80":{"start":{"line":160,"column":0},"end":{"line":169,"column":1}},"81":{"start":{"line":161,"column":2},"end":{"line":161,"column":31}},"82":{"start":{"line":162,"column":2},"end":{"line":162,"column":29}},"83":{"start":{"line":163,"column":2},"end":{"line":163,"column":25}},"84":{"start":{"line":164,"column":2},"end":{"line":164,"column":25}},"85":{"start":{"line":166,"column":2},"end":{"line":166,"column":18}},"86":{"start":{"line":167,"column":2},"end":{"line":167,"column":71}},"87":{"start":{"line":168,"column":2},"end":{"line":168,"column":20}},"88":{"start":{"line":171,"column":0},"end":{"line":171,"column":47}},"89":{"start":{"line":177,"column":0},"end":{"line":187,"column":2}},"90":{"start":{"line":178,"column":2},"end":{"line":178,"column":18}},"91":{"start":{"line":179,"column":2},"end":{"line":184,"column":3}},"92":{"start":{"line":181,"column":4},"end":{"line":183,"column":7}},"93":{"start":{"line":182,"column":6},"end":{"line":182,"column":27}},"94":{"start":{"line":185,"column":2},"end":{"line":185,"column":59}},"95":{"start":{"line":186,"column":2},"end":{"line":186,"column":13}},"96":{"start":{"line":189,"column":0},"end":{"line":193,"column":2}},"97":{"start":{"line":190,"column":2},"end":{"line":192,"column":3}},"98":{"start":{"line":191,"column":4},"end":{"line":191,"column":19}},"99":{"start":{"line":195,"column":0},"end":{"line":241,"column":2}},"100":{"start":{"line":196,"column":2},"end":{"line":196,"column":18}},"101":{"start":{"line":197,"column":2},"end":{"line":240,"column":4}},"102":{"start":{"line":199,"column":6},"end":{"line":199,"column":35}},"103":{"start":{"line":202,"column":6},"end":{"line":202,"column":28}},"104":{"start":{"line":203,"column":6},"end":{"line":203,"column":23}},"105":{"start":{"line":204,"column":6},"end":{"line":204,"column":25}},"106":{"start":{"line":205,"column":6},"end":{"line":205,"column":26}},"107":{"start":{"line":206,"column":6},"end":{"line":219,"column":7}},"108":{"start":{"line":207,"column":8},"end":{"line":207,"column":43}},"109":{"start":{"line":208,"column":8},"end":{"line":218,"column":9}},"110":{"start":{"line":209,"column":10},"end":{"line":209,"column":59}},"111":{"start":{"line":210,"column":10},"end":{"line":210,"column":37}},"112":{"start":{"line":211,"column":10},"end":{"line":211,"column":29}},"113":{"start":{"line":212,"column":10},"end":{"line":212,"column":45}},"114":{"start":{"line":215,"column":10},"end":{"line":215,"column":34}},"115":{"start":{"line":217,"column":10},"end":{"line":217,"column":16}},"116":{"start":{"line":220,"column":6},"end":{"line":223,"column":7}},"117":{"start":{"line":222,"column":8},"end":{"line":222,"column":22}},"118":{"start":{"line":225,"column":6},"end":{"line":227,"column":7}},"119":{"start":{"line":226,"column":8},"end":{"line":226,"column":23}},"120":{"start":{"line":228,"column":6},"end":{"line":234,"column":9}},"121":{"start":{"line":229,"column":8},"end":{"line":231,"column":9}},"122":{"start":{"line":230,"column":10},"end":{"line":230,"column":34}},"123":{"start":{"line":233,"column":8},"end":{"line":233,"column":27}},"124":{"start":{"line":238,"column":6},"end":{"line":238,"column":29}},"125":{"start":{"line":247,"column":0},"end":{"line":262,"column":2}},"126":{"start":{"line":248,"column":2},"end":{"line":248,"column":27}},"127":{"start":{"line":249,"column":2},"end":{"line":249,"column":58}},"128":{"start":{"line":250,"column":2},"end":{"line":250,"column":34}},"129":{"start":{"line":252,"column":2},"end":{"line":252,"column":38}},"130":{"start":{"line":253,"column":2},"end":{"line":253,"column":30}},"131":{"start":{"line":254,"column":2},"end":{"line":254,"column":21}},"132":{"start":{"line":256,"column":2},"end":{"line":256,"column":32}},"133":{"start":{"line":257,"column":2},"end":{"line":261,"column":3}},"134":{"start":{"line":258,"column":4},"end":{"line":258,"column":20}},"135":{"start":{"line":260,"column":4},"end":{"line":260,"column":30}},"136":{"start":{"line":264,"column":0},"end":{"line":264,"column":32}},"137":{"start":{"line":265,"column":0},"end":{"line":265,"column":34}}},"branchMap":{"1":{"line":15,"type":"if","locations":[{"start":{"line":15,"column":2},"end":{"line":15,"column":2}},{"start":{"line":15,"column":2},"end":{"line":15,"column":2}}]},"2":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":2},"end":{"line":50,"column":2}},{"start":{"line":50,"column":2},"end":{"line":50,"column":2}}]},"3":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":2},"end":{"line":55,"column":2}},{"start":{"line":55,"column":2},"end":{"line":55,"column":2}}]},"4":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":2},"end":{"line":70,"column":2}},{"start":{"line":70,"column":2},"end":{"line":70,"column":2}}]},"5":{"line":90,"type":"if","locations":[{"start":{"line":90,"column":2},"end":{"line":90,"column":2}},{"start":{"line":90,"column":2},"end":{"line":90,"column":2}}]},"6":{"line":125,"type":"if","locations":[{"start":{"line":125,"column":4},"end":{"line":125,"column":4}},{"start":{"line":125,"column":4},"end":{"line":125,"column":4}}]},"7":{"line":147,"type":"binary-expr","locations":[{"start":{"line":147,"column":40},"end":{"line":147,"column":45}},{"start":{"line":147,"column":49},"end":{"line":147,"column":50}}]},"8":{"line":179,"type":"if","locations":[{"start":{"line":179,"column":2},"end":{"line":179,"column":2}},{"start":{"line":179,"column":2},"end":{"line":179,"column":2}}]},"9":{"line":190,"type":"if","locations":[{"start":{"line":190,"column":2},"end":{"line":190,"column":2}},{"start":{"line":190,"column":2},"end":{"line":190,"column":2}}]},"10":{"line":206,"type":"binary-expr","locations":[{"start":{"line":206,"column":13},"end":{"line":206,"column":51}},{"start":{"line":206,"column":55},"end":{"line":206,"column":76}}]},"11":{"line":220,"type":"if","locations":[{"start":{"line":220,"column":6},"end":{"line":220,"column":6}},{"start":{"line":220,"column":6},"end":{"line":220,"column":6}}]},"12":{"line":229,"type":"if","locations":[{"start":{"line":229,"column":8},"end":{"line":229,"column":8}},{"start":{"line":229,"column":8},"end":{"line":229,"column":8}}]}},"code":["'use strict';","var events = require('events');","var util = require('util');","","var types = require('./types');","var utils = require('./utils.js');","var FrameHeader = types.FrameHeader;","","/**"," * Contains the logic to write all the different types to the frame."," * @param {Number} opcode"," * @constructor"," */","function FrameWriter(opcode) {","  if (!opcode) {","    throw new Error('Opcode not provided');","  }","  this.buffers = [];","  this.opcode = opcode;","  this.bodyLength = 0;","}","","FrameWriter.prototype.add = function(buf) {","  this.buffers.push(buf);","  this.bodyLength += buf.length;","};","","FrameWriter.prototype.writeShort = function(num) {","  var buf = new Buffer(2);","  buf.writeUInt16BE(num, 0);","  this.add(buf);","};","","FrameWriter.prototype.writeInt = function(num) {","  var buf = new Buffer(4);","  buf.writeInt32BE(num, 0);","  this.add(buf);","};","","/** @param {Long} num */","FrameWriter.prototype.writeLong = function(num) {","  this.add(types.Long.toBuffer(num));","};","","/**"," * Writes bytes according to Cassandra <int byteLength><bytes>"," * @param {Buffer|null|types.unset} bytes"," */","FrameWriter.prototype.writeBytes = function(bytes) {","  if (bytes === null) {","    //Only the length buffer containing -1","    this.writeInt(-1);","    return;","  }","  if (bytes === types.unset) {","    this.writeInt(-2);","    return;","  }","  //Add the length buffer","  this.writeInt(bytes.length);","  //Add the actual buffer","  this.add(bytes);","};","","/**"," * Writes a buffer according to Cassandra protocol: bytes.length (2) + bytes"," * @param {Buffer} bytes"," */","FrameWriter.prototype.writeShortBytes = function(bytes) {","  if(bytes === null) {","    //Only the length buffer containing -1","    this.writeShort(-1);","    return;","  }","  //Add the length buffer","  this.writeShort(bytes.length);","  //Add the actual buffer","  this.add(bytes);","};","","/**"," * Writes a single byte"," * @param {Number} num Value of the byte, a number between 0 and 255."," */","FrameWriter.prototype.writeByte = function (num) {","  this.add(new Buffer([num]));","};","","FrameWriter.prototype.writeString = function(str) {","  if (typeof str === \"undefined\") {","    throw new Error(\"can not write undefined\");","  }","  var len = Buffer.byteLength(str, 'utf8');","  var buf = new Buffer(2 + len);","  buf.writeUInt16BE(len, 0);","  buf.write(str, 2, buf.length-2, 'utf8');","  this.add(buf);","};","","FrameWriter.prototype.writeLString = function(str) {","  var len = Buffer.byteLength(str, 'utf8');","  var buf = new Buffer(4 + len);","  buf.writeInt32BE(len, 0);","  buf.write(str, 4, buf.length-4, 'utf8');","  this.add(buf);","};","","FrameWriter.prototype.writeStringList = function (values) {","  this.writeShort(values.length);","  values.forEach(this.writeString, this);","};","","FrameWriter.prototype.writeCustomPayload = function (payload) {","  var keys = Object.keys(payload);","  this.writeShort(keys.length);","  keys.forEach(function (k) {","    this.writeString(k);","    this.writeBytes(payload[k]);","  }, this);","};","","FrameWriter.prototype.writeStringMap = function (map) {","  var keys = [];","  for (var k in map) {","    if (map.hasOwnProperty(k)) {","      keys.push(k);","    }","  }","","  this.writeShort(keys.length);","","  for(var i = 0; i < keys.length; i++) {","    var key = keys[i];","    this.writeString(key);","    this.writeString(map[key]);","  }","};","","/**"," * @param {Number} version"," * @param {Number} streamId"," * @param {Number} [flags] Header flags"," * @returns {Buffer}"," * @throws {TypeError}"," */","FrameWriter.prototype.write = function (version, streamId, flags) {","  var header = new FrameHeader(version, flags || 0, streamId, this.opcode, this.bodyLength);","  var headerBuffer = header.toBuffer();","  this.buffers.unshift(headerBuffer);","  return Buffer.concat(this.buffers, headerBuffer.length + this.bodyLength);","};","","/**"," * Represents a queue that process one write at a time (FIFO)."," * @param {Socket} netClient"," * @param {Encoder} encoder"," * @param {ClientOptions} options"," * @extends {EventEmitter}"," */","function WriteQueue (netClient, encoder, options) {","  WriteQueue.super_.call(this);","  this.netClient = netClient;","  this.encoder = encoder;","  this.isRunning = false;","  /** @type {Array<{request: Request, callback: Function}>} */","  this.queue = [];","  this.coalescingThreshold = options.socketOptions.coalescingThreshold;","  this.error = null;","}","","util.inherits(WriteQueue, events.EventEmitter);","/**"," * Enqueues a new request"," * @param {Request} request"," * @param {Function} callback"," */","WriteQueue.prototype.push = function (request, callback) {","  var self = this;","  if (this.error) {","    // There was a write error, there is no point in further trying to write to the socket.","    return process.nextTick(function writePushError() {","      callback(self.error);","    });","  }","  this.queue.push({ request: request, callback: callback});","  this.run();","};","","WriteQueue.prototype.run = function () {","  if (!this.isRunning) {","    this.process();","  }","};","","WriteQueue.prototype.process = function () {","  var self = this;","  utils.whilst(","    function condition() {","      return self.queue.length > 0;","    },","    function whileProcess(next) {","      self.isRunning = true;","      var buffers = [];","      var callbacks = [];","      var totalLength = 0;","      while (totalLength < self.coalescingThreshold && self.queue.length > 0) {","        var writeItem = self.queue.shift();","        try {","          var data = writeItem.request.write(self.encoder);","          totalLength += data.length;","          buffers.push(data);","          callbacks.push(writeItem.callback);","        }","        catch (err) {","          writeItem.callback(err);","          //break and flush what we have","          break;","        }","      }","      if (buffers.length === 0) {","        // No need to invoke socket.write()","        return next();","      }","      // Before invoking socket.write(), mark that the request has been written to avoid race conditions.","      for (var i = 0; i < callbacks.length; i++) {","        callbacks[i]();","      }","      self.netClient.write(Buffer.concat(buffers, totalLength), function socketWriteCallback(err) {","        if (err) {","          self.setWriteError(err);","        }","        // Allow IO between writes","        setImmediate(next);","      });","    },","    function loopFinished() {","      // The queue is now empty","      self.isRunning = false;","    }","  );","};","","/**"," * Emits the 'error' event and callbacks items that haven't been written and clears them from the queue."," * @param err"," */","WriteQueue.prototype.setWriteError = function (err) {","  err.isSocketError = true;","  this.error = new types.DriverError('Socket was closed');","  this.error.isSocketError = true;","  // Use an special flag for items that haven't been written","  this.error.requestNotWritten = true;","  this.error.innerError = err;","  var q = this.queue;","  // Not more items can be added to the queue.","  this.queue = utils.emptyArray;","  for (var i = 0; i < q.length; i++) {","    var item = q[i];","    // Use the error marking that it was not written","    item.callback(this.error);","  }","};","","exports.WriteQueue = WriteQueue;","exports.FrameWriter = FrameWriter;",""],"l":{"2":1,"3":1,"5":1,"6":1,"7":1,"14":1,"15":0,"16":0,"18":0,"19":0,"20":0,"23":1,"24":0,"25":0,"28":1,"29":0,"30":0,"31":0,"34":1,"35":0,"36":0,"37":0,"41":1,"42":0,"49":1,"50":0,"52":0,"53":0,"55":0,"56":0,"57":0,"60":0,"62":0,"69":1,"70":0,"72":0,"73":0,"76":0,"78":0,"85":1,"86":0,"89":1,"90":0,"91":0,"93":0,"94":0,"95":0,"96":0,"97":0,"100":1,"101":0,"102":0,"103":0,"104":0,"105":0,"108":1,"109":0,"110":0,"113":1,"114":0,"115":0,"116":0,"117":0,"118":0,"122":1,"123":0,"124":0,"125":0,"126":0,"130":0,"132":0,"133":0,"134":0,"135":0,"146":1,"147":0,"148":0,"149":0,"150":0,"160":1,"161":0,"162":0,"163":0,"164":0,"166":0,"167":0,"168":0,"171":1,"177":1,"178":0,"179":0,"181":0,"182":0,"185":0,"186":0,"189":1,"190":0,"191":0,"195":1,"196":0,"197":0,"199":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"215":0,"217":0,"220":0,"222":0,"225":0,"226":0,"228":0,"229":0,"230":0,"233":0,"238":0,"247":1,"248":0,"249":0,"250":0,"252":0,"253":0,"254":0,"256":0,"257":0,"258":0,"260":0,"264":1,"265":1}},"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/requests.js":{"path":"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/requests.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1,"17":1,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":1,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":1,"62":0,"63":0,"64":0,"65":1,"66":0,"67":0,"68":0,"69":0,"70":1,"71":1,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":1,"83":0,"84":0,"85":1,"86":1,"87":0,"88":0,"89":0,"90":1,"91":0,"92":0,"93":1,"94":1,"95":0,"96":0,"97":0,"98":1,"99":0,"100":0,"101":1,"102":1,"103":0,"104":0,"105":0,"106":1,"107":0,"108":0,"109":1,"110":1,"111":0,"112":0,"113":0,"114":1,"115":0,"116":0,"117":0,"118":1,"119":1,"120":0,"121":0,"122":0,"123":1,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":1,"131":1,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":1,"171":1,"172":1,"173":1,"174":1,"175":1,"176":1,"177":1,"178":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0},"fnMap":{"1":{"name":"Request","line":36,"loc":{"start":{"line":36,"column":0},"end":{"line":36,"column":19}}},"2":{"name":"(anonymous_2)","line":46,"loc":{"start":{"line":46,"column":26},"end":{"line":46,"column":45}}},"3":{"name":"ExecuteRequest","line":57,"loc":{"start":{"line":57,"column":0},"end":{"line":57,"column":57}}},"4":{"name":"(anonymous_4)","line":67,"loc":{"start":{"line":67,"column":33},"end":{"line":67,"column":52}}},"5":{"name":"(anonymous_5)","line":91,"loc":{"start":{"line":91,"column":48},"end":{"line":91,"column":80}}},"6":{"name":"(anonymous_6)","line":144,"loc":{"start":{"line":144,"column":38},"end":{"line":144,"column":57}}},"7":{"name":"QueryRequest","line":150,"loc":{"start":{"line":150,"column":0},"end":{"line":150,"column":46}}},"8":{"name":"(anonymous_8)","line":159,"loc":{"start":{"line":159,"column":31},"end":{"line":159,"column":50}}},"9":{"name":"PrepareRequest","line":183,"loc":{"start":{"line":183,"column":0},"end":{"line":183,"column":31}}},"10":{"name":"(anonymous_10)","line":190,"loc":{"start":{"line":190,"column":33},"end":{"line":190,"column":45}}},"11":{"name":"StartupRequest","line":196,"loc":{"start":{"line":196,"column":0},"end":{"line":196,"column":36}}},"12":{"name":"(anonymous_12)","line":203,"loc":{"start":{"line":203,"column":33},"end":{"line":203,"column":44}}},"13":{"name":"RegisterRequest","line":211,"loc":{"start":{"line":211,"column":0},"end":{"line":211,"column":33}}},"14":{"name":"(anonymous_14)","line":218,"loc":{"start":{"line":218,"column":34},"end":{"line":218,"column":45}}},"15":{"name":"AuthResponseRequest","line":229,"loc":{"start":{"line":229,"column":0},"end":{"line":229,"column":36}}},"16":{"name":"(anonymous_16)","line":236,"loc":{"start":{"line":236,"column":38},"end":{"line":236,"column":50}}},"17":{"name":"CredentialsRequest","line":246,"loc":{"start":{"line":246,"column":0},"end":{"line":246,"column":48}}},"18":{"name":"(anonymous_18)","line":254,"loc":{"start":{"line":254,"column":37},"end":{"line":254,"column":49}}},"19":{"name":"BatchRequest","line":266,"loc":{"start":{"line":266,"column":0},"end":{"line":266,"column":40}}},"20":{"name":"(anonymous_20)","line":278,"loc":{"start":{"line":278,"column":31},"end":{"line":278,"column":50}}},"21":{"name":"eachQuery","line":294,"loc":{"start":{"line":294,"column":23},"end":{"line":294,"column":51}}},"22":{"name":"(anonymous_22)","line":301,"loc":{"start":{"line":301,"column":41},"end":{"line":301,"column":54}}},"23":{"name":"(anonymous_23)","line":311,"loc":{"start":{"line":311,"column":19},"end":{"line":311,"column":48}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":27}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":51}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":31}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":31}},"5":{"start":{"line":12,"column":0},"end":{"line":20,"column":2}},"6":{"start":{"line":26,"column":0},"end":{"line":30,"column":2}},"7":{"start":{"line":36,"column":0},"end":{"line":38,"column":1}},"8":{"start":{"line":46,"column":0},"end":{"line":48,"column":2}},"9":{"start":{"line":47,"column":2},"end":{"line":47,"column":48}},"10":{"start":{"line":57,"column":0},"end":{"line":63,"column":1}},"11":{"start":{"line":58,"column":2},"end":{"line":58,"column":23}},"12":{"start":{"line":59,"column":2},"end":{"line":59,"column":21}},"13":{"start":{"line":60,"column":2},"end":{"line":60,"column":25}},"14":{"start":{"line":61,"column":2},"end":{"line":61,"column":23}},"15":{"start":{"line":62,"column":2},"end":{"line":62,"column":27}},"16":{"start":{"line":65,"column":0},"end":{"line":65,"column":39}},"17":{"start":{"line":67,"column":0},"end":{"line":84,"column":2}},"18":{"start":{"line":74,"column":2},"end":{"line":74,"column":59}},"19":{"start":{"line":75,"column":2},"end":{"line":75,"column":75}},"20":{"start":{"line":76,"column":2},"end":{"line":80,"column":3}},"21":{"start":{"line":78,"column":4},"end":{"line":78,"column":50}},"22":{"start":{"line":79,"column":4},"end":{"line":79,"column":63}},"23":{"start":{"line":81,"column":2},"end":{"line":81,"column":44}},"24":{"start":{"line":82,"column":2},"end":{"line":82,"column":50}},"25":{"start":{"line":83,"column":2},"end":{"line":83,"column":69}},"26":{"start":{"line":91,"column":0},"end":{"line":142,"column":2}},"27":{"start":{"line":95,"column":2},"end":{"line":95,"column":16}},"28":{"start":{"line":96,"column":2},"end":{"line":105,"column":3}},"29":{"start":{"line":97,"column":4},"end":{"line":97,"column":72}},"30":{"start":{"line":98,"column":4},"end":{"line":98,"column":67}},"31":{"start":{"line":99,"column":4},"end":{"line":99,"column":68}},"32":{"start":{"line":100,"column":4},"end":{"line":100,"column":82}},"33":{"start":{"line":101,"column":4},"end":{"line":101,"column":73}},"34":{"start":{"line":102,"column":4},"end":{"line":102,"column":76}},"35":{"start":{"line":103,"column":4},"end":{"line":103,"column":45}},"36":{"start":{"line":104,"column":4},"end":{"line":104,"column":33}},"37":{"start":{"line":106,"column":2},"end":{"line":117,"column":3}},"38":{"start":{"line":107,"column":4},"end":{"line":107,"column":47}},"39":{"start":{"line":108,"column":4},"end":{"line":116,"column":5}},"40":{"start":{"line":109,"column":6},"end":{"line":109,"column":38}},"41":{"start":{"line":110,"column":6},"end":{"line":114,"column":7}},"42":{"start":{"line":112,"column":8},"end":{"line":112,"column":49}},"43":{"start":{"line":113,"column":8},"end":{"line":113,"column":38}},"44":{"start":{"line":115,"column":6},"end":{"line":115,"column":72}},"45":{"start":{"line":118,"column":2},"end":{"line":125,"column":3}},"46":{"start":{"line":119,"column":4},"end":{"line":122,"column":5}},"47":{"start":{"line":121,"column":6},"end":{"line":121,"column":32}},"48":{"start":{"line":123,"column":4},"end":{"line":123,"column":45}},"49":{"start":{"line":124,"column":4},"end":{"line":124,"column":11}},"50":{"start":{"line":126,"column":2},"end":{"line":128,"column":3}},"51":{"start":{"line":127,"column":4},"end":{"line":127,"column":49}},"52":{"start":{"line":129,"column":2},"end":{"line":131,"column":3}},"53":{"start":{"line":130,"column":4},"end":{"line":130,"column":51}},"54":{"start":{"line":132,"column":2},"end":{"line":134,"column":3}},"55":{"start":{"line":133,"column":4},"end":{"line":133,"column":59}},"56":{"start":{"line":135,"column":2},"end":{"line":141,"column":3}},"57":{"start":{"line":136,"column":4},"end":{"line":136,"column":43}},"58":{"start":{"line":137,"column":4},"end":{"line":139,"column":5}},"59":{"start":{"line":138,"column":6},"end":{"line":138,"column":51}},"60":{"start":{"line":140,"column":4},"end":{"line":140,"column":37}},"61":{"start":{"line":144,"column":0},"end":{"line":148,"column":2}},"62":{"start":{"line":145,"column":2},"end":{"line":145,"column":46}},"63":{"start":{"line":146,"column":2},"end":{"line":146,"column":73}},"64":{"start":{"line":147,"column":2},"end":{"line":147,"column":54}},"65":{"start":{"line":150,"column":0},"end":{"line":155,"column":1}},"66":{"start":{"line":151,"column":2},"end":{"line":151,"column":23}},"67":{"start":{"line":152,"column":2},"end":{"line":152,"column":21}},"68":{"start":{"line":153,"column":2},"end":{"line":153,"column":23}},"69":{"start":{"line":154,"column":2},"end":{"line":154,"column":27}},"70":{"start":{"line":157,"column":0},"end":{"line":157,"column":44}},"71":{"start":{"line":159,"column":0},"end":{"line":181,"column":2}},"72":{"start":{"line":165,"column":2},"end":{"line":165,"column":57}},"73":{"start":{"line":166,"column":2},"end":{"line":166,"column":75}},"74":{"start":{"line":167,"column":2},"end":{"line":171,"column":3}},"75":{"start":{"line":169,"column":4},"end":{"line":169,"column":50}},"76":{"start":{"line":170,"column":4},"end":{"line":170,"column":63}},"77":{"start":{"line":172,"column":2},"end":{"line":172,"column":39}},"78":{"start":{"line":173,"column":2},"end":{"line":179,"column":3}},"79":{"start":{"line":174,"column":4},"end":{"line":174,"column":45}},"80":{"start":{"line":178,"column":4},"end":{"line":178,"column":52}},"81":{"start":{"line":180,"column":2},"end":{"line":180,"column":69}},"82":{"start":{"line":183,"column":0},"end":{"line":186,"column":1}},"83":{"start":{"line":184,"column":2},"end":{"line":184,"column":23}},"84":{"start":{"line":185,"column":2},"end":{"line":185,"column":21}},"85":{"start":{"line":188,"column":0},"end":{"line":188,"column":39}},"86":{"start":{"line":190,"column":0},"end":{"line":194,"column":2}},"87":{"start":{"line":191,"column":2},"end":{"line":191,"column":59}},"88":{"start":{"line":192,"column":2},"end":{"line":192,"column":39}},"89":{"start":{"line":193,"column":2},"end":{"line":193,"column":56}},"90":{"start":{"line":196,"column":0},"end":{"line":199,"column":1}},"91":{"start":{"line":197,"column":2},"end":{"line":197,"column":42}},"92":{"start":{"line":198,"column":2},"end":{"line":198,"column":23}},"93":{"start":{"line":201,"column":0},"end":{"line":201,"column":39}},"94":{"start":{"line":203,"column":0},"end":{"line":209,"column":2}},"95":{"start":{"line":204,"column":2},"end":{"line":204,"column":59}},"96":{"start":{"line":205,"column":2},"end":{"line":207,"column":5}},"97":{"start":{"line":208,"column":2},"end":{"line":208,"column":56}},"98":{"start":{"line":211,"column":0},"end":{"line":214,"column":1}},"99":{"start":{"line":212,"column":2},"end":{"line":212,"column":23}},"100":{"start":{"line":213,"column":2},"end":{"line":213,"column":23}},"101":{"start":{"line":216,"column":0},"end":{"line":216,"column":40}},"102":{"start":{"line":218,"column":0},"end":{"line":222,"column":2}},"103":{"start":{"line":219,"column":2},"end":{"line":219,"column":60}},"104":{"start":{"line":220,"column":2},"end":{"line":220,"column":43}},"105":{"start":{"line":221,"column":2},"end":{"line":221,"column":56}},"106":{"start":{"line":229,"column":0},"end":{"line":232,"column":1}},"107":{"start":{"line":230,"column":2},"end":{"line":230,"column":21}},"108":{"start":{"line":231,"column":2},"end":{"line":231,"column":23}},"109":{"start":{"line":234,"column":0},"end":{"line":234,"column":44}},"110":{"start":{"line":236,"column":0},"end":{"line":240,"column":2}},"111":{"start":{"line":237,"column":2},"end":{"line":237,"column":64}},"112":{"start":{"line":238,"column":2},"end":{"line":238,"column":37}},"113":{"start":{"line":239,"column":2},"end":{"line":239,"column":56}},"114":{"start":{"line":246,"column":0},"end":{"line":250,"column":1}},"115":{"start":{"line":247,"column":2},"end":{"line":247,"column":27}},"116":{"start":{"line":248,"column":2},"end":{"line":248,"column":27}},"117":{"start":{"line":249,"column":2},"end":{"line":249,"column":23}},"118":{"start":{"line":252,"column":0},"end":{"line":252,"column":43}},"119":{"start":{"line":254,"column":0},"end":{"line":258,"column":2}},"120":{"start":{"line":255,"column":2},"end":{"line":255,"column":63}},"121":{"start":{"line":256,"column":2},"end":{"line":256,"column":79}},"122":{"start":{"line":257,"column":2},"end":{"line":257,"column":56}},"123":{"start":{"line":266,"column":0},"end":{"line":274,"column":1}},"124":{"start":{"line":267,"column":2},"end":{"line":267,"column":25}},"125":{"start":{"line":269,"column":2},"end":{"line":269,"column":25}},"126":{"start":{"line":270,"column":2},"end":{"line":270,"column":37}},"127":{"start":{"line":271,"column":2},"end":{"line":271,"column":46}},"128":{"start":{"line":272,"column":2},"end":{"line":272,"column":23}},"129":{"start":{"line":273,"column":2},"end":{"line":273,"column":49}},"130":{"start":{"line":276,"column":0},"end":{"line":276,"column":37}},"131":{"start":{"line":278,"column":0},"end":{"line":333,"column":2}},"132":{"start":{"line":281,"column":2},"end":{"line":283,"column":3}},"133":{"start":{"line":282,"column":4},"end":{"line":282,"column":82}},"134":{"start":{"line":284,"column":2},"end":{"line":284,"column":57}},"135":{"start":{"line":285,"column":2},"end":{"line":285,"column":75}},"136":{"start":{"line":286,"column":2},"end":{"line":290,"column":3}},"137":{"start":{"line":288,"column":4},"end":{"line":288,"column":50}},"138":{"start":{"line":289,"column":4},"end":{"line":289,"column":63}},"139":{"start":{"line":291,"column":2},"end":{"line":291,"column":35}},"140":{"start":{"line":292,"column":2},"end":{"line":292,"column":46}},"141":{"start":{"line":293,"column":2},"end":{"line":293,"column":18}},"142":{"start":{"line":294,"column":2},"end":{"line":314,"column":11}},"143":{"start":{"line":295,"column":4},"end":{"line":295,"column":30}},"144":{"start":{"line":296,"column":4},"end":{"line":296,"column":49}},"145":{"start":{"line":297,"column":4},"end":{"line":309,"column":5}},"146":{"start":{"line":299,"column":6},"end":{"line":299,"column":31}},"147":{"start":{"line":300,"column":6},"end":{"line":300,"column":53}},"148":{"start":{"line":301,"column":6},"end":{"line":301,"column":74}},"149":{"start":{"line":301,"column":56},"end":{"line":301,"column":70}},"150":{"start":{"line":302,"column":6},"end":{"line":302,"column":86}},"151":{"start":{"line":303,"column":6},"end":{"line":303,"column":33}},"152":{"start":{"line":307,"column":6},"end":{"line":307,"column":31}},"153":{"start":{"line":308,"column":6},"end":{"line":308,"column":43}},"154":{"start":{"line":310,"column":4},"end":{"line":310,"column":42}},"155":{"start":{"line":311,"column":4},"end":{"line":313,"column":7}},"156":{"start":{"line":312,"column":6},"end":{"line":312,"column":86}},"157":{"start":{"line":315,"column":2},"end":{"line":315,"column":51}},"158":{"start":{"line":316,"column":2},"end":{"line":331,"column":3}},"159":{"start":{"line":318,"column":4},"end":{"line":318,"column":85}},"160":{"start":{"line":319,"column":4},"end":{"line":319,"column":73}},"161":{"start":{"line":320,"column":4},"end":{"line":320,"column":33}},"162":{"start":{"line":321,"column":4},"end":{"line":323,"column":5}},"163":{"start":{"line":322,"column":6},"end":{"line":322,"column":61}},"164":{"start":{"line":324,"column":4},"end":{"line":330,"column":5}},"165":{"start":{"line":325,"column":6},"end":{"line":325,"column":45}},"166":{"start":{"line":326,"column":6},"end":{"line":328,"column":7}},"167":{"start":{"line":327,"column":8},"end":{"line":327,"column":53}},"168":{"start":{"line":329,"column":6},"end":{"line":329,"column":39}},"169":{"start":{"line":332,"column":2},"end":{"line":332,"column":69}},"170":{"start":{"line":336,"column":0},"end":{"line":336,"column":50}},"171":{"start":{"line":337,"column":0},"end":{"line":337,"column":36}},"172":{"start":{"line":338,"column":0},"end":{"line":338,"column":48}},"173":{"start":{"line":339,"column":0},"end":{"line":339,"column":40}},"174":{"start":{"line":340,"column":0},"end":{"line":340,"column":40}},"175":{"start":{"line":341,"column":0},"end":{"line":341,"column":36}},"176":{"start":{"line":342,"column":0},"end":{"line":342,"column":26}},"177":{"start":{"line":343,"column":0},"end":{"line":343,"column":42}},"178":{"start":{"line":344,"column":0},"end":{"line":344,"column":40}}},"branchMap":{"1":{"line":75,"type":"cond-expr","locations":[{"start":{"line":75,"column":46},"end":{"line":75,"column":70}},{"start":{"line":75,"column":73},"end":{"line":75,"column":74}}]},"2":{"line":76,"type":"if","locations":[{"start":{"line":76,"column":2},"end":{"line":76,"column":2}},{"start":{"line":76,"column":2},"end":{"line":76,"column":2}}]},"3":{"line":96,"type":"if","locations":[{"start":{"line":96,"column":2},"end":{"line":96,"column":2}},{"start":{"line":96,"column":2},"end":{"line":96,"column":2}}]},"4":{"line":97,"type":"cond-expr","locations":[{"start":{"line":97,"column":51},"end":{"line":97,"column":67}},{"start":{"line":97,"column":70},"end":{"line":97,"column":71}}]},"5":{"line":97,"type":"binary-expr","locations":[{"start":{"line":97,"column":14},"end":{"line":97,"column":25}},{"start":{"line":97,"column":29},"end":{"line":97,"column":47}}]},"6":{"line":98,"type":"cond-expr","locations":[{"start":{"line":98,"column":44},"end":{"line":98,"column":62}},{"start":{"line":98,"column":65},"end":{"line":98,"column":66}}]},"7":{"line":99,"type":"cond-expr","locations":[{"start":{"line":99,"column":38},"end":{"line":99,"column":63}},{"start":{"line":99,"column":66},"end":{"line":99,"column":67}}]},"8":{"line":100,"type":"cond-expr","locations":[{"start":{"line":100,"column":46},"end":{"line":100,"column":77}},{"start":{"line":100,"column":80},"end":{"line":100,"column":81}}]},"9":{"line":101,"type":"cond-expr","locations":[{"start":{"line":101,"column":38},"end":{"line":101,"column":68}},{"start":{"line":101,"column":71},"end":{"line":101,"column":72}}]},"10":{"line":102,"type":"cond-expr","locations":[{"start":{"line":102,"column":44},"end":{"line":102,"column":71}},{"start":{"line":102,"column":74},"end":{"line":102,"column":75}}]},"11":{"line":106,"type":"if","locations":[{"start":{"line":106,"column":2},"end":{"line":106,"column":2}},{"start":{"line":106,"column":2},"end":{"line":106,"column":2}}]},"12":{"line":106,"type":"binary-expr","locations":[{"start":{"line":106,"column":6},"end":{"line":106,"column":17}},{"start":{"line":106,"column":21},"end":{"line":106,"column":39}}]},"13":{"line":110,"type":"if","locations":[{"start":{"line":110,"column":6},"end":{"line":110,"column":6}},{"start":{"line":110,"column":6},"end":{"line":110,"column":6}}]},"14":{"line":118,"type":"if","locations":[{"start":{"line":118,"column":2},"end":{"line":118,"column":2}},{"start":{"line":118,"column":2},"end":{"line":118,"column":2}}]},"15":{"line":119,"type":"if","locations":[{"start":{"line":119,"column":4},"end":{"line":119,"column":4}},{"start":{"line":119,"column":4},"end":{"line":119,"column":4}}]},"16":{"line":119,"type":"binary-expr","locations":[{"start":{"line":119,"column":8},"end":{"line":119,"column":20}},{"start":{"line":119,"column":24},"end":{"line":119,"column":43}}]},"17":{"line":126,"type":"if","locations":[{"start":{"line":126,"column":2},"end":{"line":126,"column":2}},{"start":{"line":126,"column":2},"end":{"line":126,"column":2}}]},"18":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":2},"end":{"line":129,"column":2}},{"start":{"line":129,"column":2},"end":{"line":129,"column":2}}]},"19":{"line":132,"type":"if","locations":[{"start":{"line":132,"column":2},"end":{"line":132,"column":2}},{"start":{"line":132,"column":2},"end":{"line":132,"column":2}}]},"20":{"line":135,"type":"if","locations":[{"start":{"line":135,"column":2},"end":{"line":135,"column":2}},{"start":{"line":135,"column":2},"end":{"line":135,"column":2}}]},"21":{"line":137,"type":"if","locations":[{"start":{"line":137,"column":4},"end":{"line":137,"column":4}},{"start":{"line":137,"column":4},"end":{"line":137,"column":4}}]},"22":{"line":145,"type":"binary-expr","locations":[{"start":{"line":145,"column":17},"end":{"line":145,"column":24}},{"start":{"line":145,"column":28},"end":{"line":145,"column":45}}]},"23":{"line":146,"type":"binary-expr","locations":[{"start":{"line":146,"column":21},"end":{"line":146,"column":45}},{"start":{"line":146,"column":49},"end":{"line":146,"column":72}}]},"24":{"line":147,"type":"binary-expr","locations":[{"start":{"line":147,"column":15},"end":{"line":147,"column":33}},{"start":{"line":147,"column":37},"end":{"line":147,"column":53}}]},"25":{"line":166,"type":"cond-expr","locations":[{"start":{"line":166,"column":46},"end":{"line":166,"column":70}},{"start":{"line":166,"column":73},"end":{"line":166,"column":74}}]},"26":{"line":167,"type":"if","locations":[{"start":{"line":167,"column":2},"end":{"line":167,"column":2}},{"start":{"line":167,"column":2},"end":{"line":167,"column":2}}]},"27":{"line":173,"type":"if","locations":[{"start":{"line":173,"column":2},"end":{"line":173,"column":2}},{"start":{"line":173,"column":2},"end":{"line":173,"column":2}}]},"28":{"line":197,"type":"binary-expr","locations":[{"start":{"line":197,"column":20},"end":{"line":197,"column":30}},{"start":{"line":197,"column":34},"end":{"line":197,"column":41}}]},"29":{"line":270,"type":"cond-expr","locations":[{"start":{"line":270,"column":31},"end":{"line":270,"column":32}},{"start":{"line":270,"column":35},"end":{"line":270,"column":36}}]},"30":{"line":271,"type":"cond-expr","locations":[{"start":{"line":271,"column":32},"end":{"line":271,"column":33}},{"start":{"line":271,"column":36},"end":{"line":271,"column":45}}]},"31":{"line":273,"type":"binary-expr","locations":[{"start":{"line":273,"column":15},"end":{"line":273,"column":28}},{"start":{"line":273,"column":32},"end":{"line":273,"column":48}}]},"32":{"line":281,"type":"if","locations":[{"start":{"line":281,"column":2},"end":{"line":281,"column":2}},{"start":{"line":281,"column":2},"end":{"line":281,"column":2}}]},"33":{"line":281,"type":"binary-expr","locations":[{"start":{"line":281,"column":6},"end":{"line":281,"column":19}},{"start":{"line":281,"column":23},"end":{"line":281,"column":49}}]},"34":{"line":285,"type":"cond-expr","locations":[{"start":{"line":285,"column":46},"end":{"line":285,"column":70}},{"start":{"line":285,"column":73},"end":{"line":285,"column":74}}]},"35":{"line":286,"type":"if","locations":[{"start":{"line":286,"column":2},"end":{"line":286,"column":2}},{"start":{"line":286,"column":2},"end":{"line":286,"column":2}}]},"36":{"line":296,"type":"binary-expr","locations":[{"start":{"line":296,"column":17},"end":{"line":296,"column":28}},{"start":{"line":296,"column":32},"end":{"line":296,"column":48}}]},"37":{"line":297,"type":"if","locations":[{"start":{"line":297,"column":4},"end":{"line":297,"column":4}},{"start":{"line":297,"column":4},"end":{"line":297,"column":4}}]},"38":{"line":312,"type":"cond-expr","locations":[{"start":{"line":312,"column":59},"end":{"line":312,"column":76}},{"start":{"line":312,"column":79},"end":{"line":312,"column":83}}]},"39":{"line":316,"type":"if","locations":[{"start":{"line":316,"column":2},"end":{"line":316,"column":2}},{"start":{"line":316,"column":2},"end":{"line":316,"column":2}}]},"40":{"line":318,"type":"cond-expr","locations":[{"start":{"line":318,"column":49},"end":{"line":318,"column":80}},{"start":{"line":318,"column":83},"end":{"line":318,"column":84}}]},"41":{"line":319,"type":"cond-expr","locations":[{"start":{"line":319,"column":38},"end":{"line":319,"column":68}},{"start":{"line":319,"column":71},"end":{"line":319,"column":72}}]},"42":{"line":321,"type":"if","locations":[{"start":{"line":321,"column":4},"end":{"line":321,"column":4}},{"start":{"line":321,"column":4},"end":{"line":321,"column":4}}]},"43":{"line":324,"type":"if","locations":[{"start":{"line":324,"column":4},"end":{"line":324,"column":4}},{"start":{"line":324,"column":4},"end":{"line":324,"column":4}}]},"44":{"line":326,"type":"if","locations":[{"start":{"line":326,"column":6},"end":{"line":326,"column":6}},{"start":{"line":326,"column":6},"end":{"line":326,"column":6}}]}},"code":["'use strict';","var util = require('util');","","var FrameWriter = require('./writers').FrameWriter;","var types = require('./types');","var utils = require('./utils');","","/**"," * Options for the execution of the query / prepared statement"," * @private"," */","var queryFlag = {","  values:                 0x01,","  skipMetadata:           0x02,","  pageSize:               0x04,","  withPagingState:        0x08,","  withSerialConsistency:  0x10,","  withDefaultTimestamp:   0x20,","  withNameForValues:      0x40","};","","/**"," * Options for the executing of a batch request from protocol v3 and above"," * @private"," */","var batchFlag = {","  withSerialConsistency:  0x10,","  withDefaultTimestamp:   0x20,","  withNameForValues:      0x40","};","","/**"," * Abstract class Request"," * @constructor"," */","function Request() {","","}","","/**"," * @abstract"," * @param {Encoder} encoder"," * @throws {TypeError}"," * @returns {Buffer}"," */","Request.prototype.write = function (encoder) {","  throw new Error('Method must be implemented');","};","","/**"," * Writes a execute query (given a prepared queryId)"," * @param {String} query"," * @param {Buffer} queryId"," * @param {Array} params"," * @param options"," */","function ExecuteRequest(query, queryId, params, options) {","  this.streamId = null;","  this.query = query;","  this.queryId = queryId;","  this.params = params;","  this.setOptions(options);","}","","util.inherits(ExecuteRequest, Request);","","ExecuteRequest.prototype.write = function (encoder) {","  //v1: <queryId>","  //      <n><value_1>....<value_n><consistency>","  //v2: <queryId>","  //      <consistency><flags>[<n><value_1>...<value_n>][<result_page_size>][<paging_state>][<serial_consistency>]","  //v3: <queryId>","  //      <consistency><flags>[<n>[name_1]<value_1>...[name_n]<value_n>][<result_page_size>][<paging_state>][<serial_consistency>][<timestamp>]","  var frameWriter = new FrameWriter(types.opcodes.execute);","  var headerFlags = this.options.traceQuery ? types.frameFlags.tracing : 0;","  if (this.options.customPayload) {","    //The body may contain the custom payload","    headerFlags |= types.frameFlags.customPayload;","    frameWriter.writeCustomPayload(this.options.customPayload);","  }","  frameWriter.writeShortBytes(this.queryId);","  this.writeQueryParameters(frameWriter, encoder);","  return frameWriter.write(this.version, this.streamId, headerFlags);","};","","/**"," * Writes v1 and v2 execute query parameters"," * @param {FrameWriter} frameWriter"," * @param {Encoder} encoder"," */","ExecuteRequest.prototype.writeQueryParameters = function (frameWriter, encoder) {","  //v1: <n><value_1>....<value_n><consistency>","  //v2: <consistency><flags>[<n><value_1>...<value_n>][<result_page_size>][<paging_state>][<serial_consistency>]","  //v3: <consistency><flags>[<n>[name_1]<value_1>...[name_n]<value_n>][<result_page_size>][<paging_state>][<serial_consistency>][<timestamp>]","  var flags = 0;","  if (this.version > 1) {","    flags |= (this.params && this.params.length) ? queryFlag.values : 0;","    flags |= (this.options.fetchSize > 0) ? queryFlag.pageSize : 0;","    flags |= this.options.pageState ? queryFlag.withPagingState : 0;","    flags |= this.options.serialConsistency ? queryFlag.withSerialConsistency : 0;","    flags |= this.options.timestamp ? queryFlag.withDefaultTimestamp : 0;","    flags |= this.options.namedParameters ? queryFlag.withNameForValues : 0;","    frameWriter.writeShort(this.consistency);","    frameWriter.writeByte(flags);","  }","  if (this.params && this.params.length) {","    frameWriter.writeShort(this.params.length);","    for (var i = 0; i < this.params.length; i++) {","      var paramValue = this.params[i];","      if (flags & queryFlag.withNameForValues) {","        //parameter is composed by name / value","        frameWriter.writeString(paramValue.name);","        paramValue = paramValue.value;","      }","      frameWriter.writeBytes(encoder.encode(paramValue, this.hints[i]));","    }","  }","  if (this.version === 1) {","    if (!this.params || !this.params.length) {","      //zero parameters","      frameWriter.writeShort(0);","    }","    frameWriter.writeShort(this.consistency);","    return;","  }","  if (flags & queryFlag.pageSize) {","    frameWriter.writeInt(this.options.fetchSize);","  }","  if (flags & queryFlag.withPagingState) {","    frameWriter.writeBytes(this.options.pageState);","  }","  if (flags & queryFlag.withSerialConsistency) {","    frameWriter.writeShort(this.options.serialConsistency);","  }","  if (flags & queryFlag.withDefaultTimestamp) {","    var timestamp = this.options.timestamp;","    if (typeof timestamp === 'number') {","      timestamp = types.Long.fromNumber(timestamp);","    }","    frameWriter.writeLong(timestamp);","  }","};","","ExecuteRequest.prototype.setOptions = function (options) {","  this.options = options || utils.emptyObject;","  this.consistency = this.options.consistency || types.consistencies.one;","  this.hints = this.options.hints || utils.emptyArray;","};","","function QueryRequest(query, params, options) {","  this.streamId = null;","  this.query = query;","  this.params = params;","  this.setOptions(options);","}","","util.inherits(QueryRequest, ExecuteRequest);","","QueryRequest.prototype.write = function (encoder) {","  //v1: <query><consistency>","  //v2: <query>","  //      <consistency><flags>[<n><value_1>...<value_n>][<result_page_size>][<paging_state>][<serial_consistency>]","  //v3: <query>","  //      <consistency><flags>[<n>[name_1]<value_1>...[name_n]<value_n>][<result_page_size>][<paging_state>][<serial_consistency>][<timestamp>]","  var frameWriter = new FrameWriter(types.opcodes.query);","  var headerFlags = this.options.traceQuery ? types.frameFlags.tracing : 0;","  if (this.options.customPayload) {","    //The body may contain the custom payload","    headerFlags |= types.frameFlags.customPayload;","    frameWriter.writeCustomPayload(this.options.customPayload);","  }","  frameWriter.writeLString(this.query);","  if (this.version === 1) {","    frameWriter.writeShort(this.consistency);","  }","  else {","    //Use the same fields as the execute writer","    this.writeQueryParameters(frameWriter, encoder);","  }","  return frameWriter.write(this.version, this.streamId, headerFlags);","};","","function PrepareRequest(query) {","  this.streamId = null;","  this.query = query;","}","","util.inherits(PrepareRequest, Request);","","PrepareRequest.prototype.write = function () {","  var frameWriter = new FrameWriter(types.opcodes.prepare);","  frameWriter.writeLString(this.query);","  return frameWriter.write(this.version, this.streamId);","};","","function StartupRequest(cqlVersion) {","  this.cqlVersion = cqlVersion || '3.0.0';","  this.streamId = null;","}","","util.inherits(StartupRequest, Request);","","StartupRequest.prototype.write = function() {","  var frameWriter = new FrameWriter(types.opcodes.startup);","  frameWriter.writeStringMap({","    CQL_VERSION: this.cqlVersion","  });","  return frameWriter.write(this.version, this.streamId);","};","","function RegisterRequest(events) {","  this.events = events;","  this.streamId = null;","}","","util.inherits(RegisterRequest, Request);","","RegisterRequest.prototype.write = function() {","  var frameWriter = new FrameWriter(types.opcodes.register);","  frameWriter.writeStringList(this.events);","  return frameWriter.write(this.version, this.streamId);","};","","/**"," * Represents an AUTH_RESPONSE request"," * @param {Buffer} token"," * @constructor"," */","function AuthResponseRequest(token) {","  this.token = token;","  this.streamId = null;","}","","util.inherits(AuthResponseRequest, Request);","","AuthResponseRequest.prototype.write = function () {","  var frameWriter = new FrameWriter(types.opcodes.authResponse);","  frameWriter.writeBytes(this.token);","  return frameWriter.write(this.version, this.streamId);","};","","/**"," * Represents a protocol v1 CREDENTIALS request message"," * @constructor"," */","function CredentialsRequest(username, password) {","  this.username = username;","  this.password = password;","  this.streamId = null;","}","","util.inherits(CredentialsRequest, Request);","","CredentialsRequest.prototype.write = function () {","  var frameWriter = new FrameWriter(types.opcodes.credentials);","  frameWriter.writeStringMap({username:this.username, password:this.password});","  return frameWriter.write(this.version, this.streamId);","};","","/**"," * Writes a batch request"," * @param {Array.<{query, params, [info]}>} queries Array of objects with the properties query and params"," * @param {QueryOptions} options"," * @constructor"," */","function BatchRequest(queries, options) {","  this.queries = queries;","  /** @type {QueryOptions} */","  this.options = options;","  this.type = options.logged ? 0 : 1;","  this.type = options.counter ? 2 : this.type;","  this.streamId = null;","  this.hints = options.hints || utils.emptyArray;","}","","util.inherits(BatchRequest, Request);","","BatchRequest.prototype.write = function (encoder) {","  //v2: <type><n><query_1>...<query_n><consistency>","  //v3: <type><n><query_1>...<query_n><consistency><flags>[<serial_consistency>][<timestamp>]","  if (!this.queries || !(this.queries.length > 0)) {","    throw new TypeError(util.format('Invalid queries provided %s', this.queries));","  }","  var frameWriter = new FrameWriter(types.opcodes.batch);","  var headerFlags = this.options.traceQuery ? types.frameFlags.tracing : 0;","  if (this.options.customPayload) {","    //The body may contain the custom payload","    headerFlags |= types.frameFlags.customPayload;","    frameWriter.writeCustomPayload(this.options.customPayload);","  }","  frameWriter.writeByte(this.type);","  frameWriter.writeShort(this.queries.length);","  var self = this;","  this.queries.forEach(function eachQuery(item, i) {","    var hints = self.hints[i];","    var params = item.params || utils.emptyArray;","    if (item.info) {","      //As prepared queries","      frameWriter.writeByte(1);","      frameWriter.writeShortBytes(item.info.queryId);","      hints = item.info.meta.columns.map(function (c) { return c.type; });","      var paramsInfo = utils.adaptNamedParamsPrepared(params, item.info.meta.columns);","      params = paramsInfo.params;","    }","    else {","      //as simple query","      frameWriter.writeByte(0);","      frameWriter.writeLString(item.query);","    }","    frameWriter.writeShort(params.length);","    params.forEach(function (param, paramIndex) {","      frameWriter.writeBytes(encoder.encode(param, hints ? hints[paramIndex] : null));","    });","  }, this);","  frameWriter.writeShort(this.options.consistency);","  if (this.version >= 3) {","    //Batch flags","    var flags = this.options.serialConsistency ? batchFlag.withSerialConsistency : 0;","    flags |= this.options.timestamp ? batchFlag.withDefaultTimestamp : 0;","    frameWriter.writeByte(flags);","    if (this.options.serialConsistency) {","      frameWriter.writeShort(this.options.serialConsistency);","    }","    if (this.options.timestamp) {","      var timestamp = this.options.timestamp;","      if (typeof timestamp === 'number') {","        timestamp = types.Long.fromNumber(timestamp);","      }","      frameWriter.writeLong(timestamp);","    }","  }","  return frameWriter.write(this.version, this.streamId, headerFlags);","};","","","exports.AuthResponseRequest = AuthResponseRequest;","exports.BatchRequest = BatchRequest;","exports.CredentialsRequest = CredentialsRequest;","exports.ExecuteRequest = ExecuteRequest;","exports.PrepareRequest = PrepareRequest;","exports.QueryRequest = QueryRequest;","exports.Request = Request;","exports.RegisterRequest = RegisterRequest;","exports.StartupRequest = StartupRequest;"],"l":{"2":1,"4":1,"5":1,"6":1,"12":1,"26":1,"36":1,"46":1,"47":0,"57":1,"58":0,"59":0,"60":0,"61":0,"62":0,"65":1,"67":1,"74":0,"75":0,"76":0,"78":0,"79":0,"81":0,"82":0,"83":0,"91":1,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"106":0,"107":0,"108":0,"109":0,"110":0,"112":0,"113":0,"115":0,"118":0,"119":0,"121":0,"123":0,"124":0,"126":0,"127":0,"129":0,"130":0,"132":0,"133":0,"135":0,"136":0,"137":0,"138":0,"140":0,"144":1,"145":0,"146":0,"147":0,"150":1,"151":0,"152":0,"153":0,"154":0,"157":1,"159":1,"165":0,"166":0,"167":0,"169":0,"170":0,"172":0,"173":0,"174":0,"178":0,"180":0,"183":1,"184":0,"185":0,"188":1,"190":1,"191":0,"192":0,"193":0,"196":1,"197":0,"198":0,"201":1,"203":1,"204":0,"205":0,"208":0,"211":1,"212":0,"213":0,"216":1,"218":1,"219":0,"220":0,"221":0,"229":1,"230":0,"231":0,"234":1,"236":1,"237":0,"238":0,"239":0,"246":1,"247":0,"248":0,"249":0,"252":1,"254":1,"255":0,"256":0,"257":0,"266":1,"267":0,"269":0,"270":0,"271":0,"272":0,"273":0,"276":1,"278":1,"281":0,"282":0,"284":0,"285":0,"286":0,"288":0,"289":0,"291":0,"292":0,"293":0,"294":0,"295":0,"296":0,"297":0,"299":0,"300":0,"301":0,"302":0,"303":0,"307":0,"308":0,"310":0,"311":0,"312":0,"315":0,"316":0,"318":0,"319":0,"320":0,"321":0,"322":0,"324":0,"325":0,"326":0,"327":0,"329":0,"332":0,"336":1,"337":1,"338":1,"339":1,"340":1,"341":1,"342":1,"343":1,"344":1}},"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/streams.js":{"path":"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/streams.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":1,"18":1,"19":0,"20":0,"21":0,"22":0,"23":0,"24":1,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":1,"68":0,"69":1,"70":0,"71":0,"72":0,"73":1,"74":1,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":1,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":1,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":1,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":1,"140":0,"141":0,"142":0,"143":0,"144":1,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":1,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":1,"197":0,"198":0,"199":0,"200":1,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":1,"211":0,"212":0,"213":0,"214":0,"215":0,"216":1,"217":0,"218":0,"219":0,"220":0,"221":0,"222":1,"223":0,"224":0,"225":1,"226":1,"227":0,"228":0,"229":0,"230":0,"231":0,"232":1,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":0,"243":0,"244":1,"245":0,"246":0,"247":0,"248":0,"249":0,"250":0,"251":0,"252":1,"253":1,"254":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0,0,0,0,0,0,0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0,0,0,0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0},"fnMap":{"1":{"name":"Protocol","line":18,"loc":{"start":{"line":18,"column":0},"end":{"line":18,"column":28}}},"2":{"name":"(anonymous_2)","line":29,"loc":{"start":{"line":29,"column":32},"end":{"line":29,"column":69}}},"3":{"name":"(anonymous_3)","line":47,"loc":{"start":{"line":47,"column":31},"end":{"line":47,"column":48}}},"4":{"name":"(anonymous_4)","line":113,"loc":{"start":{"line":113,"column":39},"end":{"line":113,"column":51}}},"5":{"name":"Parser","line":123,"loc":{"start":{"line":123,"column":0},"end":{"line":123,"column":41}}},"6":{"name":"(anonymous_6)","line":132,"loc":{"start":{"line":132,"column":30},"end":{"line":132,"column":66}}},"7":{"name":"(anonymous_7)","line":163,"loc":{"start":{"line":163,"column":29},"end":{"line":163,"column":56}}},"8":{"name":"(anonymous_8)","line":210,"loc":{"start":{"line":210,"column":38},"end":{"line":210,"column":65}}},"9":{"name":"(anonymous_9)","line":257,"loc":{"start":{"line":257,"column":34},"end":{"line":257,"column":61}}},"10":{"name":"(anonymous_10)","line":275,"loc":{"start":{"line":275,"column":34},"end":{"line":275,"column":61}}},"11":{"name":"(anonymous_11)","line":287,"loc":{"start":{"line":287,"column":31},"end":{"line":287,"column":60}}},"12":{"name":"(anonymous_12)","line":343,"loc":{"start":{"line":343,"column":29},"end":{"line":343,"column":58}}},"13":{"name":"(anonymous_13)","line":400,"loc":{"start":{"line":400,"column":30},"end":{"line":400,"column":53}}},"14":{"name":"(anonymous_14)","line":412,"loc":{"start":{"line":412,"column":30},"end":{"line":412,"column":46}}},"15":{"name":"(anonymous_15)","line":437,"loc":{"start":{"line":437,"column":38},"end":{"line":437,"column":96}}},"16":{"name":"(anonymous_16)","line":455,"loc":{"start":{"line":455,"column":36},"end":{"line":455,"column":107}}},"17":{"name":"ResultEmitter","line":471,"loc":{"start":{"line":471,"column":0},"end":{"line":471,"column":32}}},"18":{"name":"(anonymous_18)","line":481,"loc":{"start":{"line":481,"column":33},"end":{"line":481,"column":69}}},"19":{"name":"(anonymous_19)","line":496,"loc":{"start":{"line":496,"column":31},"end":{"line":496,"column":47}}},"20":{"name":"(anonymous_20)","line":525,"loc":{"start":{"line":525,"column":40},"end":{"line":525,"column":56}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":27}},"2":{"start":{"line":3,"column":0},"end":{"line":3,"column":31}},"3":{"start":{"line":4,"column":0},"end":{"line":4,"column":33}},"4":{"start":{"line":5,"column":0},"end":{"line":5,"column":31}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":31}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":31}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":33}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":36}},"9":{"start":{"line":11,"column":0},"end":{"line":11,"column":51}},"10":{"start":{"line":18,"column":0},"end":{"line":25,"column":1}},"11":{"start":{"line":19,"column":2},"end":{"line":19,"column":32}},"12":{"start":{"line":20,"column":2},"end":{"line":20,"column":21}},"13":{"start":{"line":21,"column":2},"end":{"line":21,"column":22}},"14":{"start":{"line":22,"column":2},"end":{"line":22,"column":27}},"15":{"start":{"line":23,"column":2},"end":{"line":23,"column":19}},"16":{"start":{"line":24,"column":2},"end":{"line":24,"column":22}},"17":{"start":{"line":27,"column":0},"end":{"line":27,"column":35}},"18":{"start":{"line":29,"column":0},"end":{"line":38,"column":2}},"19":{"start":{"line":30,"column":2},"end":{"line":30,"column":19}},"20":{"start":{"line":31,"column":2},"end":{"line":36,"column":3}},"21":{"start":{"line":32,"column":4},"end":{"line":32,"column":26}},"22":{"start":{"line":35,"column":4},"end":{"line":35,"column":16}},"23":{"start":{"line":37,"column":2},"end":{"line":37,"column":18}},"24":{"start":{"line":47,"column":0},"end":{"line":111,"column":2}},"25":{"start":{"line":48,"column":2},"end":{"line":50,"column":3}},"26":{"start":{"line":49,"column":4},"end":{"line":49,"column":11}},"27":{"start":{"line":51,"column":2},"end":{"line":55,"column":3}},"28":{"start":{"line":53,"column":4},"end":{"line":53,"column":57}},"29":{"start":{"line":54,"column":4},"end":{"line":54,"column":53}},"30":{"start":{"line":56,"column":2},"end":{"line":56,"column":17}},"31":{"start":{"line":57,"column":2},"end":{"line":57,"column":34}},"32":{"start":{"line":58,"column":2},"end":{"line":58,"column":21}},"33":{"start":{"line":59,"column":2},"end":{"line":69,"column":3}},"34":{"start":{"line":61,"column":4},"end":{"line":61,"column":40}},"35":{"start":{"line":62,"column":4},"end":{"line":65,"column":5}},"36":{"start":{"line":63,"column":6},"end":{"line":63,"column":51}},"37":{"start":{"line":64,"column":6},"end":{"line":64,"column":13}},"38":{"start":{"line":66,"column":4},"end":{"line":66,"column":100}},"39":{"start":{"line":67,"column":4},"end":{"line":67,"column":60}},"40":{"start":{"line":68,"column":4},"end":{"line":68,"column":29}},"41":{"start":{"line":70,"column":2},"end":{"line":70,"column":17}},"42":{"start":{"line":71,"column":2},"end":{"line":107,"column":3}},"43":{"start":{"line":72,"column":4},"end":{"line":86,"column":5}},"44":{"start":{"line":73,"column":6},"end":{"line":82,"column":7}},"45":{"start":{"line":74,"column":8},"end":{"line":76,"column":9}},"46":{"start":{"line":75,"column":10},"end":{"line":75,"column":16}},"47":{"start":{"line":78,"column":8},"end":{"line":78,"column":59}},"48":{"start":{"line":79,"column":8},"end":{"line":79,"column":49}},"49":{"start":{"line":80,"column":8},"end":{"line":80,"column":57}},"50":{"start":{"line":81,"column":8},"end":{"line":81,"column":14}},"51":{"start":{"line":84,"column":6},"end":{"line":84,"column":60}},"52":{"start":{"line":85,"column":6},"end":{"line":85,"column":32}},"53":{"start":{"line":88,"column":4},"end":{"line":88,"column":42}},"54":{"start":{"line":89,"column":4},"end":{"line":105,"column":5}},"55":{"start":{"line":90,"column":6},"end":{"line":90,"column":92}},"56":{"start":{"line":91,"column":6},"end":{"line":91,"column":59}},"57":{"start":{"line":93,"column":6},"end":{"line":93,"column":26}},"58":{"start":{"line":95,"column":9},"end":{"line":105,"column":5}},"59":{"start":{"line":98,"column":6},"end":{"line":98,"column":34}},"60":{"start":{"line":99,"column":6},"end":{"line":99,"column":35}},"61":{"start":{"line":100,"column":6},"end":{"line":103,"column":7}},"62":{"start":{"line":102,"column":8},"end":{"line":102,"column":95}},"63":{"start":{"line":104,"column":6},"end":{"line":104,"column":12}},"64":{"start":{"line":106,"column":4},"end":{"line":106,"column":25}},"65":{"start":{"line":108,"column":2},"end":{"line":110,"column":3}},"66":{"start":{"line":109,"column":4},"end":{"line":109,"column":24}},"67":{"start":{"line":113,"column":0},"end":{"line":115,"column":2}},"68":{"start":{"line":114,"column":2},"end":{"line":114,"column":51}},"69":{"start":{"line":123,"column":0},"end":{"line":128,"column":1}},"70":{"start":{"line":124,"column":2},"end":{"line":124,"column":38}},"71":{"start":{"line":126,"column":2},"end":{"line":126,"column":19}},"72":{"start":{"line":127,"column":2},"end":{"line":127,"column":25}},"73":{"start":{"line":130,"column":0},"end":{"line":130,"column":33}},"74":{"start":{"line":132,"column":0},"end":{"line":157,"column":2}},"75":{"start":{"line":133,"column":2},"end":{"line":133,"column":40}},"76":{"start":{"line":135,"column":2},"end":{"line":135,"column":19}},"77":{"start":{"line":136,"column":2},"end":{"line":141,"column":3}},"78":{"start":{"line":137,"column":4},"end":{"line":137,"column":36}},"79":{"start":{"line":140,"column":4},"end":{"line":140,"column":16}},"80":{"start":{"line":142,"column":2},"end":{"line":142,"column":18}},"81":{"start":{"line":144,"column":2},"end":{"line":156,"column":3}},"82":{"start":{"line":145,"column":4},"end":{"line":152,"column":5}},"83":{"start":{"line":147,"column":6},"end":{"line":151,"column":9}},"84":{"start":{"line":155,"column":4},"end":{"line":155,"column":61}},"85":{"start":{"line":163,"column":0},"end":{"line":202,"column":2}},"86":{"start":{"line":164,"column":2},"end":{"line":164,"column":89}},"87":{"start":{"line":165,"column":2},"end":{"line":168,"column":3}},"88":{"start":{"line":167,"column":4},"end":{"line":167,"column":11}},"89":{"start":{"line":169,"column":2},"end":{"line":169,"column":69}},"90":{"start":{"line":171,"column":2},"end":{"line":179,"column":3}},"91":{"start":{"line":172,"column":4},"end":{"line":172,"column":39}},"92":{"start":{"line":173,"column":4},"end":{"line":178,"column":5}},"93":{"start":{"line":174,"column":6},"end":{"line":174,"column":51}},"94":{"start":{"line":177,"column":6},"end":{"line":177,"column":75}},"95":{"start":{"line":183,"column":2},"end":{"line":201,"column":3}},"96":{"start":{"line":185,"column":6},"end":{"line":185,"column":49}},"97":{"start":{"line":188,"column":6},"end":{"line":188,"column":66}},"98":{"start":{"line":190,"column":6},"end":{"line":190,"column":100}},"99":{"start":{"line":192,"column":6},"end":{"line":192,"column":116}},"100":{"start":{"line":194,"column":6},"end":{"line":194,"column":79}},"101":{"start":{"line":196,"column":6},"end":{"line":196,"column":53}},"102":{"start":{"line":198,"column":6},"end":{"line":198,"column":79}},"103":{"start":{"line":200,"column":6},"end":{"line":200,"column":121}},"104":{"start":{"line":210,"column":0},"end":{"line":250,"column":2}},"105":{"start":{"line":211,"column":2},"end":{"line":225,"column":3}},"106":{"start":{"line":213,"column":4},"end":{"line":213,"column":88}},"107":{"start":{"line":214,"column":4},"end":{"line":218,"column":5}},"108":{"start":{"line":216,"column":6},"end":{"line":216,"column":43}},"109":{"start":{"line":217,"column":6},"end":{"line":217,"column":19}},"110":{"start":{"line":220,"column":4},"end":{"line":223,"column":5}},"111":{"start":{"line":221,"column":6},"end":{"line":221,"column":56}},"112":{"start":{"line":222,"column":6},"end":{"line":222,"column":22}},"113":{"start":{"line":224,"column":4},"end":{"line":224,"column":16}},"114":{"start":{"line":226,"column":2},"end":{"line":248,"column":3}},"115":{"start":{"line":228,"column":4},"end":{"line":230,"column":5}},"116":{"start":{"line":229,"column":6},"end":{"line":229,"column":104}},"117":{"start":{"line":231,"column":4},"end":{"line":231,"column":48}},"118":{"start":{"line":232,"column":4},"end":{"line":240,"column":5}},"119":{"start":{"line":234,"column":6},"end":{"line":236,"column":7}},"120":{"start":{"line":235,"column":8},"end":{"line":235,"column":108}},"121":{"start":{"line":237,"column":6},"end":{"line":237,"column":114}},"122":{"start":{"line":238,"column":6},"end":{"line":238,"column":34}},"123":{"start":{"line":239,"column":6},"end":{"line":239,"column":18}},"124":{"start":{"line":241,"column":4},"end":{"line":245,"column":5}},"125":{"start":{"line":243,"column":6},"end":{"line":243,"column":59}},"126":{"start":{"line":244,"column":6},"end":{"line":244,"column":19}},"127":{"start":{"line":246,"column":4},"end":{"line":246,"column":112}},"128":{"start":{"line":247,"column":4},"end":{"line":247,"column":32}},"129":{"start":{"line":249,"column":2},"end":{"line":249,"column":14}},"130":{"start":{"line":257,"column":0},"end":{"line":268,"column":2}},"131":{"start":{"line":258,"column":2},"end":{"line":262,"column":3}},"132":{"start":{"line":259,"column":4},"end":{"line":259,"column":58}},"133":{"start":{"line":260,"column":4},"end":{"line":260,"column":61}},"134":{"start":{"line":261,"column":4},"end":{"line":261,"column":11}},"135":{"start":{"line":263,"column":2},"end":{"line":265,"column":3}},"136":{"start":{"line":264,"column":4},"end":{"line":264,"column":102}},"137":{"start":{"line":266,"column":2},"end":{"line":266,"column":37}},"138":{"start":{"line":267,"column":2},"end":{"line":267,"column":46}},"139":{"start":{"line":275,"column":0},"end":{"line":280,"column":2}},"140":{"start":{"line":276,"column":2},"end":{"line":276,"column":37}},"141":{"start":{"line":277,"column":2},"end":{"line":277,"column":70}},"142":{"start":{"line":278,"column":2},"end":{"line":278,"column":27}},"143":{"start":{"line":279,"column":2},"end":{"line":279,"column":16}},"144":{"start":{"line":287,"column":0},"end":{"line":337,"column":2}},"145":{"start":{"line":288,"column":2},"end":{"line":288,"column":13}},"146":{"start":{"line":292,"column":2},"end":{"line":292,"column":37}},"147":{"start":{"line":293,"column":2},"end":{"line":324,"column":3}},"148":{"start":{"line":294,"column":4},"end":{"line":320,"column":5}},"149":{"start":{"line":295,"column":6},"end":{"line":295,"column":40}},"150":{"start":{"line":297,"column":6},"end":{"line":319,"column":7}},"151":{"start":{"line":299,"column":10},"end":{"line":299,"column":76}},"152":{"start":{"line":300,"column":10},"end":{"line":300,"column":16}},"153":{"start":{"line":303,"column":10},"end":{"line":303,"column":63}},"154":{"start":{"line":304,"column":10},"end":{"line":304,"column":16}},"155":{"start":{"line":306,"column":10},"end":{"line":306,"column":110}},"156":{"start":{"line":307,"column":10},"end":{"line":307,"column":16}},"157":{"start":{"line":309,"column":10},"end":{"line":309,"column":69}},"158":{"start":{"line":310,"column":10},"end":{"line":310,"column":63}},"159":{"start":{"line":311,"column":10},"end":{"line":311,"column":114}},"160":{"start":{"line":312,"column":10},"end":{"line":312,"column":16}},"161":{"start":{"line":314,"column":10},"end":{"line":314,"column":118}},"162":{"start":{"line":315,"column":10},"end":{"line":315,"column":16}},"163":{"start":{"line":318,"column":10},"end":{"line":318,"column":88}},"164":{"start":{"line":323,"column":4},"end":{"line":323,"column":73}},"165":{"start":{"line":325,"column":2},"end":{"line":332,"column":3}},"166":{"start":{"line":326,"column":4},"end":{"line":329,"column":5}},"167":{"start":{"line":328,"column":6},"end":{"line":328,"column":13}},"168":{"start":{"line":330,"column":4},"end":{"line":330,"column":29}},"169":{"start":{"line":331,"column":4},"end":{"line":331,"column":29}},"170":{"start":{"line":334,"column":2},"end":{"line":336,"column":3}},"171":{"start":{"line":335,"column":4},"end":{"line":335,"column":38}},"172":{"start":{"line":343,"column":0},"end":{"line":393,"column":2}},"173":{"start":{"line":344,"column":2},"end":{"line":347,"column":3}},"174":{"start":{"line":346,"column":4},"end":{"line":346,"column":11}},"175":{"start":{"line":348,"column":2},"end":{"line":355,"column":3}},"176":{"start":{"line":349,"column":4},"end":{"line":354,"column":5}},"177":{"start":{"line":350,"column":6},"end":{"line":350,"column":45}},"178":{"start":{"line":353,"column":6},"end":{"line":353,"column":59}},"179":{"start":{"line":356,"column":2},"end":{"line":361,"column":3}},"180":{"start":{"line":357,"column":4},"end":{"line":360,"column":7}},"181":{"start":{"line":362,"column":2},"end":{"line":362,"column":28}},"182":{"start":{"line":363,"column":2},"end":{"line":363,"column":47}},"183":{"start":{"line":364,"column":2},"end":{"line":392,"column":3}},"184":{"start":{"line":365,"column":4},"end":{"line":365,"column":34}},"185":{"start":{"line":366,"column":4},"end":{"line":366,"column":42}},"186":{"start":{"line":367,"column":4},"end":{"line":367,"column":19}},"187":{"start":{"line":368,"column":4},"end":{"line":383,"column":5}},"188":{"start":{"line":369,"column":6},"end":{"line":369,"column":30}},"189":{"start":{"line":370,"column":6},"end":{"line":375,"column":7}},"190":{"start":{"line":371,"column":8},"end":{"line":371,"column":40}},"191":{"start":{"line":374,"column":8},"end":{"line":374,"column":75}},"192":{"start":{"line":376,"column":6},"end":{"line":382,"column":7}},"193":{"start":{"line":377,"column":8},"end":{"line":377,"column":62}},"194":{"start":{"line":381,"column":8},"end":{"line":381,"column":59}},"195":{"start":{"line":384,"column":4},"end":{"line":391,"column":7}},"196":{"start":{"line":400,"column":0},"end":{"line":405,"column":2}},"197":{"start":{"line":401,"column":2},"end":{"line":403,"column":3}},"198":{"start":{"line":402,"column":4},"end":{"line":402,"column":74}},"199":{"start":{"line":404,"column":2},"end":{"line":404,"column":39}},"200":{"start":{"line":412,"column":0},"end":{"line":427,"column":2}},"201":{"start":{"line":413,"column":2},"end":{"line":413,"column":52}},"202":{"start":{"line":414,"column":2},"end":{"line":424,"column":3}},"203":{"start":{"line":415,"column":4},"end":{"line":415,"column":19}},"204":{"start":{"line":416,"column":4},"end":{"line":419,"column":5}},"205":{"start":{"line":418,"column":6},"end":{"line":418,"column":52}},"206":{"start":{"line":421,"column":7},"end":{"line":424,"column":3}},"207":{"start":{"line":423,"column":4},"end":{"line":423,"column":45}},"208":{"start":{"line":425,"column":2},"end":{"line":425,"column":33}},"209":{"start":{"line":426,"column":2},"end":{"line":426,"column":19}},"210":{"start":{"line":437,"column":0},"end":{"line":445,"column":2}},"211":{"start":{"line":438,"column":2},"end":{"line":441,"column":3}},"212":{"start":{"line":440,"column":4},"end":{"line":440,"column":96}},"213":{"start":{"line":442,"column":2},"end":{"line":442,"column":32}},"214":{"start":{"line":443,"column":2},"end":{"line":443,"column":30}},"215":{"start":{"line":444,"column":2},"end":{"line":444,"column":52}},"216":{"start":{"line":455,"column":0},"end":{"line":466,"column":2}},"217":{"start":{"line":456,"column":2},"end":{"line":458,"column":3}},"218":{"start":{"line":457,"column":4},"end":{"line":457,"column":35}},"219":{"start":{"line":459,"column":2},"end":{"line":459,"column":32}},"220":{"start":{"line":460,"column":2},"end":{"line":460,"column":44}},"221":{"start":{"line":461,"column":2},"end":{"line":465,"column":4}},"222":{"start":{"line":471,"column":0},"end":{"line":477,"column":1}},"223":{"start":{"line":472,"column":2},"end":{"line":472,"column":31}},"224":{"start":{"line":476,"column":2},"end":{"line":476,"column":22}},"225":{"start":{"line":479,"column":0},"end":{"line":479,"column":39}},"226":{"start":{"line":481,"column":0},"end":{"line":490,"column":2}},"227":{"start":{"line":482,"column":2},"end":{"line":482,"column":19}},"228":{"start":{"line":483,"column":2},"end":{"line":488,"column":3}},"229":{"start":{"line":484,"column":4},"end":{"line":484,"column":20}},"230":{"start":{"line":487,"column":4},"end":{"line":487,"column":16}},"231":{"start":{"line":489,"column":2},"end":{"line":489,"column":18}},"232":{"start":{"line":496,"column":0},"end":{"line":520,"column":2}},"233":{"start":{"line":497,"column":2},"end":{"line":501,"column":3}},"234":{"start":{"line":500,"column":4},"end":{"line":500,"column":69}},"235":{"start":{"line":502,"column":2},"end":{"line":504,"column":3}},"236":{"start":{"line":503,"column":4},"end":{"line":503,"column":48}},"237":{"start":{"line":505,"column":2},"end":{"line":508,"column":3}},"238":{"start":{"line":507,"column":4},"end":{"line":507,"column":87}},"239":{"start":{"line":509,"column":2},"end":{"line":513,"column":3}},"240":{"start":{"line":512,"column":4},"end":{"line":512,"column":36}},"241":{"start":{"line":514,"column":2},"end":{"line":517,"column":3}},"242":{"start":{"line":516,"column":4},"end":{"line":516,"column":59}},"243":{"start":{"line":519,"column":2},"end":{"line":519,"column":54}},"244":{"start":{"line":525,"column":0},"end":{"line":535,"column":2}},"245":{"start":{"line":526,"column":2},"end":{"line":526,"column":50}},"246":{"start":{"line":527,"column":2},"end":{"line":529,"column":3}},"247":{"start":{"line":528,"column":4},"end":{"line":528,"column":53}},"248":{"start":{"line":530,"column":2},"end":{"line":530,"column":22}},"249":{"start":{"line":531,"column":2},"end":{"line":534,"column":3}},"250":{"start":{"line":532,"column":4},"end":{"line":532,"column":94}},"251":{"start":{"line":533,"column":4},"end":{"line":533,"column":48}},"252":{"start":{"line":537,"column":0},"end":{"line":537,"column":28}},"253":{"start":{"line":538,"column":0},"end":{"line":538,"column":24}},"254":{"start":{"line":539,"column":0},"end":{"line":539,"column":38}}},"branchMap":{"1":{"line":48,"type":"if","locations":[{"start":{"line":48,"column":2},"end":{"line":48,"column":2}},{"start":{"line":48,"column":2},"end":{"line":48,"column":2}}]},"2":{"line":48,"type":"binary-expr","locations":[{"start":{"line":48,"column":6},"end":{"line":48,"column":12}},{"start":{"line":48,"column":16},"end":{"line":48,"column":34}}]},"3":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":2},"end":{"line":51,"column":2}},{"start":{"line":51,"column":2},"end":{"line":51,"column":2}}]},"4":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":2},"end":{"line":59,"column":2}},{"start":{"line":59,"column":2},"end":{"line":59,"column":2}}]},"5":{"line":62,"type":"if","locations":[{"start":{"line":62,"column":4},"end":{"line":62,"column":4}},{"start":{"line":62,"column":4},"end":{"line":62,"column":4}}]},"6":{"line":72,"type":"if","locations":[{"start":{"line":72,"column":4},"end":{"line":72,"column":4}},{"start":{"line":72,"column":4},"end":{"line":72,"column":4}}]},"7":{"line":73,"type":"if","locations":[{"start":{"line":73,"column":6},"end":{"line":73,"column":6}},{"start":{"line":73,"column":6},"end":{"line":73,"column":6}}]},"8":{"line":74,"type":"if","locations":[{"start":{"line":74,"column":8},"end":{"line":74,"column":8}},{"start":{"line":74,"column":8},"end":{"line":74,"column":8}}]},"9":{"line":89,"type":"if","locations":[{"start":{"line":89,"column":4},"end":{"line":89,"column":4}},{"start":{"line":89,"column":4},"end":{"line":89,"column":4}}]},"10":{"line":95,"type":"if","locations":[{"start":{"line":95,"column":9},"end":{"line":95,"column":9}},{"start":{"line":95,"column":9},"end":{"line":95,"column":9}}]},"11":{"line":100,"type":"if","locations":[{"start":{"line":100,"column":6},"end":{"line":100,"column":6}},{"start":{"line":100,"column":6},"end":{"line":100,"column":6}}]},"12":{"line":144,"type":"if","locations":[{"start":{"line":144,"column":2},"end":{"line":144,"column":2}},{"start":{"line":144,"column":2},"end":{"line":144,"column":2}}]},"13":{"line":145,"type":"if","locations":[{"start":{"line":145,"column":4},"end":{"line":145,"column":4}},{"start":{"line":145,"column":4},"end":{"line":145,"column":4}}]},"14":{"line":164,"type":"binary-expr","locations":[{"start":{"line":164,"column":26},"end":{"line":164,"column":41}},{"start":{"line":164,"column":45},"end":{"line":164,"column":88}}]},"15":{"line":165,"type":"if","locations":[{"start":{"line":165,"column":2},"end":{"line":165,"column":2}},{"start":{"line":165,"column":2},"end":{"line":165,"column":2}}]},"16":{"line":171,"type":"if","locations":[{"start":{"line":171,"column":2},"end":{"line":171,"column":2}},{"start":{"line":171,"column":2},"end":{"line":171,"column":2}}]},"17":{"line":183,"type":"switch","locations":[{"start":{"line":184,"column":4},"end":{"line":185,"column":49}},{"start":{"line":186,"column":4},"end":{"line":186,"column":29}},{"start":{"line":187,"column":4},"end":{"line":188,"column":66}},{"start":{"line":189,"column":4},"end":{"line":190,"column":100}},{"start":{"line":191,"column":4},"end":{"line":192,"column":116}},{"start":{"line":193,"column":4},"end":{"line":194,"column":79}},{"start":{"line":195,"column":4},"end":{"line":196,"column":53}},{"start":{"line":197,"column":4},"end":{"line":198,"column":79}},{"start":{"line":199,"column":4},"end":{"line":200,"column":121}}]},"18":{"line":211,"type":"if","locations":[{"start":{"line":211,"column":2},"end":{"line":211,"column":2}},{"start":{"line":211,"column":2},"end":{"line":211,"column":2}}]},"19":{"line":213,"type":"binary-expr","locations":[{"start":{"line":213,"column":25},"end":{"line":213,"column":47}},{"start":{"line":213,"column":51},"end":{"line":213,"column":52}}]},"20":{"line":214,"type":"if","locations":[{"start":{"line":214,"column":4},"end":{"line":214,"column":4}},{"start":{"line":214,"column":4},"end":{"line":214,"column":4}}]},"21":{"line":220,"type":"if","locations":[{"start":{"line":220,"column":4},"end":{"line":220,"column":4}},{"start":{"line":220,"column":4},"end":{"line":220,"column":4}}]},"22":{"line":226,"type":"if","locations":[{"start":{"line":226,"column":2},"end":{"line":226,"column":2}},{"start":{"line":226,"column":2},"end":{"line":226,"column":2}}]},"23":{"line":228,"type":"if","locations":[{"start":{"line":228,"column":4},"end":{"line":228,"column":4}},{"start":{"line":228,"column":4},"end":{"line":228,"column":4}}]},"24":{"line":232,"type":"if","locations":[{"start":{"line":232,"column":4},"end":{"line":232,"column":4}},{"start":{"line":232,"column":4},"end":{"line":232,"column":4}}]},"25":{"line":234,"type":"if","locations":[{"start":{"line":234,"column":6},"end":{"line":234,"column":6}},{"start":{"line":234,"column":6},"end":{"line":234,"column":6}}]},"26":{"line":241,"type":"if","locations":[{"start":{"line":241,"column":4},"end":{"line":241,"column":4}},{"start":{"line":241,"column":4},"end":{"line":241,"column":4}}]},"27":{"line":258,"type":"if","locations":[{"start":{"line":258,"column":2},"end":{"line":258,"column":2}},{"start":{"line":258,"column":2},"end":{"line":258,"column":2}}]},"28":{"line":263,"type":"if","locations":[{"start":{"line":263,"column":2},"end":{"line":263,"column":2}},{"start":{"line":263,"column":2},"end":{"line":263,"column":2}}]},"29":{"line":294,"type":"if","locations":[{"start":{"line":294,"column":4},"end":{"line":294,"column":4}},{"start":{"line":294,"column":4},"end":{"line":294,"column":4}}]},"30":{"line":297,"type":"switch","locations":[{"start":{"line":298,"column":8},"end":{"line":300,"column":16}},{"start":{"line":301,"column":8},"end":{"line":304,"column":16}},{"start":{"line":305,"column":8},"end":{"line":307,"column":16}},{"start":{"line":308,"column":8},"end":{"line":312,"column":16}},{"start":{"line":313,"column":8},"end":{"line":315,"column":16}},{"start":{"line":316,"column":8},"end":{"line":318,"column":88}}]},"31":{"line":325,"type":"if","locations":[{"start":{"line":325,"column":2},"end":{"line":325,"column":2}},{"start":{"line":325,"column":2},"end":{"line":325,"column":2}}]},"32":{"line":326,"type":"if","locations":[{"start":{"line":326,"column":4},"end":{"line":326,"column":4}},{"start":{"line":326,"column":4},"end":{"line":326,"column":4}}]},"33":{"line":334,"type":"if","locations":[{"start":{"line":334,"column":2},"end":{"line":334,"column":2}},{"start":{"line":334,"column":2},"end":{"line":334,"column":2}}]},"34":{"line":344,"type":"if","locations":[{"start":{"line":344,"column":2},"end":{"line":344,"column":2}},{"start":{"line":344,"column":2},"end":{"line":344,"column":2}}]},"35":{"line":348,"type":"if","locations":[{"start":{"line":348,"column":2},"end":{"line":348,"column":2}},{"start":{"line":348,"column":2},"end":{"line":348,"column":2}}]},"36":{"line":356,"type":"if","locations":[{"start":{"line":356,"column":2},"end":{"line":356,"column":2}},{"start":{"line":356,"column":2},"end":{"line":356,"column":2}}]},"37":{"line":363,"type":"binary-expr","locations":[{"start":{"line":363,"column":23},"end":{"line":363,"column":41}},{"start":{"line":363,"column":45},"end":{"line":363,"column":46}}]},"38":{"line":401,"type":"if","locations":[{"start":{"line":401,"column":2},"end":{"line":401,"column":2}},{"start":{"line":401,"column":2},"end":{"line":401,"column":2}}]},"39":{"line":414,"type":"if","locations":[{"start":{"line":414,"column":2},"end":{"line":414,"column":2}},{"start":{"line":414,"column":2},"end":{"line":414,"column":2}}]},"40":{"line":416,"type":"if","locations":[{"start":{"line":416,"column":4},"end":{"line":416,"column":4}},{"start":{"line":416,"column":4},"end":{"line":416,"column":4}}]},"41":{"line":421,"type":"if","locations":[{"start":{"line":421,"column":7},"end":{"line":421,"column":7}},{"start":{"line":421,"column":7},"end":{"line":421,"column":7}}]},"42":{"line":438,"type":"if","locations":[{"start":{"line":438,"column":2},"end":{"line":438,"column":2}},{"start":{"line":438,"column":2},"end":{"line":438,"column":2}}]},"43":{"line":438,"type":"binary-expr","locations":[{"start":{"line":438,"column":6},"end":{"line":438,"column":12}},{"start":{"line":438,"column":16},"end":{"line":438,"column":37}},{"start":{"line":438,"column":42},"end":{"line":438,"column":65}}]},"44":{"line":456,"type":"if","locations":[{"start":{"line":456,"column":2},"end":{"line":456,"column":2}},{"start":{"line":456,"column":2},"end":{"line":456,"column":2}}]},"45":{"line":456,"type":"binary-expr","locations":[{"start":{"line":456,"column":6},"end":{"line":456,"column":21}},{"start":{"line":456,"column":25},"end":{"line":456,"column":45}}]},"46":{"line":497,"type":"if","locations":[{"start":{"line":497,"column":2},"end":{"line":497,"column":2}},{"start":{"line":497,"column":2},"end":{"line":497,"column":2}}]},"47":{"line":497,"type":"binary-expr","locations":[{"start":{"line":497,"column":6},"end":{"line":497,"column":16}},{"start":{"line":497,"column":20},"end":{"line":497,"column":31}}]},"48":{"line":502,"type":"if","locations":[{"start":{"line":502,"column":2},"end":{"line":502,"column":2}},{"start":{"line":502,"column":2},"end":{"line":502,"column":2}}]},"49":{"line":505,"type":"if","locations":[{"start":{"line":505,"column":2},"end":{"line":505,"column":2}},{"start":{"line":505,"column":2},"end":{"line":505,"column":2}}]},"50":{"line":509,"type":"if","locations":[{"start":{"line":509,"column":2},"end":{"line":509,"column":2}},{"start":{"line":509,"column":2},"end":{"line":509,"column":2}}]},"51":{"line":514,"type":"if","locations":[{"start":{"line":514,"column":2},"end":{"line":514,"column":2}},{"start":{"line":514,"column":2},"end":{"line":514,"column":2}}]},"52":{"line":527,"type":"if","locations":[{"start":{"line":527,"column":2},"end":{"line":527,"column":2}},{"start":{"line":527,"column":2},"end":{"line":527,"column":2}}]},"53":{"line":531,"type":"if","locations":[{"start":{"line":531,"column":2},"end":{"line":531,"column":2}},{"start":{"line":531,"column":2},"end":{"line":531,"column":2}}]}},"code":["'use strict';","var util = require('util');","var stream = require('stream');","var Transform = stream.Transform;","var Writable = stream.Writable;","","var types = require('./types');","var utils = require('./utils');","var errors = require('./errors');","var FrameHeader = types.FrameHeader;","var FrameReader = require('./readers').FrameReader;","","/**"," * Transforms chunks, emits data objects {header, chunk}"," * @param options Stream options"," * @extends Transform"," */","function Protocol (options) {","  Transform.call(this, options);","  this.header = null;","  this.bodyLength = 0;","  this.clearHeaderChunks();","  this.version = 0;","  this.headerSize = 0;","}","","util.inherits(Protocol, Transform);","","Protocol.prototype._transform = function (chunk, encoding, callback) {","  var error = null;","  try {","    this.readItems(chunk);","  }","  catch (err) {","    error = err;","  }","  callback(error);","};","","/**"," * Parses the chunk into frames (header and body)."," * Emits (push) complete frames or frames with incomplete bodies. Following chunks containing the rest of the body will"," * be emitted using the same frame."," * It buffers incomplete headers."," * @param {Buffer} chunk"," */","Protocol.prototype.readItems = function (chunk) {","  if (!chunk || chunk.length === 0) {","    return;","  }","  if (this.version === 0) {","    //The server replies the first message with the max protocol version supported","    this.version = FrameHeader.getProtocolVersion(chunk);","    this.headerSize = FrameHeader.size(this.version);","  }","  var offset = 0;","  var currentHeader = this.header;","  this.header = null;","  if (this.headerChunks.byteLength !== 0) {","    //incomplete header was buffered try to read the header from the buffered chunks","    this.headerChunks.parts.push(chunk);","    if (this.headerChunks.byteLength + chunk.length < this.headerSize) {","      this.headerChunks.byteLength += chunk.length;","      return;","    }","    currentHeader = FrameHeader.fromBuffer(Buffer.concat(this.headerChunks.parts, this.headerSize));","    offset = this.headerSize - this.headerChunks.byteLength;","    this.clearHeaderChunks();","  }","  var items = [];","  while (true) {","    if (!currentHeader) {","      if (this.headerSize > chunk.length - offset) {","        if (chunk.length - offset <= 0) {","          break;","        }","        //the header is incomplete, buffer it until the next chunk","        var headerPart = chunk.slice(offset, chunk.length);","        this.headerChunks.parts.push(headerPart);","        this.headerChunks.byteLength = headerPart.length;","        break;","      }","      //read header","      currentHeader = FrameHeader.fromBuffer(chunk, offset);","      offset += this.headerSize;","    }","    //parse body","    var remaining = chunk.length - offset;","    if (currentHeader.bodyLength <= remaining + this.bodyLength) {","      items.push({ header: currentHeader, chunk: chunk, offset: offset, frameEnded: true });","      offset += currentHeader.bodyLength - this.bodyLength;","      //reset the body length","      this.bodyLength = 0;","    }","    else if (remaining >= 0) {","      //the body is not fully contained in this chunk","      //will continue later","      this.header = currentHeader;","      this.bodyLength += remaining;","      if (remaining > 0) {","        //emit if there is at least a byte to emit","        items.push({ header: currentHeader, chunk: chunk, offset: offset, frameEnded: false });","      }","      break;","    }","    currentHeader = null;","  }","  for (var i = 0; i < items.length; i++) {","    this.push(items[i]);","  }","};","","Protocol.prototype.clearHeaderChunks = function () {","  this.headerChunks = { byteLength: 0, parts: [] };","};","","/**"," * A stream that gets reads header + body chunks and transforms them into header + (row | error)"," * @param {Object} streamOptions Node.js Stream options"," * @param {Encoder} encoder Encoder instance for the parser to use"," * @extends Transform"," */","function Parser (streamOptions, encoder) {","  Transform.call(this, streamOptions);","  //frames that are streaming, indexed by id","  this.frames = {};","  this.encoder = encoder;","}","","util.inherits(Parser, Transform);","","Parser.prototype._transform = function (item, encoding, callback) {","  var frameInfo = this.frameState(item);","","  var error = null;","  try {","    this.parseBody(frameInfo, item);","  }","  catch (err) {","    error = err;","  }","  callback(error);","","  if (item.frameEnded) {","    if (frameInfo.cellBuffer) {","      //Frame was being streamed but an error force it to buffer the result","      this.push({","        header: frameInfo.header,","        error: new errors.DriverInternalError('There was an problem while parsing streaming frame, opcode ' +","          frameInfo.header.opcode)","      });","    }","    //all the parsing finished and it was streamed down","    //emit an item that signals it","    this.push({ header: frameInfo.header, frameEnded: true});","  }","};","","/**"," * @param frameInfo"," * @param {{header: FrameHeader, chunk: Buffer, offset: Number}} item"," */","Parser.prototype.parseBody = function (frameInfo, item) {","  frameInfo.isStreaming = frameInfo.byRow && item.header.opcode === types.opcodes.result;","  if (!this.handleFrameBuffers(frameInfo, item)) {","    // Frame isn't complete and we are not streaming the frame","    return;","  }","  var reader = new FrameReader(item.header, item.chunk, item.offset);","  // Check that flags have not been parsed yet for this frame","  if (frameInfo.flagsInfo === undefined) {","    var originalOffset = reader.offset;","    try {","      frameInfo.flagsInfo = reader.readFlagsInfo();","    }","    catch (e) {","      return this.handleParsingError(e, frameInfo, reader, originalOffset);","    }","  }","","  //All the body for most operations is already buffered at this stage","  //Except for RESULT","  switch (item.header.opcode) {","    case types.opcodes.result:","      return this.parseResult(frameInfo, reader);","    case types.opcodes.ready:","    case types.opcodes.authSuccess:","      return this.push({ header: frameInfo.header, ready: true });","    case types.opcodes.authChallenge:","      return this.push({ header: frameInfo.header, authChallenge: true, token: reader.readBytes()});","    case types.opcodes.authenticate:","      return this.push({ header: frameInfo.header, mustAuthenticate: true, authenticatorName: reader.readString()});","    case types.opcodes.error:","      return this.push({ header: frameInfo.header, error: reader.readError()});","    case types.opcodes.supported:","      return this.push({ header: frameInfo.header });","    case types.opcodes.event:","      return this.push({ header: frameInfo.header, event: reader.readEvent()});","    default:","      return this.push({ header: frameInfo.header, error: new Error('Received invalid opcode: ' + item.header.opcode) });","  }","};","","/**"," * Buffers if needed and returns true if it has all the necessary data to continue parsing the frame."," * @param frameInfo"," * @param {{header: FrameHeader, chunk: Buffer, offset: Number}} item"," * @returns {Boolean}"," */","Parser.prototype.handleFrameBuffers = function (frameInfo, item) {","  if (!frameInfo.isStreaming) {","    // Handle buffering for complete frame bodies","    var currentLength = (frameInfo.bufferLength || 0) + item.chunk.length - item.offset;","    if (currentLength < item.header.bodyLength) {","      //buffer until the frame is completed","      this.addFrameBuffer(frameInfo, item);","      return false;","    }","    //We have received the full frame body","    if (frameInfo.buffers) {","      item.chunk = this.getFrameBuffer(frameInfo, item);","      item.offset = 0;","    }","    return true;","  }","  if (frameInfo.cellBuffer) {","    // Handle buffering for frame cells (row cells or metadata cells)","    if (item.offset !== 0) {","      throw new errors.DriverInternalError('Following chunks can not have an offset greater than zero');","    }","    frameInfo.cellBuffer.parts.push(item.chunk);","    if (!frameInfo.cellBuffer.expectedLength) {","      //Its a buffer outside a row cell (metadata or other)","      if (frameInfo.cellBuffer.parts.length !== 2) {","        throw new errors.DriverInternalError('Buffer for streaming frame can not contain more than 1 item');","      }","      item.chunk = Buffer.concat(frameInfo.cellBuffer.parts, frameInfo.cellBuffer.byteLength + item.chunk.length);","      frameInfo.cellBuffer = null;","      return true;","    }","    if (frameInfo.cellBuffer.expectedLength > frameInfo.cellBuffer.byteLength + item.chunk.length) {","      //We still haven't got the cell data","      frameInfo.cellBuffer.byteLength += item.chunk.length;","      return false;","    }","    item.chunk = Buffer.concat(frameInfo.cellBuffer.parts, frameInfo.cellBuffer.byteLength + item.chunk.length);","    frameInfo.cellBuffer = null;","  }","  return true;","};","","/**"," * Adds this chunk to the frame buffers."," * @param frameInfo"," * @param {{header: FrameHeader, chunk: Buffer, offset: Number}} item"," */","Parser.prototype.addFrameBuffer = function (frameInfo, item) {","  if (!frameInfo.buffers) {","    frameInfo.buffers = [ item.chunk.slice(item.offset) ];","    frameInfo.bufferLength = item.chunk.length - item.offset;","    return;","  }","  if (item.offset > 0) {","    throw new errors.DriverInternalError('Following chunks can not have an offset greater than zero');","  }","  frameInfo.buffers.push(item.chunk);","  frameInfo.bufferLength += item.chunk.length;","};","","/**"," * Adds the last chunk and concatenates the frame buffers"," * @param frameInfo"," * @param {{header: FrameHeader, chunk: Buffer, offset: Number}} item"," */","Parser.prototype.getFrameBuffer = function (frameInfo, item) {","  frameInfo.buffers.push(item.chunk);","  var result = Buffer.concat(frameInfo.buffers, frameInfo.bodyLength);","  frameInfo.buffers = null;","  return result;","};","","/**"," * Tries to read the result in the body of a message"," * @param frameInfo Frame information, header / metadata"," * @param {FrameReader} reader"," */","Parser.prototype.parseResult = function (frameInfo, reader) {","  var result;","  // As we might be streaming and the frame buffer might not be complete,","  // read the metadata and different types of result values in a try-catch.","  // Store the reader position","  var originalOffset = reader.offset;","  try {","    if (!frameInfo.meta) {","      frameInfo.kind = reader.readInt();","      // Spec 4.2.5","      switch (frameInfo.kind) {","        case types.resultKind.voidResult:","          result = { header: frameInfo.header, flags: frameInfo.flagsInfo };","          break;","        case types.resultKind.rows:","          // Parse the rows metadata, the rest of the response is going to be parsed afterwards","          frameInfo.meta = reader.readMetadata(frameInfo.kind);","          break;","        case types.resultKind.setKeyspace:","          result = { header: frameInfo.header, keyspaceSet: reader.readString(), flags: frameInfo.flagsInfo };","          break;","        case types.resultKind.prepared:","          var preparedId = utils.copyBuffer(reader.readShortBytes());","          frameInfo.meta = reader.readMetadata(frameInfo.kind);","          result = { header: frameInfo.header, id: preparedId, meta: frameInfo.meta, flags: frameInfo.flagsInfo };","          break;","        case types.resultKind.schemaChange:","          result = { header: frameInfo.header, schemaChange: reader.parseSchemaChange(), flags: frameInfo.flagsInfo };","          break;","        default:","          //noinspection ExceptionCaughtLocallyJS","          throw errors.DriverInternalError('Unexpected result kind: ' + frameInfo.kind);","      }","    }","  }","  catch (e) {","    return this.handleParsingError(e, frameInfo, reader, originalOffset);","  }","  if (result) {","    if (frameInfo.emitted) {","      // It may contain additional metadata and info that it's not being parsed","      return;","    }","    frameInfo.emitted = true;","    return this.push(result);","  }","  // Its a `Rows` result","  if (reader.remainingLength() > 0) {","    this.parseRows(frameInfo, reader);","  }","};","","/**"," * @param frameInfo"," * @param {FrameReader} reader"," */","Parser.prototype.parseRows = function (frameInfo, reader) {","  if (frameInfo.parsingError) {","    //No more processing on this frame","    return;","  }","  if (frameInfo.rowLength === undefined) {","    try {","      frameInfo.rowLength = reader.readInt();","    }","    catch (e) {","      return this.handleParsingError(e, frameInfo, reader);","    }","  }","  if (frameInfo.rowLength === 0) {","    return this.push({","      header: frameInfo.header,","      result: { rows: utils.emptyArray, meta: frameInfo.meta, flags: frameInfo.flagsInfo }","    });","  }","  var meta = frameInfo.meta;","  frameInfo.rowIndex = frameInfo.rowIndex || 0;","  for (var i = frameInfo.rowIndex; i < frameInfo.rowLength; i++) {","    var rowOffset = reader.offset;","    var row = new types.Row(meta.columns);","    var cellBuffer;","    for (var j = 0; j < meta.columns.length; j++ ) {","      var c = meta.columns[j];","      try {","        cellBuffer = reader.readBytes();","      }","      catch (e) {","        return this.handleParsingError(e, frameInfo, reader, rowOffset, i);","      }","      try {","        row[c.name] = this.encoder.decode(cellBuffer, c.type);","      }","      catch (e) {","        //Something went wrong while decoding, we are not going to be able to recover","        return this.handleParsingError(e, frameInfo, null);","      }","    }","    this.push({","      header: frameInfo.header,","      row: row,","      meta: frameInfo.meta,","      byRow: frameInfo.byRow,","      length: frameInfo.rowLength,","      flags: frameInfo.flagsInfo","    });","  }","};","","/**"," * Sets parser options (ie: how to yield the results as they are parsed)"," * @param {Number} id Id of the stream"," * @param options"," */","Parser.prototype.setOptions = function (id, options) {","  if (this.frames[id.toString()]) {","    throw new types.DriverError('There was already state for this frame');","  }","  this.frames[id.toString()] = options;","};","","/**"," * Gets the frame info from the internal state."," * In case it is not there, it creates it."," * In case the frame ended"," */","Parser.prototype.frameState = function (item) {","  var frameInfo = this.frames[item.header.streamId];","  if (!frameInfo) {","    frameInfo = {};","    if (!item.frameEnded) {","      //store it in the frames","      this.frames[item.header.streamId] = frameInfo;","    }","  }","  else if (item.frameEnded) {","    //if it was already stored, remove it","    delete this.frames[item.header.streamId];","  }","  frameInfo.header = item.header;","  return frameInfo;","};","","/**"," * Handles parsing error: pushing an error if its unexpected or buffer the cell if its streaming"," * @param {Error} e"," * @param frameInfo"," * @param {FrameReader} reader"," * @param {Number} [originalOffset]"," * @param {Number} [rowIndex]"," */","Parser.prototype.handleParsingError = function (e, frameInfo, reader, originalOffset, rowIndex) {","  if (reader && frameInfo.isStreaming && (e instanceof RangeError)) {","    //A controlled error, buffer from offset and move on","    return this.bufferResultCell(frameInfo, reader, originalOffset, rowIndex, e.expectedLength);","  }","  frameInfo.parsingError = true;","  frameInfo.cellBuffer = null;","  this.push({ header: frameInfo.header, error: e });","};","","/**"," * When streaming, it buffers data since originalOffset."," * @param frameInfo"," * @param {FrameReader} reader"," * @param {Number} [originalOffset]"," * @param {Number} [rowIndex]"," * @param {Number} [expectedLength]"," */","Parser.prototype.bufferResultCell = function (frameInfo, reader, originalOffset, rowIndex, expectedLength) {","  if (!originalOffset && originalOffset !== 0) {","    originalOffset = reader.offset;","  }","  frameInfo.rowIndex = rowIndex;","  var buffer = reader.slice(originalOffset);","  frameInfo.cellBuffer = {","    parts: [ buffer ],","    byteLength: buffer.length,","    expectedLength: expectedLength","  };","};","","/**"," * Represents a writable streams that emits results"," */","function ResultEmitter(options) {","  Writable.call(this, options);","  /**","   * Stores the rows for frames that needs to be yielded as one result with many rows","   */","  this.rowBuffer = {};","}","","util.inherits(ResultEmitter, Writable);","","ResultEmitter.prototype._write = function (item, encoding, callback) {","  var error = null;","  try {","    this.each(item);","  }","  catch (err) {","    error = err;","  }","  callback(error);","};","","","/**"," * Analyzes the item and emit the corresponding event"," */","ResultEmitter.prototype.each = function (item) {","  if (item.error || item.result) {","    //Its either an error or an empty array rows","    //no transformation needs to be made","    return this.emit('result', item.header, item.error, item.result);","  }","  if (item.frameEnded) {","    return this.emit('frameEnded', item.header);","  }","  if (item.byRow) {","    //it should be yielded by row","    return this.emit('row', item.header, item.row, item.meta, item.length, item.flags);","  }","  if (item.row) {","    //it should be yielded as a result","    //it needs to be buffered to an array of rows","    return this.bufferAndEmit(item);","  }","  if (item.event) {","    //its an event from Cassandra","    return this.emit('nodeEvent', item.header, item.event);","  }","  //its a raw response (object with flags)","  return this.emit('result', item.header, null, item);","};","","/**"," * Buffers the rows until the result set is completed and emits the result event."," */","ResultEmitter.prototype.bufferAndEmit = function (item) {","  var rows = this.rowBuffer[item.header.streamId];","  if (!rows) {","    rows = this.rowBuffer[item.header.streamId] = [];","  }","  rows.push(item.row);","  if (rows.length === item.length) {","    this.emit('result', item.header, null, { rows: rows, meta: item.meta, flags: item.flags});","    delete this.rowBuffer[item.header.streamId];","  }","};","","exports.Protocol = Protocol;","exports.Parser = Parser;","exports.ResultEmitter = ResultEmitter;",""],"l":{"2":1,"3":1,"4":1,"5":1,"7":1,"8":1,"9":1,"10":1,"11":1,"18":1,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"27":1,"29":1,"30":0,"31":0,"32":0,"35":0,"37":0,"47":1,"48":0,"49":0,"51":0,"53":0,"54":0,"56":0,"57":0,"58":0,"59":0,"61":0,"62":0,"63":0,"64":0,"66":0,"67":0,"68":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"78":0,"79":0,"80":0,"81":0,"84":0,"85":0,"88":0,"89":0,"90":0,"91":0,"93":0,"95":0,"98":0,"99":0,"100":0,"102":0,"104":0,"106":0,"108":0,"109":0,"113":1,"114":0,"123":1,"124":0,"126":0,"127":0,"130":1,"132":1,"133":0,"135":0,"136":0,"137":0,"140":0,"142":0,"144":0,"145":0,"147":0,"155":0,"163":1,"164":0,"165":0,"167":0,"169":0,"171":0,"172":0,"173":0,"174":0,"177":0,"183":0,"185":0,"188":0,"190":0,"192":0,"194":0,"196":0,"198":0,"200":0,"210":1,"211":0,"213":0,"214":0,"216":0,"217":0,"220":0,"221":0,"222":0,"224":0,"226":0,"228":0,"229":0,"231":0,"232":0,"234":0,"235":0,"237":0,"238":0,"239":0,"241":0,"243":0,"244":0,"246":0,"247":0,"249":0,"257":1,"258":0,"259":0,"260":0,"261":0,"263":0,"264":0,"266":0,"267":0,"275":1,"276":0,"277":0,"278":0,"279":0,"287":1,"288":0,"292":0,"293":0,"294":0,"295":0,"297":0,"299":0,"300":0,"303":0,"304":0,"306":0,"307":0,"309":0,"310":0,"311":0,"312":0,"314":0,"315":0,"318":0,"323":0,"325":0,"326":0,"328":0,"330":0,"331":0,"334":0,"335":0,"343":1,"344":0,"346":0,"348":0,"349":0,"350":0,"353":0,"356":0,"357":0,"362":0,"363":0,"364":0,"365":0,"366":0,"367":0,"368":0,"369":0,"370":0,"371":0,"374":0,"376":0,"377":0,"381":0,"384":0,"400":1,"401":0,"402":0,"404":0,"412":1,"413":0,"414":0,"415":0,"416":0,"418":0,"421":0,"423":0,"425":0,"426":0,"437":1,"438":0,"440":0,"442":0,"443":0,"444":0,"455":1,"456":0,"457":0,"459":0,"460":0,"461":0,"471":1,"472":0,"476":0,"479":1,"481":1,"482":0,"483":0,"484":0,"487":0,"489":0,"496":1,"497":0,"500":0,"502":0,"503":0,"505":0,"507":0,"509":0,"512":0,"514":0,"516":0,"519":0,"525":1,"526":0,"527":0,"528":0,"530":0,"531":0,"532":0,"533":0,"537":1,"538":1,"539":1}},"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/readers.js":{"path":"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/readers.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":1,"11":0,"12":1,"13":0,"14":1,"15":0,"16":0,"17":0,"18":1,"19":0,"20":0,"21":0,"22":1,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":1,"30":0,"31":1,"32":0,"33":0,"34":0,"35":1,"36":0,"37":0,"38":0,"39":1,"40":0,"41":0,"42":0,"43":1,"44":0,"45":0,"46":0,"47":0,"48":0,"49":1,"50":0,"51":0,"52":0,"53":0,"54":1,"55":0,"56":0,"57":0,"58":0,"59":0,"60":1,"61":0,"62":0,"63":0,"64":0,"65":0,"66":1,"67":0,"68":0,"69":0,"70":0,"71":0,"72":1,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":1,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":1,"100":0,"101":0,"102":0,"103":1,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":1,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":1,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":1,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":1,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0,0,0,0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0,0,0,0,0,0],"23":[0,0],"24":[0,0],"25":[0,0,0],"26":[0,0],"27":[0,0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0},"fnMap":{"1":{"name":"FrameReader","line":22,"loc":{"start":{"line":22,"column":0},"end":{"line":22,"column":43}}},"2":{"name":"(anonymous_2)","line":29,"loc":{"start":{"line":29,"column":40},"end":{"line":29,"column":52}}},"3":{"name":"(anonymous_3)","line":33,"loc":{"start":{"line":33,"column":34},"end":{"line":33,"column":46}}},"4":{"name":"(anonymous_4)","line":43,"loc":{"start":{"line":43,"column":30},"end":{"line":43,"column":52}}},"5":{"name":"(anonymous_5)","line":53,"loc":{"start":{"line":53,"column":32},"end":{"line":53,"column":49}}},"6":{"name":"(anonymous_6)","line":66,"loc":{"start":{"line":66,"column":29},"end":{"line":66,"column":47}}},"7":{"name":"(anonymous_7)","line":79,"loc":{"start":{"line":79,"column":30},"end":{"line":79,"column":42}}},"8":{"name":"(anonymous_8)","line":87,"loc":{"start":{"line":87,"column":32},"end":{"line":87,"column":43}}},"9":{"name":"(anonymous_9)","line":94,"loc":{"start":{"line":94,"column":34},"end":{"line":94,"column":46}}},"10":{"name":"(anonymous_10)","line":100,"loc":{"start":{"line":100,"column":33},"end":{"line":100,"column":45}}},"11":{"name":"(anonymous_11)","line":106,"loc":{"start":{"line":106,"column":35},"end":{"line":106,"column":47}}},"12":{"name":"(anonymous_12)","line":118,"loc":{"start":{"line":118,"column":36},"end":{"line":118,"column":57}}},"13":{"name":"(anonymous_13)","line":130,"loc":{"start":{"line":130,"column":39},"end":{"line":130,"column":51}}},"14":{"name":"(anonymous_14)","line":143,"loc":{"start":{"line":143,"column":34},"end":{"line":143,"column":46}}},"15":{"name":"(anonymous_15)","line":152,"loc":{"start":{"line":152,"column":39},"end":{"line":152,"column":51}}},"16":{"name":"(anonymous_16)","line":165,"loc":{"start":{"line":165,"column":37},"end":{"line":165,"column":49}}},"17":{"name":"(anonymous_17)","line":183,"loc":{"start":{"line":183,"column":33},"end":{"line":183,"column":45}}},"18":{"name":"(anonymous_18)","line":227,"loc":{"start":{"line":227,"column":33},"end":{"line":227,"column":45}}},"19":{"name":"(anonymous_19)","line":238,"loc":{"start":{"line":238,"column":38},"end":{"line":238,"column":50}}},"20":{"name":"(anonymous_20)","line":262,"loc":{"start":{"line":262,"column":37},"end":{"line":262,"column":53}}},"21":{"name":"(anonymous_21)","line":314,"loc":{"start":{"line":314,"column":34},"end":{"line":314,"column":46}}},"22":{"name":"(anonymous_22)","line":361,"loc":{"start":{"line":361,"column":34},"end":{"line":361,"column":46}}},"23":{"name":"(anonymous_23)","line":381,"loc":{"start":{"line":381,"column":42},"end":{"line":381,"column":54}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":31}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":31}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":33}},"4":{"start":{"line":10,"column":0},"end":{"line":14,"column":2}},"5":{"start":{"line":22,"column":0},"end":{"line":27,"column":1}},"6":{"start":{"line":23,"column":2},"end":{"line":23,"column":23}},"7":{"start":{"line":24,"column":2},"end":{"line":24,"column":30}},"8":{"start":{"line":25,"column":2},"end":{"line":25,"column":28}},"9":{"start":{"line":26,"column":2},"end":{"line":26,"column":18}},"10":{"start":{"line":29,"column":0},"end":{"line":31,"column":2}},"11":{"start":{"line":30,"column":2},"end":{"line":30,"column":39}},"12":{"start":{"line":33,"column":0},"end":{"line":35,"column":2}},"13":{"start":{"line":34,"column":2},"end":{"line":34,"column":18}},"14":{"start":{"line":43,"column":0},"end":{"line":48,"column":2}},"15":{"start":{"line":44,"column":2},"end":{"line":46,"column":3}},"16":{"start":{"line":45,"column":4},"end":{"line":45,"column":26}},"17":{"start":{"line":47,"column":2},"end":{"line":47,"column":36}},"18":{"start":{"line":53,"column":0},"end":{"line":58,"column":2}},"19":{"start":{"line":54,"column":2},"end":{"line":56,"column":3}},"20":{"start":{"line":55,"column":4},"end":{"line":55,"column":76}},"21":{"start":{"line":57,"column":2},"end":{"line":57,"column":78}},"22":{"start":{"line":66,"column":0},"end":{"line":74,"column":2}},"23":{"start":{"line":67,"column":2},"end":{"line":67,"column":28}},"24":{"start":{"line":68,"column":2},"end":{"line":70,"column":3}},"25":{"start":{"line":69,"column":4},"end":{"line":69,"column":31}},"26":{"start":{"line":71,"column":2},"end":{"line":71,"column":43}},"27":{"start":{"line":72,"column":2},"end":{"line":72,"column":20}},"28":{"start":{"line":73,"column":2},"end":{"line":73,"column":15}},"29":{"start":{"line":79,"column":0},"end":{"line":81,"column":2}},"30":{"start":{"line":80,"column":2},"end":{"line":80,"column":32}},"31":{"start":{"line":87,"column":0},"end":{"line":91,"column":2}},"32":{"start":{"line":88,"column":2},"end":{"line":88,"column":49}},"33":{"start":{"line":89,"column":2},"end":{"line":89,"column":19}},"34":{"start":{"line":90,"column":2},"end":{"line":90,"column":16}},"35":{"start":{"line":94,"column":0},"end":{"line":98,"column":2}},"36":{"start":{"line":95,"column":2},"end":{"line":95,"column":50}},"37":{"start":{"line":96,"column":2},"end":{"line":96,"column":19}},"38":{"start":{"line":97,"column":2},"end":{"line":97,"column":16}},"39":{"start":{"line":100,"column":0},"end":{"line":104,"column":2}},"40":{"start":{"line":101,"column":2},"end":{"line":101,"column":47}},"41":{"start":{"line":102,"column":2},"end":{"line":102,"column":19}},"42":{"start":{"line":103,"column":2},"end":{"line":103,"column":16}},"43":{"start":{"line":106,"column":0},"end":{"line":112,"column":2}},"44":{"start":{"line":107,"column":2},"end":{"line":107,"column":32}},"45":{"start":{"line":108,"column":2},"end":{"line":108,"column":27}},"46":{"start":{"line":109,"column":2},"end":{"line":109,"column":74}},"47":{"start":{"line":110,"column":2},"end":{"line":110,"column":24}},"48":{"start":{"line":111,"column":2},"end":{"line":111,"column":16}},"49":{"start":{"line":118,"column":0},"end":{"line":124,"column":2}},"50":{"start":{"line":119,"column":2},"end":{"line":123,"column":3}},"51":{"start":{"line":120,"column":4},"end":{"line":120,"column":70}},"52":{"start":{"line":121,"column":4},"end":{"line":121,"column":35}},"53":{"start":{"line":122,"column":4},"end":{"line":122,"column":14}},"54":{"start":{"line":130,"column":0},"end":{"line":137,"column":2}},"55":{"start":{"line":131,"column":2},"end":{"line":131,"column":32}},"56":{"start":{"line":132,"column":2},"end":{"line":132,"column":31}},"57":{"start":{"line":133,"column":2},"end":{"line":135,"column":3}},"58":{"start":{"line":134,"column":4},"end":{"line":134,"column":32}},"59":{"start":{"line":136,"column":2},"end":{"line":136,"column":14}},"60":{"start":{"line":143,"column":0},"end":{"line":150,"column":2}},"61":{"start":{"line":144,"column":2},"end":{"line":144,"column":30}},"62":{"start":{"line":145,"column":2},"end":{"line":147,"column":3}},"63":{"start":{"line":146,"column":4},"end":{"line":146,"column":16}},"64":{"start":{"line":148,"column":2},"end":{"line":148,"column":27}},"65":{"start":{"line":149,"column":2},"end":{"line":149,"column":27}},"66":{"start":{"line":152,"column":0},"end":{"line":159,"column":2}},"67":{"start":{"line":153,"column":2},"end":{"line":153,"column":32}},"68":{"start":{"line":154,"column":2},"end":{"line":156,"column":3}},"69":{"start":{"line":155,"column":4},"end":{"line":155,"column":16}},"70":{"start":{"line":157,"column":2},"end":{"line":157,"column":27}},"71":{"start":{"line":158,"column":2},"end":{"line":158,"column":27}},"72":{"start":{"line":165,"column":0},"end":{"line":177,"column":2}},"73":{"start":{"line":168,"column":2},"end":{"line":168,"column":32}},"74":{"start":{"line":169,"column":2},"end":{"line":171,"column":3}},"75":{"start":{"line":170,"column":4},"end":{"line":170,"column":16}},"76":{"start":{"line":172,"column":2},"end":{"line":172,"column":15}},"77":{"start":{"line":173,"column":2},"end":{"line":175,"column":3}},"78":{"start":{"line":174,"column":4},"end":{"line":174,"column":46}},"79":{"start":{"line":176,"column":2},"end":{"line":176,"column":13}},"80":{"start":{"line":183,"column":0},"end":{"line":221,"column":2}},"81":{"start":{"line":184,"column":2},"end":{"line":184,"column":8}},"82":{"start":{"line":185,"column":2},"end":{"line":188,"column":4}},"83":{"start":{"line":189,"column":2},"end":{"line":219,"column":3}},"84":{"start":{"line":191,"column":6},"end":{"line":191,"column":36}},"85":{"start":{"line":192,"column":6},"end":{"line":192,"column":12}},"86":{"start":{"line":195,"column":6},"end":{"line":195,"column":34}},"87":{"start":{"line":196,"column":6},"end":{"line":196,"column":12}},"88":{"start":{"line":198,"column":6},"end":{"line":198,"column":53}},"89":{"start":{"line":199,"column":6},"end":{"line":199,"column":12}},"90":{"start":{"line":201,"column":6},"end":{"line":205,"column":8}},"91":{"start":{"line":206,"column":6},"end":{"line":211,"column":7}},"92":{"start":{"line":207,"column":8},"end":{"line":210,"column":10}},"93":{"start":{"line":212,"column":6},"end":{"line":212,"column":12}},"94":{"start":{"line":214,"column":6},"end":{"line":214,"column":46}},"95":{"start":{"line":215,"column":6},"end":{"line":217,"column":7}},"96":{"start":{"line":216,"column":8},"end":{"line":216,"column":39}},"97":{"start":{"line":218,"column":6},"end":{"line":218,"column":12}},"98":{"start":{"line":220,"column":2},"end":{"line":220,"column":14}},"99":{"start":{"line":227,"column":0},"end":{"line":231,"column":2}},"100":{"start":{"line":228,"column":2},"end":{"line":228,"column":31}},"101":{"start":{"line":229,"column":2},"end":{"line":229,"column":34}},"102":{"start":{"line":230,"column":2},"end":{"line":230,"column":73}},"103":{"start":{"line":238,"column":0},"end":{"line":254,"column":2}},"104":{"start":{"line":239,"column":2},"end":{"line":241,"column":3}},"105":{"start":{"line":240,"column":4},"end":{"line":240,"column":29}},"106":{"start":{"line":242,"column":2},"end":{"line":242,"column":18}},"107":{"start":{"line":243,"column":2},"end":{"line":246,"column":3}},"108":{"start":{"line":244,"column":4},"end":{"line":244,"column":25}},"109":{"start":{"line":245,"column":4},"end":{"line":245,"column":69}},"110":{"start":{"line":247,"column":2},"end":{"line":249,"column":3}},"111":{"start":{"line":248,"column":4},"end":{"line":248,"column":44}},"112":{"start":{"line":250,"column":2},"end":{"line":252,"column":3}},"113":{"start":{"line":251,"column":4},"end":{"line":251,"column":47}},"114":{"start":{"line":253,"column":2},"end":{"line":253,"column":16}},"115":{"start":{"line":262,"column":0},"end":{"line":307,"column":2}},"116":{"start":{"line":263,"column":2},"end":{"line":263,"column":8}},"117":{"start":{"line":265,"column":2},"end":{"line":265,"column":56}},"118":{"start":{"line":266,"column":2},"end":{"line":266,"column":16}},"119":{"start":{"line":268,"column":2},"end":{"line":268,"column":29}},"120":{"start":{"line":270,"column":2},"end":{"line":270,"column":36}},"121":{"start":{"line":271,"column":2},"end":{"line":277,"column":3}},"122":{"start":{"line":273,"column":4},"end":{"line":273,"column":51}},"123":{"start":{"line":274,"column":4},"end":{"line":276,"column":5}},"124":{"start":{"line":275,"column":6},"end":{"line":275,"column":47}},"125":{"start":{"line":278,"column":2},"end":{"line":280,"column":3}},"126":{"start":{"line":279,"column":4},"end":{"line":279,"column":56}},"127":{"start":{"line":281,"column":2},"end":{"line":285,"column":3}},"128":{"start":{"line":282,"column":4},"end":{"line":282,"column":35}},"129":{"start":{"line":283,"column":4},"end":{"line":283,"column":38}},"130":{"start":{"line":284,"column":4},"end":{"line":284,"column":35}},"131":{"start":{"line":286,"column":2},"end":{"line":286,"column":41}},"132":{"start":{"line":287,"column":2},"end":{"line":287,"column":41}},"133":{"start":{"line":288,"column":2},"end":{"line":291,"column":3}},"134":{"start":{"line":290,"column":4},"end":{"line":290,"column":28}},"135":{"start":{"line":292,"column":2},"end":{"line":304,"column":3}},"136":{"start":{"line":293,"column":4},"end":{"line":293,"column":17}},"137":{"start":{"line":294,"column":4},"end":{"line":297,"column":5}},"138":{"start":{"line":295,"column":6},"end":{"line":295,"column":37}},"139":{"start":{"line":296,"column":6},"end":{"line":296,"column":40}},"140":{"start":{"line":298,"column":4},"end":{"line":298,"column":33}},"141":{"start":{"line":299,"column":4},"end":{"line":299,"column":31}},"142":{"start":{"line":300,"column":4},"end":{"line":300,"column":26}},"143":{"start":{"line":301,"column":4},"end":{"line":303,"column":5}},"144":{"start":{"line":302,"column":6},"end":{"line":302,"column":39}},"145":{"start":{"line":306,"column":2},"end":{"line":306,"column":14}},"146":{"start":{"line":314,"column":0},"end":{"line":355,"column":2}},"147":{"start":{"line":315,"column":2},"end":{"line":315,"column":28}},"148":{"start":{"line":316,"column":2},"end":{"line":316,"column":34}},"149":{"start":{"line":317,"column":2},"end":{"line":317,"column":52}},"150":{"start":{"line":319,"column":2},"end":{"line":353,"column":3}},"151":{"start":{"line":321,"column":6},"end":{"line":321,"column":43}},"152":{"start":{"line":322,"column":6},"end":{"line":322,"column":36}},"153":{"start":{"line":323,"column":6},"end":{"line":323,"column":33}},"154":{"start":{"line":324,"column":6},"end":{"line":324,"column":12}},"155":{"start":{"line":327,"column":6},"end":{"line":327,"column":43}},"156":{"start":{"line":328,"column":6},"end":{"line":328,"column":36}},"157":{"start":{"line":329,"column":6},"end":{"line":329,"column":36}},"158":{"start":{"line":330,"column":6},"end":{"line":332,"column":7}},"159":{"start":{"line":331,"column":8},"end":{"line":331,"column":38}},"160":{"start":{"line":333,"column":6},"end":{"line":333,"column":42}},"161":{"start":{"line":334,"column":6},"end":{"line":334,"column":12}},"162":{"start":{"line":337,"column":6},"end":{"line":337,"column":43}},"163":{"start":{"line":338,"column":6},"end":{"line":338,"column":36}},"164":{"start":{"line":339,"column":6},"end":{"line":339,"column":36}},"165":{"start":{"line":340,"column":6},"end":{"line":342,"column":7}},"166":{"start":{"line":341,"column":8},"end":{"line":341,"column":38}},"167":{"start":{"line":343,"column":6},"end":{"line":343,"column":40}},"168":{"start":{"line":344,"column":6},"end":{"line":344,"column":12}},"169":{"start":{"line":346,"column":6},"end":{"line":346,"column":60}},"170":{"start":{"line":347,"column":6},"end":{"line":347,"column":12}},"171":{"start":{"line":349,"column":6},"end":{"line":349,"column":39}},"172":{"start":{"line":350,"column":6},"end":{"line":350,"column":43}},"173":{"start":{"line":351,"column":6},"end":{"line":351,"column":43}},"174":{"start":{"line":352,"column":6},"end":{"line":352,"column":12}},"175":{"start":{"line":354,"column":2},"end":{"line":354,"column":13}},"176":{"start":{"line":361,"column":0},"end":{"line":379,"column":2}},"177":{"start":{"line":362,"column":2},"end":{"line":362,"column":36}},"178":{"start":{"line":363,"column":2},"end":{"line":376,"column":3}},"179":{"start":{"line":365,"column":6},"end":{"line":368,"column":30}},"180":{"start":{"line":370,"column":6},"end":{"line":373,"column":30}},"181":{"start":{"line":375,"column":6},"end":{"line":375,"column":38}},"182":{"start":{"line":378,"column":2},"end":{"line":378,"column":33}},"183":{"start":{"line":381,"column":0},"end":{"line":421,"column":2}},"184":{"start":{"line":382,"column":2},"end":{"line":382,"column":13}},"185":{"start":{"line":383,"column":2},"end":{"line":393,"column":3}},"186":{"start":{"line":385,"column":4},"end":{"line":390,"column":6}},"187":{"start":{"line":391,"column":4},"end":{"line":391,"column":38}},"188":{"start":{"line":392,"column":4},"end":{"line":392,"column":18}},"189":{"start":{"line":395,"column":2},"end":{"line":403,"column":4}},"190":{"start":{"line":404,"column":2},"end":{"line":404,"column":51}},"191":{"start":{"line":405,"column":2},"end":{"line":419,"column":3}},"192":{"start":{"line":407,"column":6},"end":{"line":407,"column":39}},"193":{"start":{"line":408,"column":6},"end":{"line":408,"column":12}},"194":{"start":{"line":410,"column":6},"end":{"line":410,"column":37}},"195":{"start":{"line":411,"column":6},"end":{"line":411,"column":12}},"196":{"start":{"line":413,"column":6},"end":{"line":413,"column":46}},"197":{"start":{"line":414,"column":6},"end":{"line":414,"column":47}},"198":{"start":{"line":415,"column":6},"end":{"line":415,"column":12}},"199":{"start":{"line":417,"column":6},"end":{"line":417,"column":43}},"200":{"start":{"line":418,"column":6},"end":{"line":418,"column":47}},"201":{"start":{"line":420,"column":2},"end":{"line":420,"column":16}},"202":{"start":{"line":423,"column":0},"end":{"line":423,"column":34}}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":16},"end":{"line":25,"column":22}},{"start":{"line":25,"column":26},"end":{"line":25,"column":27}}]},"2":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":2},"end":{"line":44,"column":2}},{"start":{"line":44,"column":2},"end":{"line":44,"column":2}}]},"3":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":2},"end":{"line":54,"column":2}},{"start":{"line":54,"column":2},"end":{"line":54,"column":2}}]},"4":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":2},"end":{"line":68,"column":2}},{"start":{"line":68,"column":2},"end":{"line":68,"column":2}}]},"5":{"line":68,"type":"binary-expr","locations":[{"start":{"line":68,"column":6},"end":{"line":68,"column":35}},{"start":{"line":68,"column":39},"end":{"line":68,"column":77}}]},"6":{"line":119,"type":"if","locations":[{"start":{"line":119,"column":2},"end":{"line":119,"column":2}},{"start":{"line":119,"column":2},"end":{"line":119,"column":2}}]},"7":{"line":145,"type":"if","locations":[{"start":{"line":145,"column":2},"end":{"line":145,"column":2}},{"start":{"line":145,"column":2},"end":{"line":145,"column":2}}]},"8":{"line":154,"type":"if","locations":[{"start":{"line":154,"column":2},"end":{"line":154,"column":2}},{"start":{"line":154,"column":2},"end":{"line":154,"column":2}}]},"9":{"line":169,"type":"if","locations":[{"start":{"line":169,"column":2},"end":{"line":169,"column":2}},{"start":{"line":169,"column":2},"end":{"line":169,"column":2}}]},"10":{"line":189,"type":"switch","locations":[{"start":{"line":190,"column":4},"end":{"line":192,"column":12}},{"start":{"line":193,"column":4},"end":{"line":193,"column":30}},{"start":{"line":194,"column":4},"end":{"line":196,"column":12}},{"start":{"line":197,"column":4},"end":{"line":199,"column":12}},{"start":{"line":200,"column":4},"end":{"line":212,"column":12}},{"start":{"line":213,"column":4},"end":{"line":218,"column":12}}]},"11":{"line":239,"type":"if","locations":[{"start":{"line":239,"column":2},"end":{"line":239,"column":2}},{"start":{"line":239,"column":2},"end":{"line":239,"column":2}}]},"12":{"line":243,"type":"if","locations":[{"start":{"line":243,"column":2},"end":{"line":243,"column":2}},{"start":{"line":243,"column":2},"end":{"line":243,"column":2}}]},"13":{"line":247,"type":"if","locations":[{"start":{"line":247,"column":2},"end":{"line":247,"column":2}},{"start":{"line":247,"column":2},"end":{"line":247,"column":2}}]},"14":{"line":250,"type":"if","locations":[{"start":{"line":250,"column":2},"end":{"line":250,"column":2}},{"start":{"line":250,"column":2},"end":{"line":250,"column":2}}]},"15":{"line":271,"type":"if","locations":[{"start":{"line":271,"column":2},"end":{"line":271,"column":2}},{"start":{"line":271,"column":2},"end":{"line":271,"column":2}}]},"16":{"line":271,"type":"binary-expr","locations":[{"start":{"line":271,"column":6},"end":{"line":271,"column":29}},{"start":{"line":271,"column":33},"end":{"line":271,"column":43}}]},"17":{"line":278,"type":"if","locations":[{"start":{"line":278,"column":2},"end":{"line":278,"column":2}},{"start":{"line":278,"column":2},"end":{"line":278,"column":2}}]},"18":{"line":281,"type":"if","locations":[{"start":{"line":281,"column":2},"end":{"line":281,"column":2}},{"start":{"line":281,"column":2},"end":{"line":281,"column":2}}]},"19":{"line":288,"type":"if","locations":[{"start":{"line":288,"column":2},"end":{"line":288,"column":2}},{"start":{"line":288,"column":2},"end":{"line":288,"column":2}}]},"20":{"line":294,"type":"if","locations":[{"start":{"line":294,"column":4},"end":{"line":294,"column":4}},{"start":{"line":294,"column":4},"end":{"line":294,"column":4}}]},"21":{"line":301,"type":"if","locations":[{"start":{"line":301,"column":4},"end":{"line":301,"column":4}},{"start":{"line":301,"column":4},"end":{"line":301,"column":4}}]},"22":{"line":319,"type":"switch","locations":[{"start":{"line":320,"column":4},"end":{"line":324,"column":12}},{"start":{"line":325,"column":4},"end":{"line":325,"column":46}},{"start":{"line":326,"column":4},"end":{"line":334,"column":12}},{"start":{"line":335,"column":4},"end":{"line":335,"column":47}},{"start":{"line":336,"column":4},"end":{"line":344,"column":12}},{"start":{"line":345,"column":4},"end":{"line":347,"column":12}},{"start":{"line":348,"column":4},"end":{"line":352,"column":12}}]},"23":{"line":330,"type":"if","locations":[{"start":{"line":330,"column":6},"end":{"line":330,"column":6}},{"start":{"line":330,"column":6},"end":{"line":330,"column":6}}]},"24":{"line":340,"type":"if","locations":[{"start":{"line":340,"column":6},"end":{"line":340,"column":6}},{"start":{"line":340,"column":6},"end":{"line":340,"column":6}}]},"25":{"line":363,"type":"switch","locations":[{"start":{"line":364,"column":4},"end":{"line":368,"column":30}},{"start":{"line":369,"column":4},"end":{"line":373,"column":30}},{"start":{"line":374,"column":4},"end":{"line":375,"column":38}}]},"26":{"line":383,"type":"if","locations":[{"start":{"line":383,"column":2},"end":{"line":383,"column":2}},{"start":{"line":383,"column":2},"end":{"line":383,"column":2}}]},"27":{"line":405,"type":"switch","locations":[{"start":{"line":406,"column":4},"end":{"line":408,"column":12}},{"start":{"line":409,"column":4},"end":{"line":411,"column":12}},{"start":{"line":412,"column":4},"end":{"line":415,"column":12}},{"start":{"line":416,"column":4},"end":{"line":418,"column":47}}]}},"code":["'use strict';","","var utils = require('./utils');","var types = require('./types');","var errors = require('./errors');","","/**"," * Information on the formatting of the returned rows"," */","var resultFlag = {","  globalTablesSpec:   0x0001,","  hasMorePages:       0x0002,","  noMetadata:         0x0004","};","","/**"," * Buffer forward reader of CQL binary frames"," * @param {FrameHeader} header"," * @param {Buffer} body"," * @param {Number} [offset]"," */","function FrameReader(header, body, offset) {","  this.header = header;","  this.opcode = header.opcode;","  this.offset = offset || 0;","  this.buf = body;","}","","FrameReader.prototype.remainingLength = function () {","  return this.buf.length - this.offset;","};","","FrameReader.prototype.getBuffer = function () {","  return this.buf;","};","","/**"," * Slices the underlining buffer"," * @param {Number} begin"," * @param {Number} [end]"," * @returns {Buffer}"," */","FrameReader.prototype.slice = function (begin, end) {","  if (typeof end === 'undefined') {","    end = this.buf.length;","  }","  return this.buf.slice(begin, end);","};","","/**"," * Modifies the underlying buffer, it concatenates the given buffer with the original (internalBuffer = concat(bytes, internalBuffer)"," */","FrameReader.prototype.unshift = function (bytes) {","  if (this.offset > 0) {","    throw new Error('Can not modify the underlying buffer if already read');","  }","  this.buf = Buffer.concat([bytes, this.buf], bytes.length + this.buf.length);","};","","/**"," * Reads any number of bytes and moves the offset."," * if length not provided or it's larger than the remaining bytes, reads to end."," * @param length"," * @returns {Buffer}"," */","FrameReader.prototype.read = function (length) {","  var end = this.buf.length;","  if (typeof length !== 'undefined' && this.offset + length < this.buf.length) {","    end = this.offset + length;","  }","  var bytes = this.slice(this.offset, end);","  this.offset = end;","  return bytes;","};","","/**"," * Moves the reader cursor to the end"," */","FrameReader.prototype.toEnd = function () {","  this.offset = this.buf.length;","};","","/**"," * Reads a BE Int and moves the offset"," * @returns {Number}"," */","FrameReader.prototype.readInt = function() {","  var result = this.buf.readInt32BE(this.offset);","  this.offset += 4;","  return result;","};","","/** @returns {Number} */","FrameReader.prototype.readShort = function () {","  var result = this.buf.readUInt16BE(this.offset);","  this.offset += 2;","  return result;","};","","FrameReader.prototype.readByte = function () {","  var result = this.buf.readUInt8(this.offset);","  this.offset += 1;","  return result;","};","","FrameReader.prototype.readString = function () {","  var length = this.readShort();","  this.checkOffset(length);","  var result = this.buf.toString('utf8', this.offset, this.offset+length);","  this.offset += length;","  return result;","};","","/**"," * Checks that the new length to read is within the range of the buffer length. Throws a RangeError if not."," * @param {Number} newLength"," */","FrameReader.prototype.checkOffset = function (newLength) {","  if (this.offset + newLength > this.buf.length) {","    var err = new RangeError('Trying to access beyond buffer length');","    err.expectedLength = newLength;","    throw err;","  }","};","","/**"," * Reads a protocol string list"," * @returns {Array}"," */","FrameReader.prototype.readStringList = function () {","  var length = this.readShort();","  var list = new Array(length);","  for (var i = 0; i < length; i++) {","    list[i] = this.readString();","  }","  return list;","};","","/**"," * Reads the amount of bytes that the field has and returns them (slicing them)."," * @returns {Buffer}"," */","FrameReader.prototype.readBytes = function () {","  var length = this.readInt();","  if (length < 0) {","    return null;","  }","  this.checkOffset(length);","  return this.read(length);","};","","FrameReader.prototype.readShortBytes = function () {","  var length = this.readShort();","  if (length < 0) {","    return null;","  }","  this.checkOffset(length);","  return this.read(length);","};","","/**"," * Reads an associative array of strings as keys and bytes as values"," * @returns {Object}"," */","FrameReader.prototype.readBytesMap = function () {","  //A [short] n, followed by n pair <k><v> where <k> is a","  //[string] and <v> is a [bytes].","  var length = this.readShort();","  if (length < 0) {","    return null;","  }","  var map = {};","  for (var i = 0; i < length; i++) {","    map[this.readString()] = this.readBytes();","  }","  return map;","};","","/**"," * Reads a data type definition"," * @returns {{code: Number, info: Object|null}} An array of 2 elements"," */","FrameReader.prototype.readType = function () {","  var i;","  var type = {","    code: this.readShort(),","    type: null","  };","  switch (type.code) {","    case types.dataTypes.custom:","      type.info = this.readString();","      break;","    case types.dataTypes.list:","    case types.dataTypes.set:","      type.info = this.readType();","      break;","    case types.dataTypes.map:","      type.info = [this.readType(), this.readType()];","      break;","    case types.dataTypes.udt:","      type.info = {","        keyspace: this.readString(),","        name: this.readString(),","        fields: new Array(this.readShort())","      };","      for (i = 0; i < type.info.fields.length; i++) {","        type.info.fields[i] = {","          name: this.readString(),","          type: this.readType()","        };","      }","      break;","    case types.dataTypes.tuple:","      type.info = new Array(this.readShort());","      for (i = 0; i < type.info.length; i++) {","        type.info[i] = this.readType();","      }","      break;","  }","  return type;","};","","/**"," * Reads an Ip address and port"," * @returns {{address: exports.InetAddress, port: Number}}"," */","FrameReader.prototype.readInet = function () {","  var length = this.readByte();","  var address = this.read(length);","  return {address: new types.InetAddress(address), port: this.readInt()};","};","","/**"," * Reads the body bytes corresponding to the flags"," * @returns {{traceId: Uuid, warnings: Array, customPayload}}"," * @throws {RangeError}"," */","FrameReader.prototype.readFlagsInfo = function () {","  if (this.header.flags === 0) {","    return utils.emptyObject;","  }","  var result = {};","  if (this.header.flags & types.frameFlags.tracing) {","    this.checkOffset(16);","    result.traceId = new types.Uuid(utils.copyBuffer(this.read(16)));","  }","  if (this.header.flags & types.frameFlags.warning) {","    result.warnings = this.readStringList();","  }","  if (this.header.flags & types.frameFlags.customPayload) {","    result.customPayload = this.readBytesMap();","  }","  return result;","};","","/**"," * Reads the metadata from a row or a prepared result response"," * @param {Number} kind"," * @returns {Object}"," * @throws {RangeError}"," */","FrameReader.prototype.readMetadata = function (kind) {","  var i;","  //Determines if its a prepared metadata","  var isPrepared = (kind === types.resultKind.prepared);","  var meta = {};","  //as used in Rows and Prepared responses","  var flags = this.readInt();","","  var columnLength = this.readInt();","  if (this.header.version > 3 && isPrepared) {","    //read the pk columns","    meta.partitionKeys = new Array(this.readInt());","    for (i = 0; i < meta.partitionKeys.length; i++) {","      meta.partitionKeys[i] = this.readShort();","    }","  }","  if (flags & resultFlag.hasMorePages) {","    meta.pageState = utils.copyBuffer(this.readBytes());","  }","  if (flags & resultFlag.globalTablesSpec) {","    meta.global_tables_spec = true;","    meta.keyspace = this.readString();","    meta.table = this.readString();","  }","  meta.columns = new Array(columnLength);","  meta.columnsByName = utils.emptyObject;","  if (isPrepared) {","    //for prepared metadata, we will need a index of the columns (param) by name","    meta.columnsByName = {};","  }","  for (i = 0; i < columnLength; i++) {","    var col = {};","    if(!meta.global_tables_spec) {","      col.ksname = this.readString();","      col.tablename = this.readString();","    }","    col.name = this.readString();","    col.type = this.readType();","    meta.columns[i] = col;","    if (isPrepared) {","      meta.columnsByName[col.name] = i;","    }","  }","","  return meta;","};","","/**"," * Reads the error from the frame"," * @throws {RangeError}"," * @returns {exports.ResponseError}"," */","FrameReader.prototype.readError = function () {","  var code = this.readInt();","  var message = this.readString();","  var err = new errors.ResponseError(code, message);","  //read extra info","  switch (code) {","    case types.responseErrorCodes.unavailableException:","      err.consistencies = this.readShort();","      err.required = this.readInt();","      err.alive = this.readInt();","      break;","    case types.responseErrorCodes.readTimeout:","    case types.responseErrorCodes.readFailure:","      err.consistencies = this.readShort();","      err.received = this.readInt();","      err.blockFor = this.readInt();","      if (code === types.responseErrorCodes.readFailure) {","        err.failures = this.readInt();","      }","      err.isDataPresent = this.readByte();","      break;","    case types.responseErrorCodes.writeTimeout:","    case types.responseErrorCodes.writeFailure:","      err.consistencies = this.readShort();","      err.received = this.readInt();","      err.blockFor = this.readInt();","      if (code === types.responseErrorCodes.writeFailure) {","        err.failures = this.readInt();","      }","      err.writeType = this.readString();","      break;","    case types.responseErrorCodes.unprepared:","      err.queryId = utils.copyBuffer(this.readShortBytes());","      break;","    case types.responseErrorCodes.functionFailure:","      err.keyspace = this.readString();","      err.functionName = this.readString();","      err.argTypes = this.readStringList();","      break;","  }","  return err;","};","","/**"," * Reads an event from Cassandra and returns the detail"," * @returns {{eventType: String, inet: {address: Buffer, port: Number}}, *}"," */","FrameReader.prototype.readEvent = function () {","  var eventType = this.readString();","  switch (eventType) {","    case types.protocolEvents.topologyChange:","      return {","        added: this.readString() === 'NEW_NODE',","        inet: this.readInet(),","        eventType: eventType};","    case types.protocolEvents.statusChange:","      return {","        up: this.readString() === 'UP',","        inet: this.readInet(),","        eventType: eventType};","    case types.protocolEvents.schemaChange:","      return this.parseSchemaChange();","  }","  //Forward compatibility","  return { eventType: eventType};","};","","FrameReader.prototype.parseSchemaChange = function () {","  var result;","  if (this.header.version < 3) {","    //v1/v2: 3 strings, the table value can be empty","    result = {","      eventType: types.protocolEvents.schemaChange,","      schemaChangeType: this.readString(),","      keyspace: this.readString(),","      table: this.readString()","    };","    result.isKeyspace = !result.table;","    return result;","  }","  //v3+: 3 or 4 strings: change_type, target, keyspace and (table, type, functionName or aggregate)","  result = {","    eventType: types.protocolEvents.schemaChange,","    schemaChangeType: this.readString(),","    target: this.readString(),","    keyspace: this.readString(),","    table: null,","    udt: null,","    signature: null","  };","  result.isKeyspace = result.target === 'KEYSPACE';","  switch (result.target) {","    case 'TABLE':","      result.table = this.readString();","      break;","    case 'TYPE':","      result.udt = this.readString();","      break;","    case 'FUNCTION':","      result.functionName = this.readString();","      result.signature = this.readStringList();","      break;","    case 'AGGREGATE':","      result.aggregate = this.readString();","      result.signature = this.readStringList();","  }","  return result;","};","","exports.FrameReader = FrameReader;",""],"l":{"3":1,"4":1,"5":1,"10":1,"22":1,"23":0,"24":0,"25":0,"26":0,"29":1,"30":0,"33":1,"34":0,"43":1,"44":0,"45":0,"47":0,"53":1,"54":0,"55":0,"57":0,"66":1,"67":0,"68":0,"69":0,"71":0,"72":0,"73":0,"79":1,"80":0,"87":1,"88":0,"89":0,"90":0,"94":1,"95":0,"96":0,"97":0,"100":1,"101":0,"102":0,"103":0,"106":1,"107":0,"108":0,"109":0,"110":0,"111":0,"118":1,"119":0,"120":0,"121":0,"122":0,"130":1,"131":0,"132":0,"133":0,"134":0,"136":0,"143":1,"144":0,"145":0,"146":0,"148":0,"149":0,"152":1,"153":0,"154":0,"155":0,"157":0,"158":0,"165":1,"168":0,"169":0,"170":0,"172":0,"173":0,"174":0,"176":0,"183":1,"184":0,"185":0,"189":0,"191":0,"192":0,"195":0,"196":0,"198":0,"199":0,"201":0,"206":0,"207":0,"212":0,"214":0,"215":0,"216":0,"218":0,"220":0,"227":1,"228":0,"229":0,"230":0,"238":1,"239":0,"240":0,"242":0,"243":0,"244":0,"245":0,"247":0,"248":0,"250":0,"251":0,"253":0,"262":1,"263":0,"265":0,"266":0,"268":0,"270":0,"271":0,"273":0,"274":0,"275":0,"278":0,"279":0,"281":0,"282":0,"283":0,"284":0,"286":0,"287":0,"288":0,"290":0,"292":0,"293":0,"294":0,"295":0,"296":0,"298":0,"299":0,"300":0,"301":0,"302":0,"306":0,"314":1,"315":0,"316":0,"317":0,"319":0,"321":0,"322":0,"323":0,"324":0,"327":0,"328":0,"329":0,"330":0,"331":0,"333":0,"334":0,"337":0,"338":0,"339":0,"340":0,"341":0,"343":0,"344":0,"346":0,"347":0,"349":0,"350":0,"351":0,"352":0,"354":0,"361":1,"362":0,"363":0,"365":0,"370":0,"375":0,"378":0,"381":1,"382":0,"383":0,"385":0,"391":0,"392":0,"395":0,"404":0,"405":0,"407":0,"408":0,"410":0,"411":0,"413":0,"414":0,"415":0,"417":0,"418":0,"420":0,"423":1}},"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/stream-id-stack.js":{"path":"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/stream-id-stack.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":1,"14":0,"15":1,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":1,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":1,"37":0,"38":0,"39":0,"40":1,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":1,"49":0,"50":0,"51":0,"52":0,"53":0,"54":1,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":1,"65":0,"66":0,"67":0,"68":0,"69":0,"70":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0,0],"10":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"fnMap":{"1":{"name":"StreamIdStack","line":39,"loc":{"start":{"line":39,"column":0},"end":{"line":39,"column":32}}},"2":{"name":"(anonymous_2)","line":58,"loc":{"start":{"line":58,"column":37},"end":{"line":58,"column":56}}},"3":{"name":"(anonymous_3)","line":68,"loc":{"start":{"line":68,"column":30},"end":{"line":68,"column":42}}},"4":{"name":"(anonymous_4)","line":92,"loc":{"start":{"line":92,"column":31},"end":{"line":92,"column":45}}},"5":{"name":"(anonymous_5)","line":108,"loc":{"start":{"line":108,"column":32},"end":{"line":108,"column":44}}},"6":{"name":"(anonymous_6)","line":120,"loc":{"start":{"line":120,"column":42},"end":{"line":120,"column":54}}},"7":{"name":"(anonymous_7)","line":134,"loc":{"start":{"line":134,"column":43},"end":{"line":134,"column":55}}},"8":{"name":"(anonymous_8)","line":140,"loc":{"start":{"line":140,"column":35},"end":{"line":140,"column":47}}},"9":{"name":"(anonymous_9)","line":145,"loc":{"start":{"line":145,"column":41},"end":{"line":145,"column":53}}},"10":{"name":"generateGroup","line":163,"loc":{"start":{"line":163,"column":0},"end":{"line":163,"column":37}}}},"statementMap":{"1":{"start":{"line":7,"column":0},"end":{"line":7,"column":20}},"2":{"start":{"line":13,"column":0},"end":{"line":13,"column":21}},"3":{"start":{"line":20,"column":0},"end":{"line":20,"column":23}},"4":{"start":{"line":26,"column":0},"end":{"line":26,"column":29}},"5":{"start":{"line":32,"column":0},"end":{"line":32,"column":24}},"6":{"start":{"line":39,"column":0},"end":{"line":52,"column":1}},"7":{"start":{"line":42,"column":2},"end":{"line":42,"column":39}},"8":{"start":{"line":43,"column":2},"end":{"line":43,"column":22}},"9":{"start":{"line":44,"column":2},"end":{"line":44,"column":36}},"10":{"start":{"line":45,"column":2},"end":{"line":45,"column":29}},"11":{"start":{"line":46,"column":2},"end":{"line":46,"column":27}},"12":{"start":{"line":51,"column":2},"end":{"line":51,"column":17}},"13":{"start":{"line":58,"column":0},"end":{"line":61,"column":2}},"14":{"start":{"line":60,"column":2},"end":{"line":60,"column":56}},"15":{"start":{"line":68,"column":0},"end":{"line":86,"column":2}},"16":{"start":{"line":69,"column":2},"end":{"line":69,"column":35}},"17":{"start":{"line":70,"column":2},"end":{"line":73,"column":3}},"18":{"start":{"line":71,"column":4},"end":{"line":71,"column":17}},"19":{"start":{"line":72,"column":4},"end":{"line":72,"column":14}},"20":{"start":{"line":75,"column":2},"end":{"line":84,"column":3}},"21":{"start":{"line":77,"column":4},"end":{"line":77,"column":55}},"22":{"start":{"line":79,"column":4},"end":{"line":79,"column":33}},"23":{"start":{"line":80,"column":4},"end":{"line":83,"column":5}},"24":{"start":{"line":81,"column":6},"end":{"line":81,"column":19}},"25":{"start":{"line":82,"column":6},"end":{"line":82,"column":16}},"26":{"start":{"line":85,"column":2},"end":{"line":85,"column":32}},"27":{"start":{"line":92,"column":0},"end":{"line":103,"column":2}},"28":{"start":{"line":93,"column":2},"end":{"line":93,"column":15}},"29":{"start":{"line":94,"column":2},"end":{"line":94,"column":38}},"30":{"start":{"line":95,"column":2},"end":{"line":95,"column":38}},"31":{"start":{"line":96,"column":2},"end":{"line":96,"column":17}},"32":{"start":{"line":97,"column":2},"end":{"line":101,"column":3}},"33":{"start":{"line":99,"column":4},"end":{"line":99,"column":33}},"34":{"start":{"line":100,"column":4},"end":{"line":100,"column":30}},"35":{"start":{"line":102,"column":2},"end":{"line":102,"column":26}},"36":{"start":{"line":108,"column":0},"end":{"line":113,"column":2}},"37":{"start":{"line":109,"column":2},"end":{"line":112,"column":3}},"38":{"start":{"line":110,"column":4},"end":{"line":110,"column":38}},"39":{"start":{"line":111,"column":4},"end":{"line":111,"column":31}},"40":{"start":{"line":120,"column":0},"end":{"line":132,"column":2}},"41":{"start":{"line":121,"column":2},"end":{"line":124,"column":3}},"42":{"start":{"line":123,"column":4},"end":{"line":123,"column":16}},"43":{"start":{"line":126,"column":2},"end":{"line":126,"column":39}},"44":{"start":{"line":128,"column":2},"end":{"line":128,"column":69}},"45":{"start":{"line":129,"column":2},"end":{"line":129,"column":38}},"46":{"start":{"line":130,"column":2},"end":{"line":130,"column":15}},"47":{"start":{"line":131,"column":2},"end":{"line":131,"column":33}},"48":{"start":{"line":134,"column":0},"end":{"line":143,"column":2}},"49":{"start":{"line":135,"column":2},"end":{"line":138,"column":3}},"50":{"start":{"line":137,"column":4},"end":{"line":137,"column":11}},"51":{"start":{"line":139,"column":2},"end":{"line":139,"column":18}},"52":{"start":{"line":140,"column":2},"end":{"line":142,"column":19}},"53":{"start":{"line":141,"column":4},"end":{"line":141,"column":26}},"54":{"start":{"line":145,"column":0},"end":{"line":161,"column":2}},"55":{"start":{"line":146,"column":2},"end":{"line":146,"column":18}},"56":{"start":{"line":147,"column":2},"end":{"line":147,"column":37}},"57":{"start":{"line":150,"column":2},"end":{"line":157,"column":3}},"58":{"start":{"line":151,"column":4},"end":{"line":154,"column":5}},"59":{"start":{"line":153,"column":6},"end":{"line":153,"column":12}},"60":{"start":{"line":155,"column":4},"end":{"line":155,"column":22}},"61":{"start":{"line":156,"column":4},"end":{"line":156,"column":12}},"62":{"start":{"line":158,"column":2},"end":{"line":158,"column":29}},"63":{"start":{"line":160,"column":2},"end":{"line":160,"column":26}},"64":{"start":{"line":163,"column":0},"end":{"line":170,"column":1}},"65":{"start":{"line":164,"column":2},"end":{"line":164,"column":33}},"66":{"start":{"line":165,"column":2},"end":{"line":165,"column":48}},"67":{"start":{"line":166,"column":2},"end":{"line":168,"column":3}},"68":{"start":{"line":167,"column":4},"end":{"line":167,"column":28}},"69":{"start":{"line":169,"column":2},"end":{"line":169,"column":13}},"70":{"start":{"line":172,"column":0},"end":{"line":172,"column":31}}},"branchMap":{"1":{"line":60,"type":"cond-expr","locations":[{"start":{"line":60,"column":33},"end":{"line":60,"column":34}},{"start":{"line":60,"column":37},"end":{"line":60,"column":55}}]},"2":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":2},"end":{"line":70,"column":2}},{"start":{"line":70,"column":2},"end":{"line":70,"column":2}}]},"3":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":4},"end":{"line":80,"column":4}},{"start":{"line":80,"column":4},"end":{"line":80,"column":4}}]},"4":{"line":97,"type":"if","locations":[{"start":{"line":97,"column":2},"end":{"line":97,"column":2}},{"start":{"line":97,"column":2},"end":{"line":97,"column":2}}]},"5":{"line":109,"type":"if","locations":[{"start":{"line":109,"column":2},"end":{"line":109,"column":2}},{"start":{"line":109,"column":2},"end":{"line":109,"column":2}}]},"6":{"line":121,"type":"if","locations":[{"start":{"line":121,"column":2},"end":{"line":121,"column":2}},{"start":{"line":121,"column":2},"end":{"line":121,"column":2}}]},"7":{"line":135,"type":"if","locations":[{"start":{"line":135,"column":2},"end":{"line":135,"column":2}},{"start":{"line":135,"column":2},"end":{"line":135,"column":2}}]},"8":{"line":135,"type":"binary-expr","locations":[{"start":{"line":135,"column":6},"end":{"line":135,"column":25}},{"start":{"line":135,"column":29},"end":{"line":135,"column":65}}]},"9":{"line":150,"type":"binary-expr","locations":[{"start":{"line":150,"column":9},"end":{"line":150,"column":35}},{"start":{"line":150,"column":39},"end":{"line":150,"column":74}},{"start":{"line":150,"column":78},"end":{"line":150,"column":101}}]},"10":{"line":151,"type":"if","locations":[{"start":{"line":151,"column":4},"end":{"line":151,"column":4}},{"start":{"line":151,"column":4},"end":{"line":151,"column":4}}]}},"code":["\"use strict\";","","/**"," * Group size"," * @type {number}"," */","var groupSize = 128;","/**"," * Number used to right shift ids to allocate them into groups"," * @const"," * @type {number}"," */","var shiftToGroup = 7;","/**"," * Amount of groups that can be released per time"," * If it grows larger than 4 groups (128 * 4), groups can be released"," * @const"," * @type {number}"," */","var releasableSize = 4;","/**"," * 32K possible stream ids depending for protocol v3 and above"," * @const"," * @type {number}"," */","var maxGroupsFor2Bytes = 256;","/**"," * Delay used to check if groups can be released"," * @const"," * @type {number}"," */","var releaseDelay = 5000;","/**"," * Represents a queue of ids from 0 to maximum stream id supported by the protocol version."," * Clients can dequeue a stream id using {@link StreamIdStack#shift()} and enqueue (release) using {@link StreamIdStack#push()}"," * @param {Number} version Protocol version"," * @constructor"," */","function StreamIdStack(version) {","  //Ecmascript Number is 64-bit double, it can be optimized by the engine into a 32-bit int, but nothing below that.","  //We try to allocate as few as possible in arrays of 128","  this.currentGroup = generateGroup(0);","  this.groupIndex = 0;","  this.groups = [this.currentGroup];","  this.releaseTimeout = null;","  this.setVersion(version);","  /**","   * Returns the amount of ids currently in use","   * @member {number}","   */","  this.inUse = 0;","}","","/**"," * Sets the protocol version"," * @param {Number} version"," */","StreamIdStack.prototype.setVersion = function (version) {","  //128 or 32K stream ids depending on the protocol version","  this.maxGroups = version < 3 ? 1 : maxGroupsFor2Bytes;","};","","/**"," * Dequeues an id."," * Similar to {@link Array#pop()}."," * @returns {Number} Returns an id or null"," */","StreamIdStack.prototype.pop = function () {","  var id = this.currentGroup.pop();","  if (typeof id !== 'undefined') {","    this.inUse++;","    return id;","  }","  //try to use the following groups","  while (this.groupIndex < this.groups.length - 1) {","    //move to the following group","    this.currentGroup = this.groups[++this.groupIndex];","    //try dequeue","    id = this.currentGroup.pop();","    if (typeof id !== 'undefined') {","      this.inUse++;","      return id;","    }","  }","  return this._tryCreateGroup();","};","/**"," * Enqueue an id for future use."," * Similar to {@link Array#push()}."," * @param {Number} id"," */","StreamIdStack.prototype.push = function (id) {","  this.inUse--;","  var groupIndex = id >> shiftToGroup;","  var group = this.groups[groupIndex];","  group.push(id);","  if (groupIndex < this.groupIndex) {","    //Set the lower group to be used to dequeue from","    this.groupIndex = groupIndex;","    this.currentGroup = group;","  }","  this._tryIssueRelease();","};","","/**"," * Clears all timers"," */","StreamIdStack.prototype.clear = function () {","  if (this.releaseTimeout) {","    clearTimeout(this.releaseTimeout);","    this.releaseTimeout = null;","  }","};","","/**"," * Tries to create an additional group and returns a new id"," * @returns {Number} Returns a new id or null if it's not possible to create a new group"," * @private"," */","StreamIdStack.prototype._tryCreateGroup = function () {","  if (this.groups.length === this.maxGroups) {","    //we can have an additional group","    return null;","  }","  //Add a new group at the last position","  this.groupIndex = this.groups.length;","  //Using 128 * groupIndex as initial value","  this.currentGroup = generateGroup(this.groupIndex << shiftToGroup);","  this.groups.push(this.currentGroup);","  this.inUse++;","  return this.currentGroup.pop();","};","","StreamIdStack.prototype._tryIssueRelease = function () {","  if (this.releaseTimeout || this.groups.length <= releasableSize) {","    //Nothing to release or a release delay has been issued","    return;","  }","  var self = this;","  this.releaseTimeout = setTimeout(function () {","    self._releaseGroups();","  }, releaseDelay);","};","","StreamIdStack.prototype._releaseGroups = function () {","  var counter = 0;","  var index = this.groups.length - 1;","  //only release up to n groups (n = releasable size)","  //shrink back up to n groups not all the way up to 1","  while (counter++ < releasableSize && this.groups.length > releasableSize && index > this.groupIndex) {","    if (this.groups[index].length !== groupSize) {","      //the group is being used","      break;","    }","    this.groups.pop();","    index--;","  }","  this.releaseTimeout = null;","  //Issue next release if applies","  this._tryIssueRelease();","};","","function generateGroup(initialValue) {","  var arr = new Array(groupSize);","  var upperBound = initialValue + groupSize - 1;","  for (var i = 0; i < groupSize; i++) {","    arr[i] = upperBound - i;","  }","  return arr;","}","","module.exports = StreamIdStack;"],"l":{"7":1,"13":1,"20":1,"26":1,"32":1,"39":1,"42":0,"43":0,"44":0,"45":0,"46":0,"51":0,"58":1,"60":0,"68":1,"69":0,"70":0,"71":0,"72":0,"75":0,"77":0,"79":0,"80":0,"81":0,"82":0,"85":0,"92":1,"93":0,"94":0,"95":0,"96":0,"97":0,"99":0,"100":0,"102":0,"108":1,"109":0,"110":0,"111":0,"120":1,"121":0,"123":0,"126":0,"128":0,"129":0,"130":0,"131":0,"134":1,"135":0,"137":0,"139":0,"140":0,"141":0,"145":1,"146":0,"147":0,"150":0,"151":0,"153":0,"155":0,"156":0,"158":0,"160":0,"163":1,"164":0,"165":0,"166":0,"167":0,"169":0,"172":1}},"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/metadata/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/metadata/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":0,"17":0,"18":0,"19":0,"20":0,"21":1,"22":0,"23":1,"24":0,"25":0,"26":0,"27":0,"28":0,"29":1,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":1,"55":0,"56":0,"57":1,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":1,"70":0,"71":0,"72":0,"73":0,"74":0,"75":1,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":1,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":1,"105":1,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":1,"127":0,"128":1,"129":0,"130":0,"131":1,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":1,"140":0,"141":0,"142":1,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":1,"151":0,"152":0,"153":1,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":1,"163":0,"164":0,"165":1,"166":0,"167":0,"168":1,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":1,"178":0,"179":0,"180":1,"181":0,"182":0,"183":1,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":1,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":1,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":1,"220":0,"221":0,"222":1,"223":0,"224":0,"225":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":0,"243":0,"244":0,"245":0,"246":1,"247":0,"248":1,"249":0,"250":0,"251":0,"252":0,"253":0,"254":0,"255":0,"256":0,"257":0,"258":0,"259":0,"260":0,"261":0,"262":0,"263":0,"264":0,"265":0,"266":0,"267":0,"268":0,"269":0,"270":0,"271":0,"272":0,"273":0,"274":0,"275":0,"276":0,"277":0,"278":0,"279":0,"280":0,"281":0,"282":0,"283":0,"284":1,"285":0,"286":0,"287":0,"288":0,"289":0,"290":0,"291":1,"292":0,"293":0,"294":0,"295":0,"296":0,"297":0,"298":0,"299":0,"300":0,"301":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0],"56":[0,0],"57":[0,0],"58":[0,0],"59":[0,0],"60":[0,0],"61":[0,0],"62":[0,0],"63":[0,0],"64":[0,0],"65":[0,0],"66":[0,0,0,0],"67":[0,0],"68":[0,0,0],"69":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0},"fnMap":{"1":{"name":"Metadata","line":53,"loc":{"start":{"line":53,"column":0},"end":{"line":53,"column":47}}},"2":{"name":"(anonymous_2)","line":67,"loc":{"start":{"line":67,"column":41},"end":{"line":67,"column":60}}},"3":{"name":"(anonymous_3)","line":76,"loc":{"start":{"line":76,"column":36},"end":{"line":76,"column":63}}},"4":{"name":"(anonymous_4)","line":91,"loc":{"start":{"line":91,"column":33},"end":{"line":91,"column":50}}},"5":{"name":"(anonymous_5)","line":105,"loc":{"start":{"line":105,"column":20},"end":{"line":105,"column":33}}},"6":{"name":"(anonymous_6)","line":109,"loc":{"start":{"line":109,"column":21},"end":{"line":109,"column":44}}},"7":{"name":"(anonymous_7)","line":141,"loc":{"start":{"line":141,"column":37},"end":{"line":141,"column":63}}},"8":{"name":"handler","line":142,"loc":{"start":{"line":142,"column":71},"end":{"line":142,"column":92}}},"9":{"name":"(anonymous_9)","line":152,"loc":{"start":{"line":152,"column":40},"end":{"line":152,"column":66}}},"10":{"name":"(anonymous_10)","line":155,"loc":{"start":{"line":155,"column":39},"end":{"line":155,"column":62}}},"11":{"name":"(anonymous_11)","line":181,"loc":{"start":{"line":181,"column":38},"end":{"line":181,"column":73}}},"12":{"name":"handler","line":187,"loc":{"start":{"line":187,"column":71},"end":{"line":187,"column":92}}},"13":{"name":"(anonymous_13)","line":197,"loc":{"start":{"line":197,"column":41},"end":{"line":197,"column":76}}},"14":{"name":"getKeyspacesCallback","line":200,"loc":{"start":{"line":200,"column":49},"end":{"line":200,"column":95}}},"15":{"name":"(anonymous_15)","line":220,"loc":{"start":{"line":220,"column":33},"end":{"line":220,"column":70}}},"16":{"name":"(anonymous_16)","line":261,"loc":{"start":{"line":261,"column":37},"end":{"line":261,"column":68}}},"17":{"name":"(anonymous_17)","line":295,"loc":{"start":{"line":295,"column":35},"end":{"line":295,"column":47}}},"18":{"name":"(anonymous_18)","line":313,"loc":{"start":{"line":313,"column":28},"end":{"line":313,"column":68}}},"19":{"name":"handler","line":314,"loc":{"start":{"line":314,"column":72},"end":{"line":314,"column":93}}},"20":{"name":"(anonymous_20)","line":325,"loc":{"start":{"line":325,"column":31},"end":{"line":325,"column":71}}},"21":{"name":"(anonymous_21)","line":352,"loc":{"start":{"line":352,"column":30},"end":{"line":352,"column":70}}},"22":{"name":"handler","line":353,"loc":{"start":{"line":353,"column":72},"end":{"line":353,"column":93}}},"23":{"name":"(anonymous_23)","line":364,"loc":{"start":{"line":364,"column":33},"end":{"line":364,"column":73}}},"24":{"name":"(anonymous_24)","line":391,"loc":{"start":{"line":391,"column":34},"end":{"line":391,"column":74}}},"25":{"name":"handler","line":392,"loc":{"start":{"line":392,"column":72},"end":{"line":392,"column":93}}},"26":{"name":"(anonymous_26)","line":403,"loc":{"start":{"line":403,"column":37},"end":{"line":403,"column":77}}},"27":{"name":"(anonymous_27)","line":411,"loc":{"start":{"line":411,"column":48},"end":{"line":411,"column":77}}},"28":{"name":"(anonymous_28)","line":435,"loc":{"start":{"line":435,"column":33},"end":{"line":435,"column":84}}},"29":{"name":"handler","line":436,"loc":{"start":{"line":436,"column":72},"end":{"line":436,"column":93}}},"30":{"name":"(anonymous_30)","line":456,"loc":{"start":{"line":456,"column":35},"end":{"line":456,"column":75}}},"31":{"name":"handler","line":457,"loc":{"start":{"line":457,"column":72},"end":{"line":457,"column":93}}},"32":{"name":"(anonymous_32)","line":468,"loc":{"start":{"line":468,"column":38},"end":{"line":468,"column":78}}},"33":{"name":"(anonymous_33)","line":475,"loc":{"start":{"line":475,"column":47},"end":{"line":475,"column":76}}},"34":{"name":"(anonymous_34)","line":498,"loc":{"start":{"line":498,"column":34},"end":{"line":498,"column":85}}},"35":{"name":"handler","line":499,"loc":{"start":{"line":499,"column":72},"end":{"line":499,"column":93}}},"36":{"name":"(anonymous_36)","line":520,"loc":{"start":{"line":520,"column":41},"end":{"line":520,"column":81}}},"37":{"name":"handler","line":521,"loc":{"start":{"line":521,"column":72},"end":{"line":521,"column":93}}},"38":{"name":"(anonymous_38)","line":532,"loc":{"start":{"line":532,"column":44},"end":{"line":532,"column":84}}},"39":{"name":"(anonymous_39)","line":552,"loc":{"start":{"line":552,"column":35},"end":{"line":552,"column":86}}},"40":{"name":"(anonymous_40)","line":573,"loc":{"start":{"line":573,"column":42},"end":{"line":573,"column":104}}},"41":{"name":"(anonymous_41)","line":585,"loc":{"start":{"line":585,"column":30},"end":{"line":585,"column":46}}},"42":{"name":"(anonymous_42)","line":595,"loc":{"start":{"line":595,"column":52},"end":{"line":595,"column":81}}},"43":{"name":"(anonymous_43)","line":619,"loc":{"start":{"line":619,"column":30},"end":{"line":619,"column":59}}},"44":{"name":"handler","line":620,"loc":{"start":{"line":620,"column":72},"end":{"line":620,"column":93}}},"45":{"name":"(anonymous_45)","line":630,"loc":{"start":{"line":630,"column":33},"end":{"line":630,"column":62}}},"46":{"name":"condition","line":636,"loc":{"start":{"line":636,"column":15},"end":{"line":636,"column":36}}},"47":{"name":"iterator","line":638,"loc":{"start":{"line":638,"column":5},"end":{"line":638,"column":29}}},"48":{"name":"(anonymous_48)","line":639,"loc":{"start":{"line":639,"column":48},"end":{"line":639,"column":71}}},"49":{"name":"(anonymous_49)","line":656,"loc":{"start":{"line":656,"column":49},"end":{"line":656,"column":72}}},"50":{"name":"(anonymous_50)","line":660,"loc":{"start":{"line":660,"column":28},"end":{"line":660,"column":43}}},"51":{"name":"getTraceEnded","line":672,"loc":{"start":{"line":672,"column":5},"end":{"line":672,"column":33}}},"52":{"name":"(anonymous_52)","line":688,"loc":{"start":{"line":688,"column":36},"end":{"line":688,"column":73}}},"53":{"name":"checkUdtTypes","line":691,"loc":{"start":{"line":691,"column":2},"end":{"line":691,"column":31}}},"54":{"name":"(anonymous_54)","line":735,"loc":{"start":{"line":735,"column":19},"end":{"line":735,"column":41}}},"55":{"name":"(anonymous_55)","line":736,"loc":{"start":{"line":736,"column":52},"end":{"line":736,"column":76}}},"56":{"name":"(anonymous_56)","line":756,"loc":{"start":{"line":756,"column":43},"end":{"line":756,"column":75}}},"57":{"name":"(anonymous_57)","line":758,"loc":{"start":{"line":758,"column":52},"end":{"line":758,"column":75}}},"58":{"name":"(anonymous_58)","line":774,"loc":{"start":{"line":774,"column":44},"end":{"line":774,"column":76}}},"59":{"name":"(anonymous_59)","line":776,"loc":{"start":{"line":776,"column":52},"end":{"line":776,"column":75}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":31}},"2":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"3":{"start":{"line":8,"column":0},"end":{"line":8,"column":32}},"4":{"start":{"line":9,"column":0},"end":{"line":9,"column":32}},"5":{"start":{"line":10,"column":0},"end":{"line":10,"column":34}},"6":{"start":{"line":11,"column":0},"end":{"line":11,"column":32}},"7":{"start":{"line":12,"column":0},"end":{"line":12,"column":38}},"8":{"start":{"line":13,"column":0},"end":{"line":13,"column":53}},"9":{"start":{"line":19,"column":0},"end":{"line":19,"column":85}},"10":{"start":{"line":24,"column":0},"end":{"line":24,"column":82}},"11":{"start":{"line":29,"column":0},"end":{"line":29,"column":74}},"12":{"start":{"line":34,"column":0},"end":{"line":34,"column":74}},"13":{"start":{"line":39,"column":0},"end":{"line":39,"column":25}},"14":{"start":{"line":44,"column":0},"end":{"line":44,"column":29}},"15":{"start":{"line":53,"column":0},"end":{"line":59,"column":1}},"16":{"start":{"line":54,"column":2},"end":{"line":54,"column":96}},"17":{"start":{"line":55,"column":2},"end":{"line":55,"column":116}},"18":{"start":{"line":56,"column":2},"end":{"line":56,"column":22}},"19":{"start":{"line":57,"column":2},"end":{"line":57,"column":23}},"20":{"start":{"line":58,"column":2},"end":{"line":58,"column":99}},"21":{"start":{"line":67,"column":0},"end":{"line":70,"column":2}},"22":{"start":{"line":68,"column":2},"end":{"line":69,"column":81}},"23":{"start":{"line":76,"column":0},"end":{"line":84,"column":2}},"24":{"start":{"line":77,"column":2},"end":{"line":79,"column":3}},"25":{"start":{"line":78,"column":4},"end":{"line":78,"column":52}},"26":{"start":{"line":80,"column":2},"end":{"line":82,"column":3}},"27":{"start":{"line":81,"column":4},"end":{"line":81,"column":57}},"28":{"start":{"line":83,"column":2},"end":{"line":83,"column":51}},"29":{"start":{"line":91,"column":0},"end":{"line":130,"column":2}},"30":{"start":{"line":92,"column":2},"end":{"line":94,"column":3}},"31":{"start":{"line":93,"column":4},"end":{"line":93,"column":66}},"32":{"start":{"line":96,"column":2},"end":{"line":96,"column":21}},"33":{"start":{"line":98,"column":2},"end":{"line":98,"column":27}},"34":{"start":{"line":100,"column":2},"end":{"line":100,"column":33}},"35":{"start":{"line":101,"column":2},"end":{"line":101,"column":36}},"36":{"start":{"line":102,"column":2},"end":{"line":102,"column":39}},"37":{"start":{"line":103,"column":2},"end":{"line":103,"column":43}},"38":{"start":{"line":104,"column":2},"end":{"line":104,"column":23}},"39":{"start":{"line":105,"column":2},"end":{"line":123,"column":5}},"40":{"start":{"line":106,"column":4},"end":{"line":108,"column":5}},"41":{"start":{"line":107,"column":6},"end":{"line":107,"column":13}},"42":{"start":{"line":109,"column":4},"end":{"line":113,"column":7}},"43":{"start":{"line":110,"column":6},"end":{"line":110,"column":38}},"44":{"start":{"line":111,"column":6},"end":{"line":111,"column":52}},"45":{"start":{"line":112,"column":6},"end":{"line":112,"column":44}},"46":{"start":{"line":114,"column":4},"end":{"line":114,"column":39}},"47":{"start":{"line":115,"column":4},"end":{"line":120,"column":5}},"48":{"start":{"line":116,"column":6},"end":{"line":119,"column":8}},"49":{"start":{"line":121,"column":4},"end":{"line":121,"column":20}},"50":{"start":{"line":122,"column":4},"end":{"line":122,"column":25}},"51":{"start":{"line":125,"column":2},"end":{"line":125,"column":41}},"52":{"start":{"line":127,"column":2},"end":{"line":127,"column":24}},"53":{"start":{"line":129,"column":2},"end":{"line":129,"column":33}},"54":{"start":{"line":141,"column":0},"end":{"line":145,"column":2}},"55":{"start":{"line":142,"column":2},"end":{"line":144,"column":5}},"56":{"start":{"line":143,"column":4},"end":{"line":143,"column":38}},"57":{"start":{"line":152,"column":0},"end":{"line":169,"column":2}},"58":{"start":{"line":153,"column":2},"end":{"line":153,"column":73}},"59":{"start":{"line":154,"column":2},"end":{"line":154,"column":18}},"60":{"start":{"line":155,"column":2},"end":{"line":168,"column":5}},"61":{"start":{"line":156,"column":4},"end":{"line":159,"column":5}},"62":{"start":{"line":157,"column":6},"end":{"line":157,"column":97}},"63":{"start":{"line":158,"column":6},"end":{"line":158,"column":27}},"64":{"start":{"line":160,"column":4},"end":{"line":164,"column":5}},"65":{"start":{"line":162,"column":6},"end":{"line":162,"column":34}},"66":{"start":{"line":163,"column":6},"end":{"line":163,"column":24}},"67":{"start":{"line":166,"column":4},"end":{"line":166,"column":41}},"68":{"start":{"line":167,"column":4},"end":{"line":167,"column":27}},"69":{"start":{"line":181,"column":0},"end":{"line":190,"column":2}},"70":{"start":{"line":182,"column":2},"end":{"line":185,"column":3}},"71":{"start":{"line":183,"column":4},"end":{"line":183,"column":29}},"72":{"start":{"line":184,"column":4},"end":{"line":184,"column":25}},"73":{"start":{"line":187,"column":2},"end":{"line":189,"column":5}},"74":{"start":{"line":188,"column":4},"end":{"line":188,"column":48}},"75":{"start":{"line":197,"column":0},"end":{"line":208,"column":2}},"76":{"start":{"line":198,"column":2},"end":{"line":198,"column":52}},"77":{"start":{"line":199,"column":2},"end":{"line":199,"column":18}},"78":{"start":{"line":200,"column":2},"end":{"line":207,"column":5}},"79":{"start":{"line":201,"column":4},"end":{"line":204,"column":5}},"80":{"start":{"line":202,"column":6},"end":{"line":202,"column":98}},"81":{"start":{"line":203,"column":6},"end":{"line":203,"column":27}},"82":{"start":{"line":205,"column":4},"end":{"line":205,"column":31}},"83":{"start":{"line":206,"column":4},"end":{"line":206,"column":30}},"84":{"start":{"line":220,"column":0},"end":{"line":251,"column":2}},"85":{"start":{"line":221,"column":2},"end":{"line":223,"column":3}},"86":{"start":{"line":222,"column":4},"end":{"line":222,"column":16}},"87":{"start":{"line":224,"column":2},"end":{"line":224,"column":15}},"88":{"start":{"line":225,"column":2},"end":{"line":231,"column":3}},"89":{"start":{"line":226,"column":4},"end":{"line":226,"column":44}},"90":{"start":{"line":227,"column":4},"end":{"line":230,"column":5}},"91":{"start":{"line":229,"column":6},"end":{"line":229,"column":18}},"92":{"start":{"line":232,"column":2},"end":{"line":232,"column":47}},"93":{"start":{"line":233,"column":2},"end":{"line":233,"column":71}},"94":{"start":{"line":234,"column":2},"end":{"line":236,"column":3}},"95":{"start":{"line":235,"column":4},"end":{"line":235,"column":11}},"96":{"start":{"line":237,"column":2},"end":{"line":240,"column":3}},"97":{"start":{"line":239,"column":4},"end":{"line":239,"column":29}},"98":{"start":{"line":241,"column":2},"end":{"line":241,"column":60}},"99":{"start":{"line":243,"column":2},"end":{"line":245,"column":3}},"100":{"start":{"line":244,"column":4},"end":{"line":244,"column":48}},"101":{"start":{"line":246,"column":2},"end":{"line":249,"column":3}},"102":{"start":{"line":248,"column":4},"end":{"line":248,"column":115}},"103":{"start":{"line":250,"column":2},"end":{"line":250,"column":41}},"104":{"start":{"line":253,"column":0},"end":{"line":253,"column":35}},"105":{"start":{"line":261,"column":0},"end":{"line":289,"column":2}},"106":{"start":{"line":263,"column":2},"end":{"line":279,"column":3}},"107":{"start":{"line":264,"column":4},"end":{"line":264,"column":17}},"108":{"start":{"line":265,"column":4},"end":{"line":266,"column":113}},"109":{"start":{"line":267,"column":4},"end":{"line":267,"column":57}},"110":{"start":{"line":268,"column":4},"end":{"line":274,"column":5}},"111":{"start":{"line":269,"column":6},"end":{"line":269,"column":32}},"112":{"start":{"line":270,"column":6},"end":{"line":273,"column":7}},"113":{"start":{"line":271,"column":8},"end":{"line":271,"column":23}},"114":{"start":{"line":272,"column":8},"end":{"line":272,"column":14}},"115":{"start":{"line":275,"column":4},"end":{"line":278,"column":5}},"116":{"start":{"line":276,"column":6},"end":{"line":276,"column":44}},"117":{"start":{"line":277,"column":6},"end":{"line":277,"column":38}},"118":{"start":{"line":280,"column":2},"end":{"line":280,"column":44}},"119":{"start":{"line":281,"column":2},"end":{"line":281,"column":40}},"120":{"start":{"line":282,"column":2},"end":{"line":287,"column":3}},"121":{"start":{"line":283,"column":4},"end":{"line":283,"column":37}},"122":{"start":{"line":284,"column":4},"end":{"line":284,"column":28}},"123":{"start":{"line":285,"column":4},"end":{"line":285,"column":38}},"124":{"start":{"line":286,"column":4},"end":{"line":286,"column":36}},"125":{"start":{"line":288,"column":2},"end":{"line":288,"column":14}},"126":{"start":{"line":295,"column":0},"end":{"line":297,"column":2}},"127":{"start":{"line":296,"column":2},"end":{"line":296,"column":41}},"128":{"start":{"line":313,"column":0},"end":{"line":317,"column":2}},"129":{"start":{"line":314,"column":2},"end":{"line":316,"column":5}},"130":{"start":{"line":315,"column":4},"end":{"line":315,"column":43}},"131":{"start":{"line":325,"column":0},"end":{"line":335,"column":2}},"132":{"start":{"line":326,"column":2},"end":{"line":326,"column":12}},"133":{"start":{"line":327,"column":2},"end":{"line":333,"column":3}},"134":{"start":{"line":328,"column":4},"end":{"line":328,"column":48}},"135":{"start":{"line":329,"column":4},"end":{"line":331,"column":5}},"136":{"start":{"line":330,"column":6},"end":{"line":330,"column":34}},"137":{"start":{"line":332,"column":4},"end":{"line":332,"column":26}},"138":{"start":{"line":334,"column":2},"end":{"line":334,"column":65}},"139":{"start":{"line":352,"column":0},"end":{"line":356,"column":2}},"140":{"start":{"line":353,"column":2},"end":{"line":355,"column":5}},"141":{"start":{"line":354,"column":4},"end":{"line":354,"column":45}},"142":{"start":{"line":364,"column":0},"end":{"line":374,"column":2}},"143":{"start":{"line":365,"column":2},"end":{"line":365,"column":12}},"144":{"start":{"line":366,"column":2},"end":{"line":372,"column":3}},"145":{"start":{"line":367,"column":4},"end":{"line":367,"column":48}},"146":{"start":{"line":368,"column":4},"end":{"line":370,"column":5}},"147":{"start":{"line":369,"column":6},"end":{"line":369,"column":34}},"148":{"start":{"line":371,"column":4},"end":{"line":371,"column":28}},"149":{"start":{"line":373,"column":2},"end":{"line":373,"column":67}},"150":{"start":{"line":391,"column":0},"end":{"line":395,"column":2}},"151":{"start":{"line":392,"column":2},"end":{"line":394,"column":5}},"152":{"start":{"line":393,"column":4},"end":{"line":393,"column":49}},"153":{"start":{"line":403,"column":0},"end":{"line":417,"column":2}},"154":{"start":{"line":404,"column":2},"end":{"line":406,"column":3}},"155":{"start":{"line":405,"column":4},"end":{"line":405,"column":65}},"156":{"start":{"line":407,"column":2},"end":{"line":410,"column":3}},"157":{"start":{"line":408,"column":4},"end":{"line":409,"column":117}},"158":{"start":{"line":411,"column":2},"end":{"line":416,"column":5}},"159":{"start":{"line":412,"column":4},"end":{"line":414,"column":5}},"160":{"start":{"line":413,"column":6},"end":{"line":413,"column":33}},"161":{"start":{"line":415,"column":4},"end":{"line":415,"column":53}},"162":{"start":{"line":435,"column":0},"end":{"line":439,"column":2}},"163":{"start":{"line":436,"column":2},"end":{"line":438,"column":5}},"164":{"start":{"line":437,"column":4},"end":{"line":437,"column":72}},"165":{"start":{"line":456,"column":0},"end":{"line":460,"column":2}},"166":{"start":{"line":457,"column":2},"end":{"line":459,"column":5}},"167":{"start":{"line":458,"column":4},"end":{"line":458,"column":50}},"168":{"start":{"line":468,"column":0},"end":{"line":481,"column":2}},"169":{"start":{"line":469,"column":2},"end":{"line":471,"column":3}},"170":{"start":{"line":470,"column":4},"end":{"line":470,"column":65}},"171":{"start":{"line":472,"column":2},"end":{"line":474,"column":3}},"172":{"start":{"line":473,"column":4},"end":{"line":473,"column":132}},"173":{"start":{"line":475,"column":2},"end":{"line":480,"column":5}},"174":{"start":{"line":476,"column":4},"end":{"line":478,"column":5}},"175":{"start":{"line":477,"column":6},"end":{"line":477,"column":33}},"176":{"start":{"line":479,"column":4},"end":{"line":479,"column":53}},"177":{"start":{"line":498,"column":0},"end":{"line":502,"column":2}},"178":{"start":{"line":499,"column":2},"end":{"line":501,"column":5}},"179":{"start":{"line":500,"column":4},"end":{"line":500,"column":71}},"180":{"start":{"line":520,"column":0},"end":{"line":524,"column":2}},"181":{"start":{"line":521,"column":2},"end":{"line":523,"column":5}},"182":{"start":{"line":522,"column":4},"end":{"line":522,"column":56}},"183":{"start":{"line":532,"column":0},"end":{"line":542,"column":2}},"184":{"start":{"line":533,"column":2},"end":{"line":533,"column":12}},"185":{"start":{"line":534,"column":2},"end":{"line":540,"column":3}},"186":{"start":{"line":535,"column":4},"end":{"line":535,"column":48}},"187":{"start":{"line":536,"column":4},"end":{"line":538,"column":5}},"188":{"start":{"line":537,"column":6},"end":{"line":537,"column":34}},"189":{"start":{"line":539,"column":4},"end":{"line":539,"column":27}},"190":{"start":{"line":541,"column":2},"end":{"line":541,"column":78}},"191":{"start":{"line":552,"column":0},"end":{"line":562,"column":2}},"192":{"start":{"line":553,"column":2},"end":{"line":553,"column":12}},"193":{"start":{"line":554,"column":2},"end":{"line":560,"column":3}},"194":{"start":{"line":555,"column":4},"end":{"line":555,"column":48}},"195":{"start":{"line":556,"column":4},"end":{"line":558,"column":5}},"196":{"start":{"line":557,"column":6},"end":{"line":557,"column":34}},"197":{"start":{"line":559,"column":4},"end":{"line":559,"column":65}},"198":{"start":{"line":561,"column":2},"end":{"line":561,"column":82}},"199":{"start":{"line":573,"column":0},"end":{"line":605,"column":2}},"200":{"start":{"line":574,"column":2},"end":{"line":576,"column":3}},"201":{"start":{"line":575,"column":4},"end":{"line":575,"column":65}},"202":{"start":{"line":577,"column":2},"end":{"line":580,"column":3}},"203":{"start":{"line":578,"column":4},"end":{"line":579,"column":117}},"204":{"start":{"line":581,"column":2},"end":{"line":583,"column":3}},"205":{"start":{"line":582,"column":4},"end":{"line":582,"column":85}},"206":{"start":{"line":584,"column":2},"end":{"line":594,"column":3}},"207":{"start":{"line":585,"column":4},"end":{"line":590,"column":7}},"208":{"start":{"line":586,"column":6},"end":{"line":588,"column":7}},"209":{"start":{"line":587,"column":8},"end":{"line":587,"column":20}},"210":{"start":{"line":589,"column":6},"end":{"line":589,"column":47}},"211":{"start":{"line":593,"column":4},"end":{"line":593,"column":25}},"212":{"start":{"line":595,"column":2},"end":{"line":604,"column":5}},"213":{"start":{"line":596,"column":4},"end":{"line":598,"column":5}},"214":{"start":{"line":597,"column":6},"end":{"line":597,"column":33}},"215":{"start":{"line":599,"column":4},"end":{"line":599,"column":10}},"216":{"start":{"line":600,"column":4},"end":{"line":602,"column":5}},"217":{"start":{"line":601,"column":6},"end":{"line":601,"column":56}},"218":{"start":{"line":603,"column":4},"end":{"line":603,"column":30}},"219":{"start":{"line":619,"column":0},"end":{"line":623,"column":2}},"220":{"start":{"line":620,"column":2},"end":{"line":622,"column":5}},"221":{"start":{"line":621,"column":4},"end":{"line":621,"column":34}},"222":{"start":{"line":630,"column":0},"end":{"line":678,"column":2}},"223":{"start":{"line":631,"column":2},"end":{"line":631,"column":12}},"224":{"start":{"line":632,"column":2},"end":{"line":632,"column":19}},"225":{"start":{"line":633,"column":2},"end":{"line":633,"column":64}},"226":{"start":{"line":634,"column":2},"end":{"line":634,"column":62}},"227":{"start":{"line":635,"column":2},"end":{"line":635,"column":18}},"228":{"start":{"line":636,"column":2},"end":{"line":677,"column":5}},"229":{"start":{"line":637,"column":4},"end":{"line":637,"column":53}},"230":{"start":{"line":639,"column":4},"end":{"line":671,"column":7}},"231":{"start":{"line":640,"column":6},"end":{"line":642,"column":7}},"232":{"start":{"line":641,"column":8},"end":{"line":641,"column":25}},"233":{"start":{"line":643,"column":6},"end":{"line":643,"column":38}},"234":{"start":{"line":644,"column":6},"end":{"line":646,"column":7}},"235":{"start":{"line":645,"column":8},"end":{"line":645,"column":52}},"236":{"start":{"line":647,"column":6},"end":{"line":655,"column":8}},"237":{"start":{"line":656,"column":6},"end":{"line":670,"column":9}},"238":{"start":{"line":657,"column":8},"end":{"line":659,"column":9}},"239":{"start":{"line":658,"column":10},"end":{"line":658,"column":27}},"240":{"start":{"line":660,"column":8},"end":{"line":668,"column":11}},"241":{"start":{"line":661,"column":10},"end":{"line":667,"column":13}},"242":{"start":{"line":669,"column":8},"end":{"line":669,"column":15}},"243":{"start":{"line":673,"column":4},"end":{"line":675,"column":5}},"244":{"start":{"line":674,"column":6},"end":{"line":674,"column":118}},"245":{"start":{"line":676,"column":4},"end":{"line":676,"column":25}},"246":{"start":{"line":688,"column":0},"end":{"line":747,"column":2}},"247":{"start":{"line":689,"column":2},"end":{"line":689,"column":16}},"248":{"start":{"line":691,"column":2},"end":{"line":719,"column":3}},"249":{"start":{"line":692,"column":4},"end":{"line":708,"column":5}},"250":{"start":{"line":693,"column":6},"end":{"line":693,"column":41}},"251":{"start":{"line":694,"column":6},"end":{"line":697,"column":8}},"252":{"start":{"line":698,"column":6},"end":{"line":705,"column":7}},"253":{"start":{"line":699,"column":8},"end":{"line":701,"column":9}},"254":{"start":{"line":700,"column":10},"end":{"line":700,"column":85}},"255":{"start":{"line":703,"column":8},"end":{"line":703,"column":44}},"256":{"start":{"line":704,"column":8},"end":{"line":704,"column":38}},"257":{"start":{"line":706,"column":6},"end":{"line":706,"column":22}},"258":{"start":{"line":707,"column":6},"end":{"line":707,"column":13}},"259":{"start":{"line":709,"column":4},"end":{"line":711,"column":5}},"260":{"start":{"line":710,"column":6},"end":{"line":710,"column":13}},"261":{"start":{"line":712,"column":4},"end":{"line":714,"column":5}},"262":{"start":{"line":713,"column":6},"end":{"line":713,"column":38}},"263":{"start":{"line":715,"column":4},"end":{"line":718,"column":5}},"264":{"start":{"line":716,"column":6},"end":{"line":716,"column":34}},"265":{"start":{"line":717,"column":6},"end":{"line":717,"column":34}},"266":{"start":{"line":720,"column":2},"end":{"line":733,"column":3}},"267":{"start":{"line":721,"column":4},"end":{"line":721,"column":24}},"268":{"start":{"line":722,"column":4},"end":{"line":724,"column":5}},"269":{"start":{"line":723,"column":6},"end":{"line":723,"column":15}},"270":{"start":{"line":725,"column":4},"end":{"line":732,"column":5}},"271":{"start":{"line":726,"column":6},"end":{"line":726,"column":49}},"272":{"start":{"line":727,"column":6},"end":{"line":727,"column":26}},"273":{"start":{"line":728,"column":6},"end":{"line":728,"column":22}},"274":{"start":{"line":731,"column":6},"end":{"line":731,"column":27}},"275":{"start":{"line":734,"column":2},"end":{"line":734,"column":18}},"276":{"start":{"line":735,"column":2},"end":{"line":746,"column":15}},"277":{"start":{"line":736,"column":4},"end":{"line":745,"column":7}},"278":{"start":{"line":737,"column":6},"end":{"line":739,"column":7}},"279":{"start":{"line":738,"column":8},"end":{"line":738,"column":25}},"280":{"start":{"line":740,"column":6},"end":{"line":742,"column":7}},"281":{"start":{"line":741,"column":8},"end":{"line":741,"column":112}},"282":{"start":{"line":743,"column":6},"end":{"line":743,"column":26}},"283":{"start":{"line":744,"column":6},"end":{"line":744,"column":13}},"284":{"start":{"line":756,"column":0},"end":{"line":765,"column":2}},"285":{"start":{"line":757,"column":2},"end":{"line":757,"column":81}},"286":{"start":{"line":758,"column":2},"end":{"line":764,"column":5}},"287":{"start":{"line":759,"column":4},"end":{"line":759,"column":16}},"288":{"start":{"line":760,"column":4},"end":{"line":762,"column":5}},"289":{"start":{"line":761,"column":6},"end":{"line":761,"column":49}},"290":{"start":{"line":763,"column":4},"end":{"line":763,"column":27}},"291":{"start":{"line":774,"column":0},"end":{"line":788,"column":2}},"292":{"start":{"line":775,"column":2},"end":{"line":775,"column":81}},"293":{"start":{"line":776,"column":2},"end":{"line":787,"column":5}},"294":{"start":{"line":777,"column":4},"end":{"line":777,"column":22}},"295":{"start":{"line":778,"column":4},"end":{"line":785,"column":5}},"296":{"start":{"line":779,"column":6},"end":{"line":784,"column":7}},"297":{"start":{"line":780,"column":8},"end":{"line":780,"column":61}},"298":{"start":{"line":781,"column":8},"end":{"line":783,"column":9}},"299":{"start":{"line":782,"column":10},"end":{"line":782,"column":39}},"300":{"start":{"line":786,"column":4},"end":{"line":786,"column":28}},"301":{"start":{"line":790,"column":0},"end":{"line":790,"column":26}}},"branchMap":{"1":{"line":77,"type":"if","locations":[{"start":{"line":77,"column":2},"end":{"line":77,"column":2}},{"start":{"line":77,"column":2},"end":{"line":77,"column":2}}]},"2":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":2},"end":{"line":80,"column":2}},{"start":{"line":80,"column":2},"end":{"line":80,"column":2}}]},"3":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":2},"end":{"line":92,"column":2}},{"start":{"line":92,"column":2},"end":{"line":92,"column":2}}]},"4":{"line":106,"type":"if","locations":[{"start":{"line":106,"column":4},"end":{"line":106,"column":4}},{"start":{"line":106,"column":4},"end":{"line":106,"column":4}}]},"5":{"line":115,"type":"if","locations":[{"start":{"line":115,"column":4},"end":{"line":115,"column":4}},{"start":{"line":115,"column":4},"end":{"line":115,"column":4}}]},"6":{"line":156,"type":"if","locations":[{"start":{"line":156,"column":4},"end":{"line":156,"column":4}},{"start":{"line":156,"column":4},"end":{"line":156,"column":4}}]},"7":{"line":160,"type":"if","locations":[{"start":{"line":160,"column":4},"end":{"line":160,"column":4}},{"start":{"line":160,"column":4},"end":{"line":160,"column":4}}]},"8":{"line":182,"type":"if","locations":[{"start":{"line":182,"column":2},"end":{"line":182,"column":2}},{"start":{"line":182,"column":2},"end":{"line":182,"column":2}}]},"9":{"line":182,"type":"binary-expr","locations":[{"start":{"line":182,"column":6},"end":{"line":182,"column":41}},{"start":{"line":182,"column":45},"end":{"line":182,"column":81}}]},"10":{"line":201,"type":"if","locations":[{"start":{"line":201,"column":4},"end":{"line":201,"column":4}},{"start":{"line":201,"column":4},"end":{"line":201,"column":4}}]},"11":{"line":221,"type":"if","locations":[{"start":{"line":221,"column":2},"end":{"line":221,"column":2}},{"start":{"line":221,"column":2},"end":{"line":221,"column":2}}]},"12":{"line":225,"type":"if","locations":[{"start":{"line":225,"column":2},"end":{"line":225,"column":2}},{"start":{"line":225,"column":2},"end":{"line":225,"column":2}}]},"13":{"line":227,"type":"if","locations":[{"start":{"line":227,"column":4},"end":{"line":227,"column":4}},{"start":{"line":227,"column":4},"end":{"line":227,"column":4}}]},"14":{"line":234,"type":"if","locations":[{"start":{"line":234,"column":2},"end":{"line":234,"column":2}},{"start":{"line":234,"column":2},"end":{"line":234,"column":2}}]},"15":{"line":237,"type":"if","locations":[{"start":{"line":237,"column":2},"end":{"line":237,"column":2}},{"start":{"line":237,"column":2},"end":{"line":237,"column":2}}]},"16":{"line":243,"type":"if","locations":[{"start":{"line":243,"column":2},"end":{"line":243,"column":2}},{"start":{"line":243,"column":2},"end":{"line":243,"column":2}}]},"17":{"line":246,"type":"if","locations":[{"start":{"line":246,"column":2},"end":{"line":246,"column":2}},{"start":{"line":246,"column":2},"end":{"line":246,"column":2}}]},"18":{"line":263,"type":"if","locations":[{"start":{"line":263,"column":2},"end":{"line":263,"column":2}},{"start":{"line":263,"column":2},"end":{"line":263,"column":2}}]},"19":{"line":270,"type":"if","locations":[{"start":{"line":270,"column":6},"end":{"line":270,"column":6}},{"start":{"line":270,"column":6},"end":{"line":270,"column":6}}]},"20":{"line":275,"type":"if","locations":[{"start":{"line":275,"column":4},"end":{"line":275,"column":4}},{"start":{"line":275,"column":4},"end":{"line":275,"column":4}}]},"21":{"line":280,"type":"binary-expr","locations":[{"start":{"line":280,"column":15},"end":{"line":280,"column":27}},{"start":{"line":280,"column":31},"end":{"line":280,"column":33}}]},"22":{"line":282,"type":"if","locations":[{"start":{"line":282,"column":2},"end":{"line":282,"column":2}},{"start":{"line":282,"column":2},"end":{"line":282,"column":2}}]},"23":{"line":327,"type":"if","locations":[{"start":{"line":327,"column":2},"end":{"line":327,"column":2}},{"start":{"line":327,"column":2},"end":{"line":327,"column":2}}]},"24":{"line":329,"type":"if","locations":[{"start":{"line":329,"column":4},"end":{"line":329,"column":4}},{"start":{"line":329,"column":4},"end":{"line":329,"column":4}}]},"25":{"line":366,"type":"if","locations":[{"start":{"line":366,"column":2},"end":{"line":366,"column":2}},{"start":{"line":366,"column":2},"end":{"line":366,"column":2}}]},"26":{"line":368,"type":"if","locations":[{"start":{"line":368,"column":4},"end":{"line":368,"column":4}},{"start":{"line":368,"column":4},"end":{"line":368,"column":4}}]},"27":{"line":404,"type":"if","locations":[{"start":{"line":404,"column":2},"end":{"line":404,"column":2}},{"start":{"line":404,"column":2},"end":{"line":404,"column":2}}]},"28":{"line":407,"type":"if","locations":[{"start":{"line":407,"column":2},"end":{"line":407,"column":2}},{"start":{"line":407,"column":2},"end":{"line":407,"column":2}}]},"29":{"line":407,"type":"binary-expr","locations":[{"start":{"line":407,"column":6},"end":{"line":407,"column":19}},{"start":{"line":407,"column":23},"end":{"line":407,"column":28}}]},"30":{"line":412,"type":"if","locations":[{"start":{"line":412,"column":4},"end":{"line":412,"column":4}},{"start":{"line":412,"column":4},"end":{"line":412,"column":4}}]},"31":{"line":469,"type":"if","locations":[{"start":{"line":469,"column":2},"end":{"line":469,"column":2}},{"start":{"line":469,"column":2},"end":{"line":469,"column":2}}]},"32":{"line":472,"type":"if","locations":[{"start":{"line":472,"column":2},"end":{"line":472,"column":2}},{"start":{"line":472,"column":2},"end":{"line":472,"column":2}}]},"33":{"line":472,"type":"binary-expr","locations":[{"start":{"line":472,"column":6},"end":{"line":472,"column":19}},{"start":{"line":472,"column":23},"end":{"line":472,"column":28}}]},"34":{"line":476,"type":"if","locations":[{"start":{"line":476,"column":4},"end":{"line":476,"column":4}},{"start":{"line":476,"column":4},"end":{"line":476,"column":4}}]},"35":{"line":534,"type":"if","locations":[{"start":{"line":534,"column":2},"end":{"line":534,"column":2}},{"start":{"line":534,"column":2},"end":{"line":534,"column":2}}]},"36":{"line":536,"type":"if","locations":[{"start":{"line":536,"column":4},"end":{"line":536,"column":4}},{"start":{"line":536,"column":4},"end":{"line":536,"column":4}}]},"37":{"line":554,"type":"if","locations":[{"start":{"line":554,"column":2},"end":{"line":554,"column":2}},{"start":{"line":554,"column":2},"end":{"line":554,"column":2}}]},"38":{"line":556,"type":"if","locations":[{"start":{"line":556,"column":4},"end":{"line":556,"column":4}},{"start":{"line":556,"column":4},"end":{"line":556,"column":4}}]},"39":{"line":559,"type":"cond-expr","locations":[{"start":{"line":559,"column":24},"end":{"line":559,"column":43}},{"start":{"line":559,"column":46},"end":{"line":559,"column":64}}]},"40":{"line":574,"type":"if","locations":[{"start":{"line":574,"column":2},"end":{"line":574,"column":2}},{"start":{"line":574,"column":2},"end":{"line":574,"column":2}}]},"41":{"line":577,"type":"if","locations":[{"start":{"line":577,"column":2},"end":{"line":577,"column":2}},{"start":{"line":577,"column":2},"end":{"line":577,"column":2}}]},"42":{"line":577,"type":"binary-expr","locations":[{"start":{"line":577,"column":6},"end":{"line":577,"column":19}},{"start":{"line":577,"column":23},"end":{"line":577,"column":28}}]},"43":{"line":581,"type":"if","locations":[{"start":{"line":581,"column":2},"end":{"line":581,"column":2}},{"start":{"line":581,"column":2},"end":{"line":581,"column":2}}]},"44":{"line":586,"type":"if","locations":[{"start":{"line":586,"column":6},"end":{"line":586,"column":6}},{"start":{"line":586,"column":6},"end":{"line":586,"column":6}}]},"45":{"line":596,"type":"if","locations":[{"start":{"line":596,"column":4},"end":{"line":596,"column":4}},{"start":{"line":596,"column":4},"end":{"line":596,"column":4}}]},"46":{"line":600,"type":"if","locations":[{"start":{"line":600,"column":4},"end":{"line":600,"column":4}},{"start":{"line":600,"column":4},"end":{"line":600,"column":4}}]},"47":{"line":603,"type":"binary-expr","locations":[{"start":{"line":603,"column":19},"end":{"line":603,"column":20}},{"start":{"line":603,"column":24},"end":{"line":603,"column":28}}]},"48":{"line":637,"type":"binary-expr","locations":[{"start":{"line":637,"column":11},"end":{"line":637,"column":17}},{"start":{"line":637,"column":22},"end":{"line":637,"column":51}}]},"49":{"line":640,"type":"if","locations":[{"start":{"line":640,"column":6},"end":{"line":640,"column":6}},{"start":{"line":640,"column":6},"end":{"line":640,"column":6}}]},"50":{"line":644,"type":"if","locations":[{"start":{"line":644,"column":6},"end":{"line":644,"column":6}},{"start":{"line":644,"column":6},"end":{"line":644,"column":6}}]},"51":{"line":644,"type":"binary-expr","locations":[{"start":{"line":644,"column":10},"end":{"line":644,"column":21}},{"start":{"line":644,"column":25},"end":{"line":644,"column":48}}]},"52":{"line":657,"type":"if","locations":[{"start":{"line":657,"column":8},"end":{"line":657,"column":8}},{"start":{"line":657,"column":8},"end":{"line":657,"column":8}}]},"53":{"line":673,"type":"if","locations":[{"start":{"line":673,"column":4},"end":{"line":673,"column":4}},{"start":{"line":673,"column":4},"end":{"line":673,"column":4}}]},"54":{"line":673,"type":"binary-expr","locations":[{"start":{"line":673,"column":8},"end":{"line":673,"column":12}},{"start":{"line":673,"column":16},"end":{"line":673,"column":22}}]},"55":{"line":692,"type":"if","locations":[{"start":{"line":692,"column":4},"end":{"line":692,"column":4}},{"start":{"line":692,"column":4},"end":{"line":692,"column":4}}]},"56":{"line":698,"type":"if","locations":[{"start":{"line":698,"column":6},"end":{"line":698,"column":6}},{"start":{"line":698,"column":6},"end":{"line":698,"column":6}}]},"57":{"line":699,"type":"if","locations":[{"start":{"line":699,"column":8},"end":{"line":699,"column":8}},{"start":{"line":699,"column":8},"end":{"line":699,"column":8}}]},"58":{"line":709,"type":"if","locations":[{"start":{"line":709,"column":4},"end":{"line":709,"column":4}},{"start":{"line":709,"column":4},"end":{"line":709,"column":4}}]},"59":{"line":712,"type":"if","locations":[{"start":{"line":712,"column":4},"end":{"line":712,"column":4}},{"start":{"line":712,"column":4},"end":{"line":712,"column":4}}]},"60":{"line":712,"type":"binary-expr","locations":[{"start":{"line":712,"column":8},"end":{"line":712,"column":42}},{"start":{"line":712,"column":46},"end":{"line":712,"column":79}}]},"61":{"line":715,"type":"if","locations":[{"start":{"line":715,"column":4},"end":{"line":715,"column":4}},{"start":{"line":715,"column":4},"end":{"line":715,"column":4}}]},"62":{"line":722,"type":"if","locations":[{"start":{"line":722,"column":4},"end":{"line":722,"column":4}},{"start":{"line":722,"column":4},"end":{"line":722,"column":4}}]},"63":{"line":737,"type":"if","locations":[{"start":{"line":737,"column":6},"end":{"line":737,"column":6}},{"start":{"line":737,"column":6},"end":{"line":737,"column":6}}]},"64":{"line":740,"type":"if","locations":[{"start":{"line":740,"column":6},"end":{"line":740,"column":6}},{"start":{"line":740,"column":6},"end":{"line":740,"column":6}}]},"65":{"line":760,"type":"if","locations":[{"start":{"line":760,"column":4},"end":{"line":760,"column":4}},{"start":{"line":760,"column":4},"end":{"line":760,"column":4}}]},"66":{"line":760,"type":"binary-expr","locations":[{"start":{"line":760,"column":8},"end":{"line":760,"column":12}},{"start":{"line":760,"column":16},"end":{"line":760,"column":22}},{"start":{"line":760,"column":26},"end":{"line":760,"column":37}},{"start":{"line":760,"column":41},"end":{"line":760,"column":65}}]},"67":{"line":778,"type":"if","locations":[{"start":{"line":778,"column":4},"end":{"line":778,"column":4}},{"start":{"line":778,"column":4},"end":{"line":778,"column":4}}]},"68":{"line":778,"type":"binary-expr","locations":[{"start":{"line":778,"column":8},"end":{"line":778,"column":12}},{"start":{"line":778,"column":16},"end":{"line":778,"column":22}},{"start":{"line":778,"column":26},"end":{"line":778,"column":37}}]},"69":{"line":781,"type":"if","locations":[{"start":{"line":781,"column":8},"end":{"line":781,"column":8}},{"start":{"line":781,"column":8},"end":{"line":781,"column":8}}]}},"code":["\"use strict\";","var events = require('events');","var util = require('util');","/**"," * Module containing classes and fields related to metadata."," * @module metadata"," */","var t = require('../tokenizer');","var utils = require('../utils');","var errors = require('../errors');","var types = require('../types');","var requests = require('../requests');","var schemaParserFactory = require('./schema-parser');","","/**"," * @const"," * @private"," */","var _selectTraceSession = \"SELECT * FROM system_traces.sessions WHERE session_id=%s\";","/**"," * @const"," * @private"," */","var _selectTraceEvents = \"SELECT * FROM system_traces.events WHERE session_id=%s\";","/**"," * @const"," * @private"," */","var _selectSchemaVersionPeers = \"SELECT schema_version FROM system.peers\";","/**"," * @const"," * @private"," */","var _selectSchemaVersionLocal = \"SELECT schema_version FROM system.local\";","/**"," * @const"," * @private"," */","var _traceMaxAttemps = 5;","/**"," * @const"," * @private"," */","var _traceAttemptDelay = 200;","","/**"," * Represents cluster and schema information."," * The metadata class acts as a internal state of the driver."," * @param {ClientOptions} options"," * @param {ControlConnection} controlConnection Control connection used to retrieve information."," * @constructor"," */","function Metadata (options, controlConnection) {","  Object.defineProperty(this, 'options', { value: options, enumerable: false, writable: false});","  Object.defineProperty(this, 'controlConnection', { value: controlConnection, enumerable: false, writable: false});","  this.keyspaces = {};","  this.clearPrepared();","  this._schemaParser = schemaParserFactory.getByVersion(controlConnection, this.getUdt.bind(this));","}","","/**"," * Sets the cassandra version"," * @internal"," * @ignore"," * @param {Array.<Number>} version"," */","Metadata.prototype.setCassandraVersion = function (version) {","  this._schemaParser = schemaParserFactory.getByVersion(","    this.controlConnection, this.getUdt.bind(this), version, this._schemaParser);","};","","/**"," * @ignore"," * @param {String} partitionerName"," */","Metadata.prototype.setPartitioner = function (partitionerName) {","  if (/RandomPartitioner$/.test(partitionerName)) {","    return this.tokenizer = new t.RandomTokenizer();","  }","  if (/ByteOrderedPartitioner$/.test(partitionerName)) {","    return this.tokenizer = new t.ByteOrderedTokenizer();","  }","  return this.tokenizer = new t.Murmur3Tokenizer();","};","","/**"," * Populates the information regarding primary replica per token, datacenters (+ racks) and sorted token ring."," * @ignore"," * @param {HostMap} hosts"," */","Metadata.prototype.buildTokens = function (hosts) {","  if (!this.tokenizer) {","    return this.log('error', 'Tokenizer could not be determined');","  }","  //Get a sorted array of tokens","  var allSorted = [];","  //Get a map of <token, primaryHost>","  var primaryReplicas = {};","  //Depending on the amount of tokens, this could be an expensive operation","  var hostArray = hosts.values();","  var parser = this.tokenizer.parse;","  var compare = this.tokenizer.compare;","  var stringify = this.tokenizer.stringify;","  var datacenters = {};","  hostArray.forEach(function (h) {","    if (!h.tokens) {","      return;","    }","    h.tokens.forEach(function (tokenString) {","      var token = parser(tokenString);","      utils.insertSorted(allSorted, token, compare);","      primaryReplicas[stringify(token)] = h;","    });","    var dc = datacenters[h.datacenter];","    if (!dc) {","      dc = datacenters[h.datacenter] = {","        hostLength: 0,","        racks: new utils.HashSet()","      };","    }","    dc.hostLength++;","    dc.racks.add(h.rack);","  });","  //Primary replica for given token","  this.primaryReplicas = primaryReplicas;","  //All the tokens in ring order","  this.ring = allSorted;","  //Datacenter metadata (host length and racks)","  this.datacenters = datacenters;","};","","/**"," * Gets the keyspace metadata information and updates the internal state of the driver."," * <p>"," *   If a <code>callback</code> is provided, the callback is invoked when the keyspaces metadata refresh completes."," *   Otherwise, it returns a <code>Promise</code>."," * </p>"," * @param {String} name Name of the keyspace."," * @param {Function} [callback] Optional callback."," */","Metadata.prototype.refreshKeyspace = function (name, callback) {","  return utils.promiseWrapper.call(this, this.options, callback, true, function handler(cb) {","    this._refreshKeyspaceCb(name, cb);","  });","};","","/**"," * @param {String} name"," * @param {Function} callback"," * @private"," */","Metadata.prototype._refreshKeyspaceCb = function (name, callback) {","  this.log('info', util.format('Retrieving keyspace %s metadata', name));","  var self = this;","  this._schemaParser.getKeyspace(name, function (err, ksInfo) {","    if (err) {","      self.log('error', 'There was an error while trying to retrieve keyspace information', err);","      return callback(err);","    }","    if (!ksInfo) {","      // the keyspace was dropped","      delete self.keyspaces[name];","      return callback();","    }","    // tokens are lazily init on the keyspace, once a replica from that keyspace is retrieved.","    self.keyspaces[ksInfo.name] = ksInfo;","    callback(null, ksInfo);","  });","};","","/**"," * Gets the metadata information of all the keyspaces and updates the internal state of the driver."," * <p>"," *   If a <code>callback</code> is provided, the callback is invoked when the keyspace metadata refresh completes."," *   Otherwise, it returns a <code>Promise</code>."," * </p>"," * @param {Boolean|Function} [waitReconnect] Determines if it should wait for reconnection in case the control connection is not"," * connected at the moment. Default: true."," * @param {Function} [callback] Optional callback."," */","Metadata.prototype.refreshKeyspaces = function (waitReconnect, callback) {","  if (typeof waitReconnect === 'function' || typeof waitReconnect === 'undefined') {","    callback = waitReconnect;","    waitReconnect = true;","  }","","  return utils.promiseWrapper.call(this, this.options, callback, true, function handler(cb) {","    this._refreshKeyspacesCb(waitReconnect, cb);","  });","};","","/**"," * @param {Boolean} waitReconnect"," * @param {Function} callback"," * @private"," */","Metadata.prototype._refreshKeyspacesCb = function (waitReconnect, callback) {","  this.log('info', 'Retrieving keyspaces metadata');","  var self = this;","  this._schemaParser.getKeyspaces(waitReconnect, function getKeyspacesCallback(err, keyspaces) {","    if (err) {","      self.log('error', 'There was an error while trying to retrieve keyspaces information', err);","      return callback(err);","    }","    self.keyspaces = keyspaces;","    callback(null, keyspaces);","  });","};","","/**"," * Gets the host list representing the replicas that contain such partition."," * <p>"," *   It uses the pre-loaded keyspace metadata to retrieve the replicas for a token for a given keyspace."," *   When the keyspace metadata has not been loaded, it returns null."," * </p>"," * @param {String} keyspaceName"," * @param {Buffer} tokenBuffer"," * @returns {Array}"," */","Metadata.prototype.getReplicas = function (keyspaceName, tokenBuffer) {","  if (!this.ring) {","    return null;","  }","  var keyspace;","  if (keyspaceName) {","    keyspace = this.keyspaces[keyspaceName];","    if (!keyspace) {","      // the keyspace was not found, the metadata should be loaded beforehand","      return null;","    }","  }","  var token = this.tokenizer.hash(tokenBuffer);","  var i = utils.binarySearch(this.ring, token, this.tokenizer.compare);","  if (i < 0) {","    i = ~i;","  }","  if (i >= this.ring.length) {","    //it circled back","    i = i % this.ring.length;","  }","  var closestToken = this.tokenizer.stringify(this.ring[i]);","","  if (!keyspaceName) {","    return [this.primaryReplicas[closestToken]];","  }","  if (!keyspace.replicas) {","    //Calculate replicas the first time for the keyspace","    keyspace.replicas = keyspace.tokenToReplica(this.tokenizer, this.ring, this.primaryReplicas, this.datacenters);","  }","  return keyspace.replicas[closestToken];","};","","Metadata.prototype.log = utils.log;","","/**"," * Gets the metadata information already stored associated to a prepared statement"," * @param {String} keyspaceName"," * @param {String} query"," * @ignore"," */","Metadata.prototype.getPreparedInfo = function (keyspaceName, query) {","  //overflow protection","  if (this.preparedQueries.__length >= this.options.maxPrepared) {","    var toRemove;","    this.log('warning',","      'Prepared statements exceeded maximum. This could be caused by preparing queries that contain parameters');","    var existingKeys = Object.keys(this.preparedQueries);","    for (var i = 0; i < existingKeys.length; i++) {","      var key = existingKeys[i];","      if (this.preparedQueries[key].queryId) {","        toRemove = key;","        break;","      }","    }","    if (toRemove) {","      delete this.preparedQueries[toRemove];","      this.preparedQueries.__length--;","    }","  }","  var name = ( keyspaceName || '' ) + query;","  var info = this.preparedQueries[name];","  if (!info) {","    info = new events.EventEmitter();","    info.setMaxListeners(0);","    this.preparedQueries[name] = info;","    this.preparedQueries.__length++;","  }","  return info;","};","","/**"," * Clears the internal state related to the prepared statements."," * Following calls to the Client using the prepare flag will re-prepare the statements."," */","Metadata.prototype.clearPrepared = function () {","  this.preparedQueries = {\"__length\": 0};","};","","/**"," * Gets the definition of an user-defined type."," * <p>"," *   If a <code>callback</code> is provided, the callback is invoked when the metadata retrieval completes."," *   Otherwise, it returns a <code>Promise</code>."," * </p>"," * <p>"," * When trying to retrieve the same UDT definition concurrently, it will query once and invoke all callbacks"," * with the retrieved information."," * </p>"," * @param {String} keyspaceName Name of the keyspace."," * @param {String} name Name of the UDT."," * @param {Function} [callback] The callback to invoke when retrieval completes."," */","Metadata.prototype.getUdt = function (keyspaceName, name, callback) {","  return utils.promiseWrapper.call(this, this.options, callback, false, function handler(cb) {","    this._getUdtCb(keyspaceName, name, cb);","  });","};","","/**"," * @param {String} keyspaceName"," * @param {String} name"," * @param {Function} callback"," * @private"," */","Metadata.prototype._getUdtCb = function (keyspaceName, name, callback) {","  var cache;","  if (this.options.isMetadataSyncEnabled) {","    var keyspace = this.keyspaces[keyspaceName];","    if (!keyspace) {","      return callback(null, null);","    }","    cache = keyspace.udts;","  }","  this._schemaParser.getUdt(keyspaceName, name, cache, callback);","};","","/**"," * Gets the definition of a table."," * <p>"," *   If a <code>callback</code> is provided, the callback is invoked when the metadata retrieval completes."," *   Otherwise, it returns a <code>Promise</code>."," * </p>"," * <p>"," * When trying to retrieve the same table definition concurrently, it will query once and invoke all callbacks"," * with the retrieved information."," * </p>"," * @param {String} keyspaceName Name of the keyspace."," * @param {String} name Name of the Table."," * @param {Function} [callback] The callback with the err as a first parameter and the {@link TableMetadata} as"," * second parameter."," */","Metadata.prototype.getTable = function (keyspaceName, name, callback) {","  return utils.promiseWrapper.call(this, this.options, callback, false, function handler(cb) {","    this._getTableCb(keyspaceName, name, cb);","  });","};","","/**"," * @param {String} keyspaceName"," * @param {String} name"," * @param {Function} callback"," * @private"," */","Metadata.prototype._getTableCb = function (keyspaceName, name, callback) {","  var cache;","  if (this.options.isMetadataSyncEnabled) {","    var keyspace = this.keyspaces[keyspaceName];","    if (!keyspace) {","      return callback(null, null);","    }","    cache = keyspace.tables;","  }","  this._schemaParser.getTable(keyspaceName, name, cache, callback);","};","","/**"," * Gets the definition of CQL functions for a given name."," * <p>"," *   If a <code>callback</code> is provided, the callback is invoked when the metadata retrieval completes."," *   Otherwise, it returns a <code>Promise</code>."," * </p>"," * <p>"," * When trying to retrieve the same function definition concurrently, it will query once and invoke all callbacks"," * with the retrieved information."," * </p>"," * @param {String} keyspaceName Name of the keyspace."," * @param {String} name Name of the Function."," * @param {Function} [callback] The callback with the err as a first parameter and the array of {@link SchemaFunction}"," * as second parameter."," */","Metadata.prototype.getFunctions = function (keyspaceName, name, callback) {","  return utils.promiseWrapper.call(this, this.options, callback, false, function handler(cb) {","    this._getFunctionsCb(keyspaceName, name, cb);","  });","};","","/**"," * @param {String} keyspaceName"," * @param {String} name"," * @param {Function} callback"," * @private"," */","Metadata.prototype._getFunctionsCb = function (keyspaceName, name, callback) {","  if (typeof callback !== 'function') {","    throw new errors.ArgumentError('Callback is not a function');","  }","  if (!keyspaceName || !name) {","    return callback(","      new errors.ArgumentError('You must provide the keyspace name and cql function name to retrieve the metadata'));","  }","  this._getFunctions(keyspaceName, name, false, function (err, functionsMap) {","    if (err) {","      return callback(err, null);","    }","    callback(null, utils.objectValues(functionsMap));","  });","};","","/**"," * Gets a definition of CQL function for a given name and signature."," * <p>"," *   If a <code>callback</code> is provided, the callback is invoked when the metadata retrieval completes."," *   Otherwise, it returns a <code>Promise</code>."," * </p>"," * <p>"," * When trying to retrieve the same function definition concurrently, it will query once and invoke all callbacks"," * with the retrieved information."," * </p>"," * @param {String} keyspaceName Name of the keyspace"," * @param {String} name Name of the Function"," * @param {Array.<String>|Array.<{code, info}>} signature Array of types of the parameters."," * @param {Function} [callback] The callback with the err as a first parameter and the {@link SchemaFunction} as second"," * parameter."," */","Metadata.prototype.getFunction = function (keyspaceName, name, signature, callback) {","  return utils.promiseWrapper.call(this, this.options, callback, false, function handler(cb) {","    this._getSingleFunctionCb(keyspaceName, name, signature, false, cb);","  });","};","","/**"," * Gets the definition of CQL aggregate for a given name."," * <p>"," *   If a <code>callback</code> is provided, the callback is invoked when the metadata retrieval completes."," *   Otherwise, it returns a <code>Promise</code>."," * </p>"," * <p>"," * When trying to retrieve the same aggregates definition concurrently, it will query once and invoke all callbacks"," * with the retrieved information."," * </p>"," * @param {String} keyspaceName Name of the keyspace"," * @param {String} name Name of the Function"," * @param {Function} [callback] The callback with the err as a first parameter and the array of {@link Aggregate} as"," * second parameter."," */","Metadata.prototype.getAggregates = function (keyspaceName, name, callback) {","  return utils.promiseWrapper.call(this, this.options, callback, false, function handler(cb) {","    this._getAggregatesCb(keyspaceName, name, cb);","  });","};","","/**"," * @param {String} keyspaceName"," * @param {String} name"," * @param {Function} callback"," * @private"," */","Metadata.prototype._getAggregatesCb = function (keyspaceName, name, callback) {","  if (typeof callback !== 'function') {","    throw new errors.ArgumentError('Callback is not a function');","  }","  if (!keyspaceName || !name) {","    return callback(new errors.ArgumentError('You must provide the keyspace name and cql aggregate name to retrieve the metadata'));","  }","  this._getFunctions(keyspaceName, name, true, function (err, functionsMap) {","    if (err) {","      return callback(err, null);","    }","    callback(null, utils.objectValues(functionsMap));","  });","};","","/**"," * Gets a definition of CQL aggregate for a given name and signature."," * <p>"," *   If a <code>callback</code> is provided, the callback is invoked when the metadata retrieval completes."," *   Otherwise, it returns a <code>Promise</code>."," * </p>"," * <p>"," * When trying to retrieve the same aggregate definition concurrently, it will query once and invoke all callbacks"," * with the retrieved information."," * </p>"," * @param {String} keyspaceName Name of the keyspace"," * @param {String} name Name of the aggregate"," * @param {Array.<String>|Array.<{code, info}>} signature Array of types of the parameters."," * @param {Function} [callback] The callback with the err as a first parameter and the {@link Aggregate} as second parameter."," */","Metadata.prototype.getAggregate = function (keyspaceName, name, signature, callback) {","  return utils.promiseWrapper.call(this, this.options, callback, false, function handler(cb) {","    this._getSingleFunctionCb(keyspaceName, name, signature, true, cb);","  });","};","","/**"," * Gets the definition of a CQL materialized view for a given name."," * <p>"," *   If a <code>callback</code> is provided, the callback is invoked when the metadata retrieval completes."," *   Otherwise, it returns a <code>Promise</code>."," * </p>"," * <p>"," *   Note that, unlike the rest of the {@link Metadata} methods, this method does not cache the result for following"," *   calls, as the current version of the Cassandra native protocol does not support schema change events for"," *   materialized views. Each call to this method will produce one or more queries to the cluster."," * </p>"," * @param {String} keyspaceName Name of the keyspace"," * @param {String} name Name of the materialized view"," * @param {Function} [callback] The callback with the err as a first parameter and the {@link MaterializedView} as"," * second parameter."," */","Metadata.prototype.getMaterializedView = function (keyspaceName, name, callback) {","  return utils.promiseWrapper.call(this, this.options, callback, false, function handler(cb) {","    this._getMaterializedViewCb(keyspaceName, name, cb);","  });","};","","/**"," * @param {String} keyspaceName"," * @param {String} name"," * @param {Function} callback"," * @private"," */","Metadata.prototype._getMaterializedViewCb = function (keyspaceName, name, callback) {","  var cache;","  if (this.options.isMetadataSyncEnabled) {","    var keyspace = this.keyspaces[keyspaceName];","    if (!keyspace) {","      return callback(null, null);","    }","    cache = keyspace.views;","  }","  this._schemaParser.getMaterializedView(keyspaceName, name, cache, callback);","};","","/**"," * Gets a map of cql function definitions or aggregates based on signature."," * @param {String} keyspaceName"," * @param {String} name Name of the function or aggregate"," * @param {Boolean} aggregate"," * @param {Function} callback"," * @private"," */","Metadata.prototype._getFunctions = function (keyspaceName, name, aggregate, callback) {","  var cache;","  if (this.options.isMetadataSyncEnabled) {","    var keyspace = this.keyspaces[keyspaceName];","    if (!keyspace) {","      return callback(null, null);","    }","    cache = aggregate ? keyspace.aggregates : keyspace.functions;","  }","  this._schemaParser.getFunctions(keyspaceName, name, aggregate, cache, callback);","};","","/**"," * Gets a single cql function or aggregate definition"," * @param {String} keyspaceName"," * @param {String} name"," * @param {Array} signature"," * @param {Boolean} aggregate"," * @param {Function} callback"," * @private"," */","Metadata.prototype._getSingleFunctionCb = function (keyspaceName, name, signature, aggregate, callback) {","  if (typeof callback !== 'function') {","    throw new errors.ArgumentError('Callback is not a function');","  }","  if (!keyspaceName || !name) {","    return callback(","      new errors.ArgumentError('You must provide the keyspace name and cql function name to retrieve the metadata'));","  }","  if (!util.isArray(signature)) {","    return callback(new errors.ArgumentError('Signature must be an array of types'));","  }","  try {","    signature = signature.map(function (item) {","      if (typeof item === 'string') {","        return item;","      }","      return types.getDataTypeNameByCode(item);","    });","  }","  catch (err) {","    return callback(err);","  }","  this._getFunctions(keyspaceName, name, aggregate, function (err, functionsMap) {","    if (err) {","      return callback(err, null);","    }","    var f;","    if (functionsMap) {","      f = functionsMap['(' + signature.join(',') + ')'];","    }","    callback(null, f || null);","  });","};","","/**"," * Gets the trace session generated by Cassandra when query tracing is enabled for the"," * query. The trace itself is stored in Cassandra in the <code>sessions</code> and"," * <code>events</code> table in the <code>system_traces</code> keyspace and can be"," * retrieve manually using the trace identifier."," * <p>"," *   If a <code>callback</code> is provided, the callback is invoked when the metadata retrieval completes."," *   Otherwise, it returns a <code>Promise</code>."," * </p>"," * @param {Uuid} traceId Identifier of the trace session."," * @param {Function} [callback] The callback with the err as first parameter and the query trace as second parameter."," */","Metadata.prototype.getTrace = function (traceId, callback) {","  return utils.promiseWrapper.call(this, this.options, callback, false, function handler(cb) {","    this._getTraceCb(traceId, cb);","  });","};","","/**"," * @param {Uuid} traceId"," * @param {Function} callback"," * @private"," */","Metadata.prototype._getTraceCb = function (traceId, callback) {","  var trace;","  var attempts = 0;","  var selectSession = util.format(_selectTraceSession, traceId);","  var selectEvents = util.format(_selectTraceEvents, traceId);","  var self = this;","  utils.whilst(function condition() {","    return !trace && (attempts++ < _traceMaxAttemps);","  }, function iterator(next) {","    self.controlConnection.query(selectSession, function (err, result) {","      if (err) {","        return next(err);","      }","      var sessionRow = result.rows[0];","      if (!sessionRow || !sessionRow['duration']) {","        return setTimeout(next, _traceAttemptDelay);","      }","      trace = {","        requestType: sessionRow['request'],","        coordinator: sessionRow['coordinator'],","        parameters: sessionRow['parameters'],","        startedAt: sessionRow['started_at'],","        duration: sessionRow['duration'],","        clientAddress: sessionRow['client'],","        events: []","      };","      self.controlConnection.query(selectEvents, function (err, result) {","        if (err) {","          return next(err);","        }","        result.rows.forEach(function (row) {","          trace.events.push({","            id: row['event_id'],","            activity: row['activity'],","            source: row['source'],","            elapsed: row['source_elapsed'],","            thread: row['thread']","          });","        });","        next();","      });","    });","  }, function getTraceEnded(err) {","    if (!err && !trace) {","      err = new Error(util.format('Trace %s could not fully retrieved after %d attempts', traceId, _traceMaxAttemps));","    }","    callback(err, trace);","  });","};","","/**"," * Uses the metadata to fill the user provided parameter hints"," * @param {String} keyspace"," * @param {Array} hints"," * @param {Function} callback"," * @internal"," * @ignore"," */","Metadata.prototype.adaptUserHints = function (keyspace, hints, callback) {","  var udts = [];","  //check for udts and get the metadata","  function checkUdtTypes(type) {","    if (type.code === types.dataTypes.udt) {","      var udtName = type.info.split('.');","      type.info = {","        keyspace: udtName[0],","        name: udtName[1]","      };","      if (!type.info.name) {","        if (!keyspace) {","          throw new TypeError('No keyspace specified for udt: ' + udtName.join('.'));","        }","        //use the provided keyspace","        type.info.name = type.info.keyspace;","        type.info.keyspace = keyspace;","      }","      udts.push(type);","      return;","    }","    if (!type.info) {","      return;","    }","    if (type.code === types.dataTypes.list || type.code === types.dataTypes.set) {","      return checkUdtTypes(type.info);","    }","    if (type.code === types.dataTypes.map) {","      checkUdtTypes(type.info[0]);","      checkUdtTypes(type.info[1]);","    }","  }","  for (var i = 0; i < hints.length; i++) {","    var hint = hints[i];","    if (typeof hint !== 'string') {","      continue;","    }","    try {","      var type = types.dataTypes.getByName(hint);","      checkUdtTypes(type);","      hints[i] = type;","    }","    catch (err) {","      return callback(err);","    }","  }","  var self = this;","  utils.each(udts, function (type, next) {","    self.getUdt(type.info.keyspace, type.info.name, function (err, udtInfo) {","      if (err) {","        return next(err);","      }","      if (!udtInfo) {","        return next(new TypeError('User defined type not found: ' + type.info.keyspace + '.' + type.info.name));","      }","      type.info = udtInfo;","      next();","    });","  }, callback);","};","","/**"," * Uses the provided connection to query for the local schema version"," * @param {Connection} connection"," * @param {Function} callback"," * @internal"," * @ignore"," */","Metadata.prototype.getLocalSchemaVersion = function (connection, callback) {","  var request = new requests.QueryRequest(_selectSchemaVersionLocal, null, null);","  connection.sendStream(request, utils.emptyObject, function (err, result) {","    var version;","    if (!err && result && result.rows && result.rows.length === 1) {","      version = result.rows[0]['schema_version'];","    }","    callback(err, version);","  });","};","","/**"," * Uses the provided connection to query for peers' schema version"," * @param {Connection} connection"," * @param {Function} callback"," * @internal"," * @ignore"," */","Metadata.prototype.getPeersSchemaVersions = function (connection, callback) {","  var request = new requests.QueryRequest(_selectSchemaVersionPeers, null, null);","  connection.sendStream(request, utils.emptyObject, function (err, result) {","    var versions = [];","    if (!err && result && result.rows) {","      for (var i = 0; i < result.rows.length; i++) {","        var schemaVersion = result.rows[i]['schema_version'];","        if (schemaVersion) {","          versions.push(schemaVersion);","        }","      }","    }","    callback(err, versions);","  });","};","","module.exports = Metadata;",""],"l":{"2":1,"3":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"19":1,"24":1,"29":1,"34":1,"39":1,"44":1,"53":1,"54":0,"55":0,"56":0,"57":0,"58":0,"67":1,"68":0,"76":1,"77":0,"78":0,"80":0,"81":0,"83":0,"91":1,"92":0,"93":0,"96":0,"98":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"109":0,"110":0,"111":0,"112":0,"114":0,"115":0,"116":0,"121":0,"122":0,"125":0,"127":0,"129":0,"141":1,"142":0,"143":0,"152":1,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"160":0,"162":0,"163":0,"166":0,"167":0,"181":1,"182":0,"183":0,"184":0,"187":0,"188":0,"197":1,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"205":0,"206":0,"220":1,"221":0,"222":0,"224":0,"225":0,"226":0,"227":0,"229":0,"232":0,"233":0,"234":0,"235":0,"237":0,"239":0,"241":0,"243":0,"244":0,"246":0,"248":0,"250":0,"253":1,"261":1,"263":0,"264":0,"265":0,"267":0,"268":0,"269":0,"270":0,"271":0,"272":0,"275":0,"276":0,"277":0,"280":0,"281":0,"282":0,"283":0,"284":0,"285":0,"286":0,"288":0,"295":1,"296":0,"313":1,"314":0,"315":0,"325":1,"326":0,"327":0,"328":0,"329":0,"330":0,"332":0,"334":0,"352":1,"353":0,"354":0,"364":1,"365":0,"366":0,"367":0,"368":0,"369":0,"371":0,"373":0,"391":1,"392":0,"393":0,"403":1,"404":0,"405":0,"407":0,"408":0,"411":0,"412":0,"413":0,"415":0,"435":1,"436":0,"437":0,"456":1,"457":0,"458":0,"468":1,"469":0,"470":0,"472":0,"473":0,"475":0,"476":0,"477":0,"479":0,"498":1,"499":0,"500":0,"520":1,"521":0,"522":0,"532":1,"533":0,"534":0,"535":0,"536":0,"537":0,"539":0,"541":0,"552":1,"553":0,"554":0,"555":0,"556":0,"557":0,"559":0,"561":0,"573":1,"574":0,"575":0,"577":0,"578":0,"581":0,"582":0,"584":0,"585":0,"586":0,"587":0,"589":0,"593":0,"595":0,"596":0,"597":0,"599":0,"600":0,"601":0,"603":0,"619":1,"620":0,"621":0,"630":1,"631":0,"632":0,"633":0,"634":0,"635":0,"636":0,"637":0,"639":0,"640":0,"641":0,"643":0,"644":0,"645":0,"647":0,"656":0,"657":0,"658":0,"660":0,"661":0,"669":0,"673":0,"674":0,"676":0,"688":1,"689":0,"691":1,"692":0,"693":0,"694":0,"698":0,"699":0,"700":0,"703":0,"704":0,"706":0,"707":0,"709":0,"710":0,"712":0,"713":0,"715":0,"716":0,"717":0,"720":0,"721":0,"722":0,"723":0,"725":0,"726":0,"727":0,"728":0,"731":0,"734":0,"735":0,"736":0,"737":0,"738":0,"740":0,"741":0,"743":0,"744":0,"756":1,"757":0,"758":0,"759":0,"760":0,"761":0,"763":0,"774":1,"775":0,"776":0,"777":0,"778":0,"779":0,"780":0,"781":0,"782":0,"786":0,"790":1}},"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/tokenizer.js":{"path":"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/tokenizer.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":1,"9":0,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1,"17":0,"18":1,"19":1,"20":1,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":1,"89":0,"90":0,"91":0,"92":1,"93":0,"94":1,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":1,"102":0,"103":1,"104":0,"105":1,"106":0,"107":1,"108":1,"109":0,"110":0,"111":0,"112":0,"113":1,"114":0,"115":1,"116":0,"117":1,"118":1,"119":1,"120":0,"121":1,"122":0,"123":1,"124":0,"125":1,"126":1,"127":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"5":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0},"fnMap":{"1":{"name":"Tokenizer","line":12,"loc":{"start":{"line":12,"column":0},"end":{"line":12,"column":21}}},"2":{"name":"(anonymous_2)","line":21,"loc":{"start":{"line":21,"column":27},"end":{"line":21,"column":44}}},"3":{"name":"(anonymous_3)","line":30,"loc":{"start":{"line":30,"column":28},"end":{"line":30,"column":45}}},"4":{"name":"(anonymous_4)","line":40,"loc":{"start":{"line":40,"column":30},"end":{"line":40,"column":52}}},"5":{"name":"(anonymous_5)","line":50,"loc":{"start":{"line":50,"column":32},"end":{"line":50,"column":49}}},"6":{"name":"Murmur3Tokenizer","line":58,"loc":{"start":{"line":58,"column":0},"end":{"line":58,"column":28}}},"7":{"name":"(anonymous_7)","line":68,"loc":{"start":{"line":68,"column":34},"end":{"line":68,"column":51}}},"8":{"name":"(anonymous_8)","line":186,"loc":{"start":{"line":186,"column":38},"end":{"line":186,"column":68}}},"9":{"name":"(anonymous_9)","line":206,"loc":{"start":{"line":206,"column":36},"end":{"line":206,"column":52}}},"10":{"name":"(anonymous_10)","line":216,"loc":{"start":{"line":216,"column":34},"end":{"line":216,"column":47}}},"11":{"name":"(anonymous_11)","line":232,"loc":{"start":{"line":232,"column":35},"end":{"line":232,"column":52}}},"12":{"name":"(anonymous_12)","line":241,"loc":{"start":{"line":241,"column":37},"end":{"line":241,"column":59}}},"13":{"name":"RandomTokenizer","line":249,"loc":{"start":{"line":249,"column":0},"end":{"line":249,"column":27}}},"14":{"name":"(anonymous_14)","line":260,"loc":{"start":{"line":260,"column":33},"end":{"line":260,"column":50}}},"15":{"name":"(anonymous_15)","line":271,"loc":{"start":{"line":271,"column":34},"end":{"line":271,"column":51}}},"16":{"name":"(anonymous_16)","line":280,"loc":{"start":{"line":280,"column":36},"end":{"line":280,"column":58}}},"17":{"name":"ByteOrderedTokenizer","line":284,"loc":{"start":{"line":284,"column":0},"end":{"line":284,"column":32}}},"18":{"name":"(anonymous_18)","line":294,"loc":{"start":{"line":294,"column":38},"end":{"line":294,"column":55}}},"19":{"name":"(anonymous_19)","line":298,"loc":{"start":{"line":298,"column":43},"end":{"line":298,"column":60}}},"20":{"name":"(anonymous_20)","line":302,"loc":{"start":{"line":302,"column":39},"end":{"line":302,"column":56}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":27}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":31}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":22}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":28}},"5":{"start":{"line":12,"column":0},"end":{"line":14,"column":1}},"6":{"start":{"line":21,"column":0},"end":{"line":23,"column":2}},"7":{"start":{"line":22,"column":2},"end":{"line":22,"column":74}},"8":{"start":{"line":30,"column":0},"end":{"line":32,"column":2}},"9":{"start":{"line":31,"column":2},"end":{"line":31,"column":75}},"10":{"start":{"line":40,"column":0},"end":{"line":48,"column":2}},"11":{"start":{"line":41,"column":2},"end":{"line":43,"column":3}},"12":{"start":{"line":42,"column":4},"end":{"line":42,"column":13}},"13":{"start":{"line":44,"column":2},"end":{"line":46,"column":3}},"14":{"start":{"line":45,"column":4},"end":{"line":45,"column":14}},"15":{"start":{"line":47,"column":2},"end":{"line":47,"column":11}},"16":{"start":{"line":50,"column":0},"end":{"line":52,"column":2}},"17":{"start":{"line":51,"column":2},"end":{"line":51,"column":26}},"18":{"start":{"line":58,"column":0},"end":{"line":60,"column":1}},"19":{"start":{"line":62,"column":0},"end":{"line":62,"column":43}},"20":{"start":{"line":68,"column":0},"end":{"line":183,"column":2}},"21":{"start":{"line":74,"column":2},"end":{"line":74,"column":16}},"22":{"start":{"line":75,"column":2},"end":{"line":82,"column":3}},"23":{"start":{"line":77,"column":4},"end":{"line":77,"column":24}},"24":{"start":{"line":78,"column":4},"end":{"line":80,"column":5}},"25":{"start":{"line":79,"column":6},"end":{"line":79,"column":24}},"26":{"start":{"line":81,"column":4},"end":{"line":81,"column":20}},"27":{"start":{"line":83,"column":2},"end":{"line":83,"column":17}},"28":{"start":{"line":84,"column":2},"end":{"line":84,"column":27}},"29":{"start":{"line":86,"column":2},"end":{"line":86,"column":28}},"30":{"start":{"line":88,"column":2},"end":{"line":88,"column":30}},"31":{"start":{"line":89,"column":2},"end":{"line":89,"column":30}},"32":{"start":{"line":90,"column":2},"end":{"line":90,"column":30}},"33":{"start":{"line":91,"column":2},"end":{"line":91,"column":30}},"34":{"start":{"line":93,"column":2},"end":{"line":93,"column":49}},"35":{"start":{"line":95,"column":2},"end":{"line":95,"column":49}},"36":{"start":{"line":97,"column":2},"end":{"line":117,"column":3}},"37":{"start":{"line":98,"column":4},"end":{"line":98,"column":48}},"38":{"start":{"line":99,"column":4},"end":{"line":99,"column":48}},"39":{"start":{"line":101,"column":4},"end":{"line":101,"column":25}},"40":{"start":{"line":102,"column":4},"end":{"line":102,"column":29}},"41":{"start":{"line":103,"column":4},"end":{"line":103,"column":25}},"42":{"start":{"line":105,"column":4},"end":{"line":105,"column":20}},"43":{"start":{"line":106,"column":4},"end":{"line":106,"column":29}},"44":{"start":{"line":107,"column":4},"end":{"line":107,"column":20}},"45":{"start":{"line":108,"column":4},"end":{"line":108,"column":74}},"46":{"start":{"line":110,"column":4},"end":{"line":110,"column":25}},"47":{"start":{"line":111,"column":4},"end":{"line":111,"column":29}},"48":{"start":{"line":112,"column":4},"end":{"line":112,"column":25}},"49":{"start":{"line":113,"column":4},"end":{"line":113,"column":20}},"50":{"start":{"line":114,"column":4},"end":{"line":114,"column":29}},"51":{"start":{"line":115,"column":4},"end":{"line":115,"column":20}},"52":{"start":{"line":116,"column":4},"end":{"line":116,"column":74}},"53":{"start":{"line":122,"column":2},"end":{"line":122,"column":25}},"54":{"start":{"line":124,"column":2},"end":{"line":124,"column":26}},"55":{"start":{"line":125,"column":2},"end":{"line":125,"column":26}},"56":{"start":{"line":129,"column":2},"end":{"line":168,"column":3}},"57":{"start":{"line":131,"column":6},"end":{"line":131,"column":66}},"58":{"start":{"line":133,"column":6},"end":{"line":133,"column":66}},"59":{"start":{"line":135,"column":6},"end":{"line":135,"column":66}},"60":{"start":{"line":137,"column":6},"end":{"line":137,"column":66}},"61":{"start":{"line":139,"column":6},"end":{"line":139,"column":66}},"62":{"start":{"line":141,"column":6},"end":{"line":141,"column":64}},"63":{"start":{"line":143,"column":6},"end":{"line":143,"column":51}},"64":{"start":{"line":144,"column":6},"end":{"line":144,"column":27}},"65":{"start":{"line":145,"column":6},"end":{"line":145,"column":31}},"66":{"start":{"line":146,"column":6},"end":{"line":146,"column":27}},"67":{"start":{"line":147,"column":6},"end":{"line":147,"column":22}},"68":{"start":{"line":149,"column":6},"end":{"line":149,"column":65}},"69":{"start":{"line":151,"column":6},"end":{"line":151,"column":65}},"70":{"start":{"line":153,"column":6},"end":{"line":153,"column":65}},"71":{"start":{"line":155,"column":6},"end":{"line":155,"column":65}},"72":{"start":{"line":157,"column":6},"end":{"line":157,"column":65}},"73":{"start":{"line":159,"column":6},"end":{"line":159,"column":65}},"74":{"start":{"line":161,"column":6},"end":{"line":161,"column":64}},"75":{"start":{"line":163,"column":6},"end":{"line":163,"column":49}},"76":{"start":{"line":164,"column":6},"end":{"line":164,"column":27}},"77":{"start":{"line":165,"column":6},"end":{"line":165,"column":30}},"78":{"start":{"line":166,"column":6},"end":{"line":166,"column":27}},"79":{"start":{"line":167,"column":6},"end":{"line":167,"column":22}},"80":{"start":{"line":171,"column":2},"end":{"line":171,"column":22}},"81":{"start":{"line":172,"column":2},"end":{"line":172,"column":22}},"82":{"start":{"line":174,"column":2},"end":{"line":174,"column":18}},"83":{"start":{"line":175,"column":2},"end":{"line":175,"column":18}},"84":{"start":{"line":177,"column":2},"end":{"line":177,"column":21}},"85":{"start":{"line":178,"column":2},"end":{"line":178,"column":21}},"86":{"start":{"line":180,"column":2},"end":{"line":180,"column":18}},"87":{"start":{"line":182,"column":2},"end":{"line":182,"column":12}},"88":{"start":{"line":186,"column":0},"end":{"line":199,"column":2}},"89":{"start":{"line":187,"column":2},"end":{"line":187,"column":22}},"90":{"start":{"line":188,"column":2},"end":{"line":188,"column":32}},"91":{"start":{"line":189,"column":2},"end":{"line":198,"column":4}},"92":{"start":{"line":206,"column":0},"end":{"line":210,"column":2}},"93":{"start":{"line":207,"column":2},"end":{"line":209,"column":4}},"94":{"start":{"line":216,"column":0},"end":{"line":225,"column":2}},"95":{"start":{"line":217,"column":2},"end":{"line":217,"column":38}},"96":{"start":{"line":219,"column":2},"end":{"line":219,"column":56}},"97":{"start":{"line":220,"column":2},"end":{"line":220,"column":38}},"98":{"start":{"line":222,"column":2},"end":{"line":222,"column":56}},"99":{"start":{"line":223,"column":2},"end":{"line":223,"column":38}},"100":{"start":{"line":224,"column":2},"end":{"line":224,"column":11}},"101":{"start":{"line":232,"column":0},"end":{"line":234,"column":2}},"102":{"start":{"line":233,"column":2},"end":{"line":233,"column":32}},"103":{"start":{"line":241,"column":0},"end":{"line":243,"column":2}},"104":{"start":{"line":242,"column":2},"end":{"line":242,"column":28}},"105":{"start":{"line":249,"column":0},"end":{"line":252,"column":1}},"106":{"start":{"line":251,"column":2},"end":{"line":251,"column":35}},"107":{"start":{"line":254,"column":0},"end":{"line":254,"column":42}},"108":{"start":{"line":260,"column":0},"end":{"line":266,"column":2}},"109":{"start":{"line":261,"column":2},"end":{"line":263,"column":3}},"110":{"start":{"line":262,"column":4},"end":{"line":262,"column":30}},"111":{"start":{"line":264,"column":2},"end":{"line":264,"column":74}},"112":{"start":{"line":265,"column":2},"end":{"line":265,"column":47}},"113":{"start":{"line":271,"column":0},"end":{"line":273,"column":2}},"114":{"start":{"line":272,"column":2},"end":{"line":272,"column":35}},"115":{"start":{"line":280,"column":0},"end":{"line":282,"column":2}},"116":{"start":{"line":281,"column":2},"end":{"line":281,"column":28}},"117":{"start":{"line":284,"column":0},"end":{"line":286,"column":1}},"118":{"start":{"line":288,"column":0},"end":{"line":288,"column":47}},"119":{"start":{"line":294,"column":0},"end":{"line":296,"column":2}},"120":{"start":{"line":295,"column":2},"end":{"line":295,"column":15}},"121":{"start":{"line":298,"column":0},"end":{"line":300,"column":2}},"122":{"start":{"line":299,"column":2},"end":{"line":299,"column":31}},"123":{"start":{"line":302,"column":0},"end":{"line":304,"column":2}},"124":{"start":{"line":303,"column":2},"end":{"line":303,"column":27}},"125":{"start":{"line":306,"column":0},"end":{"line":306,"column":44}},"126":{"start":{"line":307,"column":0},"end":{"line":307,"column":42}},"127":{"start":{"line":308,"column":0},"end":{"line":308,"column":52}}},"branchMap":{"1":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":2},"end":{"line":41,"column":2}},{"start":{"line":41,"column":2},"end":{"line":41,"column":2}}]},"2":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":2},"end":{"line":44,"column":2}},{"start":{"line":44,"column":2},"end":{"line":44,"column":2}}]},"3":{"line":78,"type":"if","locations":[{"start":{"line":78,"column":4},"end":{"line":78,"column":4}},{"start":{"line":78,"column":4},"end":{"line":78,"column":4}}]},"4":{"line":129,"type":"switch","locations":[{"start":{"line":130,"column":4},"end":{"line":131,"column":66}},{"start":{"line":132,"column":4},"end":{"line":133,"column":66}},{"start":{"line":134,"column":4},"end":{"line":135,"column":66}},{"start":{"line":136,"column":4},"end":{"line":137,"column":66}},{"start":{"line":138,"column":4},"end":{"line":139,"column":66}},{"start":{"line":140,"column":4},"end":{"line":141,"column":64}},{"start":{"line":142,"column":4},"end":{"line":147,"column":22}},{"start":{"line":148,"column":4},"end":{"line":149,"column":65}},{"start":{"line":150,"column":4},"end":{"line":151,"column":65}},{"start":{"line":152,"column":4},"end":{"line":153,"column":65}},{"start":{"line":154,"column":4},"end":{"line":155,"column":65}},{"start":{"line":156,"column":4},"end":{"line":157,"column":65}},{"start":{"line":158,"column":4},"end":{"line":159,"column":65}},{"start":{"line":160,"column":4},"end":{"line":161,"column":64}},{"start":{"line":162,"column":4},"end":{"line":167,"column":22}}]},"5":{"line":261,"type":"if","locations":[{"start":{"line":261,"column":2},"end":{"line":261,"column":2}},{"start":{"line":261,"column":2},"end":{"line":261,"column":2}}]}},"code":["'use strict';","var util = require('util');","","var types = require('./types');","var Long = types.Long;","var Integer = types.Integer;","","/**"," * Represents a set of methods that are able to generate and parse tokens for the C* partitioner"," * @constructor"," */","function Tokenizer() {","","}","","//noinspection JSUnusedLocalSymbols","/**"," * Creates a token based on the Buffer value provided"," * @param {Buffer|Array} value"," */","Tokenizer.prototype.hash = function (value) {","  throw new Error('You must implement a hash function for the tokenizer');","};","","//noinspection JSUnusedLocalSymbols","/**"," * Parses a token string and returns a representation of the token"," * @param {String} value"," */","Tokenizer.prototype.parse = function (value) {","  throw new Error('You must implement a parse function for the tokenizer');","};","","/**"," * Returns 0 if the values are equal, 1 if val1 is greater then val2 and -1 if val2 is greater than val1"," * @param val1"," * @param val2"," * @returns {number}"," */","Tokenizer.prototype.compare = function (val1, val2) {","  if (val1 > val2) {","    return 1;","  }","  if (val1 < val2) {","    return -1;","  }","  return 0;","};","","Tokenizer.prototype.stringify = function (value) {","  return value.toString();","};","","/**"," * Uniformly distributes data across the cluster based on Cassandra flavored MurmurHash hash values."," * @constructor"," */","function Murmur3Tokenizer() {","","}","","util.inherits(Murmur3Tokenizer, Tokenizer);","","/**"," * @param {Buffer|Array} value"," * @returns {Long}"," */","Murmur3Tokenizer.prototype.hash = function (value) {","  // This is an adapted version of the MurmurHash.hash3_x64_128 from Cassandra used","  // for M3P. Compared to that methods, there's a few inlining of arguments and we","  // only return the first 64-bits of the result since that's all M3 partitioner uses.","","  //Change to Array of signed Int8","  var data = [];","  for (var j = 0; j < value.length; j++)","  {","    var item = value[j];","    if (item > 127) {","      item = item - 256;","    }","    data.push(item);","  }","  var offset = 0;","  var length = data.length;","","  var nblocks = length >> 4; // Process as 128-bit blocks.","","  var h1 = Long.fromNumber(0);","  var h2 = Long.fromNumber(0);","  var k1 = Long.fromNumber(0);","  var k2 = Long.fromNumber(0);","  //-0x783C846EEEBDAC2B","  var c1 = Long.fromBits(0x114253d5, 0x87c37b91);","  //0x4cf5ad432745937f","  var c2 = Long.fromBits(0x2745937f, 0x4cf5ad43);","","  for (var i = 0; i < nblocks; i++) {","    k1 = this.getBlock(data, offset, i * 2 + 0);","    k2 = this.getBlock(data, offset, i * 2 + 1);","","    k1 = k1.multiply(c1);","    k1 = this.rotl64(k1, 31);","    k1 = k1.multiply(c2);","","    h1 = h1.xor(k1);","    h1 = this.rotl64(h1, 27);","    h1 = h1.add(h2);","    h1 = h1.multiply(Long.fromNumber(5)).add(Long.fromNumber(0x52dce729));","","    k2 = k2.multiply(c2);","    k2 = this.rotl64(k2, 33);","    k2 = k2.multiply(c1);","    h2 = h2.xor(k2);","    h2 = this.rotl64(h2, 31);","    h2 = h2.add(h1);","    h2 = h2.multiply(Long.fromNumber(5)).add(Long.fromNumber(0x38495ab5));","  }","  //----------","  // tail","","  // Advance offset to the unprocessed tail of the data.","  offset += nblocks * 16;","","  k1 = Long.fromNumber(0);","  k2 = Long.fromNumber(0);","","  /* eslint-disable no-fallthrough */","  //noinspection FallThroughInSwitchStatementJS","  switch(length & 15) {","    case 15:","      k2 = k2.xor(Long.fromNumber(data[offset+14]).shiftLeft(48));","    case 14:","      k2 = k2.xor(Long.fromNumber(data[offset+13]).shiftLeft(40));","    case 13:","      k2 = k2.xor(Long.fromNumber(data[offset+12]).shiftLeft(32));","    case 12:","      k2 = k2.xor(Long.fromNumber(data[offset+12]).shiftLeft(24));","    case 11:","      k2 = k2.xor(Long.fromNumber(data[offset+10]).shiftLeft(16));","    case 10:","      k2 = k2.xor(Long.fromNumber(data[offset+9]).shiftLeft(8));","    case 9:","      k2 = k2.xor(Long.fromNumber(data[offset+8]));","      k2 = k2.multiply(c2);","      k2 = this.rotl64(k2, 33);","      k2 = k2.multiply(c1);","      h2 = h2.xor(k2);","    case 8:","      k1 = k1.xor(Long.fromNumber(data[offset+7]).shiftLeft(56));","    case 7:","      k1 = k1.xor(Long.fromNumber(data[offset+6]).shiftLeft(48));","    case 6:","      k1 = k1.xor(Long.fromNumber(data[offset+5]).shiftLeft(40));","    case 5:","      k1 = k1.xor(Long.fromNumber(data[offset+4]).shiftLeft(32));","    case 4:","      k1 = k1.xor(Long.fromNumber(data[offset+3]).shiftLeft(24));","    case 3:","      k1 = k1.xor(Long.fromNumber(data[offset+2]).shiftLeft(16));","    case 2:","      k1 = k1.xor(Long.fromNumber(data[offset+1]).shiftLeft(8));","    case 1:","      k1 = k1.xor(Long.fromNumber(data[offset]));","      k1 = k1.multiply(c1);","      k1 = this.rotl64(k1,31);","      k1 = k1.multiply(c2);","      h1 = h1.xor(k1);","  }","  /* eslint-enable no-fallthrough */","","  h1 = h1.xor(length);","  h2 = h2.xor(length);","","  h1 = h1.add(h2);","  h2 = h2.add(h1);","","  h1 = this.fmix(h1);","  h2 = this.fmix(h2);","","  h1 = h1.add(h2);","","  return h1;","};","","","Murmur3Tokenizer.prototype.getBlock = function (key, offset, index) {","  var i8 = index << 3;","  var blockOffset = offset + i8;","  return (","    Long.fromNumber(key[blockOffset + 0] & 0xff)","      .add(Long.fromNumber(key[blockOffset + 1] & 0xff).shiftLeft(8))","      .add(Long.fromNumber(key[blockOffset + 2] & 0xff).shiftLeft(16))","      .add(Long.fromNumber(key[blockOffset + 3] & 0xff).shiftLeft(24))","      .add(Long.fromNumber(key[blockOffset + 4] & 0xff).shiftLeft(32))","      .add(Long.fromNumber(key[blockOffset + 5] & 0xff).shiftLeft(40))","      .add(Long.fromNumber(key[blockOffset + 6] & 0xff).shiftLeft(48))","      .add(Long.fromNumber(key[blockOffset + 7] & 0xff).shiftLeft(56))","  );","};","","/**"," * @param {Long} v"," * @param {Number} n"," * @returns {Long}"," */","Murmur3Tokenizer.prototype.rotl64 = function (v, n) {","  return (","    v.shiftRightUnsigned(64 - n).or(v.shiftLeft(n))","  );","};","","/**"," * @param {Long} k"," * @returns {Long}"," */","Murmur3Tokenizer.prototype.fmix = function (k) {","  k = k.xor(k.shiftRightUnsigned(33));","  //0xff51afd7ed558ccd","  k = k.multiply(Long.fromBits(0xed558ccd, 0xff51afd7));","  k = k.xor(k.shiftRightUnsigned(33));","  //0xc4ceb9fe1a85ec53","  k = k.multiply(Long.fromBits(0x1a85ec53, 0xc4ceb9fe));","  k = k.xor(k.shiftRightUnsigned(33));","  return k;","};","","/**"," *"," * @param {String} value"," * @returns {Long}"," */","Murmur3Tokenizer.prototype.parse = function (value) {","  return Long.fromString(value);","};","","/**"," * @param {Long} val1"," * @param {Long} val2"," * @returns {number}"," */","Murmur3Tokenizer.prototype.compare = function (val1, val2) {","  return val1.compare(val2);","};","","/**"," * Uniformly distributes data across the cluster based on MD5 hash values."," * @constructor"," */","function RandomTokenizer() {","  // eslint-disable-next-line","  this._crypto = require('crypto');","}","","util.inherits(RandomTokenizer, Tokenizer);","","/**"," * @param {Buffer|Array} value"," * @returns {Integer}"," */","RandomTokenizer.prototype.hash = function (value) {","  if (util.isArray(value)) {","    value = new Buffer(value);","  }","  var hashedValue = this._crypto.createHash('md5').update(value).digest();","  return Integer.fromBuffer(hashedValue).abs();","};","","/**"," * @returns {Integer}"," */","RandomTokenizer.prototype.parse = function (value) {","  return Integer.fromString(value);","};","","/**"," * @param {Integer} val1"," * @param {Integer} val2"," * @returns {number}"," */","RandomTokenizer.prototype.compare = function (val1, val2) {","  return val1.compare(val2);","};","","function ByteOrderedTokenizer() {","","}","","util.inherits(ByteOrderedTokenizer, Tokenizer);","","/**"," * @param {Buffer|Array} value"," * @returns {Buffer}"," */","ByteOrderedTokenizer.prototype.hash = function (value) {","  return value;","};","","ByteOrderedTokenizer.prototype.stringify = function (value) {","  return value.toString('hex');","};","","ByteOrderedTokenizer.prototype.parse = function (value) {","  return new Buffer(value);","};","","exports.Murmur3Tokenizer = Murmur3Tokenizer;","exports.RandomTokenizer = RandomTokenizer;","exports.ByteOrderedTokenizer = ByteOrderedTokenizer;"],"l":{"2":1,"4":1,"5":1,"6":1,"12":1,"21":1,"22":0,"30":1,"31":0,"40":1,"41":0,"42":0,"44":0,"45":0,"47":0,"50":1,"51":0,"58":1,"62":1,"68":1,"74":0,"75":0,"77":0,"78":0,"79":0,"81":0,"83":0,"84":0,"86":0,"88":0,"89":0,"90":0,"91":0,"93":0,"95":0,"97":0,"98":0,"99":0,"101":0,"102":0,"103":0,"105":0,"106":0,"107":0,"108":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"122":0,"124":0,"125":0,"129":0,"131":0,"133":0,"135":0,"137":0,"139":0,"141":0,"143":0,"144":0,"145":0,"146":0,"147":0,"149":0,"151":0,"153":0,"155":0,"157":0,"159":0,"161":0,"163":0,"164":0,"165":0,"166":0,"167":0,"171":0,"172":0,"174":0,"175":0,"177":0,"178":0,"180":0,"182":0,"186":1,"187":0,"188":0,"189":0,"206":1,"207":0,"216":1,"217":0,"219":0,"220":0,"222":0,"223":0,"224":0,"232":1,"233":0,"241":1,"242":0,"249":1,"251":0,"254":1,"260":1,"261":0,"262":0,"264":0,"265":0,"271":1,"272":0,"280":1,"281":0,"284":1,"288":1,"294":1,"295":0,"298":1,"299":0,"302":1,"303":0,"306":1,"307":1,"308":1}},"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/metadata/schema-parser.js":{"path":"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/metadata/schema-parser.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":1,"36":0,"37":0,"38":0,"39":1,"40":1,"41":1,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":1,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":1,"116":1,"117":1,"118":1,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":1,"153":1,"154":1,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":1,"162":1,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":1,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":1,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":0,"243":0,"244":0,"245":0,"246":0,"247":0,"248":0,"249":0,"250":0,"251":0,"252":0,"253":0,"254":0,"255":0,"256":0,"257":0,"258":0,"259":0,"260":0,"261":0,"262":0,"263":0,"264":0,"265":1,"266":0,"267":1,"268":0,"269":0,"270":0,"271":0,"272":0,"273":0,"274":0,"275":0,"276":0,"277":0,"278":0,"279":0,"280":0,"281":0,"282":0,"283":0,"284":0,"285":0,"286":1,"287":0,"288":0,"289":0,"290":0,"291":0,"292":0,"293":0,"294":0,"295":0,"296":0,"297":0,"298":0,"299":0,"300":0,"301":0,"302":1,"303":0,"304":0,"305":0,"306":0,"307":0,"308":0,"309":0,"310":0,"311":0,"312":0,"313":1,"314":0,"315":0,"316":0,"317":0,"318":0,"319":0,"320":0,"321":0,"322":1,"323":1,"324":0,"325":0,"326":0,"327":0,"328":0,"329":0,"330":0,"331":0,"332":0,"333":1,"334":0,"335":0,"336":0,"337":0,"338":0,"339":0,"340":0,"341":0,"342":1,"343":0,"344":0,"345":0,"346":0,"347":0,"348":0,"349":0,"350":0,"351":0,"352":0,"353":0,"354":0,"355":0,"356":0,"357":0,"358":0,"359":0,"360":0,"361":0,"362":0,"363":0,"364":0,"365":0,"366":0,"367":0,"368":0,"369":0,"370":0,"371":0,"372":0,"373":0,"374":0,"375":0,"376":0,"377":0,"378":1,"379":0,"380":0,"381":0,"382":0,"383":0,"384":0,"385":0,"386":0,"387":0,"388":0,"389":0,"390":1,"391":0,"392":0,"393":0,"394":0,"395":0,"396":0,"397":0,"398":0,"399":0,"400":0,"401":0,"402":0,"403":0,"404":0,"405":0,"406":0,"407":0,"408":0,"409":0,"410":0,"411":0,"412":0,"413":0,"414":0,"415":0,"416":0,"417":0,"418":0,"419":0,"420":0,"421":0,"422":0,"423":0,"424":0,"425":0,"426":0,"427":0,"428":0,"429":0,"430":0,"431":0,"432":0,"433":0,"434":0,"435":0,"436":0,"437":0,"438":0,"439":0,"440":0,"441":0,"442":0,"443":0,"444":0,"445":0,"446":0,"447":0,"448":0,"449":0,"450":0,"451":0,"452":0,"453":0,"454":0,"455":0,"456":0,"457":0,"458":0,"459":0,"460":0,"461":1,"462":0,"463":0,"464":0,"465":0,"466":0,"467":0,"468":0,"469":0,"470":0,"471":0,"472":0,"473":0,"474":0,"475":0,"476":0,"477":0,"478":0,"479":0,"480":0,"481":0,"482":0,"483":0,"484":0,"485":0,"486":1,"487":0,"488":0,"489":0,"490":0,"491":0,"492":0,"493":0,"494":0,"495":0,"496":0,"497":0,"498":0,"499":0,"500":0,"501":0,"502":0,"503":0,"504":0,"505":0,"506":0,"507":0,"508":1,"509":0,"510":0,"511":0,"512":0,"513":0,"514":0,"515":0,"516":0,"517":0,"518":0,"519":0,"520":0,"521":0,"522":0,"523":0,"524":1,"525":0,"526":0,"527":0,"528":0,"529":0,"530":0,"531":0,"532":0,"533":0,"534":0,"535":0,"536":0,"537":0,"538":0,"539":0,"540":0,"541":0,"542":1,"543":0,"544":0,"545":0,"546":0,"547":0,"548":0,"549":0,"550":0,"551":1,"552":0,"553":0,"554":0,"555":0,"556":0,"557":0,"558":0,"559":0,"560":0,"561":0,"562":0,"563":0,"564":0,"565":1,"566":0,"567":0,"568":0,"569":0,"570":0,"571":0,"572":0,"573":0,"574":0,"575":0,"576":0,"577":0,"578":0,"579":0,"580":0,"581":1,"582":0,"583":0,"584":0,"585":0,"586":0,"587":0,"588":0,"589":0,"590":0,"591":0,"592":0,"593":0,"594":0,"595":0,"596":0,"597":0,"598":0,"599":0,"600":0,"601":0,"602":0,"603":0,"604":0,"605":0,"606":0,"607":0,"608":0,"609":0,"610":0,"611":0,"612":0,"613":0,"614":0,"615":0,"616":0,"617":0,"618":0,"619":1,"620":0,"621":0,"622":0,"623":0,"624":1,"625":0,"626":0,"627":0,"628":0,"629":0,"630":0,"631":0,"632":0,"633":0,"634":0,"635":1,"636":0,"637":0,"638":0,"639":0,"640":0,"641":0,"642":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0],"56":[0,0],"57":[0,0],"58":[0,0,0],"59":[0,0],"60":[0,0,0],"61":[0,0],"62":[0,0],"63":[0,0],"64":[0,0],"65":[0,0],"66":[0,0],"67":[0,0],"68":[0,0],"69":[0,0],"70":[0,0],"71":[0,0],"72":[0,0],"73":[0,0],"74":[0,0],"75":[0,0],"76":[0,0],"77":[0,0],"78":[0,0],"79":[0,0],"80":[0,0],"81":[0,0],"82":[0,0],"83":[0,0],"84":[0,0],"85":[0,0],"86":[0,0],"87":[0,0],"88":[0,0],"89":[0,0],"90":[0,0],"91":[0,0],"92":[0,0],"93":[0,0,0],"94":[0,0],"95":[0,0],"96":[0,0],"97":[0,0],"98":[0,0],"99":[0,0,0],"100":[0,0,0],"101":[0,0],"102":[0,0],"103":[0,0],"104":[0,0],"105":[0,0],"106":[0,0],"107":[0,0],"108":[0,0],"109":[0,0],"110":[0,0],"111":[0,0],"112":[0,0],"113":[0,0],"114":[0,0],"115":[0,0,0],"116":[0,0],"117":[0,0],"118":[0,0],"119":[0,0],"120":[0,0],"121":[0,0],"122":[0,0],"123":[0,0],"124":[0,0],"125":[0,0],"126":[0,0],"127":[0,0,0],"128":[0,0],"129":[0,0],"130":[0,0,0],"131":[0,0],"132":[0,0],"133":[0,0],"134":[0,0],"135":[0,0,0],"136":[0,0],"137":[0,0],"138":[0,0],"139":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0},"fnMap":{"1":{"name":"SchemaParser","line":40,"loc":{"start":{"line":40,"column":0},"end":{"line":40,"column":26}}},"2":{"name":"(anonymous_2)","line":58,"loc":{"start":{"line":58,"column":41},"end":{"line":58,"column":99}}},"3":{"name":"(anonymous_3)","line":80,"loc":{"start":{"line":80,"column":37},"end":{"line":80,"column":63}}},"4":{"name":"(anonymous_4)","line":88,"loc":{"start":{"line":88,"column":38},"end":{"line":88,"column":73}}},"5":{"name":"(anonymous_5)","line":97,"loc":{"start":{"line":97,"column":34},"end":{"line":97,"column":81}}},"6":{"name":"getTableRow","line":118,"loc":{"start":{"line":118,"column":4},"end":{"line":118,"column":31}}},"7":{"name":"(anonymous_7)","line":120,"loc":{"start":{"line":120,"column":27},"end":{"line":120,"column":52}}},"8":{"name":"getColumnRows","line":128,"loc":{"start":{"line":128,"column":4},"end":{"line":128,"column":34}}},"9":{"name":"(anonymous_9)","line":133,"loc":{"start":{"line":133,"column":27},"end":{"line":133,"column":52}}},"10":{"name":"getIndexes","line":141,"loc":{"start":{"line":141,"column":4},"end":{"line":141,"column":30}}},"11":{"name":"(anonymous_11)","line":147,"loc":{"start":{"line":147,"column":27},"end":{"line":147,"column":52}}},"12":{"name":"afterQuery","line":155,"loc":{"start":{"line":155,"column":5},"end":{"line":155,"column":31}}},"13":{"name":"(anonymous_13)","line":160,"loc":{"start":{"line":160,"column":71},"end":{"line":160,"column":86}}},"14":{"name":"(anonymous_14)","line":174,"loc":{"start":{"line":174,"column":32},"end":{"line":174,"column":79}}},"15":{"name":"(anonymous_15)","line":198,"loc":{"start":{"line":198,"column":23},"end":{"line":198,"column":48}}},"16":{"name":"(anonymous_16)","line":207,"loc":{"start":{"line":207,"column":33},"end":{"line":207,"column":48}}},"17":{"name":"(anonymous_17)","line":224,"loc":{"start":{"line":224,"column":35},"end":{"line":224,"column":69}}},"18":{"name":"(anonymous_18)","line":238,"loc":{"start":{"line":238,"column":43},"end":{"line":238,"column":107}}},"19":{"name":"(anonymous_19)","line":249,"loc":{"start":{"line":249,"column":45},"end":{"line":249,"column":92}}},"20":{"name":"(anonymous_20)","line":260,"loc":{"start":{"line":260,"column":38},"end":{"line":260,"column":96}}},"21":{"name":"(anonymous_21)","line":290,"loc":{"start":{"line":290,"column":23},"end":{"line":290,"column":48}}},"22":{"name":"(anonymous_22)","line":298,"loc":{"start":{"line":298,"column":30},"end":{"line":298,"column":51}}},"23":{"name":"(anonymous_23)","line":299,"loc":{"start":{"line":299,"column":18},"end":{"line":299,"column":39}}},"24":{"name":"(anonymous_24)","line":306,"loc":{"start":{"line":306,"column":7},"end":{"line":306,"column":22}}},"25":{"name":"(anonymous_25)","line":320,"loc":{"start":{"line":320,"column":41},"end":{"line":320,"column":66}}},"26":{"name":"(anonymous_26)","line":328,"loc":{"start":{"line":328,"column":40},"end":{"line":328,"column":65}}},"27":{"name":"SchemaParserV1","line":337,"loc":{"start":{"line":337,"column":0},"end":{"line":337,"column":28}}},"28":{"name":"(anonymous_28)","line":349,"loc":{"start":{"line":349,"column":40},"end":{"line":349,"column":75}}},"29":{"name":"(anonymous_29)","line":352,"loc":{"start":{"line":352,"column":54},"end":{"line":352,"column":77}}},"30":{"name":"(anonymous_30)","line":370,"loc":{"start":{"line":370,"column":39},"end":{"line":370,"column":65}}},"31":{"name":"(anonymous_31)","line":372,"loc":{"start":{"line":372,"column":60},"end":{"line":372,"column":83}}},"32":{"name":"(anonymous_32)","line":390,"loc":{"start":{"line":390,"column":45},"end":{"line":390,"column":109}}},"33":{"name":"parseColumns","line":426,"loc":{"start":{"line":426,"column":5},"end":{"line":426,"column":29}}},"34":{"name":"(anonymous_34)","line":452,"loc":{"start":{"line":452,"column":83},"end":{"line":452,"column":99}}},"35":{"name":"(anonymous_35)","line":456,"loc":{"start":{"line":456,"column":52},"end":{"line":456,"column":68}}},"36":{"name":"(anonymous_36)","line":459,"loc":{"start":{"line":459,"column":53},"end":{"line":459,"column":69}}},"37":{"name":"(anonymous_37)","line":534,"loc":{"start":{"line":534,"column":47},"end":{"line":534,"column":94}}},"38":{"name":"(anonymous_38)","line":539,"loc":{"start":{"line":539,"column":43},"end":{"line":539,"column":68}}},"39":{"name":"(anonymous_39)","line":549,"loc":{"start":{"line":549,"column":78},"end":{"line":549,"column":94}}},"40":{"name":"(anonymous_40)","line":566,"loc":{"start":{"line":566,"column":42},"end":{"line":566,"column":67}}},"41":{"name":"(anonymous_41)","line":577,"loc":{"start":{"line":577,"column":73},"end":{"line":577,"column":89}}},"42":{"name":"(anonymous_42)","line":589,"loc":{"start":{"line":589,"column":37},"end":{"line":589,"column":71}}},"43":{"name":"SchemaParserV2","line":616,"loc":{"start":{"line":616,"column":0},"end":{"line":616,"column":41}}},"44":{"name":"(anonymous_44)","line":630,"loc":{"start":{"line":630,"column":40},"end":{"line":630,"column":75}}},"45":{"name":"(anonymous_45)","line":633,"loc":{"start":{"line":633,"column":54},"end":{"line":633,"column":77}}},"46":{"name":"(anonymous_46)","line":646,"loc":{"start":{"line":646,"column":39},"end":{"line":646,"column":65}}},"47":{"name":"(anonymous_47)","line":648,"loc":{"start":{"line":648,"column":60},"end":{"line":648,"column":83}}},"48":{"name":"(anonymous_48)","line":661,"loc":{"start":{"line":661,"column":47},"end":{"line":661,"column":94}}},"49":{"name":"getTableRow","line":682,"loc":{"start":{"line":682,"column":4},"end":{"line":682,"column":31}}},"50":{"name":"(anonymous_50)","line":684,"loc":{"start":{"line":684,"column":27},"end":{"line":684,"column":52}}},"51":{"name":"getColumnRows","line":692,"loc":{"start":{"line":692,"column":4},"end":{"line":692,"column":34}}},"52":{"name":"(anonymous_52)","line":697,"loc":{"start":{"line":697,"column":27},"end":{"line":697,"column":52}}},"53":{"name":"afterQuery","line":705,"loc":{"start":{"line":705,"column":5},"end":{"line":705,"column":31}}},"54":{"name":"(anonymous_54)","line":710,"loc":{"start":{"line":710,"column":65},"end":{"line":710,"column":80}}},"55":{"name":"(anonymous_55)","line":719,"loc":{"start":{"line":719,"column":42},"end":{"line":719,"column":57}}},"56":{"name":"(anonymous_56)","line":741,"loc":{"start":{"line":741,"column":45},"end":{"line":741,"column":109}}},"57":{"name":"(anonymous_57)","line":773,"loc":{"start":{"line":773,"column":24},"end":{"line":773,"column":45}}},"58":{"name":"(anonymous_58)","line":774,"loc":{"start":{"line":774,"column":93},"end":{"line":774,"column":114}}},"59":{"name":"(anonymous_59)","line":797,"loc":{"start":{"line":797,"column":5},"end":{"line":797,"column":29}}},"60":{"name":"(anonymous_60)","line":803,"loc":{"start":{"line":803,"column":81},"end":{"line":803,"column":97}}},"61":{"name":"(anonymous_61)","line":807,"loc":{"start":{"line":807,"column":50},"end":{"line":807,"column":66}}},"62":{"name":"(anonymous_62)","line":810,"loc":{"start":{"line":810,"column":51},"end":{"line":810,"column":67}}},"63":{"name":"(anonymous_63)","line":838,"loc":{"start":{"line":838,"column":43},"end":{"line":838,"column":68}}},"64":{"name":"parseArguments","line":850,"loc":{"start":{"line":850,"column":4},"end":{"line":850,"column":34}}},"65":{"name":"(anonymous_65)","line":851,"loc":{"start":{"line":851,"column":59},"end":{"line":851,"column":84}}},"66":{"name":"(anonymous_66)","line":853,"loc":{"start":{"line":853,"column":9},"end":{"line":853,"column":32}}},"67":{"name":"parseStateType","line":858,"loc":{"start":{"line":858,"column":4},"end":{"line":858,"column":34}}},"68":{"name":"(anonymous_68)","line":859,"loc":{"start":{"line":859,"column":96},"end":{"line":859,"column":117}}},"69":{"name":"parseReturnType","line":864,"loc":{"start":{"line":864,"column":4},"end":{"line":864,"column":35}}},"70":{"name":"(anonymous_70)","line":865,"loc":{"start":{"line":865,"column":97},"end":{"line":865,"column":118}}},"71":{"name":"(anonymous_71)","line":870,"loc":{"start":{"line":870,"column":5},"end":{"line":870,"column":20}}},"72":{"name":"(anonymous_72)","line":879,"loc":{"start":{"line":879,"column":42},"end":{"line":879,"column":67}}},"73":{"name":"parseArguments","line":891,"loc":{"start":{"line":891,"column":4},"end":{"line":891,"column":34}}},"74":{"name":"(anonymous_74)","line":892,"loc":{"start":{"line":892,"column":59},"end":{"line":892,"column":84}}},"75":{"name":"(anonymous_75)","line":894,"loc":{"start":{"line":894,"column":9},"end":{"line":894,"column":32}}},"76":{"name":"parseReturnType","line":899,"loc":{"start":{"line":899,"column":4},"end":{"line":899,"column":35}}},"77":{"name":"(anonymous_77)","line":900,"loc":{"start":{"line":900,"column":97},"end":{"line":900,"column":118}}},"78":{"name":"(anonymous_78)","line":905,"loc":{"start":{"line":905,"column":5},"end":{"line":905,"column":20}}},"79":{"name":"(anonymous_79)","line":914,"loc":{"start":{"line":914,"column":37},"end":{"line":914,"column":71}}},"80":{"name":"(anonymous_80)","line":920,"loc":{"start":{"line":920,"column":38},"end":{"line":920,"column":63}}},"81":{"name":"(anonymous_81)","line":921,"loc":{"start":{"line":921,"column":78},"end":{"line":921,"column":99}}},"82":{"name":"(anonymous_82)","line":931,"loc":{"start":{"line":931,"column":5},"end":{"line":931,"column":20}}},"83":{"name":"pruneStaticCompactTableColumns","line":947,"loc":{"start":{"line":947,"column":0},"end":{"line":947,"column":51}}},"84":{"name":"pruneDenseTableColumns","line":979,"loc":{"start":{"line":979,"column":0},"end":{"line":979,"column":43}}},"85":{"name":"getTokenToReplicaMapper","line":993,"loc":{"start":{"line":993,"column":0},"end":{"line":993,"column":60}}},"86":{"name":"noStrategy","line":1005,"loc":{"start":{"line":1005,"column":10},"end":{"line":1005,"column":64}}},"87":{"name":"getTokenToReplicaSimpleMapper","line":1021,"loc":{"start":{"line":1021,"column":0},"end":{"line":1021,"column":58}}},"88":{"name":"tokenSimpleStrategy","line":1022,"loc":{"start":{"line":1022,"column":10},"end":{"line":1022,"column":73}}},"89":{"name":"getTokenToReplicaNetworkMapper","line":1049,"loc":{"start":{"line":1049,"column":0},"end":{"line":1049,"column":60}}},"90":{"name":"tokenNetworkStrategy","line":1059,"loc":{"start":{"line":1059,"column":10},"end":{"line":1059,"column":87}}},"91":{"name":"addSkippedHosts","line":1121,"loc":{"start":{"line":1121,"column":0},"end":{"line":1121,"column":72}}},"92":{"name":"isDoneForToken","line":1129,"loc":{"start":{"line":1129,"column":0},"end":{"line":1129,"column":71}}},"93":{"name":"getByVersion","line":1154,"loc":{"start":{"line":1154,"column":0},"end":{"line":1154,"column":65}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":27}},"2":{"start":{"line":3,"column":0},"end":{"line":3,"column":31}},"3":{"start":{"line":4,"column":0},"end":{"line":4,"column":32}},"4":{"start":{"line":5,"column":0},"end":{"line":5,"column":32}},"5":{"start":{"line":6,"column":0},"end":{"line":6,"column":34}},"6":{"start":{"line":7,"column":0},"end":{"line":7,"column":48}},"7":{"start":{"line":8,"column":0},"end":{"line":8,"column":39}},"8":{"start":{"line":9,"column":0},"end":{"line":9,"column":50}},"9":{"start":{"line":10,"column":0},"end":{"line":10,"column":38}},"10":{"start":{"line":11,"column":0},"end":{"line":11,"column":54}},"11":{"start":{"line":17,"column":0},"end":{"line":17,"column":68}},"12":{"start":{"line":18,"column":0},"end":{"line":18,"column":97}},"13":{"start":{"line":19,"column":0},"end":{"line":19,"column":68}},"14":{"start":{"line":20,"column":0},"end":{"line":20,"column":97}},"15":{"start":{"line":21,"column":0},"end":{"line":21,"column":118}},"16":{"start":{"line":22,"column":0},"end":{"line":22,"column":103}},"17":{"start":{"line":23,"column":0},"end":{"line":23,"column":113}},"18":{"start":{"line":24,"column":0},"end":{"line":24,"column":106}},"19":{"start":{"line":25,"column":0},"end":{"line":25,"column":106}},"20":{"start":{"line":26,"column":0},"end":{"line":26,"column":103}},"21":{"start":{"line":27,"column":0},"end":{"line":27,"column":99}},"22":{"start":{"line":28,"column":0},"end":{"line":28,"column":117}},"23":{"start":{"line":29,"column":0},"end":{"line":29,"column":117}},"24":{"start":{"line":30,"column":0},"end":{"line":30,"column":120}},"25":{"start":{"line":31,"column":0},"end":{"line":31,"column":120}},"26":{"start":{"line":32,"column":0},"end":{"line":32,"column":116}},"27":{"start":{"line":40,"column":0},"end":{"line":48,"column":1}},"28":{"start":{"line":41,"column":2},"end":{"line":41,"column":15}},"29":{"start":{"line":42,"column":2},"end":{"line":42,"column":26}},"30":{"start":{"line":43,"column":2},"end":{"line":43,"column":28}},"31":{"start":{"line":44,"column":2},"end":{"line":44,"column":28}},"32":{"start":{"line":45,"column":2},"end":{"line":45,"column":24}},"33":{"start":{"line":46,"column":2},"end":{"line":46,"column":31}},"34":{"start":{"line":47,"column":2},"end":{"line":47,"column":30}},"35":{"start":{"line":58,"column":0},"end":{"line":73,"column":2}},"36":{"start":{"line":59,"column":2},"end":{"line":70,"column":4}},"37":{"start":{"line":71,"column":2},"end":{"line":71,"column":77}},"38":{"start":{"line":72,"column":2},"end":{"line":72,"column":16}},"39":{"start":{"line":80,"column":0},"end":{"line":81,"column":2}},"40":{"start":{"line":88,"column":0},"end":{"line":89,"column":2}},"41":{"start":{"line":97,"column":0},"end":{"line":166,"column":2}},"42":{"start":{"line":98,"column":2},"end":{"line":98,"column":39}},"43":{"start":{"line":99,"column":2},"end":{"line":104,"column":3}},"44":{"start":{"line":100,"column":4},"end":{"line":100,"column":40}},"45":{"start":{"line":101,"column":4},"end":{"line":103,"column":5}},"46":{"start":{"line":102,"column":6},"end":{"line":102,"column":30}},"47":{"start":{"line":105,"column":2},"end":{"line":107,"column":3}},"48":{"start":{"line":106,"column":4},"end":{"line":106,"column":37}},"49":{"start":{"line":108,"column":2},"end":{"line":108,"column":35}},"50":{"start":{"line":109,"column":2},"end":{"line":112,"column":3}},"51":{"start":{"line":111,"column":4},"end":{"line":111,"column":11}},"52":{"start":{"line":114,"column":2},"end":{"line":114,"column":27}},"53":{"start":{"line":115,"column":2},"end":{"line":115,"column":38}},"54":{"start":{"line":116,"column":2},"end":{"line":116,"column":18}},"55":{"start":{"line":117,"column":2},"end":{"line":165,"column":5}},"56":{"start":{"line":119,"column":6},"end":{"line":119,"column":68}},"57":{"start":{"line":120,"column":6},"end":{"line":126,"column":9}},"58":{"start":{"line":121,"column":8},"end":{"line":123,"column":9}},"59":{"start":{"line":122,"column":10},"end":{"line":122,"column":27}},"60":{"start":{"line":124,"column":8},"end":{"line":124,"column":36}},"61":{"start":{"line":125,"column":8},"end":{"line":125,"column":15}},"62":{"start":{"line":129,"column":6},"end":{"line":131,"column":7}},"63":{"start":{"line":130,"column":8},"end":{"line":130,"column":38}},"64":{"start":{"line":132,"column":6},"end":{"line":132,"column":70}},"65":{"start":{"line":133,"column":6},"end":{"line":139,"column":9}},"66":{"start":{"line":134,"column":8},"end":{"line":136,"column":9}},"67":{"start":{"line":135,"column":10},"end":{"line":135,"column":27}},"68":{"start":{"line":137,"column":8},"end":{"line":137,"column":35}},"69":{"start":{"line":138,"column":8},"end":{"line":138,"column":15}},"70":{"start":{"line":142,"column":6},"end":{"line":145,"column":7}},"71":{"start":{"line":144,"column":8},"end":{"line":144,"column":22}},"72":{"start":{"line":146,"column":6},"end":{"line":146,"column":70}},"73":{"start":{"line":147,"column":6},"end":{"line":153,"column":9}},"74":{"start":{"line":148,"column":8},"end":{"line":150,"column":9}},"75":{"start":{"line":149,"column":10},"end":{"line":149,"column":27}},"76":{"start":{"line":151,"column":8},"end":{"line":151,"column":34}},"77":{"start":{"line":152,"column":8},"end":{"line":152,"column":15}},"78":{"start":{"line":156,"column":4},"end":{"line":159,"column":5}},"79":{"start":{"line":157,"column":6},"end":{"line":157,"column":32}},"80":{"start":{"line":158,"column":6},"end":{"line":158,"column":47}},"81":{"start":{"line":160,"column":4},"end":{"line":164,"column":7}},"82":{"start":{"line":161,"column":6},"end":{"line":161,"column":32}},"83":{"start":{"line":162,"column":6},"end":{"line":162,"column":30}},"84":{"start":{"line":163,"column":6},"end":{"line":163,"column":45}},"85":{"start":{"line":174,"column":0},"end":{"line":215,"column":2}},"86":{"start":{"line":175,"column":2},"end":{"line":175,"column":37}},"87":{"start":{"line":176,"column":2},"end":{"line":185,"column":3}},"88":{"start":{"line":177,"column":4},"end":{"line":177,"column":40}},"89":{"start":{"line":178,"column":4},"end":{"line":180,"column":5}},"90":{"start":{"line":179,"column":6},"end":{"line":179,"column":28}},"91":{"start":{"line":181,"column":4},"end":{"line":181,"column":31}},"92":{"start":{"line":182,"column":4},"end":{"line":182,"column":28}},"93":{"start":{"line":183,"column":4},"end":{"line":183,"column":24}},"94":{"start":{"line":184,"column":4},"end":{"line":184,"column":26}},"95":{"start":{"line":186,"column":2},"end":{"line":188,"column":3}},"96":{"start":{"line":187,"column":4},"end":{"line":187,"column":35}},"97":{"start":{"line":189,"column":2},"end":{"line":189,"column":33}},"98":{"start":{"line":190,"column":2},"end":{"line":193,"column":3}},"99":{"start":{"line":192,"column":4},"end":{"line":192,"column":11}},"100":{"start":{"line":194,"column":2},"end":{"line":194,"column":25}},"101":{"start":{"line":196,"column":2},"end":{"line":196,"column":62}},"102":{"start":{"line":197,"column":2},"end":{"line":197,"column":18}},"103":{"start":{"line":198,"column":2},"end":{"line":214,"column":5}},"104":{"start":{"line":199,"column":4},"end":{"line":201,"column":5}},"105":{"start":{"line":200,"column":6},"end":{"line":200,"column":39}},"106":{"start":{"line":202,"column":4},"end":{"line":202,"column":31}},"107":{"start":{"line":203,"column":4},"end":{"line":206,"column":5}},"108":{"start":{"line":204,"column":6},"end":{"line":204,"column":30}},"109":{"start":{"line":205,"column":6},"end":{"line":205,"column":46}},"110":{"start":{"line":207,"column":4},"end":{"line":213,"column":7}},"111":{"start":{"line":208,"column":6},"end":{"line":208,"column":30}},"112":{"start":{"line":209,"column":6},"end":{"line":211,"column":7}},"113":{"start":{"line":210,"column":8},"end":{"line":210,"column":41}},"114":{"start":{"line":212,"column":6},"end":{"line":212,"column":49}},"115":{"start":{"line":224,"column":0},"end":{"line":225,"column":2}},"116":{"start":{"line":238,"column":0},"end":{"line":239,"column":2}},"117":{"start":{"line":249,"column":0},"end":{"line":251,"column":2}},"118":{"start":{"line":260,"column":0},"end":{"line":313,"column":2}},"119":{"start":{"line":262,"column":2},"end":{"line":262,"column":35}},"120":{"start":{"line":263,"column":2},"end":{"line":263,"column":46}},"121":{"start":{"line":264,"column":2},"end":{"line":267,"column":3}},"122":{"start":{"line":265,"column":4},"end":{"line":265,"column":34}},"123":{"start":{"line":266,"column":4},"end":{"line":266,"column":45}},"124":{"start":{"line":271,"column":2},"end":{"line":271,"column":43}},"125":{"start":{"line":272,"column":2},"end":{"line":278,"column":3}},"126":{"start":{"line":273,"column":4},"end":{"line":273,"column":46}},"127":{"start":{"line":274,"column":4},"end":{"line":276,"column":5}},"128":{"start":{"line":275,"column":6},"end":{"line":275,"column":34}},"129":{"start":{"line":277,"column":4},"end":{"line":277,"column":37}},"130":{"start":{"line":279,"column":2},"end":{"line":281,"column":3}},"131":{"start":{"line":280,"column":4},"end":{"line":280,"column":48}},"132":{"start":{"line":282,"column":2},"end":{"line":282,"column":39}},"133":{"start":{"line":283,"column":2},"end":{"line":286,"column":3}},"134":{"start":{"line":285,"column":4},"end":{"line":285,"column":11}},"135":{"start":{"line":287,"column":2},"end":{"line":287,"column":31}},"136":{"start":{"line":289,"column":2},"end":{"line":289,"column":49}},"137":{"start":{"line":290,"column":2},"end":{"line":312,"column":5}},"138":{"start":{"line":291,"column":4},"end":{"line":291,"column":34}},"139":{"start":{"line":292,"column":4},"end":{"line":294,"column":5}},"140":{"start":{"line":293,"column":6},"end":{"line":293,"column":51}},"141":{"start":{"line":295,"column":4},"end":{"line":297,"column":5}},"142":{"start":{"line":296,"column":6},"end":{"line":296,"column":32}},"143":{"start":{"line":298,"column":4},"end":{"line":311,"column":7}},"144":{"start":{"line":299,"column":6},"end":{"line":305,"column":9}},"145":{"start":{"line":300,"column":8},"end":{"line":302,"column":9}},"146":{"start":{"line":301,"column":10},"end":{"line":301,"column":27}},"147":{"start":{"line":303,"column":8},"end":{"line":303,"column":74}},"148":{"start":{"line":304,"column":8},"end":{"line":304,"column":15}},"149":{"start":{"line":307,"column":6},"end":{"line":309,"column":7}},"150":{"start":{"line":308,"column":8},"end":{"line":308,"column":47}},"151":{"start":{"line":310,"column":6},"end":{"line":310,"column":61}},"152":{"start":{"line":320,"column":0},"end":{"line":321,"column":2}},"153":{"start":{"line":328,"column":0},"end":{"line":329,"column":2}},"154":{"start":{"line":337,"column":0},"end":{"line":344,"column":1}},"155":{"start":{"line":338,"column":2},"end":{"line":338,"column":30}},"156":{"start":{"line":339,"column":2},"end":{"line":339,"column":36}},"157":{"start":{"line":340,"column":2},"end":{"line":340,"column":40}},"158":{"start":{"line":341,"column":2},"end":{"line":341,"column":32}},"159":{"start":{"line":342,"column":2},"end":{"line":342,"column":46}},"160":{"start":{"line":343,"column":2},"end":{"line":343,"column":44}},"161":{"start":{"line":346,"column":0},"end":{"line":346,"column":44}},"162":{"start":{"line":349,"column":0},"end":{"line":367,"column":2}},"163":{"start":{"line":350,"column":2},"end":{"line":350,"column":18}},"164":{"start":{"line":351,"column":2},"end":{"line":351,"column":21}},"165":{"start":{"line":352,"column":2},"end":{"line":366,"column":5}},"166":{"start":{"line":353,"column":4},"end":{"line":355,"column":5}},"167":{"start":{"line":354,"column":6},"end":{"line":354,"column":27}},"168":{"start":{"line":356,"column":4},"end":{"line":364,"column":5}},"169":{"start":{"line":357,"column":6},"end":{"line":357,"column":31}},"170":{"start":{"line":358,"column":6},"end":{"line":362,"column":45}},"171":{"start":{"line":363,"column":6},"end":{"line":363,"column":38}},"172":{"start":{"line":365,"column":4},"end":{"line":365,"column":30}},"173":{"start":{"line":370,"column":0},"end":{"line":386,"column":2}},"174":{"start":{"line":371,"column":2},"end":{"line":371,"column":18}},"175":{"start":{"line":372,"column":2},"end":{"line":385,"column":5}},"176":{"start":{"line":373,"column":4},"end":{"line":375,"column":5}},"177":{"start":{"line":374,"column":6},"end":{"line":374,"column":27}},"178":{"start":{"line":376,"column":4},"end":{"line":376,"column":29}},"179":{"start":{"line":377,"column":4},"end":{"line":379,"column":5}},"180":{"start":{"line":378,"column":6},"end":{"line":378,"column":34}},"181":{"start":{"line":380,"column":4},"end":{"line":384,"column":44}},"182":{"start":{"line":390,"column":0},"end":{"line":531,"column":2}},"183":{"start":{"line":391,"column":2},"end":{"line":391,"column":24}},"184":{"start":{"line":392,"column":2},"end":{"line":392,"column":37}},"185":{"start":{"line":393,"column":2},"end":{"line":393,"column":24}},"186":{"start":{"line":394,"column":2},"end":{"line":394,"column":25}},"187":{"start":{"line":395,"column":2},"end":{"line":395,"column":26}},"188":{"start":{"line":396,"column":2},"end":{"line":396,"column":80}},"189":{"start":{"line":397,"column":2},"end":{"line":397,"column":42}},"190":{"start":{"line":398,"column":2},"end":{"line":398,"column":42}},"191":{"start":{"line":399,"column":2},"end":{"line":399,"column":68}},"192":{"start":{"line":400,"column":2},"end":{"line":400,"column":84}},"193":{"start":{"line":401,"column":2},"end":{"line":401,"column":73}},"194":{"start":{"line":402,"column":2},"end":{"line":402,"column":58}},"195":{"start":{"line":403,"column":2},"end":{"line":403,"column":73}},"196":{"start":{"line":404,"column":2},"end":{"line":404,"column":62}},"197":{"start":{"line":405,"column":2},"end":{"line":405,"column":108}},"198":{"start":{"line":406,"column":2},"end":{"line":406,"column":107}},"199":{"start":{"line":407,"column":2},"end":{"line":407,"column":82}},"200":{"start":{"line":408,"column":2},"end":{"line":408,"column":91}},"201":{"start":{"line":409,"column":2},"end":{"line":409,"column":82}},"202":{"start":{"line":410,"column":2},"end":{"line":419,"column":3}},"203":{"start":{"line":412,"column":4},"end":{"line":412,"column":94}},"204":{"start":{"line":413,"column":4},"end":{"line":413,"column":94}},"205":{"start":{"line":417,"column":4},"end":{"line":417,"column":38}},"206":{"start":{"line":418,"column":4},"end":{"line":418,"column":38}},"207":{"start":{"line":420,"column":2},"end":{"line":423,"column":3}},"208":{"start":{"line":422,"column":4},"end":{"line":422,"column":64}},"209":{"start":{"line":424,"column":2},"end":{"line":424,"column":25}},"210":{"start":{"line":425,"column":2},"end":{"line":527,"column":3}},"211":{"start":{"line":426,"column":4},"end":{"line":450,"column":9}},"212":{"start":{"line":428,"column":6},"end":{"line":449,"column":7}},"213":{"start":{"line":429,"column":8},"end":{"line":429,"column":32}},"214":{"start":{"line":430,"column":8},"end":{"line":430,"column":61}},"215":{"start":{"line":431,"column":8},"end":{"line":434,"column":10}},"216":{"start":{"line":435,"column":8},"end":{"line":435,"column":34}},"217":{"start":{"line":436,"column":8},"end":{"line":436,"column":33}},"218":{"start":{"line":437,"column":8},"end":{"line":448,"column":9}},"219":{"start":{"line":439,"column":12},"end":{"line":439,"column":77}},"220":{"start":{"line":440,"column":12},"end":{"line":440,"column":18}},"221":{"start":{"line":442,"column":12},"end":{"line":446,"column":15}},"222":{"start":{"line":447,"column":12},"end":{"line":447,"column":18}},"223":{"start":{"line":451,"column":4},"end":{"line":462,"column":5}},"224":{"start":{"line":452,"column":6},"end":{"line":454,"column":9}},"225":{"start":{"line":453,"column":8},"end":{"line":453,"column":22}},"226":{"start":{"line":455,"column":6},"end":{"line":455,"column":54}},"227":{"start":{"line":456,"column":6},"end":{"line":458,"column":9}},"228":{"start":{"line":457,"column":8},"end":{"line":457,"column":22}},"229":{"start":{"line":459,"column":6},"end":{"line":461,"column":9}},"230":{"start":{"line":460,"column":8},"end":{"line":460,"column":26}},"231":{"start":{"line":464,"column":4},"end":{"line":464,"column":70}},"232":{"start":{"line":465,"column":4},"end":{"line":481,"column":5}},"233":{"start":{"line":467,"column":6},"end":{"line":467,"column":58}},"234":{"start":{"line":468,"column":6},"end":{"line":468,"column":69}},"235":{"start":{"line":469,"column":6},"end":{"line":480,"column":7}},"236":{"start":{"line":470,"column":8},"end":{"line":470,"column":32}},"237":{"start":{"line":471,"column":8},"end":{"line":471,"column":31}},"238":{"start":{"line":472,"column":8},"end":{"line":478,"column":9}},"239":{"start":{"line":473,"column":10},"end":{"line":476,"column":12}},"240":{"start":{"line":477,"column":10},"end":{"line":477,"column":36}},"241":{"start":{"line":479,"column":8},"end":{"line":479,"column":40}},"242":{"start":{"line":482,"column":4},"end":{"line":482,"column":67}},"243":{"start":{"line":483,"column":4},"end":{"line":498,"column":5}},"244":{"start":{"line":484,"column":6},"end":{"line":484,"column":62}},"245":{"start":{"line":485,"column":6},"end":{"line":497,"column":7}},"246":{"start":{"line":486,"column":8},"end":{"line":486,"column":33}},"247":{"start":{"line":487,"column":8},"end":{"line":487,"column":31}},"248":{"start":{"line":488,"column":8},"end":{"line":494,"column":9}},"249":{"start":{"line":489,"column":10},"end":{"line":492,"column":12}},"250":{"start":{"line":493,"column":10},"end":{"line":493,"column":36}},"251":{"start":{"line":495,"column":8},"end":{"line":495,"column":41}},"252":{"start":{"line":496,"column":8},"end":{"line":496,"column":81}},"253":{"start":{"line":499,"column":4},"end":{"line":499,"column":49}},"254":{"start":{"line":500,"column":4},"end":{"line":511,"column":5}},"255":{"start":{"line":505,"column":6},"end":{"line":510,"column":8}},"256":{"start":{"line":512,"column":4},"end":{"line":512,"column":35}},"257":{"start":{"line":513,"column":4},"end":{"line":521,"column":5}},"258":{"start":{"line":515,"column":6},"end":{"line":518,"column":8}},"259":{"start":{"line":519,"column":6},"end":{"line":519,"column":32}},"260":{"start":{"line":520,"column":6},"end":{"line":520,"column":29}},"261":{"start":{"line":522,"column":4},"end":{"line":522,"column":43}},"262":{"start":{"line":523,"column":4},"end":{"line":523,"column":82}},"263":{"start":{"line":526,"column":4},"end":{"line":526,"column":25}},"264":{"start":{"line":530,"column":2},"end":{"line":530,"column":13}},"265":{"start":{"line":534,"column":0},"end":{"line":536,"column":2}},"266":{"start":{"line":535,"column":2},"end":{"line":535,"column":113}},"267":{"start":{"line":539,"column":0},"end":{"line":563,"column":2}},"268":{"start":{"line":540,"column":2},"end":{"line":540,"column":37}},"269":{"start":{"line":541,"column":2},"end":{"line":541,"column":34}},"270":{"start":{"line":542,"column":2},"end":{"line":542,"column":41}},"271":{"start":{"line":543,"column":2},"end":{"line":543,"column":48}},"272":{"start":{"line":544,"column":2},"end":{"line":544,"column":61}},"273":{"start":{"line":545,"column":2},"end":{"line":545,"column":46}},"274":{"start":{"line":546,"column":2},"end":{"line":546,"column":46}},"275":{"start":{"line":547,"column":2},"end":{"line":547,"column":47}},"276":{"start":{"line":548,"column":2},"end":{"line":561,"column":3}},"277":{"start":{"line":549,"column":4},"end":{"line":551,"column":7}},"278":{"start":{"line":550,"column":6},"end":{"line":550,"column":43}},"279":{"start":{"line":552,"column":4},"end":{"line":552,"column":69}},"280":{"start":{"line":553,"column":4},"end":{"line":553,"column":93}},"281":{"start":{"line":554,"column":4},"end":{"line":556,"column":5}},"282":{"start":{"line":555,"column":6},"end":{"line":555,"column":62}},"283":{"start":{"line":557,"column":4},"end":{"line":557,"column":71}},"284":{"start":{"line":560,"column":4},"end":{"line":560,"column":25}},"285":{"start":{"line":562,"column":2},"end":{"line":562,"column":28}},"286":{"start":{"line":566,"column":0},"end":{"line":586,"column":2}},"287":{"start":{"line":567,"column":2},"end":{"line":567,"column":37}},"288":{"start":{"line":568,"column":2},"end":{"line":568,"column":34}},"289":{"start":{"line":569,"column":2},"end":{"line":569,"column":35}},"290":{"start":{"line":570,"column":2},"end":{"line":570,"column":43}},"291":{"start":{"line":571,"column":2},"end":{"line":571,"column":56}},"292":{"start":{"line":572,"column":2},"end":{"line":572,"column":65}},"293":{"start":{"line":573,"column":2},"end":{"line":573,"column":26}},"294":{"start":{"line":574,"column":2},"end":{"line":574,"column":55}},"295":{"start":{"line":575,"column":2},"end":{"line":575,"column":34}},"296":{"start":{"line":576,"column":2},"end":{"line":584,"column":3}},"297":{"start":{"line":577,"column":4},"end":{"line":579,"column":7}},"298":{"start":{"line":578,"column":6},"end":{"line":578,"column":43}},"299":{"start":{"line":580,"column":4},"end":{"line":580,"column":66}},"300":{"start":{"line":583,"column":4},"end":{"line":583,"column":25}},"301":{"start":{"line":585,"column":2},"end":{"line":585,"column":23}},"302":{"start":{"line":589,"column":0},"end":{"line":607,"column":2}},"303":{"start":{"line":590,"column":2},"end":{"line":590,"column":37}},"304":{"start":{"line":591,"column":2},"end":{"line":591,"column":38}},"305":{"start":{"line":592,"column":2},"end":{"line":592,"column":38}},"306":{"start":{"line":593,"column":2},"end":{"line":593,"column":44}},"307":{"start":{"line":594,"column":2},"end":{"line":604,"column":3}},"308":{"start":{"line":595,"column":4},"end":{"line":600,"column":5}},"309":{"start":{"line":596,"column":6},"end":{"line":599,"column":8}},"310":{"start":{"line":603,"column":4},"end":{"line":603,"column":25}},"311":{"start":{"line":605,"column":2},"end":{"line":605,"column":26}},"312":{"start":{"line":606,"column":2},"end":{"line":606,"column":26}},"313":{"start":{"line":616,"column":0},"end":{"line":625,"column":1}},"314":{"start":{"line":617,"column":2},"end":{"line":617,"column":30}},"315":{"start":{"line":618,"column":2},"end":{"line":618,"column":33}},"316":{"start":{"line":619,"column":2},"end":{"line":619,"column":36}},"317":{"start":{"line":620,"column":2},"end":{"line":620,"column":40}},"318":{"start":{"line":621,"column":2},"end":{"line":621,"column":32}},"319":{"start":{"line":622,"column":2},"end":{"line":622,"column":46}},"320":{"start":{"line":623,"column":2},"end":{"line":623,"column":44}},"321":{"start":{"line":624,"column":2},"end":{"line":624,"column":40}},"322":{"start":{"line":627,"column":0},"end":{"line":627,"column":44}},"323":{"start":{"line":630,"column":0},"end":{"line":643,"column":2}},"324":{"start":{"line":631,"column":2},"end":{"line":631,"column":18}},"325":{"start":{"line":632,"column":2},"end":{"line":632,"column":21}},"326":{"start":{"line":633,"column":2},"end":{"line":642,"column":5}},"327":{"start":{"line":634,"column":4},"end":{"line":636,"column":5}},"328":{"start":{"line":635,"column":6},"end":{"line":635,"column":27}},"329":{"start":{"line":637,"column":4},"end":{"line":640,"column":5}},"330":{"start":{"line":638,"column":6},"end":{"line":638,"column":55}},"331":{"start":{"line":639,"column":6},"end":{"line":639,"column":38}},"332":{"start":{"line":641,"column":4},"end":{"line":641,"column":30}},"333":{"start":{"line":646,"column":0},"end":{"line":658,"column":2}},"334":{"start":{"line":647,"column":2},"end":{"line":647,"column":18}},"335":{"start":{"line":648,"column":2},"end":{"line":657,"column":5}},"336":{"start":{"line":649,"column":4},"end":{"line":651,"column":5}},"337":{"start":{"line":650,"column":6},"end":{"line":650,"column":27}},"338":{"start":{"line":652,"column":4},"end":{"line":652,"column":29}},"339":{"start":{"line":653,"column":4},"end":{"line":655,"column":5}},"340":{"start":{"line":654,"column":6},"end":{"line":654,"column":34}},"341":{"start":{"line":656,"column":4},"end":{"line":656,"column":45}},"342":{"start":{"line":661,"column":0},"end":{"line":717,"column":2}},"343":{"start":{"line":662,"column":2},"end":{"line":662,"column":38}},"344":{"start":{"line":663,"column":2},"end":{"line":668,"column":3}},"345":{"start":{"line":664,"column":4},"end":{"line":664,"column":42}},"346":{"start":{"line":665,"column":4},"end":{"line":667,"column":5}},"347":{"start":{"line":666,"column":6},"end":{"line":666,"column":29}},"348":{"start":{"line":669,"column":2},"end":{"line":671,"column":3}},"349":{"start":{"line":670,"column":4},"end":{"line":670,"column":36}},"350":{"start":{"line":672,"column":2},"end":{"line":672,"column":34}},"351":{"start":{"line":673,"column":2},"end":{"line":676,"column":3}},"352":{"start":{"line":675,"column":4},"end":{"line":675,"column":11}},"353":{"start":{"line":677,"column":2},"end":{"line":677,"column":26}},"354":{"start":{"line":678,"column":2},"end":{"line":678,"column":27}},"355":{"start":{"line":680,"column":2},"end":{"line":680,"column":18}},"356":{"start":{"line":681,"column":2},"end":{"line":715,"column":5}},"357":{"start":{"line":683,"column":6},"end":{"line":683,"column":77}},"358":{"start":{"line":684,"column":6},"end":{"line":690,"column":9}},"359":{"start":{"line":685,"column":8},"end":{"line":687,"column":9}},"360":{"start":{"line":686,"column":10},"end":{"line":686,"column":27}},"361":{"start":{"line":688,"column":8},"end":{"line":688,"column":36}},"362":{"start":{"line":689,"column":8},"end":{"line":689,"column":15}},"363":{"start":{"line":693,"column":6},"end":{"line":695,"column":7}},"364":{"start":{"line":694,"column":8},"end":{"line":694,"column":22}},"365":{"start":{"line":696,"column":6},"end":{"line":696,"column":70}},"366":{"start":{"line":697,"column":6},"end":{"line":703,"column":9}},"367":{"start":{"line":698,"column":8},"end":{"line":700,"column":9}},"368":{"start":{"line":699,"column":10},"end":{"line":699,"column":27}},"369":{"start":{"line":701,"column":8},"end":{"line":701,"column":35}},"370":{"start":{"line":702,"column":8},"end":{"line":702,"column":15}},"371":{"start":{"line":706,"column":4},"end":{"line":706,"column":29}},"372":{"start":{"line":707,"column":4},"end":{"line":709,"column":5}},"373":{"start":{"line":708,"column":6},"end":{"line":708,"column":46}},"374":{"start":{"line":710,"column":4},"end":{"line":714,"column":7}},"375":{"start":{"line":711,"column":6},"end":{"line":711,"column":31}},"376":{"start":{"line":712,"column":6},"end":{"line":712,"column":29}},"377":{"start":{"line":713,"column":6},"end":{"line":713,"column":43}},"378":{"start":{"line":719,"column":0},"end":{"line":738,"column":2}},"379":{"start":{"line":720,"column":2},"end":{"line":720,"column":39}},"380":{"start":{"line":721,"column":2},"end":{"line":721,"column":15}},"381":{"start":{"line":722,"column":2},"end":{"line":722,"column":22}},"382":{"start":{"line":723,"column":2},"end":{"line":732,"column":3}},"383":{"start":{"line":724,"column":4},"end":{"line":724,"column":36}},"384":{"start":{"line":725,"column":4},"end":{"line":725,"column":25}},"385":{"start":{"line":726,"column":4},"end":{"line":731,"column":5}},"386":{"start":{"line":727,"column":6},"end":{"line":729,"column":7}},"387":{"start":{"line":728,"column":8},"end":{"line":728,"column":17}},"388":{"start":{"line":730,"column":6},"end":{"line":730,"column":46}},"389":{"start":{"line":733,"column":2},"end":{"line":737,"column":21}},"390":{"start":{"line":741,"column":0},"end":{"line":835,"column":2}},"391":{"start":{"line":742,"column":2},"end":{"line":742,"column":37}},"392":{"start":{"line":743,"column":2},"end":{"line":743,"column":24}},"393":{"start":{"line":744,"column":2},"end":{"line":744,"column":25}},"394":{"start":{"line":745,"column":2},"end":{"line":745,"column":26}},"395":{"start":{"line":746,"column":2},"end":{"line":746,"column":53}},"396":{"start":{"line":747,"column":2},"end":{"line":747,"column":80}},"397":{"start":{"line":748,"column":2},"end":{"line":748,"column":58}},"398":{"start":{"line":749,"column":2},"end":{"line":749,"column":42}},"399":{"start":{"line":750,"column":2},"end":{"line":750,"column":42}},"400":{"start":{"line":751,"column":2},"end":{"line":760,"column":3}},"401":{"start":{"line":752,"column":4},"end":{"line":752,"column":37}},"402":{"start":{"line":753,"column":4},"end":{"line":753,"column":52}},"403":{"start":{"line":754,"column":4},"end":{"line":759,"column":5}},"404":{"start":{"line":755,"column":6},"end":{"line":757,"column":7}},"405":{"start":{"line":756,"column":8},"end":{"line":756,"column":17}},"406":{"start":{"line":758,"column":6},"end":{"line":758,"column":57}},"407":{"start":{"line":761,"column":2},"end":{"line":761,"column":50}},"408":{"start":{"line":762,"column":2},"end":{"line":762,"column":58}},"409":{"start":{"line":763,"column":2},"end":{"line":763,"column":75}},"410":{"start":{"line":764,"column":2},"end":{"line":764,"column":62}},"411":{"start":{"line":765,"column":2},"end":{"line":765,"column":48}},"412":{"start":{"line":766,"column":2},"end":{"line":766,"column":58}},"413":{"start":{"line":767,"column":2},"end":{"line":767,"column":107}},"414":{"start":{"line":768,"column":2},"end":{"line":768,"column":82}},"415":{"start":{"line":769,"column":2},"end":{"line":769,"column":91}},"416":{"start":{"line":770,"column":2},"end":{"line":770,"column":92}},"417":{"start":{"line":771,"column":2},"end":{"line":771,"column":92}},"418":{"start":{"line":772,"column":2},"end":{"line":772,"column":18}},"419":{"start":{"line":773,"column":2},"end":{"line":834,"column":5}},"420":{"start":{"line":774,"column":4},"end":{"line":796,"column":7}},"421":{"start":{"line":775,"column":6},"end":{"line":777,"column":7}},"422":{"start":{"line":776,"column":8},"end":{"line":776,"column":25}},"423":{"start":{"line":778,"column":6},"end":{"line":782,"column":8}},"424":{"start":{"line":783,"column":6},"end":{"line":783,"column":31}},"425":{"start":{"line":784,"column":6},"end":{"line":794,"column":7}},"426":{"start":{"line":786,"column":10},"end":{"line":786,"column":69}},"427":{"start":{"line":787,"column":10},"end":{"line":787,"column":16}},"428":{"start":{"line":789,"column":10},"end":{"line":789,"column":130}},"429":{"start":{"line":790,"column":10},"end":{"line":790,"column":16}},"430":{"start":{"line":792,"column":10},"end":{"line":792,"column":28}},"431":{"start":{"line":793,"column":10},"end":{"line":793,"column":16}},"432":{"start":{"line":795,"column":6},"end":{"line":795,"column":20}},"433":{"start":{"line":798,"column":4},"end":{"line":800,"column":5}},"434":{"start":{"line":799,"column":6},"end":{"line":799,"column":27}},"435":{"start":{"line":801,"column":4},"end":{"line":801,"column":32}},"436":{"start":{"line":802,"column":4},"end":{"line":802,"column":43}},"437":{"start":{"line":803,"column":4},"end":{"line":805,"column":7}},"438":{"start":{"line":804,"column":6},"end":{"line":804,"column":20}},"439":{"start":{"line":806,"column":4},"end":{"line":806,"column":52}},"440":{"start":{"line":807,"column":4},"end":{"line":809,"column":7}},"441":{"start":{"line":808,"column":6},"end":{"line":808,"column":20}},"442":{"start":{"line":810,"column":4},"end":{"line":812,"column":7}},"443":{"start":{"line":811,"column":6},"end":{"line":811,"column":24}},"444":{"start":{"line":813,"column":4},"end":{"line":818,"column":5}},"445":{"start":{"line":814,"column":6},"end":{"line":814,"column":56}},"446":{"start":{"line":815,"column":6},"end":{"line":815,"column":55}},"447":{"start":{"line":816,"column":6},"end":{"line":816,"column":68}},"448":{"start":{"line":817,"column":6},"end":{"line":817,"column":24}},"449":{"start":{"line":819,"column":4},"end":{"line":819,"column":50}},"450":{"start":{"line":820,"column":4},"end":{"line":820,"column":34}},"451":{"start":{"line":821,"column":4},"end":{"line":821,"column":46}},"452":{"start":{"line":822,"column":4},"end":{"line":822,"column":46}},"453":{"start":{"line":823,"column":4},"end":{"line":823,"column":52}},"454":{"start":{"line":824,"column":4},"end":{"line":824,"column":60}},"455":{"start":{"line":826,"column":4},"end":{"line":826,"column":62}},"456":{"start":{"line":827,"column":4},"end":{"line":832,"column":5}},"457":{"start":{"line":828,"column":6},"end":{"line":828,"column":48}},"458":{"start":{"line":830,"column":9},"end":{"line":832,"column":5}},"459":{"start":{"line":831,"column":6},"end":{"line":831,"column":40}},"460":{"start":{"line":833,"column":4},"end":{"line":833,"column":15}},"461":{"start":{"line":838,"column":0},"end":{"line":876,"column":2}},"462":{"start":{"line":839,"column":2},"end":{"line":839,"column":37}},"463":{"start":{"line":840,"column":2},"end":{"line":840,"column":34}},"464":{"start":{"line":841,"column":2},"end":{"line":841,"column":41}},"465":{"start":{"line":842,"column":2},"end":{"line":842,"column":48}},"466":{"start":{"line":843,"column":2},"end":{"line":843,"column":66}},"467":{"start":{"line":844,"column":2},"end":{"line":844,"column":46}},"468":{"start":{"line":845,"column":2},"end":{"line":845,"column":46}},"469":{"start":{"line":846,"column":2},"end":{"line":846,"column":47}},"470":{"start":{"line":847,"column":2},"end":{"line":847,"column":55}},"471":{"start":{"line":848,"column":2},"end":{"line":848,"column":18}},"472":{"start":{"line":849,"column":2},"end":{"line":875,"column":5}},"473":{"start":{"line":851,"column":6},"end":{"line":856,"column":9}},"474":{"start":{"line":852,"column":8},"end":{"line":852,"column":94}},"475":{"start":{"line":854,"column":8},"end":{"line":854,"column":41}},"476":{"start":{"line":855,"column":8},"end":{"line":855,"column":18}},"477":{"start":{"line":859,"column":6},"end":{"line":862,"column":9}},"478":{"start":{"line":860,"column":8},"end":{"line":860,"column":35}},"479":{"start":{"line":861,"column":8},"end":{"line":861,"column":18}},"480":{"start":{"line":865,"column":6},"end":{"line":868,"column":9}},"481":{"start":{"line":866,"column":8},"end":{"line":866,"column":36}},"482":{"start":{"line":867,"column":8},"end":{"line":867,"column":18}},"483":{"start":{"line":871,"column":4},"end":{"line":873,"column":5}},"484":{"start":{"line":872,"column":6},"end":{"line":872,"column":27}},"485":{"start":{"line":874,"column":4},"end":{"line":874,"column":30}},"486":{"start":{"line":879,"column":0},"end":{"line":911,"column":2}},"487":{"start":{"line":880,"column":2},"end":{"line":880,"column":37}},"488":{"start":{"line":881,"column":2},"end":{"line":881,"column":34}},"489":{"start":{"line":882,"column":2},"end":{"line":882,"column":35}},"490":{"start":{"line":883,"column":2},"end":{"line":883,"column":43}},"491":{"start":{"line":884,"column":2},"end":{"line":884,"column":61}},"492":{"start":{"line":885,"column":2},"end":{"line":885,"column":65}},"493":{"start":{"line":886,"column":2},"end":{"line":886,"column":26}},"494":{"start":{"line":887,"column":2},"end":{"line":887,"column":55}},"495":{"start":{"line":888,"column":2},"end":{"line":888,"column":34}},"496":{"start":{"line":889,"column":2},"end":{"line":889,"column":18}},"497":{"start":{"line":890,"column":2},"end":{"line":910,"column":5}},"498":{"start":{"line":892,"column":6},"end":{"line":897,"column":9}},"499":{"start":{"line":893,"column":8},"end":{"line":893,"column":94}},"500":{"start":{"line":895,"column":8},"end":{"line":895,"column":36}},"501":{"start":{"line":896,"column":8},"end":{"line":896,"column":18}},"502":{"start":{"line":900,"column":6},"end":{"line":903,"column":9}},"503":{"start":{"line":901,"column":8},"end":{"line":901,"column":31}},"504":{"start":{"line":902,"column":8},"end":{"line":902,"column":18}},"505":{"start":{"line":906,"column":4},"end":{"line":908,"column":5}},"506":{"start":{"line":907,"column":6},"end":{"line":907,"column":27}},"507":{"start":{"line":909,"column":4},"end":{"line":909,"column":25}},"508":{"start":{"line":914,"column":0},"end":{"line":938,"column":2}},"509":{"start":{"line":915,"column":2},"end":{"line":915,"column":37}},"510":{"start":{"line":916,"column":2},"end":{"line":916,"column":38}},"511":{"start":{"line":917,"column":2},"end":{"line":917,"column":38}},"512":{"start":{"line":918,"column":2},"end":{"line":918,"column":44}},"513":{"start":{"line":919,"column":2},"end":{"line":919,"column":18}},"514":{"start":{"line":920,"column":2},"end":{"line":937,"column":5}},"515":{"start":{"line":921,"column":4},"end":{"line":930,"column":7}},"516":{"start":{"line":922,"column":6},"end":{"line":924,"column":7}},"517":{"start":{"line":923,"column":8},"end":{"line":923,"column":25}},"518":{"start":{"line":925,"column":6},"end":{"line":928,"column":8}},"519":{"start":{"line":929,"column":6},"end":{"line":929,"column":13}},"520":{"start":{"line":932,"column":4},"end":{"line":934,"column":5}},"521":{"start":{"line":933,"column":6},"end":{"line":933,"column":27}},"522":{"start":{"line":935,"column":4},"end":{"line":935,"column":28}},"523":{"start":{"line":936,"column":4},"end":{"line":936,"column":28}},"524":{"start":{"line":947,"column":0},"end":{"line":971,"column":1}},"525":{"start":{"line":948,"column":2},"end":{"line":948,"column":8}},"526":{"start":{"line":949,"column":2},"end":{"line":949,"column":8}},"527":{"start":{"line":951,"column":2},"end":{"line":956,"column":3}},"528":{"start":{"line":952,"column":4},"end":{"line":952,"column":36}},"529":{"start":{"line":953,"column":4},"end":{"line":953,"column":45}},"530":{"start":{"line":954,"column":4},"end":{"line":954,"column":39}},"531":{"start":{"line":955,"column":4},"end":{"line":955,"column":43}},"532":{"start":{"line":957,"column":2},"end":{"line":957,"column":46}},"533":{"start":{"line":958,"column":2},"end":{"line":958,"column":47}},"534":{"start":{"line":960,"column":2},"end":{"line":960,"column":31}},"535":{"start":{"line":961,"column":2},"end":{"line":970,"column":3}},"536":{"start":{"line":962,"column":4},"end":{"line":962,"column":29}},"537":{"start":{"line":963,"column":4},"end":{"line":968,"column":5}},"538":{"start":{"line":965,"column":6},"end":{"line":965,"column":37}},"539":{"start":{"line":966,"column":6},"end":{"line":966,"column":45}},"540":{"start":{"line":967,"column":6},"end":{"line":967,"column":15}},"541":{"start":{"line":969,"column":4},"end":{"line":969,"column":23}},"542":{"start":{"line":979,"column":0},"end":{"line":991,"column":1}},"543":{"start":{"line":980,"column":2},"end":{"line":980,"column":35}},"544":{"start":{"line":981,"column":2},"end":{"line":990,"column":3}},"545":{"start":{"line":982,"column":4},"end":{"line":982,"column":33}},"546":{"start":{"line":983,"column":4},"end":{"line":988,"column":5}},"547":{"start":{"line":985,"column":6},"end":{"line":985,"column":37}},"548":{"start":{"line":986,"column":6},"end":{"line":986,"column":45}},"549":{"start":{"line":987,"column":6},"end":{"line":987,"column":15}},"550":{"start":{"line":989,"column":4},"end":{"line":989,"column":23}},"551":{"start":{"line":993,"column":0},"end":{"line":1015,"column":1}},"552":{"start":{"line":994,"column":2},"end":{"line":999,"column":3}},"553":{"start":{"line":995,"column":4},"end":{"line":995,"column":65}},"554":{"start":{"line":996,"column":4},"end":{"line":998,"column":5}},"555":{"start":{"line":997,"column":6},"end":{"line":997,"column":47}},"556":{"start":{"line":1000,"column":2},"end":{"line":1003,"column":3}},"557":{"start":{"line":1002,"column":4},"end":{"line":1002,"column":59}},"558":{"start":{"line":1005,"column":2},"end":{"line":1014,"column":5}},"559":{"start":{"line":1006,"column":4},"end":{"line":1006,"column":22}},"560":{"start":{"line":1007,"column":4},"end":{"line":1012,"column":5}},"561":{"start":{"line":1008,"column":6},"end":{"line":1010,"column":7}},"562":{"start":{"line":1009,"column":8},"end":{"line":1009,"column":17}},"563":{"start":{"line":1011,"column":6},"end":{"line":1011,"column":45}},"564":{"start":{"line":1013,"column":4},"end":{"line":1013,"column":20}},"565":{"start":{"line":1021,"column":0},"end":{"line":1042,"column":1}},"566":{"start":{"line":1022,"column":2},"end":{"line":1041,"column":5}},"567":{"start":{"line":1023,"column":4},"end":{"line":1023,"column":54}},"568":{"start":{"line":1024,"column":4},"end":{"line":1024,"column":22}},"569":{"start":{"line":1025,"column":4},"end":{"line":1039,"column":5}},"570":{"start":{"line":1026,"column":6},"end":{"line":1026,"column":26}},"571":{"start":{"line":1027,"column":6},"end":{"line":1027,"column":43}},"572":{"start":{"line":1028,"column":6},"end":{"line":1028,"column":49}},"573":{"start":{"line":1029,"column":6},"end":{"line":1037,"column":7}},"574":{"start":{"line":1030,"column":8},"end":{"line":1030,"column":37}},"575":{"start":{"line":1031,"column":8},"end":{"line":1034,"column":9}},"576":{"start":{"line":1033,"column":10},"end":{"line":1033,"column":60}},"577":{"start":{"line":1035,"column":8},"end":{"line":1035,"column":87}},"578":{"start":{"line":1036,"column":8},"end":{"line":1036,"column":40}},"579":{"start":{"line":1038,"column":6},"end":{"line":1038,"column":36}},"580":{"start":{"line":1040,"column":4},"end":{"line":1040,"column":20}},"581":{"start":{"line":1049,"column":0},"end":{"line":1116,"column":1}},"582":{"start":{"line":1059,"column":2},"end":{"line":1115,"column":5}},"583":{"start":{"line":1060,"column":4},"end":{"line":1060,"column":22}},"584":{"start":{"line":1061,"column":4},"end":{"line":1113,"column":5}},"585":{"start":{"line":1062,"column":6},"end":{"line":1062,"column":26}},"586":{"start":{"line":1063,"column":6},"end":{"line":1063,"column":43}},"587":{"start":{"line":1064,"column":6},"end":{"line":1064,"column":29}},"588":{"start":{"line":1065,"column":6},"end":{"line":1065,"column":28}},"589":{"start":{"line":1066,"column":6},"end":{"line":1066,"column":27}},"590":{"start":{"line":1067,"column":6},"end":{"line":1067,"column":28}},"591":{"start":{"line":1068,"column":6},"end":{"line":1111,"column":7}},"592":{"start":{"line":1069,"column":8},"end":{"line":1069,"column":37}},"593":{"start":{"line":1070,"column":8},"end":{"line":1073,"column":9}},"594":{"start":{"line":1072,"column":10},"end":{"line":1072,"column":60}},"595":{"start":{"line":1074,"column":8},"end":{"line":1074,"column":77}},"596":{"start":{"line":1075,"column":8},"end":{"line":1075,"column":30}},"597":{"start":{"line":1077,"column":8},"end":{"line":1077,"column":56}},"598":{"start":{"line":1078,"column":8},"end":{"line":1080,"column":9}},"599":{"start":{"line":1079,"column":10},"end":{"line":1079,"column":19}},"600":{"start":{"line":1081,"column":8},"end":{"line":1081,"column":58}},"601":{"start":{"line":1082,"column":8},"end":{"line":1082,"column":47}},"602":{"start":{"line":1084,"column":8},"end":{"line":1086,"column":9}},"603":{"start":{"line":1085,"column":10},"end":{"line":1085,"column":19}},"604":{"start":{"line":1087,"column":8},"end":{"line":1087,"column":46}},"605":{"start":{"line":1088,"column":8},"end":{"line":1090,"column":9}},"606":{"start":{"line":1089,"column":10},"end":{"line":1089,"column":66}},"607":{"start":{"line":1091,"column":8},"end":{"line":1100,"column":9}},"608":{"start":{"line":1096,"column":10},"end":{"line":1098,"column":11}},"609":{"start":{"line":1097,"column":12},"end":{"line":1097,"column":33}},"610":{"start":{"line":1099,"column":10},"end":{"line":1099,"column":19}},"611":{"start":{"line":1101,"column":8},"end":{"line":1101,"column":50}},"612":{"start":{"line":1102,"column":8},"end":{"line":1102,"column":30}},"613":{"start":{"line":1103,"column":8},"end":{"line":1107,"column":9}},"614":{"start":{"line":1106,"column":10},"end":{"line":1106,"column":93}},"615":{"start":{"line":1108,"column":8},"end":{"line":1110,"column":9}},"616":{"start":{"line":1109,"column":10},"end":{"line":1109,"column":16}},"617":{"start":{"line":1112,"column":6},"end":{"line":1112,"column":36}},"618":{"start":{"line":1114,"column":4},"end":{"line":1114,"column":20}},"619":{"start":{"line":1121,"column":0},"end":{"line":1127,"column":1}},"620":{"start":{"line":1122,"column":2},"end":{"line":1122,"column":8}},"621":{"start":{"line":1123,"column":2},"end":{"line":1125,"column":3}},"622":{"start":{"line":1124,"column":4},"end":{"line":1124,"column":40}},"623":{"start":{"line":1126,"column":2},"end":{"line":1126,"column":11}},"624":{"start":{"line":1129,"column":0},"end":{"line":1144,"column":1}},"625":{"start":{"line":1130,"column":2},"end":{"line":1130,"column":45}},"626":{"start":{"line":1131,"column":2},"end":{"line":1142,"column":3}},"627":{"start":{"line":1132,"column":4},"end":{"line":1132,"column":25}},"628":{"start":{"line":1133,"column":4},"end":{"line":1133,"column":33}},"629":{"start":{"line":1134,"column":4},"end":{"line":1137,"column":5}},"630":{"start":{"line":1136,"column":6},"end":{"line":1136,"column":15}},"631":{"start":{"line":1138,"column":4},"end":{"line":1138,"column":79}},"632":{"start":{"line":1139,"column":4},"end":{"line":1141,"column":5}},"633":{"start":{"line":1140,"column":6},"end":{"line":1140,"column":19}},"634":{"start":{"line":1143,"column":2},"end":{"line":1143,"column":14}},"635":{"start":{"line":1154,"column":0},"end":{"line":1163,"column":1}},"636":{"start":{"line":1155,"column":2},"end":{"line":1155,"column":41}},"637":{"start":{"line":1156,"column":2},"end":{"line":1158,"column":3}},"638":{"start":{"line":1157,"column":4},"end":{"line":1157,"column":39}},"639":{"start":{"line":1159,"column":2},"end":{"line":1161,"column":3}},"640":{"start":{"line":1160,"column":4},"end":{"line":1160,"column":50}},"641":{"start":{"line":1162,"column":2},"end":{"line":1162,"column":25}},"642":{"start":{"line":1165,"column":0},"end":{"line":1165,"column":36}}},"branchMap":{"1":{"line":98,"type":"binary-expr","locations":[{"start":{"line":98,"column":18},"end":{"line":98,"column":23}},{"start":{"line":98,"column":27},"end":{"line":98,"column":38}}]},"2":{"line":99,"type":"if","locations":[{"start":{"line":99,"column":2},"end":{"line":99,"column":2}},{"start":{"line":99,"column":2},"end":{"line":99,"column":2}}]},"3":{"line":101,"type":"if","locations":[{"start":{"line":101,"column":4},"end":{"line":101,"column":4}},{"start":{"line":101,"column":4},"end":{"line":101,"column":4}}]},"4":{"line":105,"type":"if","locations":[{"start":{"line":105,"column":2},"end":{"line":105,"column":2}},{"start":{"line":105,"column":2},"end":{"line":105,"column":2}}]},"5":{"line":109,"type":"if","locations":[{"start":{"line":109,"column":2},"end":{"line":109,"column":2}},{"start":{"line":109,"column":2},"end":{"line":109,"column":2}}]},"6":{"line":121,"type":"if","locations":[{"start":{"line":121,"column":8},"end":{"line":121,"column":8}},{"start":{"line":121,"column":8},"end":{"line":121,"column":8}}]},"7":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":6},"end":{"line":129,"column":6}},{"start":{"line":129,"column":6},"end":{"line":129,"column":6}}]},"8":{"line":134,"type":"if","locations":[{"start":{"line":134,"column":8},"end":{"line":134,"column":8}},{"start":{"line":134,"column":8},"end":{"line":134,"column":8}}]},"9":{"line":142,"type":"if","locations":[{"start":{"line":142,"column":6},"end":{"line":142,"column":6}},{"start":{"line":142,"column":6},"end":{"line":142,"column":6}}]},"10":{"line":142,"type":"binary-expr","locations":[{"start":{"line":142,"column":10},"end":{"line":142,"column":19}},{"start":{"line":142,"column":23},"end":{"line":142,"column":42}}]},"11":{"line":148,"type":"if","locations":[{"start":{"line":148,"column":8},"end":{"line":148,"column":8}},{"start":{"line":148,"column":8},"end":{"line":148,"column":8}}]},"12":{"line":156,"type":"if","locations":[{"start":{"line":156,"column":4},"end":{"line":156,"column":4}},{"start":{"line":156,"column":4},"end":{"line":156,"column":4}}]},"13":{"line":156,"type":"binary-expr","locations":[{"start":{"line":156,"column":8},"end":{"line":156,"column":11}},{"start":{"line":156,"column":15},"end":{"line":156,"column":24}}]},"14":{"line":175,"type":"binary-expr","locations":[{"start":{"line":175,"column":16},"end":{"line":175,"column":21}},{"start":{"line":175,"column":25},"end":{"line":175,"column":36}}]},"15":{"line":176,"type":"if","locations":[{"start":{"line":176,"column":2},"end":{"line":176,"column":2}},{"start":{"line":176,"column":2},"end":{"line":176,"column":2}}]},"16":{"line":178,"type":"if","locations":[{"start":{"line":178,"column":4},"end":{"line":178,"column":4}},{"start":{"line":178,"column":4},"end":{"line":178,"column":4}}]},"17":{"line":186,"type":"if","locations":[{"start":{"line":186,"column":2},"end":{"line":186,"column":2}},{"start":{"line":186,"column":2},"end":{"line":186,"column":2}}]},"18":{"line":190,"type":"if","locations":[{"start":{"line":190,"column":2},"end":{"line":190,"column":2}},{"start":{"line":190,"column":2},"end":{"line":190,"column":2}}]},"19":{"line":199,"type":"if","locations":[{"start":{"line":199,"column":4},"end":{"line":199,"column":4}},{"start":{"line":199,"column":4},"end":{"line":199,"column":4}}]},"20":{"line":203,"type":"if","locations":[{"start":{"line":203,"column":4},"end":{"line":203,"column":4}},{"start":{"line":203,"column":4},"end":{"line":203,"column":4}}]},"21":{"line":209,"type":"if","locations":[{"start":{"line":209,"column":6},"end":{"line":209,"column":6}},{"start":{"line":209,"column":6},"end":{"line":209,"column":6}}]},"22":{"line":264,"type":"if","locations":[{"start":{"line":264,"column":2},"end":{"line":264,"column":2}},{"start":{"line":264,"column":2},"end":{"line":264,"column":2}}]},"23":{"line":271,"type":"binary-expr","locations":[{"start":{"line":271,"column":22},"end":{"line":271,"column":27}},{"start":{"line":271,"column":31},"end":{"line":271,"column":42}}]},"24":{"line":272,"type":"if","locations":[{"start":{"line":272,"column":2},"end":{"line":272,"column":2}},{"start":{"line":272,"column":2},"end":{"line":272,"column":2}}]},"25":{"line":274,"type":"if","locations":[{"start":{"line":274,"column":4},"end":{"line":274,"column":4}},{"start":{"line":274,"column":4},"end":{"line":274,"column":4}}]},"26":{"line":279,"type":"if","locations":[{"start":{"line":279,"column":2},"end":{"line":279,"column":2}},{"start":{"line":279,"column":2},"end":{"line":279,"column":2}}]},"27":{"line":283,"type":"if","locations":[{"start":{"line":283,"column":2},"end":{"line":283,"column":2}},{"start":{"line":283,"column":2},"end":{"line":283,"column":2}}]},"28":{"line":292,"type":"if","locations":[{"start":{"line":292,"column":4},"end":{"line":292,"column":4}},{"start":{"line":292,"column":4},"end":{"line":292,"column":4}}]},"29":{"line":292,"type":"binary-expr","locations":[{"start":{"line":292,"column":8},"end":{"line":292,"column":11}},{"start":{"line":292,"column":15},"end":{"line":292,"column":41}}]},"30":{"line":295,"type":"if","locations":[{"start":{"line":295,"column":4},"end":{"line":295,"column":4}},{"start":{"line":295,"column":4},"end":{"line":295,"column":4}}]},"31":{"line":300,"type":"if","locations":[{"start":{"line":300,"column":8},"end":{"line":300,"column":8}},{"start":{"line":300,"column":8},"end":{"line":300,"column":8}}]},"32":{"line":307,"type":"if","locations":[{"start":{"line":307,"column":6},"end":{"line":307,"column":6}},{"start":{"line":307,"column":6},"end":{"line":307,"column":6}}]},"33":{"line":353,"type":"if","locations":[{"start":{"line":353,"column":4},"end":{"line":353,"column":4}},{"start":{"line":353,"column":4},"end":{"line":353,"column":4}}]},"34":{"line":373,"type":"if","locations":[{"start":{"line":373,"column":4},"end":{"line":373,"column":4}},{"start":{"line":373,"column":4},"end":{"line":373,"column":4}}]},"35":{"line":377,"type":"if","locations":[{"start":{"line":377,"column":4},"end":{"line":377,"column":4}},{"start":{"line":377,"column":4},"end":{"line":377,"column":4}}]},"36":{"line":405,"type":"binary-expr","locations":[{"start":{"line":405,"column":35},"end":{"line":405,"column":73}},{"start":{"line":405,"column":77},"end":{"line":405,"column":107}}]},"37":{"line":406,"type":"binary-expr","locations":[{"start":{"line":406,"column":34},"end":{"line":406,"column":73}},{"start":{"line":406,"column":77},"end":{"line":406,"column":106}}]},"38":{"line":407,"type":"binary-expr","locations":[{"start":{"line":407,"column":25},"end":{"line":407,"column":57}},{"start":{"line":407,"column":61},"end":{"line":407,"column":81}}]},"39":{"line":408,"type":"binary-expr","locations":[{"start":{"line":408,"column":31},"end":{"line":408,"column":60}},{"start":{"line":408,"column":64},"end":{"line":408,"column":90}}]},"40":{"line":409,"type":"binary-expr","locations":[{"start":{"line":409,"column":28},"end":{"line":409,"column":54}},{"start":{"line":409,"column":58},"end":{"line":409,"column":81}}]},"41":{"line":410,"type":"if","locations":[{"start":{"line":410,"column":2},"end":{"line":410,"column":2}},{"start":{"line":410,"column":2},"end":{"line":410,"column":2}}]},"42":{"line":412,"type":"binary-expr","locations":[{"start":{"line":412,"column":33},"end":{"line":412,"column":63}},{"start":{"line":412,"column":67},"end":{"line":412,"column":93}}]},"43":{"line":413,"type":"binary-expr","locations":[{"start":{"line":413,"column":33},"end":{"line":413,"column":63}},{"start":{"line":413,"column":67},"end":{"line":413,"column":93}}]},"44":{"line":420,"type":"if","locations":[{"start":{"line":420,"column":2},"end":{"line":420,"column":2}},{"start":{"line":420,"column":2},"end":{"line":420,"column":2}}]},"45":{"line":437,"type":"switch","locations":[{"start":{"line":438,"column":10},"end":{"line":440,"column":18}},{"start":{"line":441,"column":10},"end":{"line":447,"column":18}}]},"46":{"line":439,"type":"binary-expr","locations":[{"start":{"line":439,"column":46},"end":{"line":439,"column":68}},{"start":{"line":439,"column":72},"end":{"line":439,"column":73}}]},"47":{"line":444,"type":"binary-expr","locations":[{"start":{"line":444,"column":22},"end":{"line":444,"column":44}},{"start":{"line":444,"column":48},"end":{"line":444,"column":49}}]},"48":{"line":445,"type":"cond-expr","locations":[{"start":{"line":445,"column":47},"end":{"line":445,"column":53}},{"start":{"line":445,"column":56},"end":{"line":445,"column":61}}]},"49":{"line":451,"type":"if","locations":[{"start":{"line":451,"column":4},"end":{"line":451,"column":4}},{"start":{"line":451,"column":4},"end":{"line":451,"column":4}}]},"50":{"line":465,"type":"if","locations":[{"start":{"line":465,"column":4},"end":{"line":465,"column":4}},{"start":{"line":465,"column":4},"end":{"line":465,"column":4}}]},"51":{"line":465,"type":"binary-expr","locations":[{"start":{"line":465,"column":8},"end":{"line":465,"column":28}},{"start":{"line":465,"column":32},"end":{"line":465,"column":55}}]},"52":{"line":472,"type":"if","locations":[{"start":{"line":472,"column":8},"end":{"line":472,"column":8}},{"start":{"line":472,"column":8},"end":{"line":472,"column":8}}]},"53":{"line":483,"type":"if","locations":[{"start":{"line":483,"column":4},"end":{"line":483,"column":4}},{"start":{"line":483,"column":4},"end":{"line":483,"column":4}}]},"54":{"line":483,"type":"binary-expr","locations":[{"start":{"line":483,"column":8},"end":{"line":483,"column":28}},{"start":{"line":483,"column":32},"end":{"line":483,"column":58}}]},"55":{"line":488,"type":"if","locations":[{"start":{"line":488,"column":8},"end":{"line":488,"column":8}},{"start":{"line":488,"column":8},"end":{"line":488,"column":8}}]},"56":{"line":496,"type":"cond-expr","locations":[{"start":{"line":496,"column":65},"end":{"line":496,"column":71}},{"start":{"line":496,"column":74},"end":{"line":496,"column":79}}]},"57":{"line":500,"type":"if","locations":[{"start":{"line":500,"column":4},"end":{"line":500,"column":4}},{"start":{"line":500,"column":4},"end":{"line":500,"column":4}}]},"58":{"line":507,"type":"binary-expr","locations":[{"start":{"line":507,"column":8},"end":{"line":507,"column":31}},{"start":{"line":509,"column":9},"end":{"line":509,"column":35}},{"start":{"line":509,"column":39},"end":{"line":509,"column":102}}]},"59":{"line":513,"type":"if","locations":[{"start":{"line":513,"column":4},"end":{"line":513,"column":4}},{"start":{"line":513,"column":4},"end":{"line":513,"column":4}}]},"60":{"line":513,"type":"binary-expr","locations":[{"start":{"line":513,"column":8},"end":{"line":513,"column":27}},{"start":{"line":513,"column":31},"end":{"line":513,"column":35}},{"start":{"line":513,"column":39},"end":{"line":513,"column":58}}]},"61":{"line":544,"type":"binary-expr","locations":[{"start":{"line":544,"column":24},"end":{"line":544,"column":40}},{"start":{"line":544,"column":44},"end":{"line":544,"column":60}}]},"62":{"line":549,"type":"binary-expr","locations":[{"start":{"line":549,"column":31},"end":{"line":549,"column":52}},{"start":{"line":549,"column":56},"end":{"line":549,"column":72}}]},"63":{"line":554,"type":"if","locations":[{"start":{"line":554,"column":4},"end":{"line":554,"column":4}},{"start":{"line":554,"column":4},"end":{"line":554,"column":4}}]},"64":{"line":554,"type":"binary-expr","locations":[{"start":{"line":554,"column":8},"end":{"line":554,"column":35}},{"start":{"line":554,"column":39},"end":{"line":554,"column":80}}]},"65":{"line":571,"type":"binary-expr","locations":[{"start":{"line":571,"column":19},"end":{"line":571,"column":35}},{"start":{"line":571,"column":39},"end":{"line":571,"column":55}}]},"66":{"line":572,"type":"binary-expr","locations":[{"start":{"line":572,"column":23},"end":{"line":572,"column":44}},{"start":{"line":572,"column":48},"end":{"line":572,"column":64}}]},"67":{"line":577,"type":"binary-expr","locations":[{"start":{"line":577,"column":26},"end":{"line":577,"column":47}},{"start":{"line":577,"column":51},"end":{"line":577,"column":67}}]},"68":{"line":634,"type":"if","locations":[{"start":{"line":634,"column":4},"end":{"line":634,"column":4}},{"start":{"line":634,"column":4},"end":{"line":634,"column":4}}]},"69":{"line":649,"type":"if","locations":[{"start":{"line":649,"column":4},"end":{"line":649,"column":4}},{"start":{"line":649,"column":4},"end":{"line":649,"column":4}}]},"70":{"line":653,"type":"if","locations":[{"start":{"line":653,"column":4},"end":{"line":653,"column":4}},{"start":{"line":653,"column":4},"end":{"line":653,"column":4}}]},"71":{"line":662,"type":"binary-expr","locations":[{"start":{"line":662,"column":17},"end":{"line":662,"column":22}},{"start":{"line":662,"column":26},"end":{"line":662,"column":37}}]},"72":{"line":663,"type":"if","locations":[{"start":{"line":663,"column":2},"end":{"line":663,"column":2}},{"start":{"line":663,"column":2},"end":{"line":663,"column":2}}]},"73":{"line":665,"type":"if","locations":[{"start":{"line":665,"column":4},"end":{"line":665,"column":4}},{"start":{"line":665,"column":4},"end":{"line":665,"column":4}}]},"74":{"line":669,"type":"if","locations":[{"start":{"line":669,"column":2},"end":{"line":669,"column":2}},{"start":{"line":669,"column":2},"end":{"line":669,"column":2}}]},"75":{"line":673,"type":"if","locations":[{"start":{"line":673,"column":2},"end":{"line":673,"column":2}},{"start":{"line":673,"column":2},"end":{"line":673,"column":2}}]},"76":{"line":685,"type":"if","locations":[{"start":{"line":685,"column":8},"end":{"line":685,"column":8}},{"start":{"line":685,"column":8},"end":{"line":685,"column":8}}]},"77":{"line":693,"type":"if","locations":[{"start":{"line":693,"column":6},"end":{"line":693,"column":6}},{"start":{"line":693,"column":6},"end":{"line":693,"column":6}}]},"78":{"line":698,"type":"if","locations":[{"start":{"line":698,"column":8},"end":{"line":698,"column":8}},{"start":{"line":698,"column":8},"end":{"line":698,"column":8}}]},"79":{"line":707,"type":"if","locations":[{"start":{"line":707,"column":4},"end":{"line":707,"column":4}},{"start":{"line":707,"column":4},"end":{"line":707,"column":4}}]},"80":{"line":707,"type":"binary-expr","locations":[{"start":{"line":707,"column":8},"end":{"line":707,"column":11}},{"start":{"line":707,"column":15},"end":{"line":707,"column":24}}]},"81":{"line":723,"type":"if","locations":[{"start":{"line":723,"column":2},"end":{"line":723,"column":2}},{"start":{"line":723,"column":2},"end":{"line":723,"column":2}}]},"82":{"line":727,"type":"if","locations":[{"start":{"line":727,"column":6},"end":{"line":727,"column":6}},{"start":{"line":727,"column":6},"end":{"line":727,"column":6}}]},"83":{"line":727,"type":"binary-expr","locations":[{"start":{"line":727,"column":10},"end":{"line":727,"column":42}},{"start":{"line":727,"column":46},"end":{"line":727,"column":61}}]},"84":{"line":751,"type":"if","locations":[{"start":{"line":751,"column":2},"end":{"line":751,"column":2}},{"start":{"line":751,"column":2},"end":{"line":751,"column":2}}]},"85":{"line":755,"type":"if","locations":[{"start":{"line":755,"column":6},"end":{"line":755,"column":6}},{"start":{"line":755,"column":6},"end":{"line":755,"column":6}}]},"86":{"line":755,"type":"binary-expr","locations":[{"start":{"line":755,"column":10},"end":{"line":755,"column":41}},{"start":{"line":755,"column":45},"end":{"line":755,"column":60}}]},"87":{"line":767,"type":"binary-expr","locations":[{"start":{"line":767,"column":34},"end":{"line":767,"column":73}},{"start":{"line":767,"column":77},"end":{"line":767,"column":106}}]},"88":{"line":768,"type":"binary-expr","locations":[{"start":{"line":768,"column":25},"end":{"line":768,"column":57}},{"start":{"line":768,"column":61},"end":{"line":768,"column":81}}]},"89":{"line":769,"type":"binary-expr","locations":[{"start":{"line":769,"column":31},"end":{"line":769,"column":60}},{"start":{"line":769,"column":64},"end":{"line":769,"column":90}}]},"90":{"line":770,"type":"binary-expr","locations":[{"start":{"line":770,"column":31},"end":{"line":770,"column":61}},{"start":{"line":770,"column":65},"end":{"line":770,"column":91}}]},"91":{"line":771,"type":"binary-expr","locations":[{"start":{"line":771,"column":31},"end":{"line":771,"column":61}},{"start":{"line":771,"column":65},"end":{"line":771,"column":91}}]},"92":{"line":775,"type":"if","locations":[{"start":{"line":775,"column":6},"end":{"line":775,"column":6}},{"start":{"line":775,"column":6},"end":{"line":775,"column":6}}]},"93":{"line":784,"type":"switch","locations":[{"start":{"line":785,"column":8},"end":{"line":787,"column":16}},{"start":{"line":788,"column":8},"end":{"line":790,"column":16}},{"start":{"line":791,"column":8},"end":{"line":793,"column":16}}]},"94":{"line":786,"type":"binary-expr","locations":[{"start":{"line":786,"column":45},"end":{"line":786,"column":60}},{"start":{"line":786,"column":64},"end":{"line":786,"column":65}}]},"95":{"line":789,"type":"binary-expr","locations":[{"start":{"line":789,"column":46},"end":{"line":789,"column":61}},{"start":{"line":789,"column":65},"end":{"line":789,"column":66}}]},"96":{"line":789,"type":"cond-expr","locations":[{"start":{"line":789,"column":113},"end":{"line":789,"column":119}},{"start":{"line":789,"column":122},"end":{"line":789,"column":127}}]},"97":{"line":798,"type":"if","locations":[{"start":{"line":798,"column":4},"end":{"line":798,"column":4}},{"start":{"line":798,"column":4},"end":{"line":798,"column":4}}]},"98":{"line":813,"type":"if","locations":[{"start":{"line":813,"column":4},"end":{"line":813,"column":4}},{"start":{"line":813,"column":4},"end":{"line":813,"column":4}}]},"99":{"line":824,"type":"binary-expr","locations":[{"start":{"line":824,"column":26},"end":{"line":824,"column":33}},{"start":{"line":824,"column":37},"end":{"line":824,"column":44}},{"start":{"line":824,"column":48},"end":{"line":824,"column":59}}]},"100":{"line":826,"type":"binary-expr","locations":[{"start":{"line":826,"column":26},"end":{"line":826,"column":34}},{"start":{"line":826,"column":38},"end":{"line":826,"column":46}},{"start":{"line":826,"column":50},"end":{"line":826,"column":61}}]},"101":{"line":827,"type":"if","locations":[{"start":{"line":827,"column":4},"end":{"line":827,"column":4}},{"start":{"line":827,"column":4},"end":{"line":827,"column":4}}]},"102":{"line":830,"type":"if","locations":[{"start":{"line":830,"column":9},"end":{"line":830,"column":9}},{"start":{"line":830,"column":9},"end":{"line":830,"column":9}}]},"103":{"line":843,"type":"binary-expr","locations":[{"start":{"line":843,"column":24},"end":{"line":843,"column":45}},{"start":{"line":843,"column":49},"end":{"line":843,"column":65}}]},"104":{"line":851,"type":"binary-expr","locations":[{"start":{"line":851,"column":16},"end":{"line":851,"column":37}},{"start":{"line":851,"column":41},"end":{"line":851,"column":57}}]},"105":{"line":871,"type":"if","locations":[{"start":{"line":871,"column":4},"end":{"line":871,"column":4}},{"start":{"line":871,"column":4},"end":{"line":871,"column":4}}]},"106":{"line":884,"type":"binary-expr","locations":[{"start":{"line":884,"column":19},"end":{"line":884,"column":40}},{"start":{"line":884,"column":44},"end":{"line":884,"column":60}}]},"107":{"line":885,"type":"binary-expr","locations":[{"start":{"line":885,"column":23},"end":{"line":885,"column":44}},{"start":{"line":885,"column":48},"end":{"line":885,"column":64}}]},"108":{"line":892,"type":"binary-expr","locations":[{"start":{"line":892,"column":16},"end":{"line":892,"column":37}},{"start":{"line":892,"column":41},"end":{"line":892,"column":57}}]},"109":{"line":906,"type":"if","locations":[{"start":{"line":906,"column":4},"end":{"line":906,"column":4}},{"start":{"line":906,"column":4},"end":{"line":906,"column":4}}]},"110":{"line":922,"type":"if","locations":[{"start":{"line":922,"column":6},"end":{"line":922,"column":6}},{"start":{"line":922,"column":6},"end":{"line":922,"column":6}}]},"111":{"line":932,"type":"if","locations":[{"start":{"line":932,"column":4},"end":{"line":932,"column":4}},{"start":{"line":932,"column":4},"end":{"line":932,"column":4}}]},"112":{"line":963,"type":"if","locations":[{"start":{"line":963,"column":4},"end":{"line":963,"column":4}},{"start":{"line":963,"column":4},"end":{"line":963,"column":4}}]},"113":{"line":963,"type":"binary-expr","locations":[{"start":{"line":963,"column":8},"end":{"line":963,"column":19}},{"start":{"line":963,"column":23},"end":{"line":963,"column":64}}]},"114":{"line":983,"type":"if","locations":[{"start":{"line":983,"column":4},"end":{"line":983,"column":4}},{"start":{"line":983,"column":4},"end":{"line":983,"column":4}}]},"115":{"line":983,"type":"binary-expr","locations":[{"start":{"line":983,"column":8},"end":{"line":983,"column":19}},{"start":{"line":983,"column":23},"end":{"line":983,"column":61}},{"start":{"line":983,"column":65},"end":{"line":983,"column":88}}]},"116":{"line":994,"type":"if","locations":[{"start":{"line":994,"column":2},"end":{"line":994,"column":2}},{"start":{"line":994,"column":2},"end":{"line":994,"column":2}}]},"117":{"line":996,"type":"if","locations":[{"start":{"line":996,"column":4},"end":{"line":996,"column":4}},{"start":{"line":996,"column":4},"end":{"line":996,"column":4}}]},"118":{"line":1000,"type":"if","locations":[{"start":{"line":1000,"column":2},"end":{"line":1000,"column":2}},{"start":{"line":1000,"column":2},"end":{"line":1000,"column":2}}]},"119":{"line":1008,"type":"if","locations":[{"start":{"line":1008,"column":6},"end":{"line":1008,"column":6}},{"start":{"line":1008,"column":6},"end":{"line":1008,"column":6}}]},"120":{"line":1031,"type":"if","locations":[{"start":{"line":1031,"column":8},"end":{"line":1031,"column":8}},{"start":{"line":1031,"column":8},"end":{"line":1031,"column":8}}]},"121":{"line":1070,"type":"if","locations":[{"start":{"line":1070,"column":8},"end":{"line":1070,"column":8}},{"start":{"line":1070,"column":8},"end":{"line":1070,"column":8}}]},"122":{"line":1078,"type":"if","locations":[{"start":{"line":1078,"column":8},"end":{"line":1078,"column":8}},{"start":{"line":1078,"column":8},"end":{"line":1078,"column":8}}]},"123":{"line":1082,"type":"binary-expr","locations":[{"start":{"line":1082,"column":25},"end":{"line":1082,"column":41}},{"start":{"line":1082,"column":45},"end":{"line":1082,"column":46}}]},"124":{"line":1084,"type":"if","locations":[{"start":{"line":1084,"column":8},"end":{"line":1084,"column":8}},{"start":{"line":1084,"column":8},"end":{"line":1084,"column":8}}]},"125":{"line":1088,"type":"if","locations":[{"start":{"line":1088,"column":8},"end":{"line":1088,"column":8}},{"start":{"line":1088,"column":8},"end":{"line":1088,"column":8}}]},"126":{"line":1091,"type":"if","locations":[{"start":{"line":1091,"column":8},"end":{"line":1091,"column":8}},{"start":{"line":1091,"column":8},"end":{"line":1091,"column":8}}]},"127":{"line":1091,"type":"binary-expr","locations":[{"start":{"line":1091,"column":12},"end":{"line":1091,"column":18}},{"start":{"line":1092,"column":12},"end":{"line":1092,"column":44}},{"start":{"line":1093,"column":12},"end":{"line":1093,"column":65}}]},"128":{"line":1096,"type":"if","locations":[{"start":{"line":1096,"column":10},"end":{"line":1096,"column":10}},{"start":{"line":1096,"column":10},"end":{"line":1096,"column":10}}]},"129":{"line":1103,"type":"if","locations":[{"start":{"line":1103,"column":8},"end":{"line":1103,"column":8}},{"start":{"line":1103,"column":8},"end":{"line":1103,"column":8}}]},"130":{"line":1103,"type":"binary-expr","locations":[{"start":{"line":1103,"column":12},"end":{"line":1103,"column":18}},{"start":{"line":1103,"column":22},"end":{"line":1103,"column":49}},{"start":{"line":1103,"column":53},"end":{"line":1103,"column":108}}]},"131":{"line":1108,"type":"if","locations":[{"start":{"line":1108,"column":8},"end":{"line":1108,"column":8}},{"start":{"line":1108,"column":8},"end":{"line":1108,"column":8}}]},"132":{"line":1123,"type":"binary-expr","locations":[{"start":{"line":1123,"column":14},"end":{"line":1123,"column":35}},{"start":{"line":1123,"column":39},"end":{"line":1123,"column":62}}]},"133":{"line":1134,"type":"if","locations":[{"start":{"line":1134,"column":4},"end":{"line":1134,"column":4}},{"start":{"line":1134,"column":4},"end":{"line":1134,"column":4}}]},"134":{"line":1139,"type":"if","locations":[{"start":{"line":1139,"column":4},"end":{"line":1139,"column":4}},{"start":{"line":1139,"column":4},"end":{"line":1139,"column":4}}]},"135":{"line":1139,"type":"binary-expr","locations":[{"start":{"line":1139,"column":8},"end":{"line":1139,"column":14}},{"start":{"line":1139,"column":19},"end":{"line":1139,"column":40}},{"start":{"line":1139,"column":44},"end":{"line":1139,"column":69}}]},"136":{"line":1156,"type":"if","locations":[{"start":{"line":1156,"column":2},"end":{"line":1156,"column":2}},{"start":{"line":1156,"column":2},"end":{"line":1156,"column":2}}]},"137":{"line":1156,"type":"binary-expr","locations":[{"start":{"line":1156,"column":6},"end":{"line":1156,"column":13}},{"start":{"line":1156,"column":17},"end":{"line":1156,"column":32}}]},"138":{"line":1159,"type":"if","locations":[{"start":{"line":1159,"column":2},"end":{"line":1159,"column":2}},{"start":{"line":1159,"column":2},"end":{"line":1159,"column":2}}]},"139":{"line":1159,"type":"binary-expr","locations":[{"start":{"line":1159,"column":6},"end":{"line":1159,"column":22}},{"start":{"line":1159,"column":26},"end":{"line":1159,"column":73}}]}},"code":["\"use strict\";","var util = require('util');","var events = require('events');","var types = require('../types');","var utils = require('../utils');","var errors = require('../errors');","var TableMetadata = require('./table-metadata');","var Aggregate = require('./aggregate');","var SchemaFunction = require('./schema-function');","var Index = require('./schema-index');","var MaterializedView = require('./materialized-view');","/**"," * @module metadata/schemaParser"," * @ignore"," */","","var _selectAllKeyspacesV1 = \"SELECT * FROM system.schema_keyspaces\";","var _selectSingleKeyspaceV1 = \"SELECT * FROM system.schema_keyspaces where keyspace_name = '%s'\";","var _selectAllKeyspacesV2 = \"SELECT * FROM system_schema.keyspaces\";","var _selectSingleKeyspaceV2 = \"SELECT * FROM system_schema.keyspaces where keyspace_name = '%s'\";","var _selectTableV1 = \"SELECT * FROM system.schema_columnfamilies WHERE keyspace_name='%s' AND columnfamily_name='%s'\";","var _selectTableV2 = \"SELECT * FROM system_schema.tables WHERE keyspace_name='%s' AND table_name='%s'\";","var _selectColumnsV1 = \"SELECT * FROM system.schema_columns WHERE keyspace_name='%s' AND columnfamily_name='%s'\";","var _selectColumnsV2 = \"SELECT * FROM system_schema.columns WHERE keyspace_name='%s' AND table_name='%s'\";","var _selectIndexesV2 = \"SELECT * FROM system_schema.indexes WHERE keyspace_name='%s' AND table_name='%s'\";","var _selectUdtV1 = \"SELECT * FROM system.schema_usertypes WHERE keyspace_name='%s' AND type_name='%s'\";","var _selectUdtV2 = \"SELECT * FROM system_schema.types WHERE keyspace_name='%s' AND type_name='%s'\";","var _selectFunctionsV1 = \"SELECT * FROM system.schema_functions WHERE keyspace_name = '%s' AND function_name = '%s'\";","var _selectFunctionsV2 = \"SELECT * FROM system_schema.functions WHERE keyspace_name = '%s' AND function_name = '%s'\";","var _selectAggregatesV1 = \"SELECT * FROM system.schema_aggregates WHERE keyspace_name = '%s' AND aggregate_name = '%s'\";","var _selectAggregatesV2 = \"SELECT * FROM system_schema.aggregates WHERE keyspace_name = '%s' AND aggregate_name = '%s'\";","var _selectMaterializedViewV2 = \"SELECT * FROM system_schema.views WHERE keyspace_name = '%s' AND view_name = '%s'\";","","/**"," * @abstract"," * @param {ControlConnection} cc"," * @constructor"," * @ignore"," */","function SchemaParser(cc) {","  this.cc = cc;","  this.selectTable = null;","  this.selectColumns = null;","  this.selectIndexes = null;","  this.selectUdt = null;","  this.selectAggregates = null;","  this.selectFunctions = null;","}","","/**"," * @param name"," * @param durableWrites"," * @param strategy"," * @param strategyOptions"," * @returns {{name, durableWrites, strategy, strategyOptions, tokenToReplica, udts, tables, functions, aggregates}|null}"," * @protected"," */","SchemaParser.prototype._createKeyspace = function (name, durableWrites, strategy, strategyOptions) {","  var ksInfo = {","    name: name,","    durableWrites: durableWrites,","    strategy: strategy,","    strategyOptions: strategyOptions,","    tokenToReplica: null,","    udts: {},","    tables: {},","    functions: {},","    aggregates: {},","    views: {}","  };","  ksInfo.tokenToReplica = getTokenToReplicaMapper(strategy, strategyOptions);","  return ksInfo;","};","","/**"," * @abstract"," * @param {String} name"," * @param {Function} callback"," */","SchemaParser.prototype.getKeyspace = function (name, callback) {","};","","/**"," * @abstract"," * @param {Boolean} waitReconnect"," * @param {Function} callback"," */","SchemaParser.prototype.getKeyspaces = function (waitReconnect, callback) {","};","","/**"," * @param {String} keyspaceName"," * @param {String} name"," * @param {Object} cache"," * @param {Function} callback"," */","SchemaParser.prototype.getTable = function (keyspaceName, name, cache, callback) {","  var tableInfo = cache && cache[name];","  if (!tableInfo) {","    tableInfo = new TableMetadata(name);","    if (cache) {","      cache[name] = tableInfo;","    }","  }","  if (tableInfo.loaded) {","    return callback(null, tableInfo);","  }","  tableInfo.once('load', callback);","  if (tableInfo.loading) {","    //It' already queued, it will be emitted","    return;","  }","  // its not cached and not being retrieved","  tableInfo.loading = true;","  var tableRow, columnRows, indexRows;","  var self = this;","  utils.series([","    function getTableRow(next) {","      var query = util.format(self.selectTable, keyspaceName, name);","      self.cc.query(query, function (err, response) {","        if (err) {","          return next(err);","        }","        tableRow = response.rows[0];","        next();","      });","    },","    function getColumnRows (next) {","      if (!tableRow) {","        return next(null, null, null);","      }","      var query = util.format(self.selectColumns, keyspaceName, name);","      self.cc.query(query, function (err, response) {","        if (err) {","          return next(err);","        }","        columnRows = response.rows;","        next();","      });","    },","    function getIndexes(next) {","      if (!tableRow || !self.selectIndexes) {","        //either the table does not exists or it does not support indexes schema table","        return next();","      }","      var query = util.format(self.selectIndexes, keyspaceName, name);","      self.cc.query(query, function (err, response) {","        if (err) {","          return next(err);","        }","        indexRows = response.rows;","        next();","      });","    }","  ], function afterQuery (err) {","    if (err || !tableRow) {","      tableInfo.loading = false;","      return tableInfo.emit('load', err, null);","    }","    self._parseTableOrView(tableInfo, tableRow, columnRows, indexRows, function (err) {","      tableInfo.loading = false;","      tableInfo.loaded = !err;","      tableInfo.emit('load', err, tableInfo);","    });","  });","};","","/**"," * @param {String} keyspaceName"," * @param {String} name"," * @param {Object} cache"," * @param {Function} callback"," */","SchemaParser.prototype.getUdt = function (keyspaceName, name, cache, callback) {","  var udtInfo = cache && cache[name];","  if (!udtInfo) {","    udtInfo = new events.EventEmitter();","    if (cache) {","      cache[name] = udtInfo;","    }","    udtInfo.setMaxListeners(0);","    udtInfo.loading = false;","    udtInfo.name = name;","    udtInfo.fields = null;","  }","  if (udtInfo.fields) {","    return callback(null, udtInfo);","  }","  udtInfo.once('load', callback);","  if (udtInfo.loading) {","    //It' already queued, it will be emitted","    return;","  }","  udtInfo.loading = true;","  //it is not cached, try to query for it","  var query = util.format(this.selectUdt, keyspaceName, name);","  var self = this;","  this.cc.query(query, function (err, response) {","    if (err) {","      return udtInfo.emit('load', err);","    }","    var row = response.rows[0];","    if (!row) {","      udtInfo.loading = false;","      return udtInfo.emit('load', null, null);","    }","    self._parseUdt(udtInfo, row, function (err) {","      udtInfo.loading = false;","      if (err) {","        return udtInfo.emit('load', err);","      }","      return udtInfo.emit('load', null, udtInfo);","    });","  });","};","","/**"," * Parses the udt information from the row"," * @param udtInfo"," * @param {Row} row"," * @param {Function} callback Callback to be invoked with the err and {{fields: Array}}|null"," * @abstract"," */","SchemaParser.prototype._parseUdt = function (udtInfo, row, callback) {","};","","//noinspection JSValidateJSDoc","/**"," * Builds the metadata based on the table and column rows"," * @abstract"," * @param {module:metadata~TableMetadata} tableInfo"," * @param {Row} tableRow"," * @param {Array.<Row>} columnRows"," * @param {Array.<Row>} indexRows"," * @param {Function} callback"," * @throws {Error}"," */","SchemaParser.prototype._parseTableOrView = function (tableInfo, tableRow, columnRows, indexRows, callback) {","};","","","/**"," * @abstract"," * @param {String} keyspaceName"," * @param {String} name"," * @param {Object} cache"," * @param {Function} callback"," */","SchemaParser.prototype.getMaterializedView = function (keyspaceName, name, cache, callback) {","","};","","/**"," * @param {String} keyspaceName"," * @param {String} name"," * @param {Boolean} aggregate"," * @param {Object} cache"," * @param {Function} callback"," */","SchemaParser.prototype.getFunctions = function (keyspaceName, name, aggregate, cache, callback) {","  /** @type {String} */","  var query = this.selectFunctions;","  var parser = this._parseFunction.bind(this);","  if (aggregate) {","    query = this.selectAggregates;","    parser = this._parseAggregate.bind(this);","  }","  //if not already loaded","  //get all functions with that name","  //cache it by name and, within name, by signature","  var functionsInfo = cache && cache[name];","  if (!functionsInfo) {","    functionsInfo = new events.EventEmitter();","    if (cache) {","      cache[name] = functionsInfo;","    }","    functionsInfo.setMaxListeners(0);","  }","  if (functionsInfo.values) {","    return callback(null, functionsInfo.values);","  }","  functionsInfo.once('load', callback);","  if (functionsInfo.loading) {","    //It' already queued, it will be emitted","    return;","  }","  functionsInfo.loading = true;","  //it is not cached, try to query for it","  query = util.format(query, keyspaceName, name);","  this.cc.query(query, function (err, response) {","    functionsInfo.loading = false;","    if (err || response.rows.length === 0) {","      return functionsInfo.emit('load', err, null);","    }","    if (response.rows.length > 0) {","      functionsInfo.values = {};","    }","    utils.each(response.rows, function (row, next) {","      parser(row, function (err, func) {","        if (err) {","          return next(err);","        }","        functionsInfo.values['(' + func.signature.join(',') + ')'] = func;","        next();","      });","    }, function (err) {","      if (err) {","        return functionsInfo.emit('load', err);","      }","      functionsInfo.emit('load', null, functionsInfo.values);","    });","  });","};","","/**"," * @abstract"," * @param {Row} row"," * @param {Function} callback"," */","SchemaParser.prototype._parseAggregate = function (row, callback) {","};","","/**"," * @abstract"," * @param {Row} row"," * @param {Function} callback"," */","SchemaParser.prototype._parseFunction = function (row, callback) {","};","","/**"," * Used to parse schema information for Cassandra versions 1.2.x, and 2.x"," * @param {ControlConnection} cc"," * @constructor"," * @ignore"," */","function SchemaParserV1(cc) {","  SchemaParser.call(this, cc);","  this.selectTable = _selectTableV1;","  this.selectColumns = _selectColumnsV1;","  this.selectUdt = _selectUdtV1;","  this.selectAggregates = _selectAggregatesV1;","  this.selectFunctions = _selectFunctionsV1;","}","","util.inherits(SchemaParserV1, SchemaParser);","","/** @override */","SchemaParserV1.prototype.getKeyspaces = function (waitReconnect, callback) {","  var self = this;","  var keyspaces = {};","  this.cc.query(_selectAllKeyspacesV1, waitReconnect, function (err, result) {","    if (err) {","      return callback(err);","    }","    for (var i = 0; i < result.rows.length; i++) {","      var row = result.rows[i];","      var ksInfo = self._createKeyspace(","        row['keyspace_name'],","        row['durable_writes'],","        row['strategy_class'],","        JSON.parse(row['strategy_options']));","      keyspaces[ksInfo.name] = ksInfo;","    }","    callback(null, keyspaces);","  });","};","","/** @override */","SchemaParserV1.prototype.getKeyspace = function (name, callback) {","  var self = this;","  this.cc.query(util.format(_selectSingleKeyspaceV1, name), function (err, result) {","    if (err) {","      return callback(err);","    }","    var row = result.rows[0];","    if (!row) {","      return callback(null, null);","    }","    callback(null, self._createKeyspace(","      row['keyspace_name'],","      row['durable_writes'],","      row['strategy_class'],","      JSON.parse(row['strategy_options'])));","  });","};","","//noinspection JSUnusedLocalSymbols","/** @override */","SchemaParserV1.prototype._parseTableOrView = function (tableInfo, tableRow, columnRows, indexRows, callback) {","  var i, c, name, types;","  var encoder = this.cc.getEncoder();","  var columnsKeyed = {};","  var partitionKeys = [];","  var clusteringKeys = [];","  tableInfo.bloomFilterFalsePositiveChance = tableRow['bloom_filter_fp_chance'];","  tableInfo.caching = tableRow['caching'];","  tableInfo.comment = tableRow['comment'];","  tableInfo.compactionClass = tableRow['compaction_strategy_class'];","  tableInfo.compactionOptions = JSON.parse(tableRow['compaction_strategy_options']);","  tableInfo.compression = JSON.parse(tableRow['compression_parameters']);","  tableInfo.gcGraceSeconds = tableRow['gc_grace_seconds'];","  tableInfo.localReadRepairChance = tableRow['local_read_repair_chance'];","  tableInfo.readRepairChance = tableRow['read_repair_chance'];","  tableInfo.populateCacheOnFlush = tableRow['populate_io_cache_on_flush'] || tableInfo.populateCacheOnFlush;","  tableInfo.memtableFlushPeriod = tableRow['memtable_flush_period_in_ms'] || tableInfo.memtableFlushPeriod;","  tableInfo.defaultTtl = tableRow['default_time_to_live'] || tableInfo.defaultTtl;","  tableInfo.speculativeRetry = tableRow['speculative_retry'] || tableInfo.speculativeRetry;","  tableInfo.indexInterval = tableRow['index_interval'] || tableInfo.indexInterval;","  if (typeof tableRow['min_index_interval'] !== 'undefined') {","    //Cassandra 2.1+","    tableInfo.minIndexInterval = tableRow['min_index_interval'] || tableInfo.minIndexInterval;","    tableInfo.maxIndexInterval = tableRow['max_index_interval'] || tableInfo.maxIndexInterval;","  }","  else {","    //set to null","    tableInfo.minIndexInterval = null;","    tableInfo.maxIndexInterval = null;","  }","  if (typeof tableRow['replicate_on_write'] !== 'undefined') {","    //leave the default otherwise","    tableInfo.replicateOnWrite = tableRow['replicate_on_write'];","  }","  tableInfo.columns = [];","  try {","    (function parseColumns() {","      //function context","      for (i = 0; i < columnRows.length; i++) {","        var row = columnRows[i];","        var type = encoder.parseFqTypeName(row['validator']);","        c = {","          name: row['column_name'],","          type: type","        };","        tableInfo.columns.push(c);","        columnsKeyed[c.name] = c;","        switch (row['type']) {","          case 'partition_key':","            partitionKeys.push({c: c, index: (row['component_index'] || 0)});","            break;","          case 'clustering_key':","            clusteringKeys.push({","              c: c,","              index: (row['component_index'] || 0),","              order: c.type.options.reversed ? 'DESC' : 'ASC'","            });","            break;","        }","      }","    })();","    if (partitionKeys.length > 0) {","      tableInfo.partitionKeys = partitionKeys.sort(utils.propCompare('index')).map(function (item) {","        return item.c;","      });","      clusteringKeys.sort(utils.propCompare('index'));","      tableInfo.clusteringKeys = clusteringKeys.map(function (item) {","        return item.c;","      });","      tableInfo.clusteringOrder = clusteringKeys.map(function (item) {","        return item.order;","      });","    }","    //In C* 1.2, keys are not stored on the schema_columns table","    var keysStoredInTableRow = (tableInfo.partitionKeys.length === 0);","    if (keysStoredInTableRow && tableRow['key_aliases']) {","      //In C* 1.2, keys are not stored on the schema_columns table","      partitionKeys = JSON.parse(tableRow['key_aliases']);","      types = encoder.parseKeyTypes(tableRow['key_validator']).types;","      for (i = 0; i < partitionKeys.length; i++) {","        name = partitionKeys[i];","        c = columnsKeyed[name];","        if (!c) {","          c = {","            name: name,","            type: types[i]","          };","          tableInfo.columns.push(c);","        }","        tableInfo.partitionKeys.push(c);","      }","    }","    var comparator = encoder.parseKeyTypes(tableRow['comparator']);","    if (keysStoredInTableRow && tableRow['column_aliases']) {","      clusteringKeys = JSON.parse(tableRow['column_aliases']);","      for (i = 0; i < clusteringKeys.length; i++) {","        name = clusteringKeys[i];","        c = columnsKeyed[name];","        if (!c) {","          c = {","            name: name,","            type: comparator.types[i]","          };","          tableInfo.columns.push(c);","        }","        tableInfo.clusteringKeys.push(c);","        tableInfo.clusteringOrder.push(c.type.options.reversed ? 'DESC' : 'ASC');","      }","    }","    tableInfo.isCompact = !!tableRow['is_dense'];","    if (!tableInfo.isCompact) {","      //is_dense column does not exist in previous versions of Cassandra","      //also, compact pk, ck and val appear as is_dense false","      // clusteringKeys != comparator types - 1","      // or not composite (comparator)","      tableInfo.isCompact = (","        //clustering keys are not marked as composite","        !comparator.isComposite ||","          //only 1 column not part of the partition or clustering keys","        (!comparator.hasCollections && tableInfo.clusteringKeys.length !== comparator.types.length - 1)","      );","    }","    name = tableRow['value_alias'];","    if (tableInfo.isCompact && name && !columnsKeyed[name]) {","      //additional column in C* 1.2 as value_alias","      c = {","        name: name,","        type: encoder.parseFqTypeName(tableRow['default_validator'])","      };","      tableInfo.columns.push(c);","      columnsKeyed[name] = c;","    }","    tableInfo.columnsByName = columnsKeyed;","    tableInfo.indexes = Index.fromColumnRows(columnRows, tableInfo.columnsByName);","  }","  catch (err) {","    return callback(err);","  }","  //All the tableInfo parsing in V1 is sync, it uses a callback because the super defines one","  //to support other versions.","  callback();","};","","/** @override */","SchemaParserV1.prototype.getMaterializedView = function (keyspaceName, name, cache, callback) {","  callback(new errors.NotSupportedError('Materialized views are not supported on Cassandra versions below 3.0'));","};","","/** @override */","SchemaParserV1.prototype._parseAggregate = function (row, callback) {","  var encoder = this.cc.getEncoder();","  var aggregate = new Aggregate();","  aggregate.name = row['aggregate_name'];","  aggregate.keyspaceName = row['keyspace_name'];","  aggregate.signature = row['signature'] || utils.emptyArray;","  aggregate.stateFunction = row['state_func'];","  aggregate.finalFunction = row['final_func'];","  aggregate.initConditionRaw = row['initcond'];","  try {","    aggregate.argumentTypes = (row['argument_types'] || utils.emptyArray).map(function (name) {","      return encoder.parseFqTypeName(name);","    });","    aggregate.stateType = encoder.parseFqTypeName(row['state_type']);","    var initConditionValue = encoder.decode(aggregate.initConditionRaw, aggregate.stateType);","    if (initConditionValue !== null && typeof initConditionValue !== 'undefined') {","      aggregate.initCondition = initConditionValue.toString();","    }","    aggregate.returnType = encoder.parseFqTypeName(row['return_type']);","  }","  catch (err) {","    return callback(err);","  }","  callback(null, aggregate);","};","","/** @override */","SchemaParserV1.prototype._parseFunction = function (row, callback) {","  var encoder = this.cc.getEncoder();","  var func = new SchemaFunction();","  func.name = row['function_name'];","  func.keyspaceName = row['keyspace_name'];","  func.signature = row['signature'] || utils.emptyArray;","  func.argumentNames = row['argument_names'] || utils.emptyArray;","  func.body = row['body'];","  func.calledOnNullInput = row['called_on_null_input'];","  func.language = row['language'];","  try {","    func.argumentTypes = (row['argument_types'] || utils.emptyArray).map(function (name) {","      return encoder.parseFqTypeName(name);","    });","    func.returnType = encoder.parseFqTypeName(row['return_type']);","  }","  catch (err) {","    return callback(err);","  }","  callback(null, func);","};","","/** @override */","SchemaParserV1.prototype._parseUdt = function (udtInfo, row, callback) {","  var encoder = this.cc.getEncoder();","  var fieldNames = row['field_names'];","  var fieldTypes = row['field_types'];","  var fields = new Array(fieldNames.length);","  try {","    for (var i = 0; i < fieldNames.length; i++) {","      fields[i] = {","        name: fieldNames[i],","        type: encoder.parseFqTypeName(fieldTypes[i])","      };","    }","  }","  catch (err) {","    return callback(err);","  }","  udtInfo.fields = fields;","  callback(null, udtInfo);","};","","/**"," * Used to parse schema information for Cassandra versions 3.x and above"," * @param {ControlConnection} cc The control connection to be used"," * @param {Function} udtResolver The function to be used to retrieve the udts."," * @constructor"," * @ignore"," */","function SchemaParserV2(cc, udtResolver) {","  SchemaParser.call(this, cc);","  this.udtResolver = udtResolver;","  this.selectTable = _selectTableV2;","  this.selectColumns = _selectColumnsV2;","  this.selectUdt = _selectUdtV2;","  this.selectAggregates = _selectAggregatesV2;","  this.selectFunctions = _selectFunctionsV2;","  this.selectIndexes = _selectIndexesV2;","}","","util.inherits(SchemaParserV2, SchemaParser);","","/** @override */","SchemaParserV2.prototype.getKeyspaces = function (waitReconnect, callback) {","  var self = this;","  var keyspaces = {};","  this.cc.query(_selectAllKeyspacesV2, waitReconnect, function (err, result) {","    if (err) {","      return callback(err);","    }","    for (var i = 0; i < result.rows.length; i++) {","      var ksInfo = self._parseKeyspace(result.rows[i]);","      keyspaces[ksInfo.name] = ksInfo;","    }","    callback(null, keyspaces);","  });","};","","/** @override */","SchemaParserV2.prototype.getKeyspace = function (name, callback) {","  var self = this;","  this.cc.query(util.format(_selectSingleKeyspaceV2, name), function (err, result) {","    if (err) {","      return callback(err);","    }","    var row = result.rows[0];","    if (!row) {","      return callback(null, null);","    }","    callback(null, self._parseKeyspace(row));","  });","};","","/** @override */","SchemaParserV2.prototype.getMaterializedView = function (keyspaceName, name, cache, callback) {","  var viewInfo = cache && cache[name];","  if (!viewInfo) {","    viewInfo = new MaterializedView(name);","    if (cache) {","      cache[name] = viewInfo;","    }","  }","  if (viewInfo.loaded) {","    return callback(null, viewInfo);","  }","  viewInfo.once('load', callback);","  if (viewInfo.loading) {","    //It' already queued, it will be emitted","    return;","  }","  viewInfo.loading = true;","  var tableRow, columnRows;","  //it is not cached, try to query for it","  var self = this;","  utils.series([","    function getTableRow(next) {","      var query = util.format(_selectMaterializedViewV2, keyspaceName, name);","      self.cc.query(query, function (err, response) {","        if (err) {","          return next(err);","        }","        tableRow = response.rows[0];","        next();","      });","    },","    function getColumnRows (next) {","      if (!tableRow) {","        return next();","      }","      var query = util.format(self.selectColumns, keyspaceName, name);","      self.cc.query(query, function (err, response) {","        if (err) {","          return next(err);","        }","        columnRows = response.rows;","        next();","      });","    }","  ], function afterQuery (err) {","    viewInfo.loading = false;","    if (err || !tableRow) {","      return viewInfo.emit('load', err, null);","    }","    self._parseTableOrView(viewInfo, tableRow, columnRows, null, function (err) {","      viewInfo.loading = false;","      viewInfo.loaded = !err;","      viewInfo.emit('load', err, viewInfo);","    });","  });","","};","","SchemaParserV2.prototype._parseKeyspace = function (row) {","  var replication = row['replication'];","  var strategy;","  var strategyOptions;","  if (replication) {","    strategy = replication['class'];","    strategyOptions = {};","    for (var key in replication) {","      if (!replication.hasOwnProperty(key) || key === 'class') {","        continue;","      }","      strategyOptions[key] = replication[key];","    }","  }","  return this._createKeyspace(","    row['keyspace_name'],","    row['durable_writes'],","    strategy,","    strategyOptions);","};","","/** @override */","SchemaParserV2.prototype._parseTableOrView = function (tableInfo, tableRow, columnRows, indexRows, callback) {","  var encoder = this.cc.getEncoder();","  var columnsKeyed = {};","  var partitionKeys = [];","  var clusteringKeys = [];","  var isView = tableInfo instanceof MaterializedView;","  tableInfo.bloomFilterFalsePositiveChance = tableRow['bloom_filter_fp_chance'];","  tableInfo.caching = JSON.stringify(tableRow['caching']);","  tableInfo.comment = tableRow['comment'];","  var compaction = tableRow['compaction'];","  if (compaction) {","    tableInfo.compactionOptions = {};","    tableInfo.compactionClass = compaction['class'];","    for (var key in compaction) {","      if (!compaction.hasOwnProperty(key) || key === 'class') {","        continue;","      }","      tableInfo.compactionOptions[key] = compaction[key];","    }","  }","  tableInfo.compression = tableRow['compression'];","  tableInfo.gcGraceSeconds = tableRow['gc_grace_seconds'];","  tableInfo.localReadRepairChance = tableRow['dclocal_read_repair_chance'];","  tableInfo.readRepairChance = tableRow['read_repair_chance'];","  tableInfo.extensions = tableRow['extensions'];","  tableInfo.crcCheckChance = tableRow['crc_check_chance'];","  tableInfo.memtableFlushPeriod = tableRow['memtable_flush_period_in_ms'] || tableInfo.memtableFlushPeriod;","  tableInfo.defaultTtl = tableRow['default_time_to_live'] || tableInfo.defaultTtl;","  tableInfo.speculativeRetry = tableRow['speculative_retry'] || tableInfo.speculativeRetry;","  tableInfo.minIndexInterval = tableRow['min_index_interval'] || tableInfo.minIndexInterval;","  tableInfo.maxIndexInterval = tableRow['max_index_interval'] || tableInfo.maxIndexInterval;","  var self = this;","  utils.map(columnRows, function (row, next) {","    encoder.parseTypeName(tableRow['keyspace_name'], row['type'], 0, null, self.udtResolver, function (err, type) {","      if (err) {","        return next(err);","      }","      var c = {","        name: row['column_name'],","        type: type,","        isStatic: false","      };","      columnsKeyed[c.name] = c;","      switch (row['kind']) {","        case 'partition_key':","          partitionKeys.push({ c: c, index: (row['position'] || 0)});","          break;","        case 'clustering':","          clusteringKeys.push({ c: c, index: (row['position'] || 0), order: row['clustering_order'] === 'desc' ? 'DESC' : 'ASC'});","          break;","        case 'static':","          c.isStatic = true;","          break;","      }","      next(null, c);","    });","  }, function (err, columns) {","    if (err) {","      return callback(err);","    }","    tableInfo.columns = columns;","    tableInfo.columnsByName = columnsKeyed;","    tableInfo.partitionKeys = partitionKeys.sort(utils.propCompare('index')).map(function (item) {","      return item.c;","    });","    clusteringKeys.sort(utils.propCompare('index'));","    tableInfo.clusteringKeys = clusteringKeys.map(function (item) {","      return item.c;","    });","    tableInfo.clusteringOrder = clusteringKeys.map(function (item) {","      return item.order;","    });","    if (isView) {","      tableInfo.tableName = tableRow['base_table_name'];","      tableInfo.whereClause = tableRow['where_clause'];","      tableInfo.includeAllColumns = tableRow['include_all_columns'];","      return callback();","    }","    tableInfo.indexes = Index.fromRows(indexRows);","    var flags = tableRow['flags'];","    var isDense = flags.indexOf('dense') >= 0;","    var isSuper = flags.indexOf('super') >= 0;","    var isCompound = flags.indexOf('compound') >= 0;","    tableInfo.isCompact = isSuper || isDense || !isCompound;","    //remove the columns related to Thrift","    var isStaticCompact = !isSuper && !isDense && !isCompound;","    if(isStaticCompact) {","      pruneStaticCompactTableColumns(tableInfo);","    }","    else if (isDense) {","      pruneDenseTableColumns(tableInfo);","    }","    callback();","  });","};","","/** @override */","SchemaParserV2.prototype._parseAggregate = function (row, callback) {","  var encoder = this.cc.getEncoder();","  var aggregate = new Aggregate();","  aggregate.name = row['aggregate_name'];","  aggregate.keyspaceName = row['keyspace_name'];","  aggregate.signature = row['argument_types'] || utils.emptyArray;","  aggregate.stateFunction = row['state_func'];","  aggregate.finalFunction = row['final_func'];","  aggregate.initConditionRaw = row['initcond'];","  aggregate.initCondition = aggregate.initConditionRaw;","  var self = this;","  utils.series([","    function parseArguments(next) {","      utils.map(row['argument_types'] || utils.emptyArray, function (name, mapNext) {","        encoder.parseTypeName(row['keyspace_name'], name, 0, null, self.udtResolver, mapNext);","      }, function (err, result) {","        aggregate.argumentTypes = result;","        next(err);","      });","    },","    function parseStateType(next) {","      encoder.parseTypeName(row['keyspace_name'], row['state_type'], 0, null, self.udtResolver, function (err, type) {","        aggregate.stateType = type;","        next(err);","      });","    },","    function parseReturnType(next) {","      encoder.parseTypeName(row['keyspace_name'], row['return_type'], 0, null, self.udtResolver, function (err, type) {","        aggregate.returnType = type;","        next(err);","      });","    }","  ], function (err) {","    if (err) {","      return callback(err);","    }","    callback(null, aggregate);","  });","};","","/** @override */","SchemaParserV2.prototype._parseFunction = function (row, callback) {","  var encoder = this.cc.getEncoder();","  var func = new SchemaFunction();","  func.name = row['function_name'];","  func.keyspaceName = row['keyspace_name'];","  func.signature = row['argument_types'] || utils.emptyArray;","  func.argumentNames = row['argument_names'] || utils.emptyArray;","  func.body = row['body'];","  func.calledOnNullInput = row['called_on_null_input'];","  func.language = row['language'];","  var self = this;","  utils.series([","    function parseArguments(next) {","      utils.map(row['argument_types'] || utils.emptyArray, function (name, mapNext) {","        encoder.parseTypeName(row['keyspace_name'], name, 0, null, self.udtResolver, mapNext);","      }, function (err, result) {","        func.argumentTypes = result;","        next(err);","      });","    },","    function parseReturnType(next) {","      encoder.parseTypeName(row['keyspace_name'], row['return_type'], 0, null, self.udtResolver, function (err, type) {","        func.returnType = type;","        next(err);","      });","    }","  ], function (err) {","    if (err) {","      return callback(err);","    }","    callback(null, func);","  });","};","","/** @override */","SchemaParserV2.prototype._parseUdt = function (udtInfo, row, callback) {","  var encoder = this.cc.getEncoder();","  var fieldTypes = row['field_types'];","  var keyspace = row['keyspace_name'];","  var fields = new Array(fieldTypes.length);","  var self = this;","  utils.forEachOf(row['field_names'], function (name, i, next) {","    encoder.parseTypeName(keyspace, fieldTypes[i], 0, null, self.udtResolver, function (err, type) {","      if (err) {","        return next(err);","      }","      fields[i] = {","        name: name,","        type: type","      };","      next();","    });","  }, function (err) {","    if (err) {","      return callback(err);","    }","    udtInfo.fields = fields;","    callback(null, udtInfo);","  });","};","","//noinspection JSValidateJSDoc","/**"," * Upon migration from thrift to CQL, we internally create a pair of surrogate clustering/regular columns"," * for compact static tables. These columns shouldn't be exposed to the user but are currently returned by C*."," * We also need to remove the static keyword for all other columns in the table."," * @param {module:metadata~TableMetadata} tableInfo","*/","function pruneStaticCompactTableColumns(tableInfo) {","  var i;","  var c;","  //remove \"column1 text\" clustering column","  for (i = 0; i < tableInfo.clusteringKeys.length; i++) {","    c = tableInfo.clusteringKeys[i];","    var index = tableInfo.columns.indexOf(c);","    tableInfo.columns.splice(index, 1);","    delete tableInfo.columnsByName[c.name];","  }","  tableInfo.clusteringKeys = utils.emptyArray;","  tableInfo.clusteringOrder = utils.emptyArray;","  //remove regular columns and set the static columns to non-static","  i = tableInfo.columns.length;","  while (i--) {","    c = tableInfo.columns[i];","    if (!c.isStatic && tableInfo.partitionKeys.indexOf(c) === -1) {","      // remove \"value blob\" regular column","      tableInfo.columns.splice(i, 1);","      delete tableInfo.columnsByName[c.name];","      continue;","    }","    c.isStatic = false;","  }","}","","//noinspection JSValidateJSDoc","/**"," * Upon migration from thrift to CQL, we internally create a surrogate column \"value\" of type custom."," * This column shouldn't be exposed to the user but is currently returned by C*."," * @param {module:metadata~TableMetadata} tableInfo"," */","function pruneDenseTableColumns(tableInfo) {","  var i = tableInfo.columns.length;","  while (i--) {","    var c = tableInfo.columns[i];","    if (!c.isStatic && c.type.code === types.dataTypes.custom && c.type.info === 'empty') {","      // remove \"value blob\" regular column","      tableInfo.columns.splice(i, 1);","      delete tableInfo.columnsByName[c.name];","      continue;","    }","    c.isStatic = false;","  }","}","","function getTokenToReplicaMapper(strategy, strategyOptions) {","  if (/SimpleStrategy$/.test(strategy)) {","    var rf = parseInt(strategyOptions['replication_factor'], 10);","    if (rf > 1) {","      return getTokenToReplicaSimpleMapper(rf);","    }","  }","  if (/NetworkTopologyStrategy$/.test(strategy)) {","    //noinspection JSUnresolvedVariable","    return getTokenToReplicaNetworkMapper(strategyOptions);","  }","  //default, wrap in an Array","  return (function noStrategy(tokenizer, ring, primaryReplicas) {","    var replicas = {};","    for (var key in primaryReplicas) {","      if (!primaryReplicas.hasOwnProperty(key)) {","        continue;","      }","      replicas[key] = [primaryReplicas[key]];","    }","    return replicas;","  });","}","","/**"," * @param {Number} replicationFactor"," * @returns {function}"," */","function getTokenToReplicaSimpleMapper(replicationFactor) {","  return (function tokenSimpleStrategy(tokenizer, ring, primaryReplicas) {","    var rf = Math.min(replicationFactor, ring.length);","    var replicas = {};","    for (var i = 0; i < ring.length; i++) {","      var token = ring[i];","      var key = tokenizer.stringify(token);","      var tokenReplicas = [primaryReplicas[key]];","      for (var j = 1; j < rf; j++) {","        var nextReplicaIndex = i + j;","        if (nextReplicaIndex >= ring.length) {","          //circle back","          nextReplicaIndex = nextReplicaIndex % ring.length;","        }","        var nextReplica = primaryReplicas[tokenizer.stringify(ring[nextReplicaIndex])];","        tokenReplicas.push(nextReplica);","      }","      replicas[key] = tokenReplicas;","    }","    return replicas;","  });","}","","/**"," * @param {Object} replicationFactors"," * @returns {Function}"," * @private"," */","function getTokenToReplicaNetworkMapper(replicationFactors) {","  //                A(DC1)","  //","  //           H         B(DC2)","  //                |","  //      G       --+--       C(DC1)","  //                |","  //           F         D(DC2)","  //","  //                E(DC1)","  return (function tokenNetworkStrategy(tokenizer, ring, primaryReplicas, datacenters) {","    var replicas = {};","    for (var i = 0; i < ring.length; i++) {","      var token = ring[i];","      var key = tokenizer.stringify(token);","      var tokenReplicas = [];","      var replicasByDc = {};","      var racksPlaced = {};","      var skippedHosts = [];","      for (var j = 0; j < ring.length; j++) {","        var nextReplicaIndex = i + j;","        if (nextReplicaIndex >= ring.length) {","          //circle back","          nextReplicaIndex = nextReplicaIndex % ring.length;","        }","        var h = primaryReplicas[tokenizer.stringify(ring[nextReplicaIndex])];","        var dc = h.datacenter;","        //Check if the next replica belongs to one of the targeted dcs","        var dcRf = parseInt(replicationFactors[dc], 10);","        if (!dcRf) {","          continue;","        }","        dcRf = Math.min(dcRf, datacenters[dc].hostLength);","        var dcReplicas = replicasByDc[dc] || 0;","        //Amount of replicas per dc is greater than rf or the amount of host in the datacenter","        if (dcReplicas >= dcRf) {","          continue;","        }","        var racksPlacedInDc = racksPlaced[dc];","        if (!racksPlacedInDc) {","          racksPlacedInDc = racksPlaced[dc] = new utils.HashSet();","        }","        if (h.rack &&","            racksPlacedInDc.contains(h.rack) &&","            racksPlacedInDc.length < datacenters[dc].racks.length) {","          // We already selected a replica for this rack","          // Skip until replicas in other racks are added","          if (skippedHosts.length < dcRf - dcReplicas) {","            skippedHosts.push(h);","          }","          continue;","        }","        replicasByDc[h.datacenter] = ++dcReplicas;","        tokenReplicas.push(h);","        if (h.rack && racksPlacedInDc.add(h.rack) && racksPlacedInDc.length === datacenters[dc].racks.length) {","          // We finished placing all replicas for all racks in this dc","          // Add the skipped hosts","          replicasByDc[dc] += addSkippedHosts(dcRf, dcReplicas, tokenReplicas, skippedHosts);","        }","        if (isDoneForToken(replicationFactors, datacenters, replicasByDc)) {","          break;","        }","      }","      replicas[key] = tokenReplicas;","    }","    return replicas;","  });","}","","/**"," * @returns {Number} The number of skipped hosts added."," */","function addSkippedHosts(dcRf, dcReplicas, tokenReplicas, skippedHosts) {","  var i;","  for (i = 0; i < dcRf - dcReplicas && i < skippedHosts.length; i++) {","    tokenReplicas.push(skippedHosts[i]);","  }","  return i;","}","","function isDoneForToken(replicationFactors, datacenters, replicasByDc) {","  var keys = Object.keys(replicationFactors);","  for (var i = 0; i < keys.length; i++) {","    var dcName = keys[i];","    var dc = datacenters[dcName];","    if (!dc) {","      // A DC is included in the RF but the DC does not exist in the topology","      continue;","    }","    var rf = Math.min(parseInt(replicationFactors[dcName], 10), dc.hostLength);","    if (rf > 0 && (!replicasByDc[dcName] || replicasByDc[dcName] < rf)) {","      return false;","    }","  }","  return true;","}","/**"," * Creates a new instance if the currentInstance is not valid for the"," * provided Cassandra version"," * @param {ControlConnection} cc The control connection to be used"," * @param {Function} udtResolver The function to be used to retrieve the udts."," * @param {Array.<Number>} [version] The cassandra version"," * @param {SchemaParser} [currentInstance] The current instance"," * @returns {SchemaParser}"," */","function getByVersion(cc, udtResolver, version, currentInstance) {","  var parserConstructor = SchemaParserV1;","  if (version && version[0] >= 3) {","    parserConstructor = SchemaParserV2;","  }","  if (!currentInstance || !(currentInstance instanceof parserConstructor)){","    return new parserConstructor(cc, udtResolver);","  }","  return currentInstance;","}","","exports.getByVersion = getByVersion;"],"l":{"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"40":1,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"58":1,"59":0,"71":0,"72":0,"80":1,"88":1,"97":1,"98":0,"99":0,"100":0,"101":0,"102":0,"105":0,"106":0,"108":0,"109":0,"111":0,"114":0,"115":0,"116":0,"117":0,"119":0,"120":0,"121":0,"122":0,"124":0,"125":0,"129":0,"130":0,"132":0,"133":0,"134":0,"135":0,"137":0,"138":0,"142":0,"144":0,"146":0,"147":0,"148":0,"149":0,"151":0,"152":0,"156":0,"157":0,"158":0,"160":0,"161":0,"162":0,"163":0,"174":1,"175":0,"176":0,"177":0,"178":0,"179":0,"181":0,"182":0,"183":0,"184":0,"186":0,"187":0,"189":0,"190":0,"192":0,"194":0,"196":0,"197":0,"198":0,"199":0,"200":0,"202":0,"203":0,"204":0,"205":0,"207":0,"208":0,"209":0,"210":0,"212":0,"224":1,"238":1,"249":1,"260":1,"262":0,"263":0,"264":0,"265":0,"266":0,"271":0,"272":0,"273":0,"274":0,"275":0,"277":0,"279":0,"280":0,"282":0,"283":0,"285":0,"287":0,"289":0,"290":0,"291":0,"292":0,"293":0,"295":0,"296":0,"298":0,"299":0,"300":0,"301":0,"303":0,"304":0,"307":0,"308":0,"310":0,"320":1,"328":1,"337":1,"338":0,"339":0,"340":0,"341":0,"342":0,"343":0,"346":1,"349":1,"350":0,"351":0,"352":0,"353":0,"354":0,"356":0,"357":0,"358":0,"363":0,"365":0,"370":1,"371":0,"372":0,"373":0,"374":0,"376":0,"377":0,"378":0,"380":0,"390":1,"391":0,"392":0,"393":0,"394":0,"395":0,"396":0,"397":0,"398":0,"399":0,"400":0,"401":0,"402":0,"403":0,"404":0,"405":0,"406":0,"407":0,"408":0,"409":0,"410":0,"412":0,"413":0,"417":0,"418":0,"420":0,"422":0,"424":0,"425":0,"426":0,"428":0,"429":0,"430":0,"431":0,"435":0,"436":0,"437":0,"439":0,"440":0,"442":0,"447":0,"451":0,"452":0,"453":0,"455":0,"456":0,"457":0,"459":0,"460":0,"464":0,"465":0,"467":0,"468":0,"469":0,"470":0,"471":0,"472":0,"473":0,"477":0,"479":0,"482":0,"483":0,"484":0,"485":0,"486":0,"487":0,"488":0,"489":0,"493":0,"495":0,"496":0,"499":0,"500":0,"505":0,"512":0,"513":0,"515":0,"519":0,"520":0,"522":0,"523":0,"526":0,"530":0,"534":1,"535":0,"539":1,"540":0,"541":0,"542":0,"543":0,"544":0,"545":0,"546":0,"547":0,"548":0,"549":0,"550":0,"552":0,"553":0,"554":0,"555":0,"557":0,"560":0,"562":0,"566":1,"567":0,"568":0,"569":0,"570":0,"571":0,"572":0,"573":0,"574":0,"575":0,"576":0,"577":0,"578":0,"580":0,"583":0,"585":0,"589":1,"590":0,"591":0,"592":0,"593":0,"594":0,"595":0,"596":0,"603":0,"605":0,"606":0,"616":1,"617":0,"618":0,"619":0,"620":0,"621":0,"622":0,"623":0,"624":0,"627":1,"630":1,"631":0,"632":0,"633":0,"634":0,"635":0,"637":0,"638":0,"639":0,"641":0,"646":1,"647":0,"648":0,"649":0,"650":0,"652":0,"653":0,"654":0,"656":0,"661":1,"662":0,"663":0,"664":0,"665":0,"666":0,"669":0,"670":0,"672":0,"673":0,"675":0,"677":0,"678":0,"680":0,"681":0,"683":0,"684":0,"685":0,"686":0,"688":0,"689":0,"693":0,"694":0,"696":0,"697":0,"698":0,"699":0,"701":0,"702":0,"706":0,"707":0,"708":0,"710":0,"711":0,"712":0,"713":0,"719":1,"720":0,"721":0,"722":0,"723":0,"724":0,"725":0,"726":0,"727":0,"728":0,"730":0,"733":0,"741":1,"742":0,"743":0,"744":0,"745":0,"746":0,"747":0,"748":0,"749":0,"750":0,"751":0,"752":0,"753":0,"754":0,"755":0,"756":0,"758":0,"761":0,"762":0,"763":0,"764":0,"765":0,"766":0,"767":0,"768":0,"769":0,"770":0,"771":0,"772":0,"773":0,"774":0,"775":0,"776":0,"778":0,"783":0,"784":0,"786":0,"787":0,"789":0,"790":0,"792":0,"793":0,"795":0,"798":0,"799":0,"801":0,"802":0,"803":0,"804":0,"806":0,"807":0,"808":0,"810":0,"811":0,"813":0,"814":0,"815":0,"816":0,"817":0,"819":0,"820":0,"821":0,"822":0,"823":0,"824":0,"826":0,"827":0,"828":0,"830":0,"831":0,"833":0,"838":1,"839":0,"840":0,"841":0,"842":0,"843":0,"844":0,"845":0,"846":0,"847":0,"848":0,"849":0,"851":0,"852":0,"854":0,"855":0,"859":0,"860":0,"861":0,"865":0,"866":0,"867":0,"871":0,"872":0,"874":0,"879":1,"880":0,"881":0,"882":0,"883":0,"884":0,"885":0,"886":0,"887":0,"888":0,"889":0,"890":0,"892":0,"893":0,"895":0,"896":0,"900":0,"901":0,"902":0,"906":0,"907":0,"909":0,"914":1,"915":0,"916":0,"917":0,"918":0,"919":0,"920":0,"921":0,"922":0,"923":0,"925":0,"929":0,"932":0,"933":0,"935":0,"936":0,"947":1,"948":0,"949":0,"951":0,"952":0,"953":0,"954":0,"955":0,"957":0,"958":0,"960":0,"961":0,"962":0,"963":0,"965":0,"966":0,"967":0,"969":0,"979":1,"980":0,"981":0,"982":0,"983":0,"985":0,"986":0,"987":0,"989":0,"993":1,"994":0,"995":0,"996":0,"997":0,"1000":0,"1002":0,"1005":0,"1006":0,"1007":0,"1008":0,"1009":0,"1011":0,"1013":0,"1021":1,"1022":0,"1023":0,"1024":0,"1025":0,"1026":0,"1027":0,"1028":0,"1029":0,"1030":0,"1031":0,"1033":0,"1035":0,"1036":0,"1038":0,"1040":0,"1049":1,"1059":0,"1060":0,"1061":0,"1062":0,"1063":0,"1064":0,"1065":0,"1066":0,"1067":0,"1068":0,"1069":0,"1070":0,"1072":0,"1074":0,"1075":0,"1077":0,"1078":0,"1079":0,"1081":0,"1082":0,"1084":0,"1085":0,"1087":0,"1088":0,"1089":0,"1091":0,"1096":0,"1097":0,"1099":0,"1101":0,"1102":0,"1103":0,"1106":0,"1108":0,"1109":0,"1112":0,"1114":0,"1121":1,"1122":0,"1123":0,"1124":0,"1126":0,"1129":1,"1130":0,"1131":0,"1132":0,"1133":0,"1134":0,"1136":0,"1138":0,"1139":0,"1140":0,"1143":0,"1154":1,"1155":0,"1156":0,"1157":0,"1159":0,"1160":0,"1162":0,"1165":1}},"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/metadata/table-metadata.js":{"path":"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/metadata/table-metadata.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1,"11":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"TableMetadata","line":13,"loc":{"start":{"line":13,"column":0},"end":{"line":13,"column":29}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":27}},"2":{"start":{"line":3,"column":0},"end":{"line":3,"column":50}},"3":{"start":{"line":13,"column":0},"end":{"line":50,"column":1}},"4":{"start":{"line":14,"column":2},"end":{"line":14,"column":34}},"5":{"start":{"line":21,"column":2},"end":{"line":21,"column":31}},"6":{"start":{"line":30,"column":2},"end":{"line":30,"column":31}},"7":{"start":{"line":39,"column":2},"end":{"line":39,"column":28}},"8":{"start":{"line":44,"column":2},"end":{"line":44,"column":25}},"9":{"start":{"line":49,"column":2},"end":{"line":49,"column":22}},"10":{"start":{"line":53,"column":0},"end":{"line":53,"column":45}},"11":{"start":{"line":55,"column":0},"end":{"line":55,"column":31}}},"branchMap":{},"code":["\"use strict\";","var util = require('util');","var DataCollection = require('./data-collection');","//noinspection JSValidateJSDoc","/**"," * Creates a new instance of TableMetadata"," * @classdesc Describes a table"," * @param {String} name Name of the Table"," * @augments {module:metadata~DataCollection}"," * @alias module:metadata~TableMetadata"," * @constructor"," */","function TableMetadata(name) {","  DataCollection.call(this, name);","  /**","   * Applies only to counter tables.","   * When set to true, replicates writes to all affected replicas regardless of the consistency level specified by","   * the client for a write request. For counter tables, this should always be set to true.","   * @type {Boolean}","   */","  this.replicateOnWrite = true;","  /**","   * Returns the memtable flush period (in milliseconds) option for this table.","   * <p>","   * Note: this option is available only on Cassandra 2.x and will return 0 (no periodic","   * flush) when connected to 1.2 nodes.","   * </p>","   * @type {Number}","   */","  this.memtableFlushPeriod = 0;","  /**","   * Returns the index interval option for this table.","   * <p>","   * Note: this option is only available in Cassandra 2.0. It is deprecated in Cassandra 2.1 and above, and will","   * therefore return {@code null} for 2.1 nodes.","   * </p>","   * @type {Number|null}","   */","  this.indexInterval = null;","  /**","   * Determines  whether the table uses the COMPACT STORAGE option.","   * @type {Boolean}","   */","  this.isCompact = false;","  /**","   *","   * @type {Array.<Index>}","   */","  this.indexes = null;","}","","//noinspection JSCheckFunctionSignatures","util.inherits(TableMetadata, DataCollection);","","module.exports = TableMetadata;"],"l":{"2":1,"3":1,"13":1,"14":0,"21":0,"30":0,"39":0,"44":0,"49":0,"53":1,"55":1}},"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/metadata/data-collection.js":{"path":"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/metadata/data-collection.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":1,"31":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"DataCollection","line":12,"loc":{"start":{"line":12,"column":0},"end":{"line":12,"column":30}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":27}},"2":{"start":{"line":3,"column":0},"end":{"line":3,"column":31}},"3":{"start":{"line":12,"column":0},"end":{"line":149,"column":1}},"4":{"start":{"line":13,"column":2},"end":{"line":13,"column":33}},"5":{"start":{"line":14,"column":2},"end":{"line":14,"column":26}},"6":{"start":{"line":16,"column":2},"end":{"line":16,"column":94}},"7":{"start":{"line":17,"column":2},"end":{"line":17,"column":93}},"8":{"start":{"line":22,"column":2},"end":{"line":22,"column":19}},"9":{"start":{"line":27,"column":2},"end":{"line":27,"column":42}},"10":{"start":{"line":32,"column":2},"end":{"line":32,"column":22}},"11":{"start":{"line":37,"column":2},"end":{"line":37,"column":22}},"12":{"start":{"line":42,"column":2},"end":{"line":42,"column":26}},"13":{"start":{"line":47,"column":2},"end":{"line":47,"column":30}},"14":{"start":{"line":52,"column":2},"end":{"line":52,"column":32}},"15":{"start":{"line":57,"column":2},"end":{"line":57,"column":26}},"16":{"start":{"line":62,"column":2},"end":{"line":62,"column":33}},"17":{"start":{"line":67,"column":2},"end":{"line":67,"column":28}},"18":{"start":{"line":75,"column":2},"end":{"line":75,"column":25}},"19":{"start":{"line":85,"column":2},"end":{"line":85,"column":29}},"20":{"start":{"line":90,"column":2},"end":{"line":90,"column":36}},"21":{"start":{"line":98,"column":2},"end":{"line":98,"column":22}},"22":{"start":{"line":107,"column":2},"end":{"line":107,"column":33}},"23":{"start":{"line":115,"column":2},"end":{"line":115,"column":30}},"24":{"start":{"line":123,"column":2},"end":{"line":123,"column":31}},"25":{"start":{"line":128,"column":2},"end":{"line":128,"column":22}},"26":{"start":{"line":133,"column":2},"end":{"line":133,"column":28}},"27":{"start":{"line":138,"column":2},"end":{"line":138,"column":26}},"28":{"start":{"line":143,"column":2},"end":{"line":143,"column":27}},"29":{"start":{"line":148,"column":2},"end":{"line":148,"column":28}},"30":{"start":{"line":151,"column":0},"end":{"line":151,"column":51}},"31":{"start":{"line":153,"column":0},"end":{"line":153,"column":32}}},"branchMap":{},"code":["\"use strict\";","var util = require('util');","var events = require('events');","/**"," * Creates a new instance of DataCollection"," * @param {String} name Name of the data object."," * @classdesc Describes a table or a view"," * @alias module:metadata~DataCollection"," * @constructor"," * @abstract"," */","function DataCollection(name) {","  events.EventEmitter.call(this);","  this.setMaxListeners(0);","  //private","  Object.defineProperty(this, 'loading', { value: false, enumerable: false, writable: true });","  Object.defineProperty(this, 'loaded', { value: false, enumerable: false, writable: true });","  /**","   * Name of the object","   * @type {String}","   */","  this.name = name;","  /**","   * False-positive probability for SSTable Bloom filters.","   * @type {number}","   */","  this.bloomFilterFalsePositiveChance = 0;","  /**","   * Level of caching: all, keys_only, rows_only, none","   * @type {String}","   */","  this.caching = null;","  /**","   * A human readable comment describing the table.","   * @type {String}","   */","  this.comment = null;","  /**","   * Specifies the time to wait before garbage collecting tombstones (deletion markers)","   * @type {number}","   */","  this.gcGraceSeconds = 0;","  /**","   * Compaction strategy class used for the table.","   * @type {String}","   */","  this.compactionClass = null;","  /**","   * Associative-array containing the compaction options keys and values.","   * @type {Object}","   */","  this.compactionOptions = null;","  /**","   * Associative-array containing the compression options.","   * @type {Object}","   */","  this.compression = null;","  /**","   * Specifies the probability of read repairs being invoked over all replicas in the current data center.","   * @type {number}","   */","  this.localReadRepairChance = 0;","  /**","   * Specifies the probability with which read repairs should be invoked on non-quorum reads. The value must be between 0 and 1.","   * @type {number}","   */","  this.readRepairChance = 0;","  /**","   * An associative Array containing extra metadata for the table.","   * <p>","   * For Cassandra versions prior to 3.0.0, this method always returns {@code null}.","   * </p>","   * @type {Object}","   */","  this.extensions = null;","  /**","   * When compression is enabled, this option defines the probability","   * with which checksums for compressed blocks are checked during reads.","   * The default value for this options is 1.0 (always check).","   * <p>","   *   For Cassandra versions prior to 3.0.0, this method always returns {@code null}.","   * </p>","   * @type {Number|null}","   */","  this.crcCheckChance = null;","  /**","   * Whether the populate I/O cache on flush is set on this table.","   * @type {Boolean}","   */","  this.populateCacheOnFlush = false;","  /**","   * Returns the default TTL for this table.","   * <p>","   * Note: this option is not available in Cassandra 1.2 and will return 0 (no default TTL) when connected to 1.2 nodes.","   * </p>","   * @type {Number}","   */","  this.defaultTtl = 0;","  /**","   * * Returns the speculative retry option for this table.","   * <p>","   * Note: this option is not available in Cassandra 1.2 and will return \"NONE\" (no speculative retry) when connected","   * to 1.2 nodes.","   * </p>","   * @type {String}","   */","  this.speculativeRetry = 'NONE';","  /**","   * Returns the minimum index interval option for this table.","   * <p>","   *   Note: this option is available in Cassandra 2.1 and above, and will return {@code null} for earlier versions.","   * </p>","   * @type {Number|null}","   */","  this.minIndexInterval = 128;","  /**","   * Returns the maximum index interval option for this table.","   * <p>","   * Note: this option is available in Cassandra 2.1 and above, and will return {@code null} for earlier versions.","   * </p>","   * @type {Number|null}","   */","  this.maxIndexInterval = 2048;","  /**","   * Array describing the table columns.","   * @type {Array}","   */","  this.columns = null;","  /**","   * An associative Array of columns by name.","   * @type {Object}","   */","  this.columnsByName = null;","  /**","   * Array describing the columns that are part of the partition key.","   * @type {Array}","   */","  this.partitionKeys = [];","  /**","   * Array describing the columns that form the clustering key.","   * @type {Array}","   */","  this.clusteringKeys = [];","  /**","   * Array describing the clustering order of the columns in the same order as the clusteringKeys.","   * @type {Array}","   */","  this.clusteringOrder = [];","}","","util.inherits(DataCollection, events.EventEmitter);","","module.exports = DataCollection;"],"l":{"2":1,"3":1,"12":1,"13":0,"14":0,"16":0,"17":0,"22":0,"27":0,"32":0,"37":0,"42":0,"47":0,"52":0,"57":0,"62":0,"67":0,"75":0,"85":0,"90":0,"98":0,"107":0,"115":0,"123":0,"128":0,"133":0,"138":0,"143":0,"148":0,"151":1,"153":1}},"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/metadata/aggregate.js":{"path":"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/metadata/aggregate.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"Aggregate","line":9,"loc":{"start":{"line":9,"column":0},"end":{"line":9,"column":21}}}},"statementMap":{"1":{"start":{"line":9,"column":0},"end":{"line":55,"column":1}},"2":{"start":{"line":14,"column":2},"end":{"line":14,"column":19}},"3":{"start":{"line":18,"column":2},"end":{"line":18,"column":27}},"4":{"start":{"line":23,"column":2},"end":{"line":23,"column":24}},"5":{"start":{"line":28,"column":2},"end":{"line":28,"column":28}},"6":{"start":{"line":33,"column":2},"end":{"line":33,"column":28}},"7":{"start":{"line":38,"column":2},"end":{"line":38,"column":24}},"8":{"start":{"line":43,"column":2},"end":{"line":43,"column":28}},"9":{"start":{"line":44,"column":2},"end":{"line":44,"column":31}},"10":{"start":{"line":49,"column":2},"end":{"line":49,"column":28}},"11":{"start":{"line":54,"column":2},"end":{"line":54,"column":25}},"12":{"start":{"line":57,"column":0},"end":{"line":57,"column":27}}},"branchMap":{},"code":["\"use strict\";","","/**"," * Creates a new Aggregate."," * @classdesc Describes a CQL aggregate."," * @alias module:metadata~Aggregate"," * @constructor"," */","function Aggregate() {","  /**","   * Name of the aggregate.","   * @type {String}","   */","  this.name = null;","  /**","   * Name of the keyspace where the aggregate is declared.","   */","  this.keyspaceName = null;","  /**","   * Signature of the aggregate.","   * @type {Array.<String>}","   */","  this.signature = null;","  /**","   * List of the CQL aggregate argument types.","   * @type {Array.<{code, info}>}","   */","  this.argumentTypes = null;","  /**","   * State Function.","   * @type {String}","   */","  this.stateFunction = null;","  /**","   * State Type.","   * @type {{code, info}}","   */","  this.stateType = null;","  /**","   * Final Function.","   * @type {String}","   */","  this.finalFunction = null;","  this.initConditionRaw = null;","  /**","   * Initial state value of this aggregate.","   * @type {String}","   */","  this.initCondition = null;","  /**","   * Type of the return value.","   * @type {{code: number, info: (Object|Array|null)}}","   */","  this.returnType = null;","}","","module.exports = Aggregate;"],"l":{"9":1,"14":0,"18":0,"23":0,"28":0,"33":0,"38":0,"43":0,"44":0,"49":0,"54":0,"57":1}},"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/metadata/schema-function.js":{"path":"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/metadata/schema-function.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"SchemaFunction","line":9,"loc":{"start":{"line":9,"column":0},"end":{"line":9,"column":26}}}},"statementMap":{"1":{"start":{"line":9,"column":0},"end":{"line":54,"column":1}},"2":{"start":{"line":14,"column":2},"end":{"line":14,"column":19}},"3":{"start":{"line":18,"column":2},"end":{"line":18,"column":27}},"4":{"start":{"line":23,"column":2},"end":{"line":23,"column":24}},"5":{"start":{"line":28,"column":2},"end":{"line":28,"column":28}},"6":{"start":{"line":33,"column":2},"end":{"line":33,"column":28}},"7":{"start":{"line":38,"column":2},"end":{"line":38,"column":19}},"8":{"start":{"line":43,"column":2},"end":{"line":43,"column":32}},"9":{"start":{"line":48,"column":2},"end":{"line":48,"column":23}},"10":{"start":{"line":53,"column":2},"end":{"line":53,"column":25}},"11":{"start":{"line":56,"column":0},"end":{"line":56,"column":32}}},"branchMap":{},"code":["\"use strict\";","","/**"," * Creates a new SchemaFunction."," * @classdesc Describes a CQL function."," * @alias module:metadata~SchemaFunction"," * @constructor"," */","function SchemaFunction() {","  /**","   * Name of the cql function.","   * @type {String}","   */","  this.name = null;","  /**","   * Name of the keyspace where the cql function is declared.","   */","  this.keyspaceName = null;","  /**","   * Signature of the function.","   * @type {Array.<String>}","   */","  this.signature = null;","  /**","   * List of the function argument names.","   * @type {Array.<String>}","   */","  this.argumentNames = null;","  /**","   * List of the function argument types.","   * @type {Array.<{code, info}>}","   */","  this.argumentTypes = null;","  /**","   * Body of the function.","   * @type {String}","   */","  this.body = null;","  /**","   * Determines if the function is called when the input is null.","   * @type {Boolean}","   */","  this.calledOnNullInput = null;","  /**","   * Name of the programming language, for example: java, javascript, ...","   * @type {String}","   */","  this.language = null;","  /**","   * Type of the return value.","   * @type {{code: number, info: (Object|Array|null)}}","   */","  this.returnType = null;","}","","module.exports = SchemaFunction;"],"l":{"9":1,"14":0,"18":0,"23":0,"28":0,"33":0,"38":0,"43":0,"48":0,"53":0,"56":1}},"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/metadata/schema-index.js":{"path":"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/metadata/schema-index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":1,"11":0,"12":1,"13":0,"14":1,"15":0,"16":1,"17":0,"18":0,"19":0,"20":0,"21":0,"22":1,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":1,"42":0,"43":0,"44":0,"45":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0,0,0],"8":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"fnMap":{"1":{"name":"Index","line":22,"loc":{"start":{"line":22,"column":0},"end":{"line":22,"column":44}}},"2":{"name":"(anonymous_2)","line":49,"loc":{"start":{"line":49,"column":35},"end":{"line":49,"column":47}}},"3":{"name":"(anonymous_3)","line":57,"loc":{"start":{"line":57,"column":29},"end":{"line":57,"column":41}}},"4":{"name":"(anonymous_4)","line":65,"loc":{"start":{"line":65,"column":31},"end":{"line":65,"column":43}}},"5":{"name":"(anonymous_5)","line":74,"loc":{"start":{"line":74,"column":17},"end":{"line":74,"column":38}}},"6":{"name":"(anonymous_6)","line":78,"loc":{"start":{"line":78,"column":23},"end":{"line":78,"column":38}}},"7":{"name":"(anonymous_7)","line":90,"loc":{"start":{"line":90,"column":23},"end":{"line":90,"column":60}}},"8":{"name":"getKindByName","line":125,"loc":{"start":{"line":125,"column":0},"end":{"line":125,"column":29}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":27}},"2":{"start":{"line":3,"column":0},"end":{"line":3,"column":32}},"3":{"start":{"line":4,"column":0},"end":{"line":4,"column":32}},"4":{"start":{"line":7,"column":0},"end":{"line":11,"column":2}},"5":{"start":{"line":22,"column":0},"end":{"line":43,"column":1}},"6":{"start":{"line":27,"column":2},"end":{"line":27,"column":19}},"7":{"start":{"line":32,"column":2},"end":{"line":32,"column":23}},"8":{"start":{"line":37,"column":2},"end":{"line":37,"column":19}},"9":{"start":{"line":42,"column":2},"end":{"line":42,"column":25}},"10":{"start":{"line":49,"column":0},"end":{"line":51,"column":2}},"11":{"start":{"line":50,"column":2},"end":{"line":50,"column":39}},"12":{"start":{"line":57,"column":0},"end":{"line":59,"column":2}},"13":{"start":{"line":58,"column":2},"end":{"line":58,"column":33}},"14":{"start":{"line":65,"column":0},"end":{"line":67,"column":2}},"15":{"start":{"line":66,"column":2},"end":{"line":66,"column":35}},"16":{"start":{"line":74,"column":0},"end":{"line":82,"column":2}},"17":{"start":{"line":75,"column":2},"end":{"line":77,"column":3}},"18":{"start":{"line":76,"column":4},"end":{"line":76,"column":28}},"19":{"start":{"line":78,"column":2},"end":{"line":81,"column":5}},"20":{"start":{"line":79,"column":4},"end":{"line":79,"column":33}},"21":{"start":{"line":80,"column":4},"end":{"line":80,"column":96}},"22":{"start":{"line":90,"column":0},"end":{"line":117,"column":2}},"23":{"start":{"line":91,"column":2},"end":{"line":91,"column":18}},"24":{"start":{"line":92,"column":2},"end":{"line":115,"column":3}},"25":{"start":{"line":93,"column":4},"end":{"line":93,"column":28}},"26":{"start":{"line":94,"column":4},"end":{"line":94,"column":38}},"27":{"start":{"line":95,"column":4},"end":{"line":97,"column":5}},"28":{"start":{"line":96,"column":6},"end":{"line":96,"column":15}},"29":{"start":{"line":98,"column":4},"end":{"line":98,"column":46}},"30":{"start":{"line":99,"column":4},"end":{"line":99,"column":15}},"31":{"start":{"line":100,"column":4},"end":{"line":100,"column":51}},"32":{"start":{"line":101,"column":4},"end":{"line":113,"column":5}},"33":{"start":{"line":102,"column":6},"end":{"line":102,"column":47}},"34":{"start":{"line":104,"column":9},"end":{"line":113,"column":5}},"35":{"start":{"line":105,"column":6},"end":{"line":105,"column":50}},"36":{"start":{"line":107,"column":9},"end":{"line":113,"column":5}},"37":{"start":{"line":109,"column":6},"end":{"line":109,"column":47}},"38":{"start":{"line":112,"column":6},"end":{"line":112,"column":22}},"39":{"start":{"line":114,"column":4},"end":{"line":114,"column":89}},"40":{"start":{"line":116,"column":2},"end":{"line":116,"column":16}},"41":{"start":{"line":125,"column":0},"end":{"line":130,"column":1}},"42":{"start":{"line":126,"column":2},"end":{"line":128,"column":3}},"43":{"start":{"line":127,"column":4},"end":{"line":127,"column":23}},"44":{"start":{"line":129,"column":2},"end":{"line":129,"column":34}},"45":{"start":{"line":132,"column":0},"end":{"line":132,"column":23}}},"branchMap":{"1":{"line":75,"type":"if","locations":[{"start":{"line":75,"column":2},"end":{"line":75,"column":2}},{"start":{"line":75,"column":2},"end":{"line":75,"column":2}}]},"2":{"line":75,"type":"binary-expr","locations":[{"start":{"line":75,"column":6},"end":{"line":75,"column":16}},{"start":{"line":75,"column":20},"end":{"line":75,"column":42}}]},"3":{"line":95,"type":"if","locations":[{"start":{"line":95,"column":4},"end":{"line":95,"column":4}},{"start":{"line":95,"column":4},"end":{"line":95,"column":4}}]},"4":{"line":101,"type":"if","locations":[{"start":{"line":101,"column":4},"end":{"line":101,"column":4}},{"start":{"line":101,"column":4},"end":{"line":101,"column":4}}]},"5":{"line":104,"type":"if","locations":[{"start":{"line":104,"column":9},"end":{"line":104,"column":9}},{"start":{"line":104,"column":9},"end":{"line":104,"column":9}}]},"6":{"line":107,"type":"if","locations":[{"start":{"line":107,"column":9},"end":{"line":107,"column":9}},{"start":{"line":107,"column":9},"end":{"line":107,"column":9}}]},"7":{"line":107,"type":"binary-expr","locations":[{"start":{"line":107,"column":13},"end":{"line":107,"column":34}},{"start":{"line":107,"column":39},"end":{"line":107,"column":74}},{"start":{"line":107,"column":78},"end":{"line":107,"column":114}},{"start":{"line":108,"column":6},"end":{"line":108,"column":41}}]},"8":{"line":126,"type":"if","locations":[{"start":{"line":126,"column":2},"end":{"line":126,"column":2}},{"start":{"line":126,"column":2},"end":{"line":126,"column":2}}]}},"code":["\"use strict\";","var util = require('util');","var utils = require('../utils');","var types = require('../types');","","/** @private */","var kind = {","  custom: 0,","  keys: 1,","  composites: 2","};","/**"," * Creates a new Index instance."," * @classdesc Describes a CQL index."," * @param {String} name"," * @param {String} target"," * @param {Number} kind"," * @param {Object} options"," * @alias module:metadata~Index"," * @constructor"," */","function Index(name, target, kind, options) {","  /**","   * Name of the index.","   * @type {String}","   */","  this.name = name;","  /**","   * Target of the index.","   * @type {String}","   */","  this.target = target;","  /**","   * A numeric value representing index kind (0: custom, 1: keys, 2: composite);","   * @type {Number}","   */","  this.kind = kind;","  /**","   * An associative array containing the index options","   * @type {Object}","   */","  this.options = options;","}","","/**"," * Determines if the index is of composites kind"," * @returns {Boolean}"," */","Index.prototype.isCompositesKind = function () {","  return this.kind === kind.composites;","};","","/**"," * Determines if the index is of keys kind"," * @returns {Boolean}"," */","Index.prototype.isKeysKind = function () {","  return this.kind === kind.keys;","};","","/**"," * Determines if the index is of custom kind"," * @returns {Boolean}"," */","Index.prototype.isCustomKind = function () {","  return this.kind === kind.custom;","};","","/**"," * Parses Index information from rows in the 'system_schema.indexes' table"," * @param {Array.<Row>} indexRows"," * @returns {Array.<Index>}"," */","Index.fromRows = function (indexRows) {","  if (!indexRows || indexRows.length === 0) {","    return utils.emptyArray;","  }","  return indexRows.map(function (row) {","    var options = row['options'];","    return new Index(row['index_name'], options['target'], getKindByName(row['kind']), options);","  });","};","","/**"," * Parses Index information from rows in the legacy 'system.schema_columns' table"," * @param {Array.<Row>} columnRows"," * @param {Object.<String, {name, type}>} columnsByName"," * @returns {Array.<Index>}"," */","Index.fromColumnRows = function (columnRows, columnsByName) {","  var result = [];","  for (var i = 0; i < columnRows.length; i++) {","    var row = columnRows[i];","    var indexName = row['index_name'];","    if (!indexName) {","      continue;","    }","    var c = columnsByName[row['column_name']];","    var target;","    var options = JSON.parse(row['index_options']);","    if (typeof options['index_keys'] !== 'undefined') {","      target = util.format(\"keys(%s)\", c.name);","    }","    else if (typeof options['index_keys_and_values'] !== 'undefined') {","      target = util.format(\"entries(%s)\", c.name);","    }","    else if (c.type.options.frozen && (c.type.code === types.dataTypes.map || c.type.code === types.dataTypes.list ||","      c.type.code === types.dataTypes.set)) {","      target = util.format(\"full(%s)\", c.name);","    }","    else {","      target = c.name;","    }","    result.push(new Index(indexName, target, getKindByName(row['index_type']), options));","  }","  return result;","};","","/**"," * Gets the number representing the kind based on the name"," * @param {String} name"," * @returns {Number}"," * @private"," */","function getKindByName(name) {","  if (!name) {","    return kind.custom;","  }","  return kind[name.toLowerCase()];","}","","module.exports = Index;"],"l":{"2":1,"3":1,"4":1,"7":1,"22":1,"27":0,"32":0,"37":0,"42":0,"49":1,"50":0,"57":1,"58":0,"65":1,"66":0,"74":1,"75":0,"76":0,"78":0,"79":0,"80":0,"90":1,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"98":0,"99":0,"100":0,"101":0,"102":0,"104":0,"105":0,"107":0,"109":0,"112":0,"114":0,"116":0,"125":1,"126":0,"127":0,"129":0,"132":1}},"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/metadata/materialized-view.js":{"path":"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/metadata/materialized-view.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":1,"9":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"MaterializedView","line":13,"loc":{"start":{"line":13,"column":0},"end":{"line":13,"column":32}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":27}},"2":{"start":{"line":3,"column":0},"end":{"line":3,"column":50}},"3":{"start":{"line":13,"column":0},"end":{"line":30,"column":1}},"4":{"start":{"line":14,"column":2},"end":{"line":14,"column":34}},"5":{"start":{"line":19,"column":2},"end":{"line":19,"column":24}},"6":{"start":{"line":24,"column":2},"end":{"line":24,"column":26}},"7":{"start":{"line":29,"column":2},"end":{"line":29,"column":33}},"8":{"start":{"line":33,"column":0},"end":{"line":33,"column":48}},"9":{"start":{"line":35,"column":0},"end":{"line":35,"column":34}}},"branchMap":{},"code":["\"use strict\";","var util = require('util');","var DataCollection = require('./data-collection');","//noinspection JSValidateJSDoc","/**"," * Creates a new MaterializedView."," * @param {String} name Name of the View."," * @classdesc Describes a CQL materialized view."," * @alias module:metadata~MaterializedView"," * @augments {module:metadata~DataCollection}"," * @constructor"," */","function MaterializedView(name) {","  DataCollection.call(this, name);","  /**","   * Name of the table.","   * @type {String}","   */","  this.tableName = null;","  /**","   * View where clause.","   * @type {String}","   */","  this.whereClause = null;","  /**","   * Determines if all the table columns where are included in the view.","   * @type {boolean}","   */","  this.includeAllColumns = false;","}","","//noinspection JSCheckFunctionSignatures","util.inherits(MaterializedView, DataCollection);","","module.exports = MaterializedView;"],"l":{"2":1,"3":1,"13":1,"14":0,"19":0,"24":0,"29":0,"33":1,"35":1}},"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/metadata/event-debouncer.js":{"path":"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/metadata/event-debouncer.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":1,"28":0,"29":1,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":1,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":1,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},"fnMap":{"1":{"name":"EventDebouncer","line":15,"loc":{"start":{"line":15,"column":0},"end":{"line":15,"column":39}}},"2":{"name":"(anonymous_2)","line":28,"loc":{"start":{"line":28,"column":41},"end":{"line":28,"column":70}}},"3":{"name":"(anonymous_3)","line":63,"loc":{"start":{"line":63,"column":39},"end":{"line":63,"column":56}}},"4":{"name":"process","line":65,"loc":{"start":{"line":65,"column":2},"end":{"line":65,"column":21}}},"5":{"name":"(anonymous_5)","line":89,"loc":{"start":{"line":89,"column":36},"end":{"line":89,"column":48}}},"6":{"name":"(anonymous_6)","line":93,"loc":{"start":{"line":93,"column":32},"end":{"line":93,"column":46}}},"7":{"name":"processQueue","line":105,"loc":{"start":{"line":105,"column":0},"end":{"line":105,"column":26}}},"8":{"name":"invokeCallbacks","line":108,"loc":{"start":{"line":108,"column":31},"end":{"line":108,"column":61}}},"9":{"name":"eachKeyspace","line":114,"loc":{"start":{"line":114,"column":39},"end":{"line":114,"column":73}}},"10":{"name":"mainEventCallback","line":118,"loc":{"start":{"line":118,"column":46},"end":{"line":118,"column":78}}},"11":{"name":"eachEvent","line":126,"loc":{"start":{"line":126,"column":34},"end":{"line":126,"column":60}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":32}},"3":{"start":{"line":6,"column":0},"end":{"line":6,"column":35}},"4":{"start":{"line":15,"column":0},"end":{"line":20,"column":1}},"5":{"start":{"line":16,"column":2},"end":{"line":16,"column":22}},"6":{"start":{"line":17,"column":2},"end":{"line":17,"column":24}},"7":{"start":{"line":18,"column":2},"end":{"line":18,"column":21}},"8":{"start":{"line":19,"column":2},"end":{"line":19,"column":23}},"9":{"start":{"line":28,"column":0},"end":{"line":57,"column":2}},"10":{"start":{"line":29,"column":2},"end":{"line":29,"column":48}},"11":{"start":{"line":30,"column":2},"end":{"line":30,"column":64}},"12":{"start":{"line":31,"column":2},"end":{"line":31,"column":44}},"13":{"start":{"line":32,"column":2},"end":{"line":36,"column":3}},"14":{"start":{"line":35,"column":4},"end":{"line":35,"column":34}},"15":{"start":{"line":37,"column":2},"end":{"line":40,"column":3}},"16":{"start":{"line":39,"column":4},"end":{"line":39,"column":107}},"17":{"start":{"line":41,"column":2},"end":{"line":41,"column":45}},"18":{"start":{"line":42,"column":2},"end":{"line":45,"column":3}},"19":{"start":{"line":44,"column":4},"end":{"line":44,"column":35}},"20":{"start":{"line":47,"column":2},"end":{"line":47,"column":61}},"21":{"start":{"line":48,"column":2},"end":{"line":50,"column":3}},"22":{"start":{"line":49,"column":4},"end":{"line":49,"column":76}},"23":{"start":{"line":51,"column":2},"end":{"line":54,"column":3}},"24":{"start":{"line":53,"column":4},"end":{"line":53,"column":37}},"25":{"start":{"line":55,"column":2},"end":{"line":55,"column":36}},"26":{"start":{"line":56,"column":2},"end":{"line":56,"column":26}},"27":{"start":{"line":63,"column":0},"end":{"line":84,"column":2}},"28":{"start":{"line":64,"column":2},"end":{"line":64,"column":18}},"29":{"start":{"line":65,"column":2},"end":{"line":70,"column":3}},"30":{"start":{"line":66,"column":4},"end":{"line":66,"column":24}},"31":{"start":{"line":67,"column":4},"end":{"line":67,"column":23}},"32":{"start":{"line":68,"column":4},"end":{"line":68,"column":25}},"33":{"start":{"line":69,"column":4},"end":{"line":69,"column":20}},"34":{"start":{"line":71,"column":2},"end":{"line":77,"column":3}},"35":{"start":{"line":73,"column":4},"end":{"line":75,"column":5}},"36":{"start":{"line":74,"column":6},"end":{"line":74,"column":34}},"37":{"start":{"line":76,"column":4},"end":{"line":76,"column":21}},"38":{"start":{"line":78,"column":2},"end":{"line":78,"column":38}},"39":{"start":{"line":80,"column":2},"end":{"line":80,"column":45}},"40":{"start":{"line":81,"column":2},"end":{"line":83,"column":3}},"41":{"start":{"line":82,"column":4},"end":{"line":82,"column":34}},"42":{"start":{"line":89,"column":0},"end":{"line":99,"column":2}},"43":{"start":{"line":90,"column":2},"end":{"line":92,"column":3}},"44":{"start":{"line":91,"column":4},"end":{"line":91,"column":11}},"45":{"start":{"line":93,"column":2},"end":{"line":95,"column":5}},"46":{"start":{"line":94,"column":4},"end":{"line":94,"column":9}},"47":{"start":{"line":96,"column":2},"end":{"line":96,"column":21}},"48":{"start":{"line":97,"column":2},"end":{"line":97,"column":30}},"49":{"start":{"line":98,"column":2},"end":{"line":98,"column":23}},"50":{"start":{"line":105,"column":0},"end":{"line":133,"column":1}},"51":{"start":{"line":106,"column":2},"end":{"line":113,"column":3}},"52":{"start":{"line":108,"column":4},"end":{"line":112,"column":7}},"53":{"start":{"line":109,"column":6},"end":{"line":111,"column":7}},"54":{"start":{"line":110,"column":8},"end":{"line":110,"column":28}},"55":{"start":{"line":114,"column":2},"end":{"line":132,"column":5}},"56":{"start":{"line":115,"column":4},"end":{"line":115,"column":43}},"57":{"start":{"line":116,"column":4},"end":{"line":124,"column":5}},"58":{"start":{"line":118,"column":6},"end":{"line":123,"column":9}},"59":{"start":{"line":119,"column":8},"end":{"line":121,"column":9}},"60":{"start":{"line":120,"column":10},"end":{"line":120,"column":49}},"61":{"start":{"line":122,"column":8},"end":{"line":122,"column":15}},"62":{"start":{"line":126,"column":4},"end":{"line":130,"column":7}},"63":{"start":{"line":128,"column":6},"end":{"line":128,"column":22}},"64":{"start":{"line":129,"column":6},"end":{"line":129,"column":23}},"65":{"start":{"line":131,"column":4},"end":{"line":131,"column":11}},"66":{"start":{"line":135,"column":0},"end":{"line":135,"column":32}}},"branchMap":{"1":{"line":29,"type":"binary-expr","locations":[{"start":{"line":29,"column":19},"end":{"line":29,"column":33}},{"start":{"line":29,"column":37},"end":{"line":29,"column":47}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":16},"end":{"line":30,"column":27}},{"start":{"line":30,"column":31},"end":{"line":30,"column":63}}]},"3":{"line":31,"type":"cond-expr","locations":[{"start":{"line":31,"column":28},"end":{"line":31,"column":39}},{"start":{"line":31,"column":42},"end":{"line":31,"column":43}}]},"4":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":2},"end":{"line":32,"column":2}},{"start":{"line":32,"column":2},"end":{"line":32,"column":2}}]},"5":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":2},"end":{"line":37,"column":2}},{"start":{"line":37,"column":2},"end":{"line":37,"column":2}}]},"6":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":2},"end":{"line":42,"column":2}},{"start":{"line":42,"column":2},"end":{"line":42,"column":2}}]},"7":{"line":48,"type":"if","locations":[{"start":{"line":48,"column":2},"end":{"line":48,"column":2}},{"start":{"line":48,"column":2},"end":{"line":48,"column":2}}]},"8":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":2},"end":{"line":51,"column":2}},{"start":{"line":51,"column":2},"end":{"line":51,"column":2}}]},"9":{"line":71,"type":"if","locations":[{"start":{"line":71,"column":2},"end":{"line":71,"column":2}},{"start":{"line":71,"column":2},"end":{"line":71,"column":2}}]},"10":{"line":73,"type":"if","locations":[{"start":{"line":73,"column":4},"end":{"line":73,"column":4}},{"start":{"line":73,"column":4},"end":{"line":73,"column":4}}]},"11":{"line":81,"type":"if","locations":[{"start":{"line":81,"column":2},"end":{"line":81,"column":2}},{"start":{"line":81,"column":2},"end":{"line":81,"column":2}}]},"12":{"line":90,"type":"if","locations":[{"start":{"line":90,"column":2},"end":{"line":90,"column":2}},{"start":{"line":90,"column":2},"end":{"line":90,"column":2}}]},"13":{"line":106,"type":"if","locations":[{"start":{"line":106,"column":2},"end":{"line":106,"column":2}},{"start":{"line":106,"column":2},"end":{"line":106,"column":2}}]},"14":{"line":116,"type":"if","locations":[{"start":{"line":116,"column":4},"end":{"line":116,"column":4}},{"start":{"line":116,"column":4},"end":{"line":116,"column":4}}]}},"code":["\"use strict\";","","var util = require('util');","var utils = require('../utils');","","var _queueOverflowThreshold = 1000;","","/**"," * Debounce protocol events by acting on those events with a sliding delay."," * @param {Number} delay"," * @param {Function} logger"," * @ignore"," * @constructor"," */","function EventDebouncer(delay, logger) {","  this._delay = delay;","  this._logger = logger;","  this._queue = null;","  this._timeout = null;","}","","/**"," * Adds a new event to the queue and moves the delay."," * @param {{ handler: Function, all: boolean|undefined, keyspace: String|undefined, cqlObject: String|null|undefined,"," * callback: Function|undefined }} event"," * @param {Boolean} processNow"," */","EventDebouncer.prototype.eventReceived = function (event, processNow) {","  event.callback = event.callback || utils.noop;","  this._queue = this._queue || { callbacks: [], keyspaces: {} };","  var delay = !processNow ? this._delay : 0;","  if (event.all) {","    // when an event marked with all is received, it supersedes all the rest of events","    // a full update (hosts + keyspaces + tokens) is going to be made","    this._queue.mainEvent = event;","  }","  if (this._queue.callbacks.length === _queueOverflowThreshold) {","    // warn once","    this._logger('warn', util.format('Event debouncer queue exceeded %d events', _queueOverflowThreshold));","  }","  this._queue.callbacks.push(event.callback);","  if (this._queue.mainEvent) {","    // a full refresh is scheduled and the callback was added, nothing else to do.","    return this._slideDelay(delay);","  }","  // Insert at keyspace level","  var keyspaceEvents = this._queue.keyspaces[event.keyspace];","  if (!keyspaceEvents) {","    keyspaceEvents = this._queue.keyspaces[event.keyspace] = { events: [] };","  }","  if (event.cqlObject === undefined) {","    // a full refresh of the keyspace, supersedes all child keyspace events","    keyspaceEvents.mainEvent = event;","  }","  keyspaceEvents.events.push(event);","  this._slideDelay(delay);","};","","/**"," * @param {Number} delay"," * @private"," * */","EventDebouncer.prototype._slideDelay = function (delay) {","  var self = this;","  function process() {","    var q = self._queue;","    self._queue = null;","    self._timeout = null;","    processQueue(q);","  }","  if (delay === 0) {","    // no delay, process immediately","    if (this._timeout) {","      clearTimeout(this._timeout);","    }","    return process();","  }","  var previousTimeout = this._timeout;","  // add the new timeout before removing the previous one performs better","  this._timeout = setTimeout(process, delay);","  if (previousTimeout) {","    clearTimeout(previousTimeout);","  }","};","","/**"," * Clears the timeout and invokes all pending callback."," */","EventDebouncer.prototype.shutdown = function () {","  if (!this._queue) {","    return;","  }","  this._queue.callbacks.forEach(function (cb) {","    cb();","  });","  this._queue = null;","  clearTimeout(this._timeout);","  this._timeout = null;","};","","/**"," * @param {{callbacks: Array, keyspaces: Object, mainEvent: Object}} q"," * @private"," */","function processQueue (q) {","  if (q.mainEvent) {","    // refresh all by invoking 1 handler and invoke all pending callbacks","    return q.mainEvent.handler(function invokeCallbacks(err) {","      for (var i = 0; i < q.callbacks.length; i++) {","        q.callbacks[i](err);","      }","    });","  }","  utils.each(Object.keys(q.keyspaces), function eachKeyspace(name, next) {","    var keyspaceEvents = q.keyspaces[name];","    if (keyspaceEvents.mainEvent) {","      // refresh a keyspace","      return keyspaceEvents.mainEvent.handler(function mainEventCallback(err) {","        for (var i = 0; i < keyspaceEvents.events.length; i++) {","          keyspaceEvents.events[i].callback(err);","        }","        next();","      });","    }","    // deal with individual handlers and callbacks","    keyspaceEvents.events.forEach(function eachEvent(event) {","      // sync handlers","      event.handler();","      event.callback();","    });","    next();","  });","}","","module.exports = EventDebouncer;"],"l":{"3":1,"4":1,"6":1,"15":1,"16":0,"17":0,"18":0,"19":0,"28":1,"29":0,"30":0,"31":0,"32":0,"35":0,"37":0,"39":0,"41":0,"42":0,"44":0,"47":0,"48":0,"49":0,"51":0,"53":0,"55":0,"56":0,"63":1,"64":0,"65":1,"66":0,"67":0,"68":0,"69":0,"71":0,"73":0,"74":0,"76":0,"78":0,"80":0,"81":0,"82":0,"89":1,"90":0,"91":0,"93":0,"94":0,"96":0,"97":0,"98":0,"105":1,"106":0,"108":0,"109":0,"110":0,"114":0,"115":0,"116":0,"118":0,"119":0,"120":0,"122":0,"126":0,"128":0,"129":0,"131":0,"135":1}},"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/execution-profile.js":{"path":"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/execution-profile.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":1,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":1,"25":0,"26":0,"27":1,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":1,"38":0,"39":0,"40":0,"41":1,"42":0,"43":1,"44":0,"45":1,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":1,"53":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},"fnMap":{"1":{"name":"ExecutionProfile","line":26,"loc":{"start":{"line":26,"column":0},"end":{"line":26,"column":41}}},"2":{"name":"ProfileManager","line":68,"loc":{"start":{"line":68,"column":0},"end":{"line":68,"column":33}}},"3":{"name":"(anonymous_3)","line":75,"loc":{"start":{"line":75,"column":25},"end":{"line":75,"column":38}}},"4":{"name":"(anonymous_4)","line":93,"loc":{"start":{"line":93,"column":32},"end":{"line":93,"column":67}}},"5":{"name":"(anonymous_5)","line":94,"loc":{"start":{"line":94,"column":48},"end":{"line":94,"column":72}}},"6":{"name":"(anonymous_6)","line":103,"loc":{"start":{"line":103,"column":39},"end":{"line":103,"column":55}}},"7":{"name":"(anonymous_7)","line":124,"loc":{"start":{"line":124,"column":38},"end":{"line":124,"column":54}}},"8":{"name":"(anonymous_8)","line":132,"loc":{"start":{"line":132,"column":38},"end":{"line":132,"column":50}}},"9":{"name":"(anonymous_9)","line":137,"loc":{"start":{"line":137,"column":51},"end":{"line":137,"column":63}}},"10":{"name":"(anonymous_10)","line":145,"loc":{"start":{"line":145,"column":39},"end":{"line":145,"column":58}}},"11":{"name":"(anonymous_11)","line":146,"loc":{"start":{"line":146,"column":47},"end":{"line":146,"column":60}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":31}},"2":{"start":{"line":3,"column":0},"end":{"line":3,"column":31}},"3":{"start":{"line":26,"column":0},"end":{"line":61,"column":1}},"4":{"start":{"line":27,"column":2},"end":{"line":29,"column":3}},"5":{"start":{"line":28,"column":4},"end":{"line":28,"column":67}},"6":{"start":{"line":30,"column":2},"end":{"line":30,"column":41}},"7":{"start":{"line":35,"column":2},"end":{"line":35,"column":19}},"8":{"start":{"line":40,"column":2},"end":{"line":40,"column":41}},"9":{"start":{"line":45,"column":2},"end":{"line":45,"column":45}},"10":{"start":{"line":50,"column":2},"end":{"line":50,"column":41}},"11":{"start":{"line":55,"column":2},"end":{"line":55,"column":29}},"12":{"start":{"line":60,"column":2},"end":{"line":60,"column":53}},"13":{"start":{"line":68,"column":0},"end":{"line":86,"column":1}},"14":{"start":{"line":69,"column":2},"end":{"line":69,"column":42}},"15":{"start":{"line":70,"column":2},"end":{"line":70,"column":28}},"16":{"start":{"line":72,"column":2},"end":{"line":72,"column":35}},"17":{"start":{"line":74,"column":2},"end":{"line":74,"column":25}},"18":{"start":{"line":75,"column":2},"end":{"line":85,"column":11}},"19":{"start":{"line":76,"column":4},"end":{"line":76,"column":34}},"20":{"start":{"line":78,"column":4},"end":{"line":78,"column":76}},"21":{"start":{"line":81,"column":4},"end":{"line":83,"column":5}},"22":{"start":{"line":82,"column":6},"end":{"line":82,"column":56}},"23":{"start":{"line":84,"column":4},"end":{"line":84,"column":13}},"24":{"start":{"line":93,"column":0},"end":{"line":97,"column":2}},"25":{"start":{"line":94,"column":2},"end":{"line":96,"column":15}},"26":{"start":{"line":95,"column":4},"end":{"line":95,"column":37}},"27":{"start":{"line":103,"column":0},"end":{"line":117,"column":2}},"28":{"start":{"line":104,"column":2},"end":{"line":104,"column":40}},"29":{"start":{"line":106,"column":2},"end":{"line":114,"column":3}},"30":{"start":{"line":107,"column":4},"end":{"line":107,"column":61}},"31":{"start":{"line":108,"column":4},"end":{"line":113,"column":5}},"32":{"start":{"line":109,"column":6},"end":{"line":109,"column":19}},"33":{"start":{"line":110,"column":6},"end":{"line":112,"column":7}},"34":{"start":{"line":111,"column":8},"end":{"line":111,"column":14}},"35":{"start":{"line":115,"column":2},"end":{"line":115,"column":29}},"36":{"start":{"line":116,"column":2},"end":{"line":116,"column":18}},"37":{"start":{"line":124,"column":0},"end":{"line":129,"column":2}},"38":{"start":{"line":125,"column":2},"end":{"line":127,"column":3}},"39":{"start":{"line":126,"column":4},"end":{"line":126,"column":16}},"40":{"start":{"line":128,"column":2},"end":{"line":128,"column":46}},"41":{"start":{"line":132,"column":0},"end":{"line":134,"column":2}},"42":{"start":{"line":133,"column":2},"end":{"line":133,"column":30}},"43":{"start":{"line":137,"column":0},"end":{"line":139,"column":2}},"44":{"start":{"line":138,"column":2},"end":{"line":138,"column":44}},"45":{"start":{"line":145,"column":0},"end":{"line":153,"column":2}},"46":{"start":{"line":146,"column":2},"end":{"line":146,"column":97}},"47":{"start":{"line":146,"column":62},"end":{"line":146,"column":90}},"48":{"start":{"line":147,"column":2},"end":{"line":149,"column":3}},"49":{"start":{"line":148,"column":4},"end":{"line":148,"column":80}},"50":{"start":{"line":151,"column":2},"end":{"line":151,"column":108}},"51":{"start":{"line":152,"column":2},"end":{"line":152,"column":84}},"52":{"start":{"line":155,"column":0},"end":{"line":155,"column":40}},"53":{"start":{"line":156,"column":0},"end":{"line":156,"column":44}}},"branchMap":{"1":{"line":27,"type":"if","locations":[{"start":{"line":27,"column":2},"end":{"line":27,"column":2}},{"start":{"line":27,"column":2},"end":{"line":27,"column":2}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":12},"end":{"line":30,"column":19}},{"start":{"line":30,"column":23},"end":{"line":30,"column":40}}]},"3":{"line":69,"type":"binary-expr","locations":[{"start":{"line":69,"column":19},"end":{"line":69,"column":35}},{"start":{"line":69,"column":39},"end":{"line":69,"column":41}}]},"4":{"line":78,"type":"binary-expr","locations":[{"start":{"line":78,"column":22},"end":{"line":78,"column":37}},{"start":{"line":78,"column":41},"end":{"line":78,"column":75}}]},"5":{"line":81,"type":"if","locations":[{"start":{"line":81,"column":4},"end":{"line":81,"column":4}},{"start":{"line":81,"column":4},"end":{"line":81,"column":4}}]},"6":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":4},"end":{"line":108,"column":4}},{"start":{"line":108,"column":4},"end":{"line":108,"column":4}}]},"7":{"line":110,"type":"if","locations":[{"start":{"line":110,"column":6},"end":{"line":110,"column":6}},{"start":{"line":110,"column":6},"end":{"line":110,"column":6}}]},"8":{"line":125,"type":"if","locations":[{"start":{"line":125,"column":2},"end":{"line":125,"column":2}},{"start":{"line":125,"column":2},"end":{"line":125,"column":2}}]},"9":{"line":128,"type":"binary-expr","locations":[{"start":{"line":128,"column":27},"end":{"line":128,"column":31}},{"start":{"line":128,"column":35},"end":{"line":128,"column":44}}]},"10":{"line":147,"type":"if","locations":[{"start":{"line":147,"column":2},"end":{"line":147,"column":2}},{"start":{"line":147,"column":2},"end":{"line":147,"column":2}}]},"11":{"line":151,"type":"binary-expr","locations":[{"start":{"line":151,"column":39},"end":{"line":151,"column":73}},{"start":{"line":151,"column":77},"end":{"line":151,"column":107}}]},"12":{"line":152,"type":"binary-expr","locations":[{"start":{"line":152,"column":31},"end":{"line":152,"column":57}},{"start":{"line":152,"column":61},"end":{"line":152,"column":83}}]}},"code":["\"use strict\";","var utils = require('./utils');","var types = require('./types');","","/**"," * Creates a new instance of {@link ExecutionProfile}."," * @classdesc"," * Represents a set configurations to be used in a statement execution to be used for a single {@link Client} instance."," * <p>"," *   An {@link ExecutionProfile} instance should not be shared across different {@link Client} instances."," * </p>"," * @param {String} name Name of the execution profile."," * <p>"," *   Use <code>'default'</code> to specify that the new instance should be the default {@link ExecutionProfile} if no"," *   profile is specified in the execution."," * </p>"," * @param {Object} [options] Profile options, when any of the options is not specified the {@link Client} will the use"," * the ones defined in the default profile."," * @param {Number} [options.consistency] The consistency level to use for this profile."," * @param {LoadBalancingPolicy} [options.loadBalancing] The load-balancing policy to use for this profile."," * @param {Number} [options.readTimeout] The client per-host request timeout to use for this profile."," * @param {RetryPolicy} [options.retry] The retry policy to use for this profile."," * @param {Number} [options.serialConsistency] The serial consistency level to use for this profile."," * @constructor"," */","function ExecutionProfile(name, options) {","  if (typeof name !== 'string') {","    throw new TypeError('Execution profile name must be a string');","  }","  options = options || utils.emptyObject;","  /**","   * Name of the execution profile.","   * @type {String}","   */","  this.name = name;","  /**","   * Consistency level.","   * @type {Number}","   */","  this.consistency = options.consistency;","  /**","   * Load-balancing policy","   * @type {LoadBalancingPolicy}","   */","  this.loadBalancing = options.loadBalancing;","  /**","   * Client read timeout.","   * @type {Number}","   */","  this.readTimeout = options.readTimeout;","  /**","   * Retry policy.","   * @type {RetryPolicy}","   */","  this.retry = options.retry;","  /**","   * Serial consistency level.","   * @type {Number}","   */","  this.serialConsistency = options.serialConsistency;","}","","/**"," * @param {ClientOptions} options"," * @constructor"," * @ignore"," */","function ProfileManager(options) {","  this._profiles = options.profiles || [];","  this._setDefault(options);","  // A array of unique load balancing policies","  this._loadBalancingPolicies = [];","  // A dictionary of name keys and profile values","  this._profilesMap = {};","  this._profiles.forEach(function (p) {","    this._profilesMap[p.name] = p;","    // Set required properties","    p.loadBalancing = p.loadBalancing || this._defaultProfile.loadBalancing;","    // Using array indexOf is not very efficient (O(n)) but the amount of profiles should be limited","    // and a handful of load-balancing policies (no hashcode for load-Balancing policies)","    if (this._loadBalancingPolicies.indexOf(p.loadBalancing) === -1) {","      this._loadBalancingPolicies.push(p.loadBalancing);","    }","    return p;","  }, this);","}","","/**"," * @param {Client} client"," * @param {HostMap} hosts"," * @param {Function} callback"," */","ProfileManager.prototype.init = function (client, hosts, callback) {","  utils.eachSeries(this._loadBalancingPolicies, function (policy, next) {","    policy.init(client, hosts, next);","  }, callback);","};","","/**"," * Uses the load-balancing policies to get the relative distance to the host and return the closest one."," * @param {Host} host"," */","ProfileManager.prototype.getDistance = function (host) {","  var distance = types.distance.ignored;","  // this is performance critical: we can't use any other language features than for-loop :(","  for (var i = 0; i < this._loadBalancingPolicies.length; i++) {","    var d = this._loadBalancingPolicies[i].getDistance(host);","    if (d < distance) {","      distance = d;","      if (distance === types.distance.local) {","        break;","      }","    }","  }","  host.setDistance(distance);","  return distance;","};","","/**"," * @param {String|ExecutionProfile} name"," * @returns {ExecutionProfile|undefined} It returns the execution profile by name or the default profile when name is"," * undefined. It returns undefined when the profile does not exist."," */","ProfileManager.prototype.getProfile = function (name) {","  if (name instanceof ExecutionProfile) {","    return name;","  }","  return this._profilesMap[name || 'default'];","};","","/** @returns {ExecutionProfile} */","ProfileManager.prototype.getDefault = function () {","  return this._defaultProfile;","};","","/** @returns {LoadBalancingPolicy} */","ProfileManager.prototype.getDefaultLoadBalancing = function () {","  return this._defaultProfile.loadBalancing;","};","","/**"," * @private"," * @param {ClientOptions} options"," */","ProfileManager.prototype._setDefault = function (options) {","  this._defaultProfile = this._profiles.filter(function (p) { return p.name === 'default'; })[0];","  if (!this._defaultProfile) {","    this._profiles.push(this._defaultProfile = new ExecutionProfile('default'));","  }","  // set the required properties","  this._defaultProfile.loadBalancing = this._defaultProfile.loadBalancing || options.policies.loadBalancing;","  this._defaultProfile.retry = this._defaultProfile.retry || options.policies.retry;","};","","exports.ProfileManager = ProfileManager;","exports.ExecutionProfile = ExecutionProfile;",""],"l":{"2":1,"3":1,"26":1,"27":0,"28":0,"30":0,"35":0,"40":0,"45":0,"50":0,"55":0,"60":0,"68":1,"69":0,"70":0,"72":0,"74":0,"75":0,"76":0,"78":0,"81":0,"82":0,"84":0,"93":1,"94":0,"95":0,"103":1,"104":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"115":0,"116":0,"124":1,"125":0,"126":0,"128":0,"132":1,"133":0,"137":1,"138":0,"145":1,"146":0,"147":0,"148":0,"151":0,"152":0,"155":1,"156":1}},"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/request-handler.js":{"path":"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/request-handler.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":1,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":1,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":1,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":1,"72":1,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":1,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":1,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":1,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":1,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":1,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":1,"151":0,"152":0,"153":1,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":1,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":1,"186":0,"187":0,"188":1,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0,0,0,0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0},"fnMap":{"1":{"name":"RequestHandler","line":24,"loc":{"start":{"line":24,"column":0},"end":{"line":24,"column":66}}},"2":{"name":"(anonymous_2)","line":53,"loc":{"start":{"line":53,"column":46},"end":{"line":53,"column":80}}},"3":{"name":"(anonymous_3)","line":59,"loc":{"start":{"line":59,"column":64},"end":{"line":59,"column":89}}},"4":{"name":"(anonymous_4)","line":74,"loc":{"start":{"line":74,"column":48},"end":{"line":74,"column":78}}},"5":{"name":"iterateSingleCallback","line":96,"loc":{"start":{"line":96,"column":34},"end":{"line":96,"column":82}}},"6":{"name":"iterateOnNextTick","line":108,"loc":{"start":{"line":108,"column":30},"end":{"line":108,"column":59}}},"7":{"name":"(anonymous_7)","line":123,"loc":{"start":{"line":123,"column":48},"end":{"line":123,"column":74}}},"8":{"name":"(anonymous_8)","line":126,"loc":{"start":{"line":126,"column":24},"end":{"line":126,"column":51}}},"9":{"name":"(anonymous_9)","line":135,"loc":{"start":{"line":135,"column":52},"end":{"line":135,"column":67}}},"10":{"name":"(anonymous_10)","line":153,"loc":{"start":{"line":153,"column":32},"end":{"line":153,"column":70}}},"11":{"name":"(anonymous_11)","line":163,"loc":{"start":{"line":163,"column":35},"end":{"line":163,"column":53}}},"12":{"name":"(anonymous_12)","line":180,"loc":{"start":{"line":180,"column":45},"end":{"line":180,"column":83}}},"13":{"name":"readCallback","line":182,"loc":{"start":{"line":182,"column":47},"end":{"line":182,"column":84}}},"14":{"name":"(anonymous_14)","line":191,"loc":{"start":{"line":191,"column":35},"end":{"line":191,"column":67}}},"15":{"name":"schemaCb","line":201,"loc":{"start":{"line":201,"column":97},"end":{"line":201,"column":117}}},"16":{"name":"(anonymous_16)","line":216,"loc":{"start":{"line":216,"column":39},"end":{"line":216,"column":59}}},"17":{"name":"(anonymous_17)","line":239,"loc":{"start":{"line":239,"column":43},"end":{"line":239,"column":97}}},"18":{"name":"(anonymous_18)","line":242,"loc":{"start":{"line":242,"column":22},"end":{"line":242,"column":34}}},"19":{"name":"(anonymous_19)","line":246,"loc":{"start":{"line":246,"column":35},"end":{"line":246,"column":53}}},"20":{"name":"(anonymous_20)","line":263,"loc":{"start":{"line":263,"column":48},"end":{"line":263,"column":93}}},"21":{"name":"(anonymous_21)","line":266,"loc":{"start":{"line":266,"column":28},"end":{"line":266,"column":51}}},"22":{"name":"(anonymous_22)","line":267,"loc":{"start":{"line":267,"column":39},"end":{"line":267,"column":64}}},"23":{"name":"(anonymous_23)","line":273,"loc":{"start":{"line":273,"column":5},"end":{"line":273,"column":20}}},"24":{"name":"(anonymous_24)","line":287,"loc":{"start":{"line":287,"column":40},"end":{"line":287,"column":65}}},"25":{"name":"(anonymous_25)","line":321,"loc":{"start":{"line":321,"column":40},"end":{"line":321,"column":55}}},"26":{"name":"onRequestError","line":332,"loc":{"start":{"line":332,"column":2},"end":{"line":332,"column":28}}},"27":{"name":"(anonymous_27)","line":383,"loc":{"start":{"line":383,"column":34},"end":{"line":383,"column":83}}},"28":{"name":"(anonymous_28)","line":407,"loc":{"start":{"line":407,"column":44},"end":{"line":407,"column":73}}},"29":{"name":"retryRequest","line":410,"loc":{"start":{"line":410,"column":2},"end":{"line":410,"column":30}}},"30":{"name":"(anonymous_30)","line":419,"loc":{"start":{"line":419,"column":53},"end":{"line":419,"column":78}}},"31":{"name":"(anonymous_31)","line":441,"loc":{"start":{"line":441,"column":33},"end":{"line":441,"column":49}}},"32":{"name":"(anonymous_32)","line":447,"loc":{"start":{"line":447,"column":25},"end":{"line":447,"column":45}}},"33":{"name":"singlePrepareCallback","line":449,"loc":{"start":{"line":449,"column":27},"end":{"line":449,"column":73}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":27}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":33}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":31}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":31}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":37}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":40}},"7":{"start":{"line":10,"column":0},"end":{"line":10,"column":31}},"8":{"start":{"line":11,"column":0},"end":{"line":15,"column":2}},"9":{"start":{"line":24,"column":0},"end":{"line":45,"column":1}},"10":{"start":{"line":25,"column":2},"end":{"line":25,"column":23}},"11":{"start":{"line":26,"column":2},"end":{"line":26,"column":49}},"12":{"start":{"line":27,"column":2},"end":{"line":27,"column":33}},"13":{"start":{"line":28,"column":2},"end":{"line":28,"column":46}},"14":{"start":{"line":29,"column":2},"end":{"line":29,"column":46}},"15":{"start":{"line":30,"column":2},"end":{"line":30,"column":22}},"16":{"start":{"line":32,"column":2},"end":{"line":32,"column":22}},"17":{"start":{"line":34,"column":2},"end":{"line":34,"column":42}},"18":{"start":{"line":37,"column":2},"end":{"line":37,"column":19}},"19":{"start":{"line":39,"column":2},"end":{"line":39,"column":25}},"20":{"start":{"line":41,"column":2},"end":{"line":41,"column":27}},"21":{"start":{"line":42,"column":2},"end":{"line":42,"column":29}},"22":{"start":{"line":43,"column":2},"end":{"line":43,"column":23}},"23":{"start":{"line":44,"column":2},"end":{"line":44,"column":26}},"24":{"start":{"line":53,"column":0},"end":{"line":66,"column":2}},"25":{"start":{"line":54,"column":2},"end":{"line":54,"column":18}},"26":{"start":{"line":55,"column":2},"end":{"line":55,"column":38}},"27":{"start":{"line":56,"column":2},"end":{"line":58,"column":3}},"28":{"start":{"line":57,"column":4},"end":{"line":57,"column":66}},"29":{"start":{"line":59,"column":2},"end":{"line":65,"column":5}},"30":{"start":{"line":60,"column":4},"end":{"line":62,"column":5}},"31":{"start":{"line":61,"column":6},"end":{"line":61,"column":27}},"32":{"start":{"line":63,"column":4},"end":{"line":63,"column":33}},"33":{"start":{"line":64,"column":4},"end":{"line":64,"column":59}},"34":{"start":{"line":74,"column":0},"end":{"line":115,"column":2}},"35":{"start":{"line":76,"column":2},"end":{"line":76,"column":11}},"36":{"start":{"line":78,"column":2},"end":{"line":94,"column":3}},"37":{"start":{"line":79,"column":4},"end":{"line":79,"column":31}},"38":{"start":{"line":80,"column":4},"end":{"line":82,"column":5}},"39":{"start":{"line":81,"column":6},"end":{"line":81,"column":72}},"40":{"start":{"line":83,"column":4},"end":{"line":83,"column":22}},"41":{"start":{"line":85,"column":4},"end":{"line":85,"column":57}},"42":{"start":{"line":86,"column":4},"end":{"line":89,"column":5}},"43":{"start":{"line":88,"column":6},"end":{"line":88,"column":15}},"44":{"start":{"line":90,"column":4},"end":{"line":92,"column":5}},"45":{"start":{"line":91,"column":6},"end":{"line":91,"column":12}},"46":{"start":{"line":93,"column":4},"end":{"line":93,"column":62}},"47":{"start":{"line":95,"column":2},"end":{"line":95,"column":18}},"48":{"start":{"line":96,"column":2},"end":{"line":114,"column":5}},"49":{"start":{"line":97,"column":4},"end":{"line":101,"column":5}},"50":{"start":{"line":99,"column":6},"end":{"line":99,"column":23}},"51":{"start":{"line":100,"column":6},"end":{"line":100,"column":40}},"52":{"start":{"line":102,"column":4},"end":{"line":104,"column":5}},"53":{"start":{"line":103,"column":6},"end":{"line":103,"column":42}},"54":{"start":{"line":105,"column":4},"end":{"line":111,"column":5}},"55":{"start":{"line":107,"column":6},"end":{"line":107,"column":30}},"56":{"start":{"line":108,"column":6},"end":{"line":110,"column":9}},"57":{"start":{"line":109,"column":8},"end":{"line":109,"column":54}},"58":{"start":{"line":113,"column":4},"end":{"line":113,"column":57}},"59":{"start":{"line":123,"column":0},"end":{"line":143,"column":2}},"60":{"start":{"line":125,"column":2},"end":{"line":125,"column":18}},"61":{"start":{"line":126,"column":2},"end":{"line":142,"column":5}},"62":{"start":{"line":127,"column":4},"end":{"line":129,"column":5}},"63":{"start":{"line":128,"column":6},"end":{"line":128,"column":27}},"64":{"start":{"line":130,"column":4},"end":{"line":133,"column":5}},"65":{"start":{"line":132,"column":6},"end":{"line":132,"column":40}},"66":{"start":{"line":135,"column":4},"end":{"line":141,"column":7}},"67":{"start":{"line":136,"column":6},"end":{"line":139,"column":7}},"68":{"start":{"line":137,"column":8},"end":{"line":137,"column":40}},"69":{"start":{"line":138,"column":8},"end":{"line":138,"column":29}},"70":{"start":{"line":140,"column":6},"end":{"line":140,"column":33}},"71":{"start":{"line":145,"column":0},"end":{"line":145,"column":41}},"72":{"start":{"line":153,"column":0},"end":{"line":171,"column":2}},"73":{"start":{"line":154,"column":2},"end":{"line":159,"column":3}},"74":{"start":{"line":155,"column":4},"end":{"line":155,"column":43}},"75":{"start":{"line":156,"column":4},"end":{"line":158,"column":5}},"76":{"start":{"line":157,"column":6},"end":{"line":157,"column":56}},"77":{"start":{"line":160,"column":2},"end":{"line":160,"column":25}},"78":{"start":{"line":161,"column":2},"end":{"line":161,"column":32}},"79":{"start":{"line":162,"column":2},"end":{"line":162,"column":18}},"80":{"start":{"line":163,"column":2},"end":{"line":170,"column":5}},"81":{"start":{"line":164,"column":4},"end":{"line":167,"column":5}},"82":{"start":{"line":166,"column":6},"end":{"line":166,"column":27}},"83":{"start":{"line":168,"column":4},"end":{"line":168,"column":24}},"84":{"start":{"line":169,"column":4},"end":{"line":169,"column":55}},"85":{"start":{"line":180,"column":0},"end":{"line":210,"column":2}},"86":{"start":{"line":181,"column":2},"end":{"line":181,"column":18}},"87":{"start":{"line":182,"column":2},"end":{"line":209,"column":5}},"88":{"start":{"line":183,"column":4},"end":{"line":186,"column":5}},"89":{"start":{"line":185,"column":6},"end":{"line":185,"column":46}},"90":{"start":{"line":187,"column":4},"end":{"line":187,"column":45}},"91":{"start":{"line":188,"column":4},"end":{"line":188,"column":109}},"92":{"start":{"line":189,"column":4},"end":{"line":199,"column":5}},"93":{"start":{"line":191,"column":6},"end":{"line":198,"column":9}},"94":{"start":{"line":192,"column":8},"end":{"line":197,"column":31}},"95":{"start":{"line":200,"column":4},"end":{"line":204,"column":5}},"96":{"start":{"line":201,"column":6},"end":{"line":203,"column":9}},"97":{"start":{"line":202,"column":8},"end":{"line":202,"column":31}},"98":{"start":{"line":205,"column":4},"end":{"line":207,"column":5}},"99":{"start":{"line":206,"column":6},"end":{"line":206,"column":50}},"100":{"start":{"line":208,"column":4},"end":{"line":208,"column":27}},"101":{"start":{"line":216,"column":0},"end":{"line":230,"column":2}},"102":{"start":{"line":217,"column":2},"end":{"line":217,"column":17}},"103":{"start":{"line":218,"column":2},"end":{"line":218,"column":41}},"104":{"start":{"line":219,"column":2},"end":{"line":225,"column":3}},"105":{"start":{"line":220,"column":4},"end":{"line":220,"column":25}},"106":{"start":{"line":221,"column":4},"end":{"line":221,"column":49}},"107":{"start":{"line":222,"column":4},"end":{"line":224,"column":5}},"108":{"start":{"line":223,"column":6},"end":{"line":223,"column":12}},"109":{"start":{"line":226,"column":2},"end":{"line":228,"column":3}},"110":{"start":{"line":227,"column":4},"end":{"line":227,"column":82}},"111":{"start":{"line":229,"column":2},"end":{"line":229,"column":60}},"112":{"start":{"line":239,"column":0},"end":{"line":254,"column":2}},"113":{"start":{"line":240,"column":2},"end":{"line":240,"column":52}},"114":{"start":{"line":241,"column":2},"end":{"line":241,"column":18}},"115":{"start":{"line":242,"column":2},"end":{"line":245,"column":4}},"116":{"start":{"line":244,"column":4},"end":{"line":244,"column":69}},"117":{"start":{"line":246,"column":2},"end":{"line":253,"column":5}},"118":{"start":{"line":247,"column":4},"end":{"line":250,"column":5}},"119":{"start":{"line":249,"column":6},"end":{"line":249,"column":27}},"120":{"start":{"line":251,"column":4},"end":{"line":251,"column":24}},"121":{"start":{"line":252,"column":4},"end":{"line":252,"column":65}},"122":{"start":{"line":263,"column":0},"end":{"line":279,"column":2}},"123":{"start":{"line":264,"column":2},"end":{"line":264,"column":18}},"124":{"start":{"line":265,"column":2},"end":{"line":265,"column":16}},"125":{"start":{"line":266,"column":2},"end":{"line":278,"column":5}},"126":{"start":{"line":267,"column":4},"end":{"line":272,"column":7}},"127":{"start":{"line":268,"column":6},"end":{"line":270,"column":7}},"128":{"start":{"line":269,"column":8},"end":{"line":269,"column":47}},"129":{"start":{"line":271,"column":6},"end":{"line":271,"column":16}},"130":{"start":{"line":274,"column":4},"end":{"line":276,"column":5}},"131":{"start":{"line":275,"column":6},"end":{"line":275,"column":46}},"132":{"start":{"line":277,"column":4},"end":{"line":277,"column":15}},"133":{"start":{"line":287,"column":0},"end":{"line":316,"column":2}},"134":{"start":{"line":289,"column":2},"end":{"line":289,"column":43}},"135":{"start":{"line":290,"column":2},"end":{"line":290,"column":41}},"136":{"start":{"line":291,"column":2},"end":{"line":294,"column":3}},"137":{"start":{"line":293,"column":4},"end":{"line":293,"column":56}},"138":{"start":{"line":295,"column":2},"end":{"line":295,"column":44}},"139":{"start":{"line":296,"column":2},"end":{"line":298,"column":3}},"140":{"start":{"line":297,"column":4},"end":{"line":297,"column":46}},"141":{"start":{"line":299,"column":2},"end":{"line":308,"column":3}},"142":{"start":{"line":301,"column":4},"end":{"line":303,"column":5}},"143":{"start":{"line":302,"column":6},"end":{"line":302,"column":53}},"144":{"start":{"line":304,"column":4},"end":{"line":306,"column":5}},"145":{"start":{"line":305,"column":6},"end":{"line":305,"column":40}},"146":{"start":{"line":307,"column":4},"end":{"line":307,"column":25}},"147":{"start":{"line":309,"column":2},"end":{"line":314,"column":3}},"148":{"start":{"line":311,"column":4},"end":{"line":313,"column":108}},"149":{"start":{"line":315,"column":2},"end":{"line":315,"column":86}},"150":{"start":{"line":321,"column":0},"end":{"line":375,"column":2}},"151":{"start":{"line":322,"column":2},"end":{"line":330,"column":4}},"152":{"start":{"line":331,"column":2},"end":{"line":331,"column":18}},"153":{"start":{"line":332,"column":2},"end":{"line":337,"column":3}},"154":{"start":{"line":333,"column":4},"end":{"line":335,"column":5}},"155":{"start":{"line":334,"column":6},"end":{"line":334,"column":37}},"156":{"start":{"line":336,"column":4},"end":{"line":336,"column":89}},"157":{"start":{"line":338,"column":2},"end":{"line":344,"column":3}},"158":{"start":{"line":339,"column":4},"end":{"line":342,"column":5}},"159":{"start":{"line":341,"column":6},"end":{"line":341,"column":37}},"160":{"start":{"line":343,"column":4},"end":{"line":343,"column":28}},"161":{"start":{"line":345,"column":2},"end":{"line":354,"column":3}},"162":{"start":{"line":346,"column":4},"end":{"line":346,"column":37}},"163":{"start":{"line":347,"column":4},"end":{"line":347,"column":43}},"164":{"start":{"line":348,"column":4},"end":{"line":351,"column":5}},"165":{"start":{"line":350,"column":6},"end":{"line":350,"column":37}},"166":{"start":{"line":352,"column":4},"end":{"line":352,"column":80}},"167":{"start":{"line":353,"column":4},"end":{"line":353,"column":28}},"168":{"start":{"line":355,"column":2},"end":{"line":373,"column":3}},"169":{"start":{"line":356,"column":4},"end":{"line":372,"column":5}},"170":{"start":{"line":360,"column":8},"end":{"line":360,"column":32}},"171":{"start":{"line":363,"column":8},"end":{"line":363,"column":105}},"172":{"start":{"line":366,"column":8},"end":{"line":367,"column":91}},"173":{"start":{"line":370,"column":8},"end":{"line":371,"column":87}},"174":{"start":{"line":374,"column":2},"end":{"line":374,"column":63}},"175":{"start":{"line":383,"column":0},"end":{"line":399,"column":2}},"176":{"start":{"line":384,"column":2},"end":{"line":384,"column":39}},"177":{"start":{"line":385,"column":2},"end":{"line":388,"column":3}},"178":{"start":{"line":387,"column":4},"end":{"line":387,"column":39}},"179":{"start":{"line":389,"column":2},"end":{"line":389,"column":20}},"180":{"start":{"line":390,"column":2},"end":{"line":392,"column":3}},"181":{"start":{"line":391,"column":4},"end":{"line":391,"column":43}},"182":{"start":{"line":393,"column":2},"end":{"line":396,"column":3}},"183":{"start":{"line":395,"column":4},"end":{"line":395,"column":79}},"184":{"start":{"line":398,"column":2},"end":{"line":398,"column":57}},"185":{"start":{"line":407,"column":0},"end":{"line":470,"column":2}},"186":{"start":{"line":408,"column":2},"end":{"line":408,"column":138}},"187":{"start":{"line":409,"column":2},"end":{"line":409,"column":18}},"188":{"start":{"line":410,"column":2},"end":{"line":416,"column":3}},"189":{"start":{"line":411,"column":4},"end":{"line":414,"column":5}},"190":{"start":{"line":413,"column":6},"end":{"line":413,"column":27}},"191":{"start":{"line":415,"column":4},"end":{"line":415,"column":72}},"192":{"start":{"line":417,"column":2},"end":{"line":436,"column":3}},"193":{"start":{"line":419,"column":4},"end":{"line":434,"column":22}},"194":{"start":{"line":420,"column":6},"end":{"line":423,"column":7}},"195":{"start":{"line":422,"column":8},"end":{"line":422,"column":15}},"196":{"start":{"line":424,"column":6},"end":{"line":433,"column":7}},"197":{"start":{"line":428,"column":8},"end":{"line":431,"column":49}},"198":{"start":{"line":432,"column":8},"end":{"line":432,"column":43}},"199":{"start":{"line":435,"column":4},"end":{"line":435,"column":11}},"200":{"start":{"line":437,"column":2},"end":{"line":468,"column":3}},"201":{"start":{"line":440,"column":4},"end":{"line":440,"column":21}},"202":{"start":{"line":441,"column":4},"end":{"line":444,"column":7}},"203":{"start":{"line":443,"column":6},"end":{"line":443,"column":38}},"204":{"start":{"line":445,"column":4},"end":{"line":445,"column":44}},"205":{"start":{"line":446,"column":4},"end":{"line":446,"column":57}},"206":{"start":{"line":447,"column":4},"end":{"line":465,"column":7}},"207":{"start":{"line":448,"column":6},"end":{"line":448,"column":32}},"208":{"start":{"line":449,"column":6},"end":{"line":464,"column":8}},"209":{"start":{"line":450,"column":8},"end":{"line":453,"column":9}},"210":{"start":{"line":452,"column":10},"end":{"line":452,"column":17}},"211":{"start":{"line":454,"column":8},"end":{"line":463,"column":9}},"212":{"start":{"line":458,"column":10},"end":{"line":461,"column":43}},"213":{"start":{"line":462,"column":10},"end":{"line":462,"column":37}},"214":{"start":{"line":466,"column":4},"end":{"line":466,"column":75}},"215":{"start":{"line":467,"column":4},"end":{"line":467,"column":11}},"216":{"start":{"line":469,"column":2},"end":{"line":469,"column":92}},"217":{"start":{"line":472,"column":0},"end":{"line":472,"column":32}}},"branchMap":{"1":{"line":56,"type":"if","locations":[{"start":{"line":56,"column":2},"end":{"line":56,"column":2}},{"start":{"line":56,"column":2},"end":{"line":56,"column":2}}]},"2":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":4},"end":{"line":60,"column":4}},{"start":{"line":60,"column":4},"end":{"line":60,"column":4}}]},"3":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":4},"end":{"line":80,"column":4}},{"start":{"line":80,"column":4},"end":{"line":80,"column":4}}]},"4":{"line":86,"type":"if","locations":[{"start":{"line":86,"column":4},"end":{"line":86,"column":4}},{"start":{"line":86,"column":4},"end":{"line":86,"column":4}}]},"5":{"line":90,"type":"if","locations":[{"start":{"line":90,"column":4},"end":{"line":90,"column":4}},{"start":{"line":90,"column":4},"end":{"line":90,"column":4}}]},"6":{"line":97,"type":"if","locations":[{"start":{"line":97,"column":4},"end":{"line":97,"column":4}},{"start":{"line":97,"column":4},"end":{"line":97,"column":4}}]},"7":{"line":102,"type":"if","locations":[{"start":{"line":102,"column":4},"end":{"line":102,"column":4}},{"start":{"line":102,"column":4},"end":{"line":102,"column":4}}]},"8":{"line":105,"type":"if","locations":[{"start":{"line":105,"column":4},"end":{"line":105,"column":4}},{"start":{"line":105,"column":4},"end":{"line":105,"column":4}}]},"9":{"line":127,"type":"if","locations":[{"start":{"line":127,"column":4},"end":{"line":127,"column":4}},{"start":{"line":127,"column":4},"end":{"line":127,"column":4}}]},"10":{"line":130,"type":"if","locations":[{"start":{"line":130,"column":4},"end":{"line":130,"column":4}},{"start":{"line":130,"column":4},"end":{"line":130,"column":4}}]},"11":{"line":130,"type":"binary-expr","locations":[{"start":{"line":130,"column":8},"end":{"line":130,"column":29}},{"start":{"line":130,"column":33},"end":{"line":130,"column":77}}]},"12":{"line":136,"type":"if","locations":[{"start":{"line":136,"column":6},"end":{"line":136,"column":6}},{"start":{"line":136,"column":6},"end":{"line":136,"column":6}}]},"13":{"line":154,"type":"if","locations":[{"start":{"line":154,"column":2},"end":{"line":154,"column":2}},{"start":{"line":154,"column":2},"end":{"line":154,"column":2}}]},"14":{"line":155,"type":"binary-expr","locations":[{"start":{"line":155,"column":14},"end":{"line":155,"column":21}},{"start":{"line":155,"column":25},"end":{"line":155,"column":42}}]},"15":{"line":156,"type":"if","locations":[{"start":{"line":156,"column":4},"end":{"line":156,"column":4}},{"start":{"line":156,"column":4},"end":{"line":156,"column":4}}]},"16":{"line":164,"type":"if","locations":[{"start":{"line":164,"column":4},"end":{"line":164,"column":4}},{"start":{"line":164,"column":4},"end":{"line":164,"column":4}}]},"17":{"line":183,"type":"if","locations":[{"start":{"line":183,"column":4},"end":{"line":183,"column":4}},{"start":{"line":183,"column":4},"end":{"line":183,"column":4}}]},"18":{"line":187,"type":"binary-expr","locations":[{"start":{"line":187,"column":15},"end":{"line":187,"column":23}},{"start":{"line":187,"column":27},"end":{"line":187,"column":44}}]},"19":{"line":189,"type":"if","locations":[{"start":{"line":189,"column":4},"end":{"line":189,"column":4}},{"start":{"line":189,"column":4},"end":{"line":189,"column":4}}]},"20":{"line":200,"type":"if","locations":[{"start":{"line":200,"column":4},"end":{"line":200,"column":4}},{"start":{"line":200,"column":4},"end":{"line":200,"column":4}}]},"21":{"line":205,"type":"if","locations":[{"start":{"line":205,"column":4},"end":{"line":205,"column":4}},{"start":{"line":205,"column":4},"end":{"line":205,"column":4}}]},"22":{"line":222,"type":"if","locations":[{"start":{"line":222,"column":4},"end":{"line":222,"column":4}},{"start":{"line":222,"column":4},"end":{"line":222,"column":4}}]},"23":{"line":226,"type":"if","locations":[{"start":{"line":226,"column":2},"end":{"line":226,"column":2}},{"start":{"line":226,"column":2},"end":{"line":226,"column":2}}]},"24":{"line":247,"type":"if","locations":[{"start":{"line":247,"column":4},"end":{"line":247,"column":4}},{"start":{"line":247,"column":4},"end":{"line":247,"column":4}}]},"25":{"line":268,"type":"if","locations":[{"start":{"line":268,"column":6},"end":{"line":268,"column":6}},{"start":{"line":268,"column":6},"end":{"line":268,"column":6}}]},"26":{"line":274,"type":"if","locations":[{"start":{"line":274,"column":4},"end":{"line":274,"column":4}},{"start":{"line":274,"column":4},"end":{"line":274,"column":4}}]},"27":{"line":291,"type":"if","locations":[{"start":{"line":291,"column":2},"end":{"line":291,"column":2}},{"start":{"line":291,"column":2},"end":{"line":291,"column":2}}]},"28":{"line":291,"type":"binary-expr","locations":[{"start":{"line":291,"column":7},"end":{"line":291,"column":42}},{"start":{"line":291,"column":47},"end":{"line":291,"column":95}}]},"29":{"line":296,"type":"if","locations":[{"start":{"line":296,"column":2},"end":{"line":296,"column":2}},{"start":{"line":296,"column":2},"end":{"line":296,"column":2}}]},"30":{"line":299,"type":"if","locations":[{"start":{"line":299,"column":2},"end":{"line":299,"column":2}},{"start":{"line":299,"column":2},"end":{"line":299,"column":2}}]},"31":{"line":299,"type":"binary-expr","locations":[{"start":{"line":299,"column":6},"end":{"line":299,"column":19}},{"start":{"line":299,"column":23},"end":{"line":299,"column":88}}]},"32":{"line":301,"type":"if","locations":[{"start":{"line":301,"column":4},"end":{"line":301,"column":4}},{"start":{"line":301,"column":4},"end":{"line":301,"column":4}}]},"33":{"line":304,"type":"if","locations":[{"start":{"line":304,"column":4},"end":{"line":304,"column":4}},{"start":{"line":304,"column":4},"end":{"line":304,"column":4}}]},"34":{"line":304,"type":"binary-expr","locations":[{"start":{"line":304,"column":8},"end":{"line":304,"column":53}},{"start":{"line":304,"column":57},"end":{"line":304,"column":104}}]},"35":{"line":309,"type":"if","locations":[{"start":{"line":309,"column":2},"end":{"line":309,"column":2}},{"start":{"line":309,"column":2},"end":{"line":309,"column":2}}]},"36":{"line":323,"type":"binary-expr","locations":[{"start":{"line":323,"column":11},"end":{"line":323,"column":23}},{"start":{"line":323,"column":27},"end":{"line":323,"column":45}}]},"37":{"line":333,"type":"if","locations":[{"start":{"line":333,"column":4},"end":{"line":333,"column":4}},{"start":{"line":333,"column":4},"end":{"line":333,"column":4}}]},"38":{"line":338,"type":"if","locations":[{"start":{"line":338,"column":2},"end":{"line":338,"column":2}},{"start":{"line":338,"column":2},"end":{"line":338,"column":2}}]},"39":{"line":339,"type":"if","locations":[{"start":{"line":339,"column":4},"end":{"line":339,"column":4}},{"start":{"line":339,"column":4},"end":{"line":339,"column":4}}]},"40":{"line":345,"type":"if","locations":[{"start":{"line":345,"column":2},"end":{"line":345,"column":2}},{"start":{"line":345,"column":2},"end":{"line":345,"column":2}}]},"41":{"line":348,"type":"if","locations":[{"start":{"line":348,"column":4},"end":{"line":348,"column":4}},{"start":{"line":348,"column":4},"end":{"line":348,"column":4}}]},"42":{"line":355,"type":"if","locations":[{"start":{"line":355,"column":2},"end":{"line":355,"column":2}},{"start":{"line":355,"column":2},"end":{"line":355,"column":2}}]},"43":{"line":356,"type":"switch","locations":[{"start":{"line":357,"column":6},"end":{"line":357,"column":47}},{"start":{"line":358,"column":6},"end":{"line":358,"column":52}},{"start":{"line":359,"column":6},"end":{"line":360,"column":32}},{"start":{"line":361,"column":6},"end":{"line":363,"column":105}},{"start":{"line":364,"column":6},"end":{"line":367,"column":91}},{"start":{"line":368,"column":6},"end":{"line":371,"column":87}}]},"44":{"line":385,"type":"if","locations":[{"start":{"line":385,"column":2},"end":{"line":385,"column":2}},{"start":{"line":385,"column":2},"end":{"line":385,"column":2}}]},"45":{"line":390,"type":"if","locations":[{"start":{"line":390,"column":2},"end":{"line":390,"column":2}},{"start":{"line":390,"column":2},"end":{"line":390,"column":2}}]},"46":{"line":393,"type":"if","locations":[{"start":{"line":393,"column":2},"end":{"line":393,"column":2}},{"start":{"line":393,"column":2},"end":{"line":393,"column":2}}]},"47":{"line":411,"type":"if","locations":[{"start":{"line":411,"column":4},"end":{"line":411,"column":4}},{"start":{"line":411,"column":4},"end":{"line":411,"column":4}}]},"48":{"line":417,"type":"if","locations":[{"start":{"line":417,"column":2},"end":{"line":417,"column":2}},{"start":{"line":417,"column":2},"end":{"line":417,"column":2}}]},"49":{"line":420,"type":"if","locations":[{"start":{"line":420,"column":6},"end":{"line":420,"column":6}},{"start":{"line":420,"column":6},"end":{"line":420,"column":6}}]},"50":{"line":424,"type":"if","locations":[{"start":{"line":424,"column":6},"end":{"line":424,"column":6}},{"start":{"line":424,"column":6},"end":{"line":424,"column":6}}]},"51":{"line":424,"type":"binary-expr","locations":[{"start":{"line":424,"column":10},"end":{"line":424,"column":39}},{"start":{"line":425,"column":8},"end":{"line":425,"column":58}},{"start":{"line":426,"column":8},"end":{"line":426,"column":76}}]},"52":{"line":437,"type":"if","locations":[{"start":{"line":437,"column":2},"end":{"line":437,"column":2}},{"start":{"line":437,"column":2},"end":{"line":437,"column":2}}]},"53":{"line":450,"type":"if","locations":[{"start":{"line":450,"column":8},"end":{"line":450,"column":8}},{"start":{"line":450,"column":8},"end":{"line":450,"column":8}}]},"54":{"line":454,"type":"if","locations":[{"start":{"line":454,"column":8},"end":{"line":454,"column":8}},{"start":{"line":454,"column":8},"end":{"line":454,"column":8}}]},"55":{"line":454,"type":"binary-expr","locations":[{"start":{"line":454,"column":12},"end":{"line":454,"column":41}},{"start":{"line":455,"column":10},"end":{"line":455,"column":52}},{"start":{"line":456,"column":10},"end":{"line":456,"column":70}}]}},"code":["'use strict';","var util = require('util');","","var errors = require('./errors');","var types = require('./types');","var utils = require('./utils');","var requests = require('./requests');","var retry = require('./policies/retry');","","var maxSyncHostIterations = 20;","var retryOnNextHostDecision = {","  decision: retry.RetryPolicy.retryDecision.retry,","  useCurrentHost: false,","  consistency: undefined","};","","/**"," * Handles a request to Cassandra, dealing with host fail-over and retries on error"," * @param {Client} client Client instance used to retrieve and set the keyspace."," * @param {LoadBalancingPolicy} loadBalancingPolicy The load-balancing policy to use for the executions."," * @param {RetryPolicy} retryPolicy The retry policy to use for the executions."," * @constructor"," */","function RequestHandler(client, loadBalancingPolicy, retryPolicy) {","  this.client = client;","  this.loadBalancingPolicy = loadBalancingPolicy;","  this.retryPolicy = retryPolicy;","  this.profileManager = client.profileManager;","  this.logEmitter = client.options.logEmitter;","  this.retryCount = 0;","  //current request being executed.","  this.request = null;","  //the options for the request.","  this.requestOptions = utils.emptyObject;","  //The host selected by the load balancing policy to execute the request","  /** @type {Host} */","  this.host = null;","  /** @type {Connection} */","  this.connection = null;","  /** @type {Function} */","  this.retryHandler = null;","  this.stackContainer = null;","  this.triedHosts = {};","  this.hostIterations = 0;","}","","/**"," * Gets a connection from the next host according to the load balancing policy"," * @param {QueryOptions} queryOptions"," * @param {function} callback"," * @private"," */","RequestHandler.prototype._getNextConnection = function (queryOptions, callback) {","  var self = this;","  var keyspace = this.client.keyspace;","  if (this.hostIterator) {","    return self._iterateThroughHosts(this.hostIterator, callback);","  }","  this.loadBalancingPolicy.newQueryPlan(keyspace, queryOptions, function (err, iterator) {","    if (err) {","      return callback(err);","    }","    self.hostIterator = iterator;","    self._iterateThroughHosts(self.hostIterator, callback);","  });","};","","/**"," * Uses the iterator to try to acquire a connection from a host"," * @param {{next: function}} iterator"," * @param {Function} callback callback(err, connection, host) to use"," * @private"," */","RequestHandler.prototype._iterateThroughHosts = function (iterator, callback) {","  /** @type {Host} */","  var host;","  // get a host that is UP in a sync loop","  while (true) {","    var item = iterator.next();","    if (item.done) {","      return callback(new errors.NoHostAvailableError(this.triedHosts));","    }","    host = item.value;","    // set the distance relative to the client first","    var distance = this.profileManager.getDistance(host);","    if (distance === types.distance.ignored) {","      //If its marked as ignore by the load balancing policy, move on.","      continue;","    }","    if (host.isUp()) {","      break;","    }","    this.triedHosts[host.address] = 'Host considered as DOWN';","  }","  var self = this;","  this._getPooledConnection(host, function iterateSingleCallback(err, connection) {","    if (connection) {","      // Connection acquired","      self.host = host;","      return callback(null, connection);","    }","    if (err) {","      self.triedHosts[host.address] = err;","    }","    if (++self.hostIterations > maxSyncHostIterations) {","      //avoid a large number sync recursive calls","      self.hostIterations = 0;","      return process.nextTick(function iterateOnNextTick() {","        self._iterateThroughHosts(iterator, callback);","      });","    }","    //move to next host","    return self._iterateThroughHosts(iterator, callback);","  });","};","","/**"," * Gets connection from the host connection pool"," * @param {Host} host"," * @param {Function} callback callback(err, connection, host) to use"," * @private"," */","RequestHandler.prototype._getPooledConnection = function (host, callback) {","  // Implementation detail: avoid the overhead of async flow control functions","  var self = this;","  host.borrowConnection(function (err, connection) {","    if (err) {","      return callback(err);","    }","    if (!self.client.keyspace || self.client.keyspace === connection.keyspace) {","      // connection is ready","      return callback(null, connection);","    }","    // switch keyspace","    connection.changeKeyspace(self.client.keyspace, function (err) {","      if (err) {","        host.removeFromPool(connection);","        return callback(err);","      }","      callback(null, connection);","    });","  });","};","","RequestHandler.prototype.log = utils.log;","","/**"," * Gets an available connection and sends the request"," * @param request"," * @param {QueryOptions|null} options"," * @param {Function} callback"," */","RequestHandler.prototype.send = function (request, options, callback) {","  if (this.request === null) {","    options = options || utils.emptyObject;","    if (options.captureStackTrace) {","      Error.captureStackTrace(this.stackContainer = {});","    }","  }","  this.request = request;","  this.requestOptions = options;","  var self = this;","  this._getNextConnection(options, function (err, c) {","    if (err) {","      //No connection available","      return callback(err);","    }","    self.connection = c;","    self._sendOnConnection(request, options, callback);","  });","};","","/**"," * Sends a request to the current connection, adapting the result and retrying, if necessary."," * @param request"," * @param {QueryOptions} options"," * @param {Function} callback"," * @private"," */","RequestHandler.prototype._sendOnConnection = function (request, options, callback) {","  var self = this;","  this.connection.sendStream(request, options, function readCallback(err, response) {","    if (err) {","      //Something bad happened, maybe retry or do something about it","      return self._handleError(err, callback);","    }","    response = response || utils.emptyObject;","    var result = new types.ResultSet(response, self.host.address, self.triedHosts, self.request.consistency);","    if (result.info.warnings) {","      //log the warnings","      result.info.warnings.forEach(function (message, i, warnings) {","        self.log('warning', util.format(","          'Received warning (%d of %d) \"%s\" for query \"%s\"',","          i + 1,","          warnings.length,","          message,","          self.request.query));","      });","    }","    if (response.schemaChange) {","      return self.client.handleSchemaAgreementAndRefresh(self.connection, response.schemaChange, function schemaCb() {","        callback(null, result);","      });","    }","    if (response.keyspaceSet) {","      self.client.keyspace = response.keyspaceSet;","    }","    callback(null, result);","  });","};","","/**"," * Sets the keyspace in any connection that is already opened."," * @param {Function} callback"," */","RequestHandler.prototype.setKeyspace = function (callback) {","  var connection;","  var hosts = this.client.hosts.values();","  for (var i = 0; i < hosts.length; i++) {","    this.host = hosts[i];","    connection = this.host.getActiveConnection();","    if (connection) {","      break;","    }","  }","  if (!connection) {","    return callback(new errors.DriverInternalError('No active connection found'));","  }","  connection.changeKeyspace(this.client.keyspace, callback);","};","","/**"," * Sends multiple prepare requests on the next connection available"," * @param {Array.<string>} queries"," * @param {Array.<function>} callbacksArray"," * @param {QueryOptions} options"," * @param {function} callback"," */","RequestHandler.prototype.prepareMultiple = function (queries, callbacksArray, options, callback) {","  Error.captureStackTrace(this.stackContainer = {});","  var self = this;","  this.retryHandler = function () {","    // Use a custom retryHandler","    self.prepareMultiple(queries, callbacksArray, options, callback);","  };","  this._getNextConnection(options, function (err, c) {","    if (err) {","      //No connection available, no point on retrying","      return callback(err);","    }","    self.connection = c;","    self._prepareOnConnection(queries, callbacksArray, callback);","  });","};","","/**"," * Serially prepares multiple queries on the current connection and handles retry if necessary"," * @param {Array.<string>} queries"," * @param {Array.<function>} callbacksArray"," * @param {function} callback"," * @private"," */","RequestHandler.prototype._prepareOnConnection = function (queries, callbacksArray, callback) {","  var self = this;","  var index = 0;","  utils.eachSeries(queries, function (query, next) {","    self.connection.prepareOnce(query, function (err, response) {","      if (callbacksArray) {","        callbacksArray[index++](err, response);","      }","      next(err);","    });","  }, function (err) {","    if (err) {","      return self._handleError(err, callback);","    }","    callback();","  });","};","","/**"," * Checks if the error and determines if it should be ignored, retried or rethrown."," * @param {Object} err"," * @param {Function} callback"," * @private"," */","RequestHandler.prototype._handleError = function (err, callback) {","  // add the error to the tried hosts","  this.triedHosts[this.host.address] = err;","  err['coordinator'] = this.host.address;","  if ((err instanceof errors.ResponseError) && err.code === types.responseErrorCodes.unprepared) {","    //noinspection JSUnresolvedVariable","    return this._prepareAndRetry(err.queryId, callback);","  }","  var decisionInfo = this._getDecision(err);","  if (err.isSocketError) {","    this.host.removeFromPool(this.connection);","  }","  if (!decisionInfo || decisionInfo.decision === retry.RetryPolicy.retryDecision.rethrow) {","    // callback in error","    if (this.requestOptions.captureStackTrace) {","      utils.fixStack(this.stackContainer.stack, err);","    }","    if (this.request instanceof requests.QueryRequest || this.request instanceof requests.ExecuteRequest) {","      err['query'] = this.request.query;","    }","    return callback(err);","  }","  if (decisionInfo.decision === retry.RetryPolicy.retryDecision.ignore) {","    //Return an empty response","    return callback(","      null,","      new types.ResultSet(utils.emptyObject, this.host.address, this.triedHosts, this.request.consistency));","  }","  return this._retry(decisionInfo.consistency, decisionInfo.useCurrentHost, callback);","};","","/**"," * @returns {{decision, useCurrentHost, consistency}}"," */","RequestHandler.prototype._getDecision = function (err) {","  var operationInfo = {","    query: this.request && this.request.query,","    options: this.requestOptions,","    nbRetry: this.retryCount,","    // handler, request and retryOnTimeout properties are deprecated and should be removed in the next major version","    handler: this,","    request: this.request,","    retryOnTimeout: false","  };","  var self = this;","  function onRequestError() {","    if (self.retryHandler) {","      return retryOnNextHostDecision;","    }","    return self.retryPolicy.onRequestError(operationInfo, self.request.consistency, err);","  }","  if (err.isSocketError) {","    if (err.requestNotWritten) {","      // the request was definitely not applied, it's safe to retry","      return retryOnNextHostDecision;","    }","    return onRequestError();","  }","  if (err instanceof errors.OperationTimedOutError) {","    this.log('warning', err.message);","    this.host.checkHealth(this.connection);","    if (this.request instanceof requests.PrepareRequest) {","      // always retry on next host for PREPARE requests","      return retryOnNextHostDecision;","    }","    operationInfo.retryOnTimeout = this.requestOptions.retryOnTimeout !== false;","    return onRequestError();","  }","  if (err instanceof errors.ResponseError) {","    switch (err.code) {","      case types.responseErrorCodes.overloaded:","      case types.responseErrorCodes.isBootstrapping:","      case types.responseErrorCodes.truncateError:","        return onRequestError();","      case types.responseErrorCodes.unavailableException:","        //noinspection JSUnresolvedVariable","        return this.retryPolicy.onUnavailable(operationInfo, err.consistencies, err.required, err.alive);","      case types.responseErrorCodes.readTimeout:","        //noinspection JSUnresolvedVariable","        return this.retryPolicy.onReadTimeout(","          operationInfo, err.consistencies, err.received, err.blockFor, err.isDataPresent);","      case types.responseErrorCodes.writeTimeout:","        //noinspection JSUnresolvedVariable","        return this.retryPolicy.onWriteTimeout(","          operationInfo, err.consistencies, err.received, err.blockFor, err.writeType);","    }","  }","  return { decision: retry.RetryPolicy.retryDecision.rethrow };","};","","/**"," * @param {Number} consistency"," * @param {Boolean} useCurrentHost"," * @param {Function} callback"," * @private"," */","RequestHandler.prototype._retry = function (consistency, useCurrentHost, callback) {","  this.log('info', 'Retrying request');","  if (this.retryHandler) {","    // custom retry handler (not a QueryRequest / ExecuteRequest / BatchRequest)","    return this.retryHandler(callback);","  }","  this.retryCount++;","  if (typeof consistency === 'number') {","    this.request.consistency = consistency;","  }","  if (useCurrentHost !== false) {","    // retry on the current host by default","    return this._sendOnConnection(this.request, this.requestOptions, callback);","  }","  // use the next host in the query plan to send the request","  this.send(this.request, this.requestOptions, callback);","};","","/**"," * Prepares the query and retries on the SAME host"," * @param {Buffer} queryId"," * @param {Function} callback"," * @private"," */","RequestHandler.prototype._prepareAndRetry = function (queryId, callback) {","  this.log('info', util.format('Query 0x%s not prepared on host %s, preparing and retrying', queryId.toString('hex'), this.host.address));","  var self = this;","  function retryRequest (err) {","    if (err) {","      //Could not be prepared or retried, just send the error to caller","      return callback(err);","    }","    self._sendOnConnection(self.request, self.requestOptions, callback);","  }","  if (this.request instanceof requests.ExecuteRequest) {","    //Its a single Execute of a prepared statement","    this._prepareOnConnection([this.request.query], [function (err, response) {","      if (err) {","        // let the error be handle at general callback level","        return;","      }","      if (!Buffer.isBuffer(response.id) ||","        response.id.length !== self.request.queryId.length ||","        response.id.toString('hex') !== self.request.queryId.toString('hex')","      ) {","        self.log('warning', util.format('Unexpected difference between query ids for query \"%s\" (%s !== %s)',","          self.request.query,","          response.id.toString('hex'),","          self.request.queryId.toString('hex')));","        self.request.queryId = response.id;","      }","    }], retryRequest);","    return;","  }","  if (this.request instanceof requests.BatchRequest) {","    //Its a BATCH of prepared statements","    //We need to prepare all the different queries in the batch in the current host","    var queries = {};","    this.request.queries.forEach(function (item) {","      //Unique queries","      queries[item.query] = item.info;","    });","    var queryStrings = Object.keys(queries);","    var singleCallbacks = new Array(queryStrings.length);","    queryStrings.forEach(function (query, i) {","      var info = queries[query];","      singleCallbacks[i] = function singlePrepareCallback(err, response) {","        if (err) {","          // let the error be handle at general callback level","          return;","        }","        if (!Buffer.isBuffer(response.id) ||","          response.id.length !== info.queryId.length ||","          response.id.toString('hex') !== info.queryId.toString('hex')","        ) {","          self.log('warning', util.format('Unexpected difference between query ids for query \"%s\" (%s !== %s)',","            info.query,","            response.id.toString('hex'),","            info.queryId.toString('hex')));","          info.queryId = response.id;","        }","      };","    });","    this._prepareOnConnection(queryStrings, singleCallbacks, retryRequest);","    return;","  }","  return callback(new errors.DriverInternalError('Obtained unprepared from wrong request'));","};","","module.exports = RequestHandler;"],"l":{"2":1,"4":1,"5":1,"6":1,"7":1,"8":1,"10":1,"11":1,"24":1,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"32":0,"34":0,"37":0,"39":0,"41":0,"42":0,"43":0,"44":0,"53":1,"54":0,"55":0,"56":0,"57":0,"59":0,"60":0,"61":0,"63":0,"64":0,"74":1,"76":0,"78":0,"79":0,"80":0,"81":0,"83":0,"85":0,"86":0,"88":0,"90":0,"91":0,"93":0,"95":0,"96":0,"97":0,"99":0,"100":0,"102":0,"103":0,"105":0,"107":0,"108":0,"109":0,"113":0,"123":1,"125":0,"126":0,"127":0,"128":0,"130":0,"132":0,"135":0,"136":0,"137":0,"138":0,"140":0,"145":1,"153":1,"154":0,"155":0,"156":0,"157":0,"160":0,"161":0,"162":0,"163":0,"164":0,"166":0,"168":0,"169":0,"180":1,"181":0,"182":0,"183":0,"185":0,"187":0,"188":0,"189":0,"191":0,"192":0,"200":0,"201":0,"202":0,"205":0,"206":0,"208":0,"216":1,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"226":0,"227":0,"229":0,"239":1,"240":0,"241":0,"242":0,"244":0,"246":0,"247":0,"249":0,"251":0,"252":0,"263":1,"264":0,"265":0,"266":0,"267":0,"268":0,"269":0,"271":0,"274":0,"275":0,"277":0,"287":1,"289":0,"290":0,"291":0,"293":0,"295":0,"296":0,"297":0,"299":0,"301":0,"302":0,"304":0,"305":0,"307":0,"309":0,"311":0,"315":0,"321":1,"322":0,"331":0,"332":1,"333":0,"334":0,"336":0,"338":0,"339":0,"341":0,"343":0,"345":0,"346":0,"347":0,"348":0,"350":0,"352":0,"353":0,"355":0,"356":0,"360":0,"363":0,"366":0,"370":0,"374":0,"383":1,"384":0,"385":0,"387":0,"389":0,"390":0,"391":0,"393":0,"395":0,"398":0,"407":1,"408":0,"409":0,"410":1,"411":0,"413":0,"415":0,"417":0,"419":0,"420":0,"422":0,"424":0,"428":0,"432":0,"435":0,"437":0,"440":0,"441":0,"443":0,"445":0,"446":0,"447":0,"448":0,"449":0,"450":0,"452":0,"454":0,"458":0,"462":0,"466":0,"467":0,"469":0,"472":1}},"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/auth/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/auth/index.js","s":{"1":1,"2":1,"3":1,"4":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":6,"column":0},"end":{"line":6,"column":44}},"2":{"start":{"line":7,"column":0},"end":{"line":7,"column":49}},"3":{"start":{"line":8,"column":0},"end":{"line":8,"column":51}},"4":{"start":{"line":9,"column":0},"end":{"line":9,"column":73}}},"branchMap":{},"code":["'use strict';","/**"," * Authentication module."," * @module auth"," */","var baseProvider = require('./provider.js');","exports.AuthProvider = baseProvider.AuthProvider;","exports.Authenticator = baseProvider.Authenticator;","exports.PlainTextAuthProvider = require('./plain-text-auth-provider.js');"],"l":{"6":1,"7":1,"8":1,"9":1}},"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/auth/provider.js":{"path":"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/auth/provider.js","s":{"1":1,"2":1,"3":0,"4":1,"5":1,"6":0,"7":1,"8":0,"9":1,"10":1,"11":1},"b":{},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"AuthProvider","line":8,"loc":{"start":{"line":8,"column":0},"end":{"line":8,"column":24}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":42},"end":{"line":19,"column":68}}},"3":{"name":"Authenticator","line":32,"loc":{"start":{"line":32,"column":0},"end":{"line":32,"column":25}}},"4":{"name":"(anonymous_4)","line":40,"loc":{"start":{"line":40,"column":42},"end":{"line":40,"column":62}}},"5":{"name":"(anonymous_5)","line":50,"loc":{"start":{"line":50,"column":44},"end":{"line":50,"column":75}}},"6":{"name":"(anonymous_6)","line":59,"loc":{"start":{"line":59,"column":50},"end":{"line":59,"column":67}}}},"statementMap":{"1":{"start":{"line":8,"column":0},"end":{"line":10,"column":1}},"2":{"start":{"line":19,"column":0},"end":{"line":22,"column":2}},"3":{"start":{"line":20,"column":2},"end":{"line":21,"column":63}},"4":{"start":{"line":32,"column":0},"end":{"line":34,"column":1}},"5":{"start":{"line":40,"column":0},"end":{"line":42,"column":2}},"6":{"start":{"line":41,"column":2},"end":{"line":41,"column":41}},"7":{"start":{"line":50,"column":0},"end":{"line":52,"column":2}},"8":{"start":{"line":51,"column":2},"end":{"line":51,"column":41}},"9":{"start":{"line":59,"column":0},"end":{"line":61,"column":2}},"10":{"start":{"line":63,"column":0},"end":{"line":63,"column":36}},"11":{"start":{"line":64,"column":0},"end":{"line":64,"column":38}}},"branchMap":{},"code":["'use strict';","/**"," * @classdesc Provides [Authenticator]{@link module:auth~Authenticator} instances to be used when connecting to a host."," * @constructor"," * @abstract"," * @alias module:auth~AuthProvider"," */","function AuthProvider() {","","}","","/**"," * Returns an [Authenticator]{@link module:auth~Authenticator} instance to be used when connecting to a host."," * @param {String} endpoint The ip address and port number in the format ip:port"," * @param {String} name Authenticator name"," * @abstract"," * @returns {Authenticator}"," */","AuthProvider.prototype.newAuthenticator = function (endpoint, name) {","  throw new Error('This is an abstract class, you must implement newAuthenticator method or ' +","    'use another auth provider that inherits from this class');","};","","/**"," * @class"," * @classdesc Handles SASL authentication with Cassandra servers."," * Each time a new connection is created and the server requires authentication,"," * a new instance of this class will be created by the corresponding."," * @constructor"," * @alias module:auth~Authenticator"," */","function Authenticator() {","","}","","/**"," * Obtain an initial response token for initializing the SASL handshake."," * @param {Function} callback"," */","Authenticator.prototype.initialResponse = function (callback) {","  callback(new Error('Not implemented'));","};","","/**"," * Evaluates a challenge received from the Server. Generally, this method should callback with"," * no error and no additional params when authentication is complete from the client perspective."," * @param {Buffer} challenge"," * @param {Function} callback"," */","Authenticator.prototype.evaluateChallenge = function (challenge, callback) {","  callback(new Error('Not implemented'));","};","","/**"," * Called when authentication is successful with the last information"," * optionally sent by the server."," * @param {Buffer} [token]"," */","Authenticator.prototype.onAuthenticationSuccess = function (token) {","","};","","exports.AuthProvider = AuthProvider;","exports.Authenticator = Authenticator;"],"l":{"8":1,"19":1,"20":0,"32":1,"40":1,"41":0,"50":1,"51":0,"59":1,"63":1,"64":1}},"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/auth/plain-text-auth-provider.js":{"path":"/home/travis/build/npmtest/node-npmtest-cassandra-driver/node_modules/cassandra-driver/lib/auth/plain-text-auth-provider.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":1,"9":1,"10":0,"11":1,"12":0,"13":0,"14":1,"15":1,"16":0,"17":0,"18":1,"19":0,"20":1},"b":{},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"PlainTextAuthProvider","line":21,"loc":{"start":{"line":21,"column":0},"end":{"line":21,"column":51}}},"2":{"name":"(anonymous_2)","line":33,"loc":{"start":{"line":33,"column":51},"end":{"line":33,"column":63}}},"3":{"name":"PlainTextAuthenticator","line":40,"loc":{"start":{"line":40,"column":0},"end":{"line":40,"column":52}}},"4":{"name":"(anonymous_4)","line":47,"loc":{"start":{"line":47,"column":51},"end":{"line":47,"column":71}}},"5":{"name":"(anonymous_5)","line":57,"loc":{"start":{"line":57,"column":53},"end":{"line":57,"column":84}}}},"statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":27}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":40}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":41}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":43}},"5":{"start":{"line":21,"column":0},"end":{"line":24,"column":1}},"6":{"start":{"line":22,"column":2},"end":{"line":22,"column":27}},"7":{"start":{"line":23,"column":2},"end":{"line":23,"column":27}},"8":{"start":{"line":26,"column":0},"end":{"line":26,"column":51}},"9":{"start":{"line":33,"column":0},"end":{"line":35,"column":2}},"10":{"start":{"line":34,"column":2},"end":{"line":34,"column":66}},"11":{"start":{"line":40,"column":0},"end":{"line":43,"column":1}},"12":{"start":{"line":41,"column":2},"end":{"line":41,"column":27}},"13":{"start":{"line":42,"column":2},"end":{"line":42,"column":27}},"14":{"start":{"line":45,"column":0},"end":{"line":45,"column":53}},"15":{"start":{"line":47,"column":0},"end":{"line":55,"column":2}},"16":{"start":{"line":48,"column":2},"end":{"line":53,"column":5}},"17":{"start":{"line":54,"column":2},"end":{"line":54,"column":31}},"18":{"start":{"line":57,"column":0},"end":{"line":60,"column":2}},"19":{"start":{"line":59,"column":2},"end":{"line":59,"column":13}},"20":{"start":{"line":62,"column":0},"end":{"line":62,"column":39}}},"branchMap":{},"code":["'use strict';","var util = require('util');","","var provider = require('./provider.js');","var AuthProvider = provider.AuthProvider;","var Authenticator = provider.Authenticator;","/**"," * Creates a new instance of the Authenticator provider"," * @classdesc Provides plain text [Authenticator]{@link module:auth~Authenticator} instances to be used when"," * connecting to a host."," * @extends module:auth~AuthProvider"," * @example"," * var authProvider = new cassandra.auth.PlainTextAuthProvider('my_user', 'p@ssword1!');"," * //Set the auth provider in the clientOptions when creating the Client instance"," * var client = new Client({ contactPoints: contactPoints, authProvider: authProvider });"," * @param {String} username User name in plain text"," * @param {String} password Password in plain text"," * @alias module:auth~PlainTextAuthProvider"," * @constructor"," */","function PlainTextAuthProvider(username, password) {","  this.username = username;","  this.password = password;","}","","util.inherits(PlainTextAuthProvider, AuthProvider);","","/**"," * Returns a new [Authenticator]{@link module:auth~Authenticator} instance to be used for plain text authentication."," * @override"," * @returns {Authenticator}"," */","PlainTextAuthProvider.prototype.newAuthenticator = function () {","  return new PlainTextAuthenticator(this.username, this.password);","};","","/**"," * @ignore"," */","function PlainTextAuthenticator(username, password) {","  this.username = username;","  this.password = password;","}","","util.inherits(PlainTextAuthenticator, Authenticator);","","PlainTextAuthenticator.prototype.initialResponse = function (callback) {","  var initialToken = Buffer.concat([","    new Buffer([0]),","    new Buffer(this.username, 'utf8'),","    new Buffer([0]),","    new Buffer(this.password, 'utf8')","  ]);","  callback(null, initialToken);","};","","PlainTextAuthenticator.prototype.evaluateChallenge = function (challenge, callback) {","  //noop","  callback();","};","","module.exports = PlainTextAuthProvider;"],"l":{"2":1,"4":1,"5":1,"6":1,"21":1,"22":0,"23":0,"26":1,"33":1,"34":0,"40":1,"41":0,"42":0,"45":1,"47":1,"48":0,"54":0,"57":1,"59":0,"62":1}}}